/*! For license information please see app.js.LICENSE.txt */
(()=>{var e={9669:(e,t,r)=>{e.exports=r(1609)},5448:(e,t,r)=>{"use strict";var n=r(4867),o=r(6026),a=r(4372),i=r(5327),u=r(4097),l=r(4109),s=r(7985),c=r(5061);e.exports=function(e){return new Promise((function(t,r){var f=e.data,p=e.headers,d=e.responseType;n.isFormData(f)&&delete p["Content-Type"];var h=new XMLHttpRequest;if(e.auth){var v=e.auth.username||"",g=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";p.Authorization="Basic "+btoa(v+":"+g)}var y=u(e.baseURL,e.url);function m(){if(h){var n="getAllResponseHeaders"in h?l(h.getAllResponseHeaders()):null,a={data:d&&"text"!==d&&"json"!==d?h.response:h.responseText,status:h.status,statusText:h.statusText,headers:n,config:e,request:h};o(t,r,a),h=null}}if(h.open(e.method.toUpperCase(),i(y,e.params,e.paramsSerializer),!0),h.timeout=e.timeout,"onloadend"in h?h.onloadend=m:h.onreadystatechange=function(){h&&4===h.readyState&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))&&setTimeout(m)},h.onabort=function(){h&&(r(c("Request aborted",e,"ECONNABORTED",h)),h=null)},h.onerror=function(){r(c("Network Error",e,null,h)),h=null},h.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),r(c(t,e,e.transitional&&e.transitional.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",h)),h=null},n.isStandardBrowserEnv()){var b=(e.withCredentials||s(y))&&e.xsrfCookieName?a.read(e.xsrfCookieName):void 0;b&&(p[e.xsrfHeaderName]=b)}"setRequestHeader"in h&&n.forEach(p,(function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete p[t]:h.setRequestHeader(t,e)})),n.isUndefined(e.withCredentials)||(h.withCredentials=!!e.withCredentials),d&&"json"!==d&&(h.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&h.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){h&&(h.abort(),r(e),h=null)})),f||(f=null),h.send(f)}))}},1609:(e,t,r)=>{"use strict";var n=r(4867),o=r(1849),a=r(321),i=r(7185);function u(e){var t=new a(e),r=o(a.prototype.request,t);return n.extend(r,a.prototype,t),n.extend(r,t),r}var l=u(r(5655));l.Axios=a,l.create=function(e){return u(i(l.defaults,e))},l.Cancel=r(5263),l.CancelToken=r(4972),l.isCancel=r(6502),l.all=function(e){return Promise.all(e)},l.spread=r(8713),l.isAxiosError=r(6268),e.exports=l,e.exports.default=l},5263:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},4972:(e,t,r)=>{"use strict";var n=r(5263);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var r=this;e((function(e){r.reason||(r.reason=new n(e),t(r.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},6502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,r)=>{"use strict";var n=r(4867),o=r(5327),a=r(782),i=r(3572),u=r(7185),l=r(4875),s=l.validators;function c(e){this.defaults=e,this.interceptors={request:new a,response:new a}}c.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=u(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=e.transitional;void 0!==t&&l.assertOptions(t,{silentJSONParsing:s.transitional(s.boolean,"1.0.0"),forcedJSONParsing:s.transitional(s.boolean,"1.0.0"),clarifyTimeoutError:s.transitional(s.boolean,"1.0.0")},!1);var r=[],n=!0;this.interceptors.request.forEach((function(t){"function"==typeof t.runWhen&&!1===t.runWhen(e)||(n=n&&t.synchronous,r.unshift(t.fulfilled,t.rejected))}));var o,a=[];if(this.interceptors.response.forEach((function(e){a.push(e.fulfilled,e.rejected)})),!n){var c=[i,void 0];for(Array.prototype.unshift.apply(c,r),c=c.concat(a),o=Promise.resolve(e);c.length;)o=o.then(c.shift(),c.shift());return o}for(var f=e;r.length;){var p=r.shift(),d=r.shift();try{f=p(f)}catch(e){d(e);break}}try{o=i(f)}catch(e){return Promise.reject(e)}for(;a.length;)o=o.then(a.shift(),a.shift());return o},c.prototype.getUri=function(e){return e=u(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},n.forEach(["delete","get","head","options"],(function(e){c.prototype[e]=function(t,r){return this.request(u(r||{},{method:e,url:t,data:(r||{}).data}))}})),n.forEach(["post","put","patch"],(function(e){c.prototype[e]=function(t,r,n){return this.request(u(n||{},{method:e,url:t,data:r}))}})),e.exports=c},782:(e,t,r)=>{"use strict";var n=r(4867);function o(){this.handlers=[]}o.prototype.use=function(e,t,r){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!r&&r.synchronous,runWhen:r?r.runWhen:null}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){n.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},4097:(e,t,r)=>{"use strict";var n=r(1793),o=r(7303);e.exports=function(e,t){return e&&!n(t)?o(e,t):t}},5061:(e,t,r)=>{"use strict";var n=r(481);e.exports=function(e,t,r,o,a){var i=new Error(e);return n(i,t,r,o,a)}},3572:(e,t,r)=>{"use strict";var n=r(4867),o=r(8527),a=r(6502),i=r(5655);function u(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return u(e),e.headers=e.headers||{},e.data=o.call(e,e.data,e.headers,e.transformRequest),e.headers=n.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),n.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return u(e),t.data=o.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return a(t)||(u(e),t&&t.response&&(t.response.data=o.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},481:e=>{"use strict";e.exports=function(e,t,r,n,o){return e.config=t,r&&(e.code=r),e.request=n,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},7185:(e,t,r)=>{"use strict";var n=r(4867);e.exports=function(e,t){t=t||{};var r={},o=["url","method","data"],a=["headers","auth","proxy","params"],i=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],u=["validateStatus"];function l(e,t){return n.isPlainObject(e)&&n.isPlainObject(t)?n.merge(e,t):n.isPlainObject(t)?n.merge({},t):n.isArray(t)?t.slice():t}function s(o){n.isUndefined(t[o])?n.isUndefined(e[o])||(r[o]=l(void 0,e[o])):r[o]=l(e[o],t[o])}n.forEach(o,(function(e){n.isUndefined(t[e])||(r[e]=l(void 0,t[e]))})),n.forEach(a,s),n.forEach(i,(function(o){n.isUndefined(t[o])?n.isUndefined(e[o])||(r[o]=l(void 0,e[o])):r[o]=l(void 0,t[o])})),n.forEach(u,(function(n){n in t?r[n]=l(e[n],t[n]):n in e&&(r[n]=l(void 0,e[n]))}));var c=o.concat(a).concat(i).concat(u),f=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===c.indexOf(e)}));return n.forEach(f,s),r}},6026:(e,t,r)=>{"use strict";var n=r(5061);e.exports=function(e,t,r){var o=r.config.validateStatus;r.status&&o&&!o(r.status)?t(n("Request failed with status code "+r.status,r.config,null,r.request,r)):e(r)}},8527:(e,t,r)=>{"use strict";var n=r(4867),o=r(5655);e.exports=function(e,t,r){var a=this||o;return n.forEach(r,(function(r){e=r.call(a,e,t)})),e}},5655:(e,t,r)=>{"use strict";var n=r(4867),o=r(6016),a=r(481),i={"Content-Type":"application/x-www-form-urlencoded"};function u(e,t){!n.isUndefined(e)&&n.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var l,s={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(l=r(5448)),l),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),n.isFormData(e)||n.isArrayBuffer(e)||n.isBuffer(e)||n.isStream(e)||n.isFile(e)||n.isBlob(e)?e:n.isArrayBufferView(e)?e.buffer:n.isURLSearchParams(e)?(u(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):n.isObject(e)||t&&"application/json"===t["Content-Type"]?(u(t,"application/json"),function(e,t,r){if(n.isString(e))try{return(0,JSON.parse)(e),n.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional,r=t&&t.silentJSONParsing,o=t&&t.forcedJSONParsing,i=!r&&"json"===this.responseType;if(i||o&&n.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(i){if("SyntaxError"===e.name)throw a(e,this,"E_JSON_PARSE");throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};n.forEach(["delete","get","head"],(function(e){s.headers[e]={}})),n.forEach(["post","put","patch"],(function(e){s.headers[e]=n.merge(i)})),e.exports=s},1849:e=>{"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},5327:(e,t,r)=>{"use strict";var n=r(4867);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var a;if(r)a=r(t);else if(n.isURLSearchParams(t))a=t.toString();else{var i=[];n.forEach(t,(function(e,t){null!=e&&(n.isArray(e)?t+="[]":e=[e],n.forEach(e,(function(e){n.isDate(e)?e=e.toISOString():n.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))})))})),a=i.join("&")}if(a){var u=e.indexOf("#");-1!==u&&(e=e.slice(0,u)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},7303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},4372:(e,t,r)=>{"use strict";var n=r(4867);e.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,o,a,i){var u=[];u.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&u.push("expires="+new Date(r).toGMTString()),n.isString(o)&&u.push("path="+o),n.isString(a)&&u.push("domain="+a),!0===i&&u.push("secure"),document.cookie=u.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},6268:e=>{"use strict";e.exports=function(e){return"object"==typeof e&&!0===e.isAxiosError}},7985:(e,t,r)=>{"use strict";var n=r(4867);e.exports=n.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function o(e){var n=e;return t&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=o(window.location.href),function(t){var r=n.isString(t)?o(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},6016:(e,t,r)=>{"use strict";var n=r(4867);e.exports=function(e,t){n.forEach(e,(function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])}))}},4109:(e,t,r)=>{"use strict";var n=r(4867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,a,i={};return e?(n.forEach(e.split("\n"),(function(e){if(a=e.indexOf(":"),t=n.trim(e.substr(0,a)).toLowerCase(),r=n.trim(e.substr(a+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([r]):i[t]?i[t]+", "+r:r}})),i):i}},8713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},4875:(e,t,r)=>{"use strict";var n=r(8593),o={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){o[e]=function(r){return typeof r===e||"a"+(t<1?"n ":" ")+e}}));var a={},i=n.version.split(".");function u(e,t){for(var r=t?t.split("."):i,n=e.split("."),o=0;o<3;o++){if(r[o]>n[o])return!0;if(r[o]<n[o])return!1}return!1}o.transitional=function(e,t,r){var o=t&&u(t);function i(e,t){return"[Axios v"+n.version+"] Transitional option '"+e+"'"+t+(r?". "+r:"")}return function(r,n,u){if(!1===e)throw new Error(i(n," has been removed in "+t));return o&&!a[n]&&(a[n]=!0,console.warn(i(n," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(r,n,u)}},e.exports={isOlderVersion:u,assertOptions:function(e,t,r){if("object"!=typeof e)throw new TypeError("options must be an object");for(var n=Object.keys(e),o=n.length;o-- >0;){var a=n[o],i=t[a];if(i){var u=e[a],l=void 0===u||i(u,a,e);if(!0!==l)throw new TypeError("option "+a+" must be "+l)}else if(!0!==r)throw Error("Unknown option "+a)}},validators:o}},4867:(e,t,r)=>{"use strict";var n=r(1849),o=Object.prototype.toString;function a(e){return"[object Array]"===o.call(e)}function i(e){return void 0===e}function u(e){return null!==e&&"object"==typeof e}function l(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function s(e){return"[object Function]"===o.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isPlainObject:l,isUndefined:i,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:s,isStream:function(e){return u(e)&&s(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function r(r,n){l(t[n])&&l(r)?t[n]=e(t[n],r):l(r)?t[n]=e({},r):a(r)?t[n]=r.slice():t[n]=r}for(var n=0,o=arguments.length;n<o;n++)c(arguments[n],r);return t},extend:function(e,t,r){return c(t,(function(t,o){e[o]=r&&"function"==typeof t?n(t,r):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},9662:(e,t,r)=>{var n=r(7854),o=r(614),a=r(6330),i=n.TypeError;e.exports=function(e){if(o(e))return e;throw i(a(e)+" is not a function")}},9483:(e,t,r)=>{var n=r(7854),o=r(4411),a=r(6330),i=n.TypeError;e.exports=function(e){if(o(e))return e;throw i(a(e)+" is not a constructor")}},6077:(e,t,r)=>{var n=r(7854),o=r(614),a=n.String,i=n.TypeError;e.exports=function(e){if("object"==typeof e||o(e))return e;throw i("Can't set "+a(e)+" as a prototype")}},1223:(e,t,r)=>{var n=r(5112),o=r(30),a=r(3070),i=n("unscopables"),u=Array.prototype;null==u[i]&&a.f(u,i,{configurable:!0,value:o(null)}),e.exports=function(e){u[i][e]=!0}},1530:(e,t,r)=>{"use strict";var n=r(8710).charAt;e.exports=function(e,t,r){return t+(r?n(e,t).length:1)}},5787:(e,t,r)=>{var n=r(7854),o=r(7976),a=n.TypeError;e.exports=function(e,t){if(o(t,e))return e;throw a("Incorrect invocation")}},9670:(e,t,r)=>{var n=r(7854),o=r(111),a=n.String,i=n.TypeError;e.exports=function(e){if(o(e))return e;throw i(a(e)+" is not an object")}},4019:e=>{e.exports="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView},7556:(e,t,r)=>{var n=r(7293);e.exports=n((function(){if("function"==typeof ArrayBuffer){var e=new ArrayBuffer(8);Object.isExtensible(e)&&Object.defineProperty(e,"a",{value:8})}}))},260:(e,t,r)=>{"use strict";var n,o,a,i=r(4019),u=r(9781),l=r(7854),s=r(614),c=r(111),f=r(2597),p=r(648),d=r(6330),h=r(8880),v=r(1320),g=r(3070).f,y=r(7976),m=r(9518),b=r(7674),w=r(5112),x=r(9711),E=l.Int8Array,S=E&&E.prototype,k=l.Uint8ClampedArray,O=k&&k.prototype,R=E&&m(E),T=S&&m(S),A=Object.prototype,C=l.TypeError,_=w("toStringTag"),P=x("TYPED_ARRAY_TAG"),N=x("TYPED_ARRAY_CONSTRUCTOR"),M=i&&!!b&&"Opera"!==p(l.opera),L=!1,I={Int8Array:1,Uint8Array:1,Uint8ClampedArray:1,Int16Array:2,Uint16Array:2,Int32Array:4,Uint32Array:4,Float32Array:4,Float64Array:8},j={BigInt64Array:8,BigUint64Array:8},U=function(e){if(!c(e))return!1;var t=p(e);return f(I,t)||f(j,t)};for(n in I)(a=(o=l[n])&&o.prototype)?h(a,N,o):M=!1;for(n in j)(a=(o=l[n])&&o.prototype)&&h(a,N,o);if((!M||!s(R)||R===Function.prototype)&&(R=function(){throw C("Incorrect invocation")},M))for(n in I)l[n]&&b(l[n],R);if((!M||!T||T===A)&&(T=R.prototype,M))for(n in I)l[n]&&b(l[n].prototype,T);if(M&&m(O)!==T&&b(O,T),u&&!f(T,_))for(n in L=!0,g(T,_,{get:function(){return c(this)?this[P]:void 0}}),I)l[n]&&h(l[n],P,n);e.exports={NATIVE_ARRAY_BUFFER_VIEWS:M,TYPED_ARRAY_CONSTRUCTOR:N,TYPED_ARRAY_TAG:L&&P,aTypedArray:function(e){if(U(e))return e;throw C("Target is not a typed array")},aTypedArrayConstructor:function(e){if(s(e)&&(!b||y(R,e)))return e;throw C(d(e)+" is not a typed array constructor")},exportTypedArrayMethod:function(e,t,r,n){if(u){if(r)for(var o in I){var a=l[o];if(a&&f(a.prototype,e))try{delete a.prototype[e]}catch(r){try{a.prototype[e]=t}catch(e){}}}T[e]&&!r||v(T,e,r?t:M&&S[e]||t,n)}},exportTypedArrayStaticMethod:function(e,t,r){var n,o;if(u){if(b){if(r)for(n in I)if((o=l[n])&&f(o,e))try{delete o[e]}catch(e){}if(R[e]&&!r)return;try{return v(R,e,r?t:M&&R[e]||t)}catch(e){}}for(n in I)!(o=l[n])||o[e]&&!r||v(o,e,t)}},isView:function(e){if(!c(e))return!1;var t=p(e);return"DataView"===t||f(I,t)||f(j,t)},isTypedArray:U,TypedArray:R,TypedArrayPrototype:T}},3331:(e,t,r)=>{"use strict";var n=r(7854),o=r(1702),a=r(9781),i=r(4019),u=r(6530),l=r(8880),s=r(2248),c=r(7293),f=r(5787),p=r(9303),d=r(7466),h=r(7067),v=r(1179),g=r(9518),y=r(7674),m=r(8006).f,b=r(3070).f,w=r(1285),x=r(1589),E=r(8003),S=r(9909),k=u.PROPER,O=u.CONFIGURABLE,R=S.get,T=S.set,A="ArrayBuffer",C="Wrong index",_=n.ArrayBuffer,P=_,N=P&&P.prototype,M=n.DataView,L=M&&M.prototype,I=Object.prototype,j=n.Array,U=n.RangeError,D=o(w),F=o([].reverse),z=v.pack,B=v.unpack,V=function(e){return[255&e]},$=function(e){return[255&e,e>>8&255]},W=function(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]},H=function(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]},q=function(e){return z(e,23,4)},Q=function(e){return z(e,52,8)},Y=function(e,t){b(e.prototype,t,{get:function(){return R(this)[t]}})},G=function(e,t,r,n){var o=h(r),a=R(e);if(o+t>a.byteLength)throw U(C);var i=R(a.buffer).bytes,u=o+a.byteOffset,l=x(i,u,u+t);return n?l:F(l)},K=function(e,t,r,n,o,a){var i=h(r),u=R(e);if(i+t>u.byteLength)throw U(C);for(var l=R(u.buffer).bytes,s=i+u.byteOffset,c=n(+o),f=0;f<t;f++)l[s+f]=c[a?f:t-f-1]};if(i){var X=k&&_.name!==A;if(c((function(){_(1)}))&&c((function(){new _(-1)}))&&!c((function(){return new _,new _(1.5),new _(NaN),X&&!O})))X&&O&&l(_,"name",A);else{(P=function(e){return f(this,N),new _(h(e))}).prototype=N;for(var J,Z=m(_),ee=0;Z.length>ee;)(J=Z[ee++])in P||l(P,J,_[J]);N.constructor=P}y&&g(L)!==I&&y(L,I);var te=new M(new P(2)),re=o(L.setInt8);te.setInt8(0,2147483648),te.setInt8(1,2147483649),!te.getInt8(0)&&te.getInt8(1)||s(L,{setInt8:function(e,t){re(this,e,t<<24>>24)},setUint8:function(e,t){re(this,e,t<<24>>24)}},{unsafe:!0})}else N=(P=function(e){f(this,N);var t=h(e);T(this,{bytes:D(j(t),0),byteLength:t}),a||(this.byteLength=t)}).prototype,L=(M=function(e,t,r){f(this,L),f(e,N);var n=R(e).byteLength,o=p(t);if(o<0||o>n)throw U("Wrong offset");if(o+(r=void 0===r?n-o:d(r))>n)throw U("Wrong length");T(this,{buffer:e,byteLength:r,byteOffset:o}),a||(this.buffer=e,this.byteLength=r,this.byteOffset=o)}).prototype,a&&(Y(P,"byteLength"),Y(M,"buffer"),Y(M,"byteLength"),Y(M,"byteOffset")),s(L,{getInt8:function(e){return G(this,1,e)[0]<<24>>24},getUint8:function(e){return G(this,1,e)[0]},getInt16:function(e){var t=G(this,2,e,arguments.length>1?arguments[1]:void 0);return(t[1]<<8|t[0])<<16>>16},getUint16:function(e){var t=G(this,2,e,arguments.length>1?arguments[1]:void 0);return t[1]<<8|t[0]},getInt32:function(e){return H(G(this,4,e,arguments.length>1?arguments[1]:void 0))},getUint32:function(e){return H(G(this,4,e,arguments.length>1?arguments[1]:void 0))>>>0},getFloat32:function(e){return B(G(this,4,e,arguments.length>1?arguments[1]:void 0),23)},getFloat64:function(e){return B(G(this,8,e,arguments.length>1?arguments[1]:void 0),52)},setInt8:function(e,t){K(this,1,e,V,t)},setUint8:function(e,t){K(this,1,e,V,t)},setInt16:function(e,t){K(this,2,e,$,t,arguments.length>2?arguments[2]:void 0)},setUint16:function(e,t){K(this,2,e,$,t,arguments.length>2?arguments[2]:void 0)},setInt32:function(e,t){K(this,4,e,W,t,arguments.length>2?arguments[2]:void 0)},setUint32:function(e,t){K(this,4,e,W,t,arguments.length>2?arguments[2]:void 0)},setFloat32:function(e,t){K(this,4,e,q,t,arguments.length>2?arguments[2]:void 0)},setFloat64:function(e,t){K(this,8,e,Q,t,arguments.length>2?arguments[2]:void 0)}});E(P,A),E(M,"DataView"),e.exports={ArrayBuffer:P,DataView:M}},1048:(e,t,r)=>{"use strict";var n=r(7908),o=r(1400),a=r(6244),i=Math.min;e.exports=[].copyWithin||function(e,t){var r=n(this),u=a(r),l=o(e,u),s=o(t,u),c=arguments.length>2?arguments[2]:void 0,f=i((void 0===c?u:o(c,u))-s,u-l),p=1;for(s<l&&l<s+f&&(p=-1,s+=f-1,l+=f-1);f-- >0;)s in r?r[l]=r[s]:delete r[l],l+=p,s+=p;return r}},1285:(e,t,r)=>{"use strict";var n=r(7908),o=r(1400),a=r(6244);e.exports=function(e){for(var t=n(this),r=a(t),i=arguments.length,u=o(i>1?arguments[1]:void 0,r),l=i>2?arguments[2]:void 0,s=void 0===l?r:o(l,r);s>u;)t[u++]=e;return t}},8533:(e,t,r)=>{"use strict";var n=r(2092).forEach,o=r(2133)("forEach");e.exports=o?[].forEach:function(e){return n(this,e,arguments.length>1?arguments[1]:void 0)}},7745:(e,t,r)=>{var n=r(6244);e.exports=function(e,t){for(var r=0,o=n(t),a=new e(o);o>r;)a[r]=t[r++];return a}},8457:(e,t,r)=>{"use strict";var n=r(7854),o=r(9974),a=r(6916),i=r(7908),u=r(3411),l=r(7659),s=r(4411),c=r(6244),f=r(6135),p=r(8554),d=r(1246),h=n.Array;e.exports=function(e){var t=i(e),r=s(this),n=arguments.length,v=n>1?arguments[1]:void 0,g=void 0!==v;g&&(v=o(v,n>2?arguments[2]:void 0));var y,m,b,w,x,E,S=d(t),k=0;if(!S||this==h&&l(S))for(y=c(t),m=r?new this(y):h(y);y>k;k++)E=g?v(t[k],k):t[k],f(m,k,E);else for(x=(w=p(t,S)).next,m=r?new this:[];!(b=a(x,w)).done;k++)E=g?u(w,v,[b.value,k],!0):b.value,f(m,k,E);return m.length=k,m}},1318:(e,t,r)=>{var n=r(5656),o=r(1400),a=r(6244),i=function(e){return function(t,r,i){var u,l=n(t),s=a(l),c=o(i,s);if(e&&r!=r){for(;s>c;)if((u=l[c++])!=u)return!0}else for(;s>c;c++)if((e||c in l)&&l[c]===r)return e||c||0;return!e&&-1}};e.exports={includes:i(!0),indexOf:i(!1)}},2092:(e,t,r)=>{var n=r(9974),o=r(1702),a=r(8361),i=r(7908),u=r(6244),l=r(5417),s=o([].push),c=function(e){var t=1==e,r=2==e,o=3==e,c=4==e,f=6==e,p=7==e,d=5==e||f;return function(h,v,g,y){for(var m,b,w=i(h),x=a(w),E=n(v,g),S=u(x),k=0,O=y||l,R=t?O(h,S):r||p?O(h,0):void 0;S>k;k++)if((d||k in x)&&(b=E(m=x[k],k,w),e))if(t)R[k]=b;else if(b)switch(e){case 3:return!0;case 5:return m;case 6:return k;case 2:s(R,m)}else switch(e){case 4:return!1;case 7:s(R,m)}return f?-1:o||c?c:R}};e.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6),filterReject:c(7)}},6583:(e,t,r)=>{"use strict";var n=r(2104),o=r(5656),a=r(9303),i=r(6244),u=r(2133),l=Math.min,s=[].lastIndexOf,c=!!s&&1/[1].lastIndexOf(1,-0)<0,f=u("lastIndexOf"),p=c||!f;e.exports=p?function(e){if(c)return n(s,this,arguments)||0;var t=o(this),r=i(t),u=r-1;for(arguments.length>1&&(u=l(u,a(arguments[1]))),u<0&&(u=r+u);u>=0;u--)if(u in t&&t[u]===e)return u||0;return-1}:s},1194:(e,t,r)=>{var n=r(7293),o=r(5112),a=r(7392),i=o("species");e.exports=function(e){return a>=51||!n((function(){var t=[];return(t.constructor={})[i]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},2133:(e,t,r)=>{"use strict";var n=r(7293);e.exports=function(e,t){var r=[][e];return!!r&&n((function(){r.call(null,t||function(){throw 1},1)}))}},3671:(e,t,r)=>{var n=r(7854),o=r(9662),a=r(7908),i=r(8361),u=r(6244),l=n.TypeError,s=function(e){return function(t,r,n,s){o(r);var c=a(t),f=i(c),p=u(c),d=e?p-1:0,h=e?-1:1;if(n<2)for(;;){if(d in f){s=f[d],d+=h;break}if(d+=h,e?d<0:p<=d)throw l("Reduce of empty array with no initial value")}for(;e?d>=0:p>d;d+=h)d in f&&(s=r(s,f[d],d,c));return s}};e.exports={left:s(!1),right:s(!0)}},1589:(e,t,r)=>{var n=r(7854),o=r(1400),a=r(6244),i=r(6135),u=n.Array,l=Math.max;e.exports=function(e,t,r){for(var n=a(e),s=o(t,n),c=o(void 0===r?n:r,n),f=u(l(c-s,0)),p=0;s<c;s++,p++)i(f,p,e[s]);return f.length=p,f}},206:(e,t,r)=>{var n=r(1702);e.exports=n([].slice)},4362:(e,t,r)=>{var n=r(1589),o=Math.floor,a=function(e,t){var r=e.length,l=o(r/2);return r<8?i(e,t):u(e,a(n(e,0,l),t),a(n(e,l),t),t)},i=function(e,t){for(var r,n,o=e.length,a=1;a<o;){for(n=a,r=e[a];n&&t(e[n-1],r)>0;)e[n]=e[--n];n!==a++&&(e[n]=r)}return e},u=function(e,t,r,n){for(var o=t.length,a=r.length,i=0,u=0;i<o||u<a;)e[i+u]=i<o&&u<a?n(t[i],r[u])<=0?t[i++]:r[u++]:i<o?t[i++]:r[u++];return e};e.exports=a},7475:(e,t,r)=>{var n=r(7854),o=r(3157),a=r(4411),i=r(111),u=r(5112)("species"),l=n.Array;e.exports=function(e){var t;return o(e)&&(t=e.constructor,(a(t)&&(t===l||o(t.prototype))||i(t)&&null===(t=t[u]))&&(t=void 0)),void 0===t?l:t}},5417:(e,t,r)=>{var n=r(7475);e.exports=function(e,t){return new(n(e))(0===t?0:t)}},3411:(e,t,r)=>{var n=r(9670),o=r(9212);e.exports=function(e,t,r,a){try{return a?t(n(r)[0],r[1]):t(r)}catch(t){o(e,"throw",t)}}},7072:(e,t,r)=>{var n=r(5112)("iterator"),o=!1;try{var a=0,i={next:function(){return{done:!!a++}},return:function(){o=!0}};i[n]=function(){return this},Array.from(i,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var r=!1;try{var a={};a[n]=function(){return{next:function(){return{done:r=!0}}}},e(a)}catch(e){}return r}},4326:(e,t,r)=>{var n=r(1702),o=n({}.toString),a=n("".slice);e.exports=function(e){return a(o(e),8,-1)}},648:(e,t,r)=>{var n=r(7854),o=r(1694),a=r(614),i=r(4326),u=r(5112)("toStringTag"),l=n.Object,s="Arguments"==i(function(){return arguments}());e.exports=o?i:function(e){var t,r,n;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=l(e),u))?r:s?i(t):"Object"==(n=i(t))&&a(t.callee)?"Arguments":n}},7741:(e,t,r)=>{var n=r(1702)("".replace),o=String(Error("zxcasd").stack),a=/\n\s*at [^:]*:[^\n]*/,i=a.test(o);e.exports=function(e,t){if(i&&"string"==typeof e)for(;t--;)e=n(e,a,"");return e}},5631:(e,t,r)=>{"use strict";var n=r(3070).f,o=r(30),a=r(2248),i=r(9974),u=r(5787),l=r(408),s=r(654),c=r(6340),f=r(9781),p=r(2423).fastKey,d=r(9909),h=d.set,v=d.getterFor;e.exports={getConstructor:function(e,t,r,s){var c=e((function(e,n){u(e,d),h(e,{type:t,index:o(null),first:void 0,last:void 0,size:0}),f||(e.size=0),null!=n&&l(n,e[s],{that:e,AS_ENTRIES:r})})),d=c.prototype,g=v(t),y=function(e,t,r){var n,o,a=g(e),i=m(e,t);return i?i.value=r:(a.last=i={index:o=p(t,!0),key:t,value:r,previous:n=a.last,next:void 0,removed:!1},a.first||(a.first=i),n&&(n.next=i),f?a.size++:e.size++,"F"!==o&&(a.index[o]=i)),e},m=function(e,t){var r,n=g(e),o=p(t);if("F"!==o)return n.index[o];for(r=n.first;r;r=r.next)if(r.key==t)return r};return a(d,{clear:function(){for(var e=g(this),t=e.index,r=e.first;r;)r.removed=!0,r.previous&&(r.previous=r.previous.next=void 0),delete t[r.index],r=r.next;e.first=e.last=void 0,f?e.size=0:this.size=0},delete:function(e){var t=this,r=g(t),n=m(t,e);if(n){var o=n.next,a=n.previous;delete r.index[n.index],n.removed=!0,a&&(a.next=o),o&&(o.previous=a),r.first==n&&(r.first=o),r.last==n&&(r.last=a),f?r.size--:t.size--}return!!n},forEach:function(e){for(var t,r=g(this),n=i(e,arguments.length>1?arguments[1]:void 0);t=t?t.next:r.first;)for(n(t.value,t.key,this);t&&t.removed;)t=t.previous},has:function(e){return!!m(this,e)}}),a(d,r?{get:function(e){var t=m(this,e);return t&&t.value},set:function(e,t){return y(this,0===e?0:e,t)}}:{add:function(e){return y(this,e=0===e?0:e,e)}}),f&&n(d,"size",{get:function(){return g(this).size}}),c},setStrong:function(e,t,r){var n=t+" Iterator",o=v(t),a=v(n);s(e,t,(function(e,t){h(this,{type:n,target:e,state:o(e),kind:t,last:void 0})}),(function(){for(var e=a(this),t=e.kind,r=e.last;r&&r.removed;)r=r.previous;return e.target&&(e.last=r=r?r.next:e.state.first)?"keys"==t?{value:r.key,done:!1}:"values"==t?{value:r.value,done:!1}:{value:[r.key,r.value],done:!1}:(e.target=void 0,{value:void 0,done:!0})}),r?"entries":"values",!r,!0),c(t)}}},9320:(e,t,r)=>{"use strict";var n=r(1702),o=r(2248),a=r(2423).getWeakData,i=r(9670),u=r(111),l=r(5787),s=r(408),c=r(2092),f=r(2597),p=r(9909),d=p.set,h=p.getterFor,v=c.find,g=c.findIndex,y=n([].splice),m=0,b=function(e){return e.frozen||(e.frozen=new w)},w=function(){this.entries=[]},x=function(e,t){return v(e.entries,(function(e){return e[0]===t}))};w.prototype={get:function(e){var t=x(this,e);if(t)return t[1]},has:function(e){return!!x(this,e)},set:function(e,t){var r=x(this,e);r?r[1]=t:this.entries.push([e,t])},delete:function(e){var t=g(this.entries,(function(t){return t[0]===e}));return~t&&y(this.entries,t,1),!!~t}},e.exports={getConstructor:function(e,t,r,n){var c=e((function(e,o){l(e,p),d(e,{type:t,id:m++,frozen:void 0}),null!=o&&s(o,e[n],{that:e,AS_ENTRIES:r})})),p=c.prototype,v=h(t),g=function(e,t,r){var n=v(e),o=a(i(t),!0);return!0===o?b(n).set(t,r):o[n.id]=r,e};return o(p,{delete:function(e){var t=v(this);if(!u(e))return!1;var r=a(e);return!0===r?b(t).delete(e):r&&f(r,t.id)&&delete r[t.id]},has:function(e){var t=v(this);if(!u(e))return!1;var r=a(e);return!0===r?b(t).has(e):r&&f(r,t.id)}}),o(p,r?{get:function(e){var t=v(this);if(u(e)){var r=a(e);return!0===r?b(t).get(e):r?r[t.id]:void 0}},set:function(e,t){return g(this,e,t)}}:{add:function(e){return g(this,e,!0)}}),c}}},7710:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(1702),i=r(4705),u=r(1320),l=r(2423),s=r(408),c=r(5787),f=r(614),p=r(111),d=r(7293),h=r(7072),v=r(8003),g=r(9587);e.exports=function(e,t,r){var y=-1!==e.indexOf("Map"),m=-1!==e.indexOf("Weak"),b=y?"set":"add",w=o[e],x=w&&w.prototype,E=w,S={},k=function(e){var t=a(x[e]);u(x,e,"add"==e?function(e){return t(this,0===e?0:e),this}:"delete"==e?function(e){return!(m&&!p(e))&&t(this,0===e?0:e)}:"get"==e?function(e){return m&&!p(e)?void 0:t(this,0===e?0:e)}:"has"==e?function(e){return!(m&&!p(e))&&t(this,0===e?0:e)}:function(e,r){return t(this,0===e?0:e,r),this})};if(i(e,!f(w)||!(m||x.forEach&&!d((function(){(new w).entries().next()})))))E=r.getConstructor(t,e,y,b),l.enable();else if(i(e,!0)){var O=new E,R=O[b](m?{}:-0,1)!=O,T=d((function(){O.has(1)})),A=h((function(e){new w(e)})),C=!m&&d((function(){for(var e=new w,t=5;t--;)e[b](t,t);return!e.has(-0)}));A||((E=t((function(e,t){c(e,x);var r=g(new w,e,E);return null!=t&&s(t,r[b],{that:r,AS_ENTRIES:y}),r}))).prototype=x,x.constructor=E),(T||C)&&(k("delete"),k("has"),y&&k("get")),(C||R)&&k(b),m&&x.clear&&delete x.clear}return S[e]=E,n({global:!0,forced:E!=w},S),v(E,e),m||r.setStrong(E,e,y),E}},9920:(e,t,r)=>{var n=r(2597),o=r(3887),a=r(1236),i=r(3070);e.exports=function(e,t,r){for(var u=o(t),l=i.f,s=a.f,c=0;c<u.length;c++){var f=u[c];n(e,f)||r&&n(r,f)||l(e,f,s(t,f))}}},4964:(e,t,r)=>{var n=r(5112)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(r){try{return t[n]=!1,"/./"[e](t)}catch(e){}}return!1}},8544:(e,t,r)=>{var n=r(7293);e.exports=!n((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},4230:(e,t,r)=>{var n=r(1702),o=r(4488),a=r(1340),i=/"/g,u=n("".replace);e.exports=function(e,t,r,n){var l=a(o(e)),s="<"+t;return""!==r&&(s+=" "+r+'="'+u(a(n),i,"&quot;")+'"'),s+">"+l+"</"+t+">"}},4994:(e,t,r)=>{"use strict";var n=r(3383).IteratorPrototype,o=r(30),a=r(9114),i=r(8003),u=r(7497),l=function(){return this};e.exports=function(e,t,r,s){var c=t+" Iterator";return e.prototype=o(n,{next:a(+!s,r)}),i(e,c,!1,!0),u[c]=l,e}},8880:(e,t,r)=>{var n=r(9781),o=r(3070),a=r(9114);e.exports=n?function(e,t,r){return o.f(e,t,a(1,r))}:function(e,t,r){return e[t]=r,e}},9114:e=>{e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},6135:(e,t,r)=>{"use strict";var n=r(4948),o=r(3070),a=r(9114);e.exports=function(e,t,r){var i=n(t);i in e?o.f(e,i,a(0,r)):e[i]=r}},5573:(e,t,r)=>{"use strict";var n=r(7854),o=r(1702),a=r(7293),i=r(6650).start,u=n.RangeError,l=Math.abs,s=Date.prototype,c=s.toISOString,f=o(s.getTime),p=o(s.getUTCDate),d=o(s.getUTCFullYear),h=o(s.getUTCHours),v=o(s.getUTCMilliseconds),g=o(s.getUTCMinutes),y=o(s.getUTCMonth),m=o(s.getUTCSeconds);e.exports=a((function(){return"0385-07-25T07:06:39.999Z"!=c.call(new Date(-50000000000001))}))||!a((function(){c.call(new Date(NaN))}))?function(){if(!isFinite(f(this)))throw u("Invalid time value");var e=this,t=d(e),r=v(e),n=t<0?"-":t>9999?"+":"";return n+i(l(t),n?6:4,0)+"-"+i(y(e)+1,2,0)+"-"+i(p(e),2,0)+"T"+i(h(e),2,0)+":"+i(g(e),2,0)+":"+i(m(e),2,0)+"."+i(r,3,0)+"Z"}:c},8709:(e,t,r)=>{"use strict";var n=r(7854),o=r(9670),a=r(2140),i=n.TypeError;e.exports=function(e){if(o(this),"string"===e||"default"===e)e="string";else if("number"!==e)throw i("Incorrect hint");return a(this,e)}},654:(e,t,r)=>{"use strict";var n=r(2109),o=r(6916),a=r(1913),i=r(6530),u=r(614),l=r(4994),s=r(9518),c=r(7674),f=r(8003),p=r(8880),d=r(1320),h=r(5112),v=r(7497),g=r(3383),y=i.PROPER,m=i.CONFIGURABLE,b=g.IteratorPrototype,w=g.BUGGY_SAFARI_ITERATORS,x=h("iterator"),E="keys",S="values",k="entries",O=function(){return this};e.exports=function(e,t,r,i,h,g,R){l(r,t,i);var T,A,C,_=function(e){if(e===h&&I)return I;if(!w&&e in M)return M[e];switch(e){case E:case S:case k:return function(){return new r(this,e)}}return function(){return new r(this)}},P=t+" Iterator",N=!1,M=e.prototype,L=M[x]||M["@@iterator"]||h&&M[h],I=!w&&L||_(h),j="Array"==t&&M.entries||L;if(j&&(T=s(j.call(new e)))!==Object.prototype&&T.next&&(a||s(T)===b||(c?c(T,b):u(T[x])||d(T,x,O)),f(T,P,!0,!0),a&&(v[P]=O)),y&&h==S&&L&&L.name!==S&&(!a&&m?p(M,"name",S):(N=!0,I=function(){return o(L,this)})),h)if(A={values:_(S),keys:g?I:_(E),entries:_(k)},R)for(C in A)(w||N||!(C in M))&&d(M,C,A[C]);else n({target:t,proto:!0,forced:w||N},A);return a&&!R||M[x]===I||d(M,x,I,{name:h}),v[t]=I,A}},7235:(e,t,r)=>{var n=r(857),o=r(2597),a=r(6061),i=r(3070).f;e.exports=function(e){var t=n.Symbol||(n.Symbol={});o(t,e)||i(t,e,{value:a.f(e)})}},9781:(e,t,r)=>{var n=r(7293);e.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:(e,t,r)=>{var n=r(7854),o=r(111),a=n.document,i=o(a)&&o(a.createElement);e.exports=function(e){return i?a.createElement(e):{}}},3678:e=>{e.exports={IndexSizeError:{s:"INDEX_SIZE_ERR",c:1,m:1},DOMStringSizeError:{s:"DOMSTRING_SIZE_ERR",c:2,m:0},HierarchyRequestError:{s:"HIERARCHY_REQUEST_ERR",c:3,m:1},WrongDocumentError:{s:"WRONG_DOCUMENT_ERR",c:4,m:1},InvalidCharacterError:{s:"INVALID_CHARACTER_ERR",c:5,m:1},NoDataAllowedError:{s:"NO_DATA_ALLOWED_ERR",c:6,m:0},NoModificationAllowedError:{s:"NO_MODIFICATION_ALLOWED_ERR",c:7,m:1},NotFoundError:{s:"NOT_FOUND_ERR",c:8,m:1},NotSupportedError:{s:"NOT_SUPPORTED_ERR",c:9,m:1},InUseAttributeError:{s:"INUSE_ATTRIBUTE_ERR",c:10,m:1},InvalidStateError:{s:"INVALID_STATE_ERR",c:11,m:1},SyntaxError:{s:"SYNTAX_ERR",c:12,m:1},InvalidModificationError:{s:"INVALID_MODIFICATION_ERR",c:13,m:1},NamespaceError:{s:"NAMESPACE_ERR",c:14,m:1},InvalidAccessError:{s:"INVALID_ACCESS_ERR",c:15,m:1},ValidationError:{s:"VALIDATION_ERR",c:16,m:0},TypeMismatchError:{s:"TYPE_MISMATCH_ERR",c:17,m:1},SecurityError:{s:"SECURITY_ERR",c:18,m:1},NetworkError:{s:"NETWORK_ERR",c:19,m:1},AbortError:{s:"ABORT_ERR",c:20,m:1},URLMismatchError:{s:"URL_MISMATCH_ERR",c:21,m:1},QuotaExceededError:{s:"QUOTA_EXCEEDED_ERR",c:22,m:1},TimeoutError:{s:"TIMEOUT_ERR",c:23,m:1},InvalidNodeTypeError:{s:"INVALID_NODE_TYPE_ERR",c:24,m:1},DataCloneError:{s:"DATA_CLONE_ERR",c:25,m:1}}},8324:e=>{e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},8509:(e,t,r)=>{var n=r(317)("span").classList,o=n&&n.constructor&&n.constructor.prototype;e.exports=o===Object.prototype?void 0:o},8886:(e,t,r)=>{var n=r(8113).match(/firefox\/(\d+)/i);e.exports=!!n&&+n[1]},7871:e=>{e.exports="object"==typeof window},256:(e,t,r)=>{var n=r(8113);e.exports=/MSIE|Trident/.test(n)},1528:(e,t,r)=>{var n=r(8113),o=r(7854);e.exports=/ipad|iphone|ipod/i.test(n)&&void 0!==o.Pebble},8334:(e,t,r)=>{var n=r(8113);e.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(n)},5268:(e,t,r)=>{var n=r(4326),o=r(7854);e.exports="process"==n(o.process)},1036:(e,t,r)=>{var n=r(8113);e.exports=/web0s(?!.*chrome)/i.test(n)},8113:(e,t,r)=>{var n=r(5005);e.exports=n("navigator","userAgent")||""},7392:(e,t,r)=>{var n,o,a=r(7854),i=r(8113),u=a.process,l=a.Deno,s=u&&u.versions||l&&l.version,c=s&&s.v8;c&&(o=(n=c.split("."))[0]>0&&n[0]<4?1:+(n[0]+n[1])),!o&&i&&(!(n=i.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=i.match(/Chrome\/(\d+)/))&&(o=+n[1]),e.exports=o},8008:(e,t,r)=>{var n=r(8113).match(/AppleWebKit\/(\d+)\./);e.exports=!!n&&+n[1]},748:e=>{e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2914:(e,t,r)=>{var n=r(7293),o=r(9114);e.exports=!n((function(){var e=Error("a");return!("stack"in e)||(Object.defineProperty(e,"stack",o(1,7)),7!==e.stack)}))},7762:(e,t,r)=>{"use strict";var n=r(9781),o=r(7293),a=r(9670),i=r(30),u=r(6277),l=Error.prototype.toString,s=o((function(){if(n){var e=i(Object.defineProperty({},"name",{get:function(){return this===e}}));if("true"!==l.call(e))return!0}return"2: 1"!==l.call({message:1,name:2})||"Error"!==l.call({})}));e.exports=s?function(){var e=a(this),t=u(e.name,"Error"),r=u(e.message);return t?r?t+": "+r:t:r}:l},2109:(e,t,r)=>{var n=r(7854),o=r(1236).f,a=r(8880),i=r(1320),u=r(3505),l=r(9920),s=r(4705);e.exports=function(e,t){var r,c,f,p,d,h=e.target,v=e.global,g=e.stat;if(r=v?n:g?n[h]||u(h,{}):(n[h]||{}).prototype)for(c in t){if(p=t[c],f=e.noTargetGet?(d=o(r,c))&&d.value:r[c],!s(v?c:h+(g?".":"#")+c,e.forced)&&void 0!==f){if(typeof p==typeof f)continue;l(p,f)}(e.sham||f&&f.sham)&&a(p,"sham",!0),i(r,c,p,e)}}},7293:e=>{e.exports=function(e){try{return!!e()}catch(e){return!0}}},7007:(e,t,r)=>{"use strict";r(4916);var n=r(1702),o=r(1320),a=r(2261),i=r(7293),u=r(5112),l=r(8880),s=u("species"),c=RegExp.prototype;e.exports=function(e,t,r,f){var p=u(e),d=!i((function(){var t={};return t[p]=function(){return 7},7!=""[e](t)})),h=d&&!i((function(){var t=!1,r=/a/;return"split"===e&&((r={}).constructor={},r.constructor[s]=function(){return r},r.flags="",r[p]=/./[p]),r.exec=function(){return t=!0,null},r[p](""),!t}));if(!d||!h||r){var v=n(/./[p]),g=t(p,""[e],(function(e,t,r,o,i){var u=n(e),l=t.exec;return l===a||l===c.exec?d&&!i?{done:!0,value:v(t,r,o)}:{done:!0,value:u(r,t,o)}:{done:!1}}));o(String.prototype,e,g[0]),o(c,p,g[1])}f&&l(c[p],"sham",!0)}},6790:(e,t,r)=>{"use strict";var n=r(7854),o=r(3157),a=r(6244),i=r(9974),u=n.TypeError,l=function(e,t,r,n,s,c,f,p){for(var d,h,v=s,g=0,y=!!f&&i(f,p);g<n;){if(g in r){if(d=y?y(r[g],g,t):r[g],c>0&&o(d))h=a(d),v=l(e,t,d,h,v,c-1)-1;else{if(v>=9007199254740991)throw u("Exceed the acceptable array length");e[v]=d}v++}g++}return v};e.exports=l},6677:(e,t,r)=>{var n=r(7293);e.exports=!n((function(){return Object.isExtensible(Object.preventExtensions({}))}))},2104:e=>{var t=Function.prototype,r=t.apply,n=t.bind,o=t.call;e.exports="object"==typeof Reflect&&Reflect.apply||(n?o.bind(r):function(){return o.apply(r,arguments)})},9974:(e,t,r)=>{var n=r(1702),o=r(9662),a=n(n.bind);e.exports=function(e,t){return o(e),void 0===t?e:a?a(e,t):function(){return e.apply(t,arguments)}}},7065:(e,t,r)=>{"use strict";var n=r(7854),o=r(1702),a=r(9662),i=r(111),u=r(2597),l=r(206),s=n.Function,c=o([].concat),f=o([].join),p={},d=function(e,t,r){if(!u(p,t)){for(var n=[],o=0;o<t;o++)n[o]="a["+o+"]";p[t]=s("C,a","return new C("+f(n,",")+")")}return p[t](e,r)};e.exports=s.bind||function(e){var t=a(this),r=t.prototype,n=l(arguments,1),o=function(){var r=c(n,l(arguments));return this instanceof o?d(t,r.length,r):t.apply(e,r)};return i(r)&&(o.prototype=r),o}},6916:e=>{var t=Function.prototype.call;e.exports=t.bind?t.bind(t):function(){return t.apply(t,arguments)}},6530:(e,t,r)=>{var n=r(9781),o=r(2597),a=Function.prototype,i=n&&Object.getOwnPropertyDescriptor,u=o(a,"name"),l=u&&"something"===function(){}.name,s=u&&(!n||n&&i(a,"name").configurable);e.exports={EXISTS:u,PROPER:l,CONFIGURABLE:s}},1702:e=>{var t=Function.prototype,r=t.bind,n=t.call,o=r&&r.bind(n,n);e.exports=r?function(e){return e&&o(e)}:function(e){return e&&function(){return n.apply(e,arguments)}}},5005:(e,t,r)=>{var n=r(7854),o=r(614),a=function(e){return o(e)?e:void 0};e.exports=function(e,t){return arguments.length<2?a(n[e]):n[e]&&n[e][t]}},1246:(e,t,r)=>{var n=r(648),o=r(8173),a=r(7497),i=r(5112)("iterator");e.exports=function(e){if(null!=e)return o(e,i)||o(e,"@@iterator")||a[n(e)]}},8554:(e,t,r)=>{var n=r(7854),o=r(6916),a=r(9662),i=r(9670),u=r(6330),l=r(1246),s=n.TypeError;e.exports=function(e,t){var r=arguments.length<2?l(e):t;if(a(r))return i(o(r,e));throw s(u(e)+" is not iterable")}},8173:(e,t,r)=>{var n=r(9662);e.exports=function(e,t){var r=e[t];return null==r?void 0:n(r)}},647:(e,t,r)=>{var n=r(1702),o=r(7908),a=Math.floor,i=n("".charAt),u=n("".replace),l=n("".slice),s=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,c=/\$([$&'`]|\d{1,2})/g;e.exports=function(e,t,r,n,f,p){var d=r+e.length,h=n.length,v=c;return void 0!==f&&(f=o(f),v=s),u(p,v,(function(o,u){var s;switch(i(u,0)){case"$":return"$";case"&":return e;case"`":return l(t,0,r);case"'":return l(t,d);case"<":s=f[l(u,1,-1)];break;default:var c=+u;if(0===c)return o;if(c>h){var p=a(c/10);return 0===p?o:p<=h?void 0===n[p-1]?i(u,1):n[p-1]+i(u,1):o}s=n[c-1]}return void 0===s?"":s}))}},7854:(e,t,r)=>{var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof r.g&&r.g)||function(){return this}()||Function("return this")()},2597:(e,t,r)=>{var n=r(1702),o=r(7908),a=n({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,t){return a(o(e),t)}},3501:e=>{e.exports={}},842:(e,t,r)=>{var n=r(7854);e.exports=function(e,t){var r=n.console;r&&r.error&&(1==arguments.length?r.error(e):r.error(e,t))}},490:(e,t,r)=>{var n=r(5005);e.exports=n("document","documentElement")},4664:(e,t,r)=>{var n=r(9781),o=r(7293),a=r(317);e.exports=!n&&!o((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},1179:(e,t,r)=>{var n=r(7854).Array,o=Math.abs,a=Math.pow,i=Math.floor,u=Math.log,l=Math.LN2;e.exports={pack:function(e,t,r){var s,c,f,p=n(r),d=8*r-t-1,h=(1<<d)-1,v=h>>1,g=23===t?a(2,-24)-a(2,-77):0,y=e<0||0===e&&1/e<0?1:0,m=0;for((e=o(e))!=e||e===1/0?(c=e!=e?1:0,s=h):(s=i(u(e)/l),e*(f=a(2,-s))<1&&(s--,f*=2),(e+=s+v>=1?g/f:g*a(2,1-v))*f>=2&&(s++,f/=2),s+v>=h?(c=0,s=h):s+v>=1?(c=(e*f-1)*a(2,t),s+=v):(c=e*a(2,v-1)*a(2,t),s=0));t>=8;)p[m++]=255&c,c/=256,t-=8;for(s=s<<t|c,d+=t;d>0;)p[m++]=255&s,s/=256,d-=8;return p[--m]|=128*y,p},unpack:function(e,t){var r,n=e.length,o=8*n-t-1,i=(1<<o)-1,u=i>>1,l=o-7,s=n-1,c=e[s--],f=127&c;for(c>>=7;l>0;)f=256*f+e[s--],l-=8;for(r=f&(1<<-l)-1,f>>=-l,l+=t;l>0;)r=256*r+e[s--],l-=8;if(0===f)f=1-u;else{if(f===i)return r?NaN:c?-1/0:1/0;r+=a(2,t),f-=u}return(c?-1:1)*r*a(2,f-t)}}},8361:(e,t,r)=>{var n=r(7854),o=r(1702),a=r(7293),i=r(4326),u=n.Object,l=o("".split);e.exports=a((function(){return!u("z").propertyIsEnumerable(0)}))?function(e){return"String"==i(e)?l(e,""):u(e)}:u},9587:(e,t,r)=>{var n=r(614),o=r(111),a=r(7674);e.exports=function(e,t,r){var i,u;return a&&n(i=t.constructor)&&i!==r&&o(u=i.prototype)&&u!==r.prototype&&a(e,u),e}},2788:(e,t,r)=>{var n=r(1702),o=r(614),a=r(5465),i=n(Function.toString);o(a.inspectSource)||(a.inspectSource=function(e){return i(e)}),e.exports=a.inspectSource},8340:(e,t,r)=>{var n=r(111),o=r(8880);e.exports=function(e,t){n(t)&&"cause"in t&&o(e,"cause",t.cause)}},2423:(e,t,r)=>{var n=r(2109),o=r(1702),a=r(3501),i=r(111),u=r(2597),l=r(3070).f,s=r(8006),c=r(1156),f=r(2050),p=r(9711),d=r(6677),h=!1,v=p("meta"),g=0,y=function(e){l(e,v,{value:{objectID:"O"+g++,weakData:{}}})},m=e.exports={enable:function(){m.enable=function(){},h=!0;var e=s.f,t=o([].splice),r={};r[v]=1,e(r).length&&(s.f=function(r){for(var n=e(r),o=0,a=n.length;o<a;o++)if(n[o]===v){t(n,o,1);break}return n},n({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:c.f}))},fastKey:function(e,t){if(!i(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!u(e,v)){if(!f(e))return"F";if(!t)return"E";y(e)}return e[v].objectID},getWeakData:function(e,t){if(!u(e,v)){if(!f(e))return!0;if(!t)return!1;y(e)}return e[v].weakData},onFreeze:function(e){return d&&h&&f(e)&&!u(e,v)&&y(e),e}};a[v]=!0},9909:(e,t,r)=>{var n,o,a,i=r(8536),u=r(7854),l=r(1702),s=r(111),c=r(8880),f=r(2597),p=r(5465),d=r(6200),h=r(3501),v="Object already initialized",g=u.TypeError,y=u.WeakMap;if(i||p.state){var m=p.state||(p.state=new y),b=l(m.get),w=l(m.has),x=l(m.set);n=function(e,t){if(w(m,e))throw new g(v);return t.facade=e,x(m,e,t),t},o=function(e){return b(m,e)||{}},a=function(e){return w(m,e)}}else{var E=d("state");h[E]=!0,n=function(e,t){if(f(e,E))throw new g(v);return t.facade=e,c(e,E,t),t},o=function(e){return f(e,E)?e[E]:{}},a=function(e){return f(e,E)}}e.exports={set:n,get:o,has:a,enforce:function(e){return a(e)?o(e):n(e,{})},getterFor:function(e){return function(t){var r;if(!s(t)||(r=o(t)).type!==e)throw g("Incompatible receiver, "+e+" required");return r}}}},7659:(e,t,r)=>{var n=r(5112),o=r(7497),a=n("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(o.Array===e||i[a]===e)}},3157:(e,t,r)=>{var n=r(4326);e.exports=Array.isArray||function(e){return"Array"==n(e)}},614:e=>{e.exports=function(e){return"function"==typeof e}},4411:(e,t,r)=>{var n=r(1702),o=r(7293),a=r(614),i=r(648),u=r(5005),l=r(2788),s=function(){},c=[],f=u("Reflect","construct"),p=/^\s*(?:class|function)\b/,d=n(p.exec),h=!p.exec(s),v=function(e){if(!a(e))return!1;try{return f(s,c,e),!0}catch(e){return!1}},g=function(e){if(!a(e))return!1;switch(i(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return h||!!d(p,l(e))}catch(e){return!0}};g.sham=!0,e.exports=!f||o((function(){var e;return v(v.call)||!v(Object)||!v((function(){e=!0}))||e}))?g:v},5032:(e,t,r)=>{var n=r(2597);e.exports=function(e){return void 0!==e&&(n(e,"value")||n(e,"writable"))}},4705:(e,t,r)=>{var n=r(7293),o=r(614),a=/#|\.prototype\./,i=function(e,t){var r=l[u(e)];return r==c||r!=s&&(o(t)?n(t):!!t)},u=i.normalize=function(e){return String(e).replace(a,".").toLowerCase()},l=i.data={},s=i.NATIVE="N",c=i.POLYFILL="P";e.exports=i},5988:(e,t,r)=>{var n=r(111),o=Math.floor;e.exports=Number.isInteger||function(e){return!n(e)&&isFinite(e)&&o(e)===e}},111:(e,t,r)=>{var n=r(614);e.exports=function(e){return"object"==typeof e?null!==e:n(e)}},1913:e=>{e.exports=!1},7850:(e,t,r)=>{var n=r(111),o=r(4326),a=r(5112)("match");e.exports=function(e){var t;return n(e)&&(void 0!==(t=e[a])?!!t:"RegExp"==o(e))}},2190:(e,t,r)=>{var n=r(7854),o=r(5005),a=r(614),i=r(7976),u=r(3307),l=n.Object;e.exports=u?function(e){return"symbol"==typeof e}:function(e){var t=o("Symbol");return a(t)&&i(t.prototype,l(e))}},408:(e,t,r)=>{var n=r(7854),o=r(9974),a=r(6916),i=r(9670),u=r(6330),l=r(7659),s=r(6244),c=r(7976),f=r(8554),p=r(1246),d=r(9212),h=n.TypeError,v=function(e,t){this.stopped=e,this.result=t},g=v.prototype;e.exports=function(e,t,r){var n,y,m,b,w,x,E,S=r&&r.that,k=!(!r||!r.AS_ENTRIES),O=!(!r||!r.IS_ITERATOR),R=!(!r||!r.INTERRUPTED),T=o(t,S),A=function(e){return n&&d(n,"normal",e),new v(!0,e)},C=function(e){return k?(i(e),R?T(e[0],e[1],A):T(e[0],e[1])):R?T(e,A):T(e)};if(O)n=e;else{if(!(y=p(e)))throw h(u(e)+" is not iterable");if(l(y)){for(m=0,b=s(e);b>m;m++)if((w=C(e[m]))&&c(g,w))return w;return new v(!1)}n=f(e,y)}for(x=n.next;!(E=a(x,n)).done;){try{w=C(E.value)}catch(e){d(n,"throw",e)}if("object"==typeof w&&w&&c(g,w))return w}return new v(!1)}},9212:(e,t,r)=>{var n=r(6916),o=r(9670),a=r(8173);e.exports=function(e,t,r){var i,u;o(e);try{if(!(i=a(e,"return"))){if("throw"===t)throw r;return r}i=n(i,e)}catch(e){u=!0,i=e}if("throw"===t)throw r;if(u)throw i;return o(i),r}},3383:(e,t,r)=>{"use strict";var n,o,a,i=r(7293),u=r(614),l=r(30),s=r(9518),c=r(1320),f=r(5112),p=r(1913),d=f("iterator"),h=!1;[].keys&&("next"in(a=[].keys())?(o=s(s(a)))!==Object.prototype&&(n=o):h=!0),null==n||i((function(){var e={};return n[d].call(e)!==e}))?n={}:p&&(n=l(n)),u(n[d])||c(n,d,(function(){return this})),e.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:h}},7497:e=>{e.exports={}},6244:(e,t,r)=>{var n=r(7466);e.exports=function(e){return n(e.length)}},6736:e=>{var t=Math.expm1,r=Math.exp;e.exports=!t||t(10)>22025.465794806718||t(10)<22025.465794806718||-2e-17!=t(-2e-17)?function(e){return 0==(e=+e)?e:e>-1e-6&&e<1e-6?e+e*e/2:r(e)-1}:t},6130:(e,t,r)=>{var n=r(4310),o=Math.abs,a=Math.pow,i=a(2,-52),u=a(2,-23),l=a(2,127)*(2-u),s=a(2,-126);e.exports=Math.fround||function(e){var t,r,a=o(e),c=n(e);return a<s?c*(a/s/u+1/i-1/i)*s*u:(r=(t=(1+u/i)*a)-(t-a))>l||r!=r?c*(1/0):c*r}},202:e=>{var t=Math.log,r=Math.LOG10E;e.exports=Math.log10||function(e){return t(e)*r}},6513:e=>{var t=Math.log;e.exports=Math.log1p||function(e){return(e=+e)>-1e-8&&e<1e-8?e-e*e/2:t(1+e)}},4310:e=>{e.exports=Math.sign||function(e){return 0==(e=+e)||e!=e?e:e<0?-1:1}},5948:(e,t,r)=>{var n,o,a,i,u,l,s,c,f=r(7854),p=r(9974),d=r(1236).f,h=r(261).set,v=r(8334),g=r(1528),y=r(1036),m=r(5268),b=f.MutationObserver||f.WebKitMutationObserver,w=f.document,x=f.process,E=f.Promise,S=d(f,"queueMicrotask"),k=S&&S.value;k||(n=function(){var e,t;for(m&&(e=x.domain)&&e.exit();o;){t=o.fn,o=o.next;try{t()}catch(e){throw o?i():a=void 0,e}}a=void 0,e&&e.enter()},v||m||y||!b||!w?!g&&E&&E.resolve?((s=E.resolve(void 0)).constructor=E,c=p(s.then,s),i=function(){c(n)}):m?i=function(){x.nextTick(n)}:(h=p(h,f),i=function(){h(n)}):(u=!0,l=w.createTextNode(""),new b(n).observe(l,{characterData:!0}),i=function(){l.data=u=!u})),e.exports=k||function(e){var t={fn:e,next:void 0};a&&(a.next=t),o||(o=t,i()),a=t}},3366:(e,t,r)=>{var n=r(7854);e.exports=n.Promise},133:(e,t,r)=>{var n=r(7392),o=r(7293);e.exports=!!Object.getOwnPropertySymbols&&!o((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&n&&n<41}))},590:(e,t,r)=>{var n=r(7293),o=r(5112),a=r(1913),i=o("iterator");e.exports=!n((function(){var e=new URL("b?a=1&b=2&c=3","http://a"),t=e.searchParams,r="";return e.pathname="c%20d",t.forEach((function(e,n){t.delete("b"),r+=n+e})),a&&!e.toJSON||!t.sort||"http://a/c%20d?a=1&c=3"!==e.href||"3"!==t.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!t[i]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://тест").host||"#%D0%B1"!==new URL("http://a#б").hash||"a1c3"!==r||"x"!==new URL("http://x",void 0).host}))},8536:(e,t,r)=>{var n=r(7854),o=r(614),a=r(2788),i=n.WeakMap;e.exports=o(i)&&/native code/.test(a(i))},8523:(e,t,r)=>{"use strict";var n=r(9662),o=function(e){var t,r;this.promise=new e((function(e,n){if(void 0!==t||void 0!==r)throw TypeError("Bad Promise constructor");t=e,r=n})),this.resolve=n(t),this.reject=n(r)};e.exports.f=function(e){return new o(e)}},6277:(e,t,r)=>{var n=r(1340);e.exports=function(e,t){return void 0===e?arguments.length<2?"":t:n(e)}},3929:(e,t,r)=>{var n=r(7854),o=r(7850),a=n.TypeError;e.exports=function(e){if(o(e))throw a("The method doesn't accept regular expressions");return e}},7023:(e,t,r)=>{var n=r(7854).isFinite;e.exports=Number.isFinite||function(e){return"number"==typeof e&&n(e)}},2814:(e,t,r)=>{var n=r(7854),o=r(7293),a=r(1702),i=r(1340),u=r(3111).trim,l=r(1361),s=a("".charAt),c=n.parseFloat,f=n.Symbol,p=f&&f.iterator,d=1/c(l+"-0")!=-1/0||p&&!o((function(){c(Object(p))}));e.exports=d?function(e){var t=u(i(e)),r=c(t);return 0===r&&"-"==s(t,0)?-0:r}:c},3009:(e,t,r)=>{var n=r(7854),o=r(7293),a=r(1702),i=r(1340),u=r(3111).trim,l=r(1361),s=n.parseInt,c=n.Symbol,f=c&&c.iterator,p=/^[+-]?0x/i,d=a(p.exec),h=8!==s(l+"08")||22!==s(l+"0x16")||f&&!o((function(){s(Object(f))}));e.exports=h?function(e,t){var r=u(i(e));return s(r,t>>>0||(d(p,r)?16:10))}:s},1574:(e,t,r)=>{"use strict";var n=r(9781),o=r(1702),a=r(6916),i=r(7293),u=r(1956),l=r(5181),s=r(5296),c=r(7908),f=r(8361),p=Object.assign,d=Object.defineProperty,h=o([].concat);e.exports=!p||i((function(){if(n&&1!==p({b:1},p(d({},"a",{enumerable:!0,get:function(){d(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},r=Symbol(),o="abcdefghijklmnopqrst";return e[r]=7,o.split("").forEach((function(e){t[e]=e})),7!=p({},e)[r]||u(p({},t)).join("")!=o}))?function(e,t){for(var r=c(e),o=arguments.length,i=1,p=l.f,d=s.f;o>i;)for(var v,g=f(arguments[i++]),y=p?h(u(g),p(g)):u(g),m=y.length,b=0;m>b;)v=y[b++],n&&!a(d,g,v)||(r[v]=g[v]);return r}:p},30:(e,t,r)=>{var n,o=r(9670),a=r(6048),i=r(748),u=r(3501),l=r(490),s=r(317),c=r(6200)("IE_PROTO"),f=function(){},p=function(e){return"<script>"+e+"<\/script>"},d=function(e){e.write(p("")),e.close();var t=e.parentWindow.Object;return e=null,t},h=function(){try{n=new ActiveXObject("htmlfile")}catch(e){}var e,t;h="undefined"!=typeof document?document.domain&&n?d(n):((t=s("iframe")).style.display="none",l.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(p("document.F=Object")),e.close(),e.F):d(n);for(var r=i.length;r--;)delete h.prototype[i[r]];return h()};u[c]=!0,e.exports=Object.create||function(e,t){var r;return null!==e?(f.prototype=o(e),r=new f,f.prototype=null,r[c]=e):r=h(),void 0===t?r:a.f(r,t)}},6048:(e,t,r)=>{var n=r(9781),o=r(3353),a=r(3070),i=r(9670),u=r(5656),l=r(1956);t.f=n&&!o?Object.defineProperties:function(e,t){i(e);for(var r,n=u(t),o=l(t),s=o.length,c=0;s>c;)a.f(e,r=o[c++],n[r]);return e}},3070:(e,t,r)=>{var n=r(7854),o=r(9781),a=r(4664),i=r(3353),u=r(9670),l=r(4948),s=n.TypeError,c=Object.defineProperty,f=Object.getOwnPropertyDescriptor;t.f=o?i?function(e,t,r){if(u(e),t=l(t),u(r),"function"==typeof e&&"prototype"===t&&"value"in r&&"writable"in r&&!r.writable){var n=f(e,t);n&&n.writable&&(e[t]=r.value,r={configurable:"configurable"in r?r.configurable:n.configurable,enumerable:"enumerable"in r?r.enumerable:n.enumerable,writable:!1})}return c(e,t,r)}:c:function(e,t,r){if(u(e),t=l(t),u(r),a)try{return c(e,t,r)}catch(e){}if("get"in r||"set"in r)throw s("Accessors not supported");return"value"in r&&(e[t]=r.value),e}},1236:(e,t,r)=>{var n=r(9781),o=r(6916),a=r(5296),i=r(9114),u=r(5656),l=r(4948),s=r(2597),c=r(4664),f=Object.getOwnPropertyDescriptor;t.f=n?f:function(e,t){if(e=u(e),t=l(t),c)try{return f(e,t)}catch(e){}if(s(e,t))return i(!o(a.f,e,t),e[t])}},1156:(e,t,r)=>{var n=r(4326),o=r(5656),a=r(8006).f,i=r(1589),u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return u&&"Window"==n(e)?function(e){try{return a(e)}catch(e){return i(u)}}(e):a(o(e))}},8006:(e,t,r)=>{var n=r(6324),o=r(748).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},5181:(e,t)=>{t.f=Object.getOwnPropertySymbols},9518:(e,t,r)=>{var n=r(7854),o=r(2597),a=r(614),i=r(7908),u=r(6200),l=r(8544),s=u("IE_PROTO"),c=n.Object,f=c.prototype;e.exports=l?c.getPrototypeOf:function(e){var t=i(e);if(o(t,s))return t[s];var r=t.constructor;return a(r)&&t instanceof r?r.prototype:t instanceof c?f:null}},2050:(e,t,r)=>{var n=r(7293),o=r(111),a=r(4326),i=r(7556),u=Object.isExtensible,l=n((function(){u(1)}));e.exports=l||i?function(e){return!!o(e)&&(!i||"ArrayBuffer"!=a(e))&&(!u||u(e))}:u},7976:(e,t,r)=>{var n=r(1702);e.exports=n({}.isPrototypeOf)},6324:(e,t,r)=>{var n=r(1702),o=r(2597),a=r(5656),i=r(1318).indexOf,u=r(3501),l=n([].push);e.exports=function(e,t){var r,n=a(e),s=0,c=[];for(r in n)!o(u,r)&&o(n,r)&&l(c,r);for(;t.length>s;)o(n,r=t[s++])&&(~i(c,r)||l(c,r));return c}},1956:(e,t,r)=>{var n=r(6324),o=r(748);e.exports=Object.keys||function(e){return n(e,o)}},5296:(e,t)=>{"use strict";var r={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,o=n&&!r.call({1:2},1);t.f=o?function(e){var t=n(this,e);return!!t&&t.enumerable}:r},9026:(e,t,r)=>{"use strict";var n=r(1913),o=r(7854),a=r(7293),i=r(8008);e.exports=n||!a((function(){if(!(i&&i<535)){var e=Math.random();__defineSetter__.call(null,e,(function(){})),delete o[e]}}))},7674:(e,t,r)=>{var n=r(1702),o=r(9670),a=r(6077);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,r={};try{(e=n(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(r,[]),t=r instanceof Array}catch(e){}return function(r,n){return o(r),a(n),t?e(r,n):r.__proto__=n,r}}():void 0)},4699:(e,t,r)=>{var n=r(9781),o=r(1702),a=r(1956),i=r(5656),u=o(r(5296).f),l=o([].push),s=function(e){return function(t){for(var r,o=i(t),s=a(o),c=s.length,f=0,p=[];c>f;)r=s[f++],n&&!u(o,r)||l(p,e?[r,o[r]]:o[r]);return p}};e.exports={entries:s(!0),values:s(!1)}},288:(e,t,r)=>{"use strict";var n=r(1694),o=r(648);e.exports=n?{}.toString:function(){return"[object "+o(this)+"]"}},2140:(e,t,r)=>{var n=r(7854),o=r(6916),a=r(614),i=r(111),u=n.TypeError;e.exports=function(e,t){var r,n;if("string"===t&&a(r=e.toString)&&!i(n=o(r,e)))return n;if(a(r=e.valueOf)&&!i(n=o(r,e)))return n;if("string"!==t&&a(r=e.toString)&&!i(n=o(r,e)))return n;throw u("Can't convert object to primitive value")}},3887:(e,t,r)=>{var n=r(5005),o=r(1702),a=r(8006),i=r(5181),u=r(9670),l=o([].concat);e.exports=n("Reflect","ownKeys")||function(e){var t=a.f(u(e)),r=i.f;return r?l(t,r(e)):t}},857:(e,t,r)=>{var n=r(7854);e.exports=n},2534:e=>{e.exports=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}},9478:(e,t,r)=>{var n=r(9670),o=r(111),a=r(8523);e.exports=function(e,t){if(n(e),o(t)&&t.constructor===e)return t;var r=a.f(e);return(0,r.resolve)(t),r.promise}},8572:e=>{var t=function(){this.head=null,this.tail=null};t.prototype={add:function(e){var t={item:e,next:null};this.head?this.tail.next=t:this.head=t,this.tail=t},get:function(){var e=this.head;if(e)return this.head=e.next,this.tail===e&&(this.tail=null),e.item}},e.exports=t},2248:(e,t,r)=>{var n=r(1320);e.exports=function(e,t,r){for(var o in t)n(e,o,t[o],r);return e}},1320:(e,t,r)=>{var n=r(7854),o=r(614),a=r(2597),i=r(8880),u=r(3505),l=r(2788),s=r(9909),c=r(6530).CONFIGURABLE,f=s.get,p=s.enforce,d=String(String).split("String");(e.exports=function(e,t,r,l){var s,f=!!l&&!!l.unsafe,h=!!l&&!!l.enumerable,v=!!l&&!!l.noTargetGet,g=l&&void 0!==l.name?l.name:t;o(r)&&("Symbol("===String(g).slice(0,7)&&(g="["+String(g).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!a(r,"name")||c&&r.name!==g)&&i(r,"name",g),(s=p(r)).source||(s.source=d.join("string"==typeof g?g:""))),e!==n?(f?!v&&e[t]&&(h=!0):delete e[t],h?e[t]=r:i(e,t,r)):h?e[t]=r:u(t,r)})(Function.prototype,"toString",(function(){return o(this)&&f(this).source||l(this)}))},7651:(e,t,r)=>{var n=r(7854),o=r(6916),a=r(9670),i=r(614),u=r(4326),l=r(2261),s=n.TypeError;e.exports=function(e,t){var r=e.exec;if(i(r)){var n=o(r,e,t);return null!==n&&a(n),n}if("RegExp"===u(e))return o(l,e,t);throw s("RegExp#exec called on incompatible receiver")}},2261:(e,t,r)=>{"use strict";var n,o,a=r(6916),i=r(1702),u=r(1340),l=r(7066),s=r(2999),c=r(2309),f=r(30),p=r(9909).get,d=r(9441),h=r(7168),v=c("native-string-replace",String.prototype.replace),g=RegExp.prototype.exec,y=g,m=i("".charAt),b=i("".indexOf),w=i("".replace),x=i("".slice),E=(o=/b*/g,a(g,n=/a/,"a"),a(g,o,"a"),0!==n.lastIndex||0!==o.lastIndex),S=s.BROKEN_CARET,k=void 0!==/()??/.exec("")[1];(E||k||S||d||h)&&(y=function(e){var t,r,n,o,i,s,c,d=this,h=p(d),O=u(e),R=h.raw;if(R)return R.lastIndex=d.lastIndex,t=a(y,R,O),d.lastIndex=R.lastIndex,t;var T=h.groups,A=S&&d.sticky,C=a(l,d),_=d.source,P=0,N=O;if(A&&(C=w(C,"y",""),-1===b(C,"g")&&(C+="g"),N=x(O,d.lastIndex),d.lastIndex>0&&(!d.multiline||d.multiline&&"\n"!==m(O,d.lastIndex-1))&&(_="(?: "+_+")",N=" "+N,P++),r=new RegExp("^(?:"+_+")",C)),k&&(r=new RegExp("^"+_+"$(?!\\s)",C)),E&&(n=d.lastIndex),o=a(g,A?r:d,N),A?o?(o.input=x(o.input,P),o[0]=x(o[0],P),o.index=d.lastIndex,d.lastIndex+=o[0].length):d.lastIndex=0:E&&o&&(d.lastIndex=d.global?o.index+o[0].length:n),k&&o&&o.length>1&&a(v,o[0],r,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0)})),o&&T)for(o.groups=s=f(null),i=0;i<T.length;i++)s[(c=T[i])[0]]=o[c[1]];return o}),e.exports=y},7066:(e,t,r)=>{"use strict";var n=r(9670);e.exports=function(){var e=n(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},2999:(e,t,r)=>{var n=r(7293),o=r(7854).RegExp,a=n((function(){var e=o("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),i=a||n((function(){return!o("a","y").sticky})),u=a||n((function(){var e=o("^r","gy");return e.lastIndex=2,null!=e.exec("str")}));e.exports={BROKEN_CARET:u,MISSED_STICKY:i,UNSUPPORTED_Y:a}},9441:(e,t,r)=>{var n=r(7293),o=r(7854).RegExp;e.exports=n((function(){var e=o(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)}))},7168:(e,t,r)=>{var n=r(7293),o=r(7854).RegExp;e.exports=n((function(){var e=o("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")}))},4488:(e,t,r)=>{var n=r(7854).TypeError;e.exports=function(e){if(null==e)throw n("Can't call method on "+e);return e}},1150:e=>{e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},3505:(e,t,r)=>{var n=r(7854),o=Object.defineProperty;e.exports=function(e,t){try{o(n,e,{value:t,configurable:!0,writable:!0})}catch(r){n[e]=t}return t}},6340:(e,t,r)=>{"use strict";var n=r(5005),o=r(3070),a=r(5112),i=r(9781),u=a("species");e.exports=function(e){var t=n(e),r=o.f;i&&t&&!t[u]&&r(t,u,{configurable:!0,get:function(){return this}})}},8003:(e,t,r)=>{var n=r(3070).f,o=r(2597),a=r(5112)("toStringTag");e.exports=function(e,t,r){e&&!r&&(e=e.prototype),e&&!o(e,a)&&n(e,a,{configurable:!0,value:t})}},6200:(e,t,r)=>{var n=r(2309),o=r(9711),a=n("keys");e.exports=function(e){return a[e]||(a[e]=o(e))}},5465:(e,t,r)=>{var n=r(7854),o=r(3505),a="__core-js_shared__",i=n[a]||o(a,{});e.exports=i},2309:(e,t,r)=>{var n=r(1913),o=r(5465);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.20.2",mode:n?"pure":"global",copyright:"© 2022 Denis Pushkarev (zloirock.ru)"})},6707:(e,t,r)=>{var n=r(9670),o=r(9483),a=r(5112)("species");e.exports=function(e,t){var r,i=n(e).constructor;return void 0===i||null==(r=n(i)[a])?t:o(r)}},3429:(e,t,r)=>{var n=r(7293);e.exports=function(e){return n((function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3}))}},8710:(e,t,r)=>{var n=r(1702),o=r(9303),a=r(1340),i=r(4488),u=n("".charAt),l=n("".charCodeAt),s=n("".slice),c=function(e){return function(t,r){var n,c,f=a(i(t)),p=o(r),d=f.length;return p<0||p>=d?e?"":void 0:(n=l(f,p))<55296||n>56319||p+1===d||(c=l(f,p+1))<56320||c>57343?e?u(f,p):n:e?s(f,p,p+2):c-56320+(n-55296<<10)+65536}};e.exports={codeAt:c(!1),charAt:c(!0)}},7061:(e,t,r)=>{var n=r(8113);e.exports=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(n)},6650:(e,t,r)=>{var n=r(1702),o=r(7466),a=r(1340),i=r(8415),u=r(4488),l=n(i),s=n("".slice),c=Math.ceil,f=function(e){return function(t,r,n){var i,f,p=a(u(t)),d=o(r),h=p.length,v=void 0===n?" ":a(n);return d<=h||""==v?p:((f=l(v,c((i=d-h)/v.length))).length>i&&(f=s(f,0,i)),e?p+f:f+p)}};e.exports={start:f(!1),end:f(!0)}},3197:(e,t,r)=>{"use strict";var n=r(7854),o=r(1702),a=2147483647,i=/[^\0-\u007E]/,u=/[.\u3002\uFF0E\uFF61]/g,l="Overflow: input needs wider integers to process",s=n.RangeError,c=o(u.exec),f=Math.floor,p=String.fromCharCode,d=o("".charCodeAt),h=o([].join),v=o([].push),g=o("".replace),y=o("".split),m=o("".toLowerCase),b=function(e){return e+22+75*(e<26)},w=function(e,t,r){var n=0;for(e=r?f(e/700):e>>1,e+=f(e/t);e>455;)e=f(e/35),n+=36;return f(n+36*e/(e+38))},x=function(e){var t=[];e=function(e){for(var t=[],r=0,n=e.length;r<n;){var o=d(e,r++);if(o>=55296&&o<=56319&&r<n){var a=d(e,r++);56320==(64512&a)?v(t,((1023&o)<<10)+(1023&a)+65536):(v(t,o),r--)}else v(t,o)}return t}(e);var r,n,o=e.length,i=128,u=0,c=72;for(r=0;r<e.length;r++)(n=e[r])<128&&v(t,p(n));var g=t.length,y=g;for(g&&v(t,"-");y<o;){var m=a;for(r=0;r<e.length;r++)(n=e[r])>=i&&n<m&&(m=n);var x=y+1;if(m-i>f((a-u)/x))throw s(l);for(u+=(m-i)*x,i=m,r=0;r<e.length;r++){if((n=e[r])<i&&++u>a)throw s(l);if(n==i){for(var E=u,S=36;;){var k=S<=c?1:S>=c+26?26:S-c;if(E<k)break;var O=E-k,R=36-k;v(t,p(b(k+O%R))),E=f(O/R),S+=36}v(t,p(b(E))),c=w(u,x,y==g),u=0,y++}}u++,i++}return h(t,"")};e.exports=function(e){var t,r,n=[],o=y(g(m(e),u,"."),".");for(t=0;t<o.length;t++)r=o[t],v(n,c(i,r)?"xn--"+x(r):r);return h(n,".")}},8415:(e,t,r)=>{"use strict";var n=r(7854),o=r(9303),a=r(1340),i=r(4488),u=n.RangeError;e.exports=function(e){var t=a(i(this)),r="",n=o(e);if(n<0||n==1/0)throw u("Wrong number of repetitions");for(;n>0;(n>>>=1)&&(t+=t))1&n&&(r+=t);return r}},6091:(e,t,r)=>{var n=r(6530).PROPER,o=r(7293),a=r(1361);e.exports=function(e){return o((function(){return!!a[e]()||"​᠎"!=="​᠎"[e]()||n&&a[e].name!==e}))}},3111:(e,t,r)=>{var n=r(1702),o=r(4488),a=r(1340),i=r(1361),u=n("".replace),l="["+i+"]",s=RegExp("^"+l+l+"*"),c=RegExp(l+l+"*$"),f=function(e){return function(t){var r=a(o(t));return 1&e&&(r=u(r,s,"")),2&e&&(r=u(r,c,"")),r}};e.exports={start:f(1),end:f(2),trim:f(3)}},261:(e,t,r)=>{var n,o,a,i,u=r(7854),l=r(2104),s=r(9974),c=r(614),f=r(2597),p=r(7293),d=r(490),h=r(206),v=r(317),g=r(8334),y=r(5268),m=u.setImmediate,b=u.clearImmediate,w=u.process,x=u.Dispatch,E=u.Function,S=u.MessageChannel,k=u.String,O=0,R={};try{n=u.location}catch(e){}var T=function(e){if(f(R,e)){var t=R[e];delete R[e],t()}},A=function(e){return function(){T(e)}},C=function(e){T(e.data)},_=function(e){u.postMessage(k(e),n.protocol+"//"+n.host)};m&&b||(m=function(e){var t=h(arguments,1);return R[++O]=function(){l(c(e)?e:E(e),void 0,t)},o(O),O},b=function(e){delete R[e]},y?o=function(e){w.nextTick(A(e))}:x&&x.now?o=function(e){x.now(A(e))}:S&&!g?(i=(a=new S).port2,a.port1.onmessage=C,o=s(i.postMessage,i)):u.addEventListener&&c(u.postMessage)&&!u.importScripts&&n&&"file:"!==n.protocol&&!p(_)?(o=_,u.addEventListener("message",C,!1)):o="onreadystatechange"in v("script")?function(e){d.appendChild(v("script")).onreadystatechange=function(){d.removeChild(this),T(e)}}:function(e){setTimeout(A(e),0)}),e.exports={set:m,clear:b}},863:(e,t,r)=>{var n=r(1702);e.exports=n(1..valueOf)},1400:(e,t,r)=>{var n=r(9303),o=Math.max,a=Math.min;e.exports=function(e,t){var r=n(e);return r<0?o(r+t,0):a(r,t)}},7067:(e,t,r)=>{var n=r(7854),o=r(9303),a=r(7466),i=n.RangeError;e.exports=function(e){if(void 0===e)return 0;var t=o(e),r=a(t);if(t!==r)throw i("Wrong length or index");return r}},5656:(e,t,r)=>{var n=r(8361),o=r(4488);e.exports=function(e){return n(o(e))}},9303:e=>{var t=Math.ceil,r=Math.floor;e.exports=function(e){var n=+e;return n!=n||0===n?0:(n>0?r:t)(n)}},7466:(e,t,r)=>{var n=r(9303),o=Math.min;e.exports=function(e){return e>0?o(n(e),9007199254740991):0}},7908:(e,t,r)=>{var n=r(7854),o=r(4488),a=n.Object;e.exports=function(e){return a(o(e))}},4590:(e,t,r)=>{var n=r(7854),o=r(3002),a=n.RangeError;e.exports=function(e,t){var r=o(e);if(r%t)throw a("Wrong offset");return r}},3002:(e,t,r)=>{var n=r(7854),o=r(9303),a=n.RangeError;e.exports=function(e){var t=o(e);if(t<0)throw a("The argument can't be less than 0");return t}},7593:(e,t,r)=>{var n=r(7854),o=r(6916),a=r(111),i=r(2190),u=r(8173),l=r(2140),s=r(5112),c=n.TypeError,f=s("toPrimitive");e.exports=function(e,t){if(!a(e)||i(e))return e;var r,n=u(e,f);if(n){if(void 0===t&&(t="default"),r=o(n,e,t),!a(r)||i(r))return r;throw c("Can't convert object to primitive value")}return void 0===t&&(t="number"),l(e,t)}},4948:(e,t,r)=>{var n=r(7593),o=r(2190);e.exports=function(e){var t=n(e,"string");return o(t)?t:t+""}},1694:(e,t,r)=>{var n={};n[r(5112)("toStringTag")]="z",e.exports="[object z]"===String(n)},1340:(e,t,r)=>{var n=r(7854),o=r(648),a=n.String;e.exports=function(e){if("Symbol"===o(e))throw TypeError("Cannot convert a Symbol value to a string");return a(e)}},4038:(e,t,r)=>{var n=r(5268);e.exports=function(e){try{if(n)return Function('return require("'+e+'")')()}catch(e){}}},6330:(e,t,r)=>{var n=r(7854).String;e.exports=function(e){try{return n(e)}catch(e){return"Object"}}},9843:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(6916),i=r(9781),u=r(3832),l=r(260),s=r(3331),c=r(5787),f=r(9114),p=r(8880),d=r(5988),h=r(7466),v=r(7067),g=r(4590),y=r(4948),m=r(2597),b=r(648),w=r(111),x=r(2190),E=r(30),S=r(7976),k=r(7674),O=r(8006).f,R=r(7321),T=r(2092).forEach,A=r(6340),C=r(3070),_=r(1236),P=r(9909),N=r(9587),M=P.get,L=P.set,I=C.f,j=_.f,U=Math.round,D=o.RangeError,F=s.ArrayBuffer,z=F.prototype,B=s.DataView,V=l.NATIVE_ARRAY_BUFFER_VIEWS,$=l.TYPED_ARRAY_CONSTRUCTOR,W=l.TYPED_ARRAY_TAG,H=l.TypedArray,q=l.TypedArrayPrototype,Q=l.aTypedArrayConstructor,Y=l.isTypedArray,G="BYTES_PER_ELEMENT",K="Wrong length",X=function(e,t){Q(e);for(var r=0,n=t.length,o=new e(n);n>r;)o[r]=t[r++];return o},J=function(e,t){I(e,t,{get:function(){return M(this)[t]}})},Z=function(e){var t;return S(z,e)||"ArrayBuffer"==(t=b(e))||"SharedArrayBuffer"==t},ee=function(e,t){return Y(e)&&!x(t)&&t in e&&d(+t)&&t>=0},te=function(e,t){return t=y(t),ee(e,t)?f(2,e[t]):j(e,t)},re=function(e,t,r){return t=y(t),!(ee(e,t)&&w(r)&&m(r,"value"))||m(r,"get")||m(r,"set")||r.configurable||m(r,"writable")&&!r.writable||m(r,"enumerable")&&!r.enumerable?I(e,t,r):(e[t]=r.value,e)};i?(V||(_.f=te,C.f=re,J(q,"buffer"),J(q,"byteOffset"),J(q,"byteLength"),J(q,"length")),n({target:"Object",stat:!0,forced:!V},{getOwnPropertyDescriptor:te,defineProperty:re}),e.exports=function(e,t,r){var i=e.match(/\d+$/)[0]/8,l=e+(r?"Clamped":"")+"Array",s="get"+e,f="set"+e,d=o[l],y=d,m=y&&y.prototype,b={},x=function(e,t){I(e,t,{get:function(){return function(e,t){var r=M(e);return r.view[s](t*i+r.byteOffset,!0)}(this,t)},set:function(e){return function(e,t,n){var o=M(e);r&&(n=(n=U(n))<0?0:n>255?255:255&n),o.view[f](t*i+o.byteOffset,n,!0)}(this,t,e)},enumerable:!0})};V?u&&(y=t((function(e,t,r,n){return c(e,m),N(w(t)?Z(t)?void 0!==n?new d(t,g(r,i),n):void 0!==r?new d(t,g(r,i)):new d(t):Y(t)?X(y,t):a(R,y,t):new d(v(t)),e,y)})),k&&k(y,H),T(O(d),(function(e){e in y||p(y,e,d[e])})),y.prototype=m):(y=t((function(e,t,r,n){c(e,m);var o,u,l,s=0,f=0;if(w(t)){if(!Z(t))return Y(t)?X(y,t):a(R,y,t);o=t,f=g(r,i);var p=t.byteLength;if(void 0===n){if(p%i)throw D(K);if((u=p-f)<0)throw D(K)}else if((u=h(n)*i)+f>p)throw D(K);l=u/i}else l=v(t),o=new F(u=l*i);for(L(e,{buffer:o,byteOffset:f,byteLength:u,length:l,view:new B(o)});s<l;)x(e,s++)})),k&&k(y,H),m=y.prototype=E(q)),m.constructor!==y&&p(m,"constructor",y),p(m,$,y),W&&p(m,W,l),b[l]=y,n({global:!0,forced:y!=d,sham:!V},b),G in y||p(y,G,i),G in m||p(m,G,i),A(l)}):e.exports=function(){}},3832:(e,t,r)=>{var n=r(7854),o=r(7293),a=r(7072),i=r(260).NATIVE_ARRAY_BUFFER_VIEWS,u=n.ArrayBuffer,l=n.Int8Array;e.exports=!i||!o((function(){l(1)}))||!o((function(){new l(-1)}))||!a((function(e){new l,new l(null),new l(1.5),new l(e)}),!0)||o((function(){return 1!==new l(new u(2),1,void 0).length}))},3074:(e,t,r)=>{var n=r(7745),o=r(6304);e.exports=function(e,t){return n(o(e),t)}},7321:(e,t,r)=>{var n=r(9974),o=r(6916),a=r(9483),i=r(7908),u=r(6244),l=r(8554),s=r(1246),c=r(7659),f=r(260).aTypedArrayConstructor;e.exports=function(e){var t,r,p,d,h,v,g=a(this),y=i(e),m=arguments.length,b=m>1?arguments[1]:void 0,w=void 0!==b,x=s(y);if(x&&!c(x))for(v=(h=l(y,x)).next,y=[];!(d=o(v,h)).done;)y.push(d.value);for(w&&m>2&&(b=n(b,arguments[2])),r=u(y),p=new(f(g))(r),t=0;r>t;t++)p[t]=w?b(y[t],t):y[t];return p}},6304:(e,t,r)=>{var n=r(260),o=r(6707),a=n.TYPED_ARRAY_CONSTRUCTOR,i=n.aTypedArrayConstructor;e.exports=function(e){return i(o(e,e[a]))}},9711:(e,t,r)=>{var n=r(1702),o=0,a=Math.random(),i=n(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+i(++o+a,36)}},3307:(e,t,r)=>{var n=r(133);e.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},3353:(e,t,r)=>{var n=r(9781),o=r(7293);e.exports=n&&o((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},6061:(e,t,r)=>{var n=r(5112);t.f=n},5112:(e,t,r)=>{var n=r(7854),o=r(2309),a=r(2597),i=r(9711),u=r(133),l=r(3307),s=o("wks"),c=n.Symbol,f=c&&c.for,p=l?c:c&&c.withoutSetter||i;e.exports=function(e){if(!a(s,e)||!u&&"string"!=typeof s[e]){var t="Symbol."+e;u&&a(c,e)?s[e]=c[e]:s[e]=l&&f?f(t):p(t)}return s[e]}},1361:e=>{e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},9191:(e,t,r)=>{"use strict";var n=r(5005),o=r(2597),a=r(8880),i=r(7976),u=r(7674),l=r(9920),s=r(9587),c=r(6277),f=r(8340),p=r(7741),d=r(2914),h=r(1913);e.exports=function(e,t,r,v){var g=v?2:1,y=e.split("."),m=y[y.length-1],b=n.apply(null,y);if(b){var w=b.prototype;if(!h&&o(w,"cause")&&delete w.cause,!r)return b;var x=n("Error"),E=t((function(e,t){var r=c(v?t:e,void 0),n=v?new b(e):new b;return void 0!==r&&a(n,"message",r),d&&a(n,"stack",p(n.stack,2)),this&&i(w,this)&&s(n,this,E),arguments.length>g&&f(n,arguments[g]),n}));if(E.prototype=w,"Error"!==m&&(u?u(E,x):l(E,x,{name:!0})),l(E,b),!h)try{w.name!==m&&a(w,"name",m),w.constructor=E}catch(e){}return E}}},2120:(e,t,r)=>{var n=r(2109),o=r(5005),a=r(2104),i=r(7293),u=r(9191),l="AggregateError",s=o(l),c=!i((function(){return 1!==s([1]).errors[0]}))&&i((function(){return 7!==s([1],l,{cause:7}).cause}));n({global:!0,forced:c},{AggregateError:u(l,(function(e){return function(t,r){return a(e,this,arguments)}}),c,!0)})},9170:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(7976),i=r(9518),u=r(7674),l=r(9920),s=r(30),c=r(8880),f=r(9114),p=r(7741),d=r(8340),h=r(408),v=r(6277),g=r(5112),y=r(2914),m=g("toStringTag"),b=o.Error,w=[].push,x=function(e,t){var r,n=arguments.length>2?arguments[2]:void 0,o=a(E,this);u?r=u(new b,o?i(this):E):(r=o?this:s(E),c(r,m,"Error")),void 0!==t&&c(r,"message",v(t)),y&&c(r,"stack",p(r.stack,1)),d(r,n);var l=[];return h(e,w,{that:l}),c(r,"errors",l),r};u?u(x,b):l(x,b,{name:!0});var E=x.prototype=s(b.prototype,{constructor:f(1,x),message:f(1,""),name:f(1,"AggregateError")});n({global:!0},{AggregateError:x})},8264:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(3331),i=r(6340),u=a.ArrayBuffer;n({global:!0,forced:o.ArrayBuffer!==u},{ArrayBuffer:u}),i("ArrayBuffer")},6938:(e,t,r)=>{var n=r(2109),o=r(260);n({target:"ArrayBuffer",stat:!0,forced:!o.NATIVE_ARRAY_BUFFER_VIEWS},{isView:o.isView})},9575:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(7293),i=r(3331),u=r(9670),l=r(1400),s=r(7466),c=r(6707),f=i.ArrayBuffer,p=i.DataView,d=p.prototype,h=o(f.prototype.slice),v=o(d.getUint8),g=o(d.setUint8);n({target:"ArrayBuffer",proto:!0,unsafe:!0,forced:a((function(){return!new f(2).slice(1,void 0).byteLength}))},{slice:function(e,t){if(h&&void 0===t)return h(u(this),e);for(var r=u(this).byteLength,n=l(e,r),o=l(void 0===t?r:t,r),a=new(c(this,f))(s(o-n)),i=new p(this),d=new p(a),y=0;n<o;)g(d,y++,v(i,n++));return a}})},2262:(e,t,r)=>{"use strict";var n=r(2109),o=r(7908),a=r(6244),i=r(9303),u=r(1223);n({target:"Array",proto:!0},{at:function(e){var t=o(this),r=a(t),n=i(e),u=n>=0?n:r+n;return u<0||u>=r?void 0:t[u]}}),u("at")},2222:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(7293),i=r(3157),u=r(111),l=r(7908),s=r(6244),c=r(6135),f=r(5417),p=r(1194),d=r(5112),h=r(7392),v=d("isConcatSpreadable"),g=9007199254740991,y="Maximum allowed index exceeded",m=o.TypeError,b=h>=51||!a((function(){var e=[];return e[v]=!1,e.concat()[0]!==e})),w=p("concat"),x=function(e){if(!u(e))return!1;var t=e[v];return void 0!==t?!!t:i(e)};n({target:"Array",proto:!0,forced:!b||!w},{concat:function(e){var t,r,n,o,a,i=l(this),u=f(i,0),p=0;for(t=-1,n=arguments.length;t<n;t++)if(x(a=-1===t?i:arguments[t])){if(p+(o=s(a))>g)throw m(y);for(r=0;r<o;r++,p++)r in a&&c(u,p,a[r])}else{if(p>=g)throw m(y);c(u,p++,a)}return u.length=p,u}})},545:(e,t,r)=>{var n=r(2109),o=r(1048),a=r(1223);n({target:"Array",proto:!0},{copyWithin:o}),a("copyWithin")},6541:(e,t,r)=>{"use strict";var n=r(2109),o=r(2092).every;n({target:"Array",proto:!0,forced:!r(2133)("every")},{every:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},3290:(e,t,r)=>{var n=r(2109),o=r(1285),a=r(1223);n({target:"Array",proto:!0},{fill:o}),a("fill")},7327:(e,t,r)=>{"use strict";var n=r(2109),o=r(2092).filter;n({target:"Array",proto:!0,forced:!r(1194)("filter")},{filter:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},4553:(e,t,r)=>{"use strict";var n=r(2109),o=r(2092).findIndex,a=r(1223),i="findIndex",u=!0;i in[]&&Array(1).findIndex((function(){u=!1})),n({target:"Array",proto:!0,forced:u},{findIndex:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),a(i)},9826:(e,t,r)=>{"use strict";var n=r(2109),o=r(2092).find,a=r(1223),i="find",u=!0;i in[]&&Array(1).find((function(){u=!1})),n({target:"Array",proto:!0,forced:u},{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),a(i)},6535:(e,t,r)=>{"use strict";var n=r(2109),o=r(6790),a=r(9662),i=r(7908),u=r(6244),l=r(5417);n({target:"Array",proto:!0},{flatMap:function(e){var t,r=i(this),n=u(r);return a(e),(t=l(r,0)).length=o(t,r,r,n,0,1,e,arguments.length>1?arguments[1]:void 0),t}})},4944:(e,t,r)=>{"use strict";var n=r(2109),o=r(6790),a=r(7908),i=r(6244),u=r(9303),l=r(5417);n({target:"Array",proto:!0},{flat:function(){var e=arguments.length?arguments[0]:void 0,t=a(this),r=i(t),n=l(t,0);return n.length=o(n,t,t,r,0,void 0===e?1:u(e)),n}})},9554:(e,t,r)=>{"use strict";var n=r(2109),o=r(8533);n({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},1038:(e,t,r)=>{var n=r(2109),o=r(8457);n({target:"Array",stat:!0,forced:!r(7072)((function(e){Array.from(e)}))},{from:o})},6699:(e,t,r)=>{"use strict";var n=r(2109),o=r(1318).includes,a=r(1223);n({target:"Array",proto:!0},{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),a("includes")},2772:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(1318).indexOf,i=r(2133),u=o([].indexOf),l=!!u&&1/u([1],1,-0)<0,s=i("indexOf");n({target:"Array",proto:!0,forced:l||!s},{indexOf:function(e){var t=arguments.length>1?arguments[1]:void 0;return l?u(this,e,t)||0:a(this,e,t)}})},9753:(e,t,r)=>{r(2109)({target:"Array",stat:!0},{isArray:r(3157)})},6992:(e,t,r)=>{"use strict";var n=r(5656),o=r(1223),a=r(7497),i=r(9909),u=r(3070).f,l=r(654),s=r(1913),c=r(9781),f="Array Iterator",p=i.set,d=i.getterFor(f);e.exports=l(Array,"Array",(function(e,t){p(this,{type:f,target:n(e),index:0,kind:t})}),(function(){var e=d(this),t=e.target,r=e.kind,n=e.index++;return!t||n>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:n,done:!1}:"values"==r?{value:t[n],done:!1}:{value:[n,t[n]],done:!1}}),"values");var h=a.Arguments=a.Array;if(o("keys"),o("values"),o("entries"),!s&&c&&"values"!==h.name)try{u(h,"name",{value:"values"})}catch(e){}},9600:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(8361),i=r(5656),u=r(2133),l=o([].join),s=a!=Object,c=u("join",",");n({target:"Array",proto:!0,forced:s||!c},{join:function(e){return l(i(this),void 0===e?",":e)}})},4986:(e,t,r)=>{var n=r(2109),o=r(6583);n({target:"Array",proto:!0,forced:o!==[].lastIndexOf},{lastIndexOf:o})},1249:(e,t,r)=>{"use strict";var n=r(2109),o=r(2092).map;n({target:"Array",proto:!0,forced:!r(1194)("map")},{map:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},6572:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(7293),i=r(4411),u=r(6135),l=o.Array;n({target:"Array",stat:!0,forced:a((function(){function e(){}return!(l.of.call(e)instanceof e)}))},{of:function(){for(var e=0,t=arguments.length,r=new(i(this)?this:l)(t);t>e;)u(r,e,arguments[e++]);return r.length=t,r}})},6644:(e,t,r)=>{"use strict";var n=r(2109),o=r(3671).right,a=r(2133),i=r(7392),u=r(5268);n({target:"Array",proto:!0,forced:!a("reduceRight")||!u&&i>79&&i<83},{reduceRight:function(e){return o(this,e,arguments.length,arguments.length>1?arguments[1]:void 0)}})},5827:(e,t,r)=>{"use strict";var n=r(2109),o=r(3671).left,a=r(2133),i=r(7392),u=r(5268);n({target:"Array",proto:!0,forced:!a("reduce")||!u&&i>79&&i<83},{reduce:function(e){var t=arguments.length;return o(this,e,t,t>1?arguments[1]:void 0)}})},5069:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(3157),i=o([].reverse),u=[1,2];n({target:"Array",proto:!0,forced:String(u)===String(u.reverse())},{reverse:function(){return a(this)&&(this.length=this.length),i(this)}})},7042:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(3157),i=r(4411),u=r(111),l=r(1400),s=r(6244),c=r(5656),f=r(6135),p=r(5112),d=r(1194),h=r(206),v=d("slice"),g=p("species"),y=o.Array,m=Math.max;n({target:"Array",proto:!0,forced:!v},{slice:function(e,t){var r,n,o,p=c(this),d=s(p),v=l(e,d),b=l(void 0===t?d:t,d);if(a(p)&&(r=p.constructor,(i(r)&&(r===y||a(r.prototype))||u(r)&&null===(r=r[g]))&&(r=void 0),r===y||void 0===r))return h(p,v,b);for(n=new(void 0===r?y:r)(m(b-v,0)),o=0;v<b;v++,o++)v in p&&f(n,o,p[v]);return n.length=o,n}})},5212:(e,t,r)=>{"use strict";var n=r(2109),o=r(2092).some;n({target:"Array",proto:!0,forced:!r(2133)("some")},{some:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},2707:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(9662),i=r(7908),u=r(6244),l=r(1340),s=r(7293),c=r(4362),f=r(2133),p=r(8886),d=r(256),h=r(7392),v=r(8008),g=[],y=o(g.sort),m=o(g.push),b=s((function(){g.sort(void 0)})),w=s((function(){g.sort(null)})),x=f("sort"),E=!s((function(){if(h)return h<70;if(!(p&&p>3)){if(d)return!0;if(v)return v<603;var e,t,r,n,o="";for(e=65;e<76;e++){switch(t=String.fromCharCode(e),e){case 66:case 69:case 70:case 72:r=3;break;case 68:case 71:r=4;break;default:r=2}for(n=0;n<47;n++)g.push({k:t+n,v:r})}for(g.sort((function(e,t){return t.v-e.v})),n=0;n<g.length;n++)t=g[n].k.charAt(0),o.charAt(o.length-1)!==t&&(o+=t);return"DGBEFHACIJK"!==o}}));n({target:"Array",proto:!0,forced:b||!w||!x||!E},{sort:function(e){void 0!==e&&a(e);var t=i(this);if(E)return void 0===e?y(t):y(t,e);var r,n,o=[],s=u(t);for(n=0;n<s;n++)n in t&&m(o,t[n]);for(c(o,function(e){return function(t,r){return void 0===r?-1:void 0===t?1:void 0!==e?+e(t,r)||0:l(t)>l(r)?1:-1}}(e)),r=o.length,n=0;n<r;)t[n]=o[n++];for(;n<s;)delete t[n++];return t}})},8706:(e,t,r)=>{r(6340)("Array")},561:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(1400),i=r(9303),u=r(6244),l=r(7908),s=r(5417),c=r(6135),f=r(1194)("splice"),p=o.TypeError,d=Math.max,h=Math.min,v=9007199254740991,g="Maximum allowed length exceeded";n({target:"Array",proto:!0,forced:!f},{splice:function(e,t){var r,n,o,f,y,m,b=l(this),w=u(b),x=a(e,w),E=arguments.length;if(0===E?r=n=0:1===E?(r=0,n=w-x):(r=E-2,n=h(d(i(t),0),w-x)),w+r-n>v)throw p(g);for(o=s(b,n),f=0;f<n;f++)(y=x+f)in b&&c(o,f,b[y]);if(o.length=n,r<n){for(f=x;f<w-n;f++)m=f+r,(y=f+n)in b?b[m]=b[y]:delete b[m];for(f=w;f>w-n+r;f--)delete b[f-1]}else if(r>n)for(f=w-n;f>x;f--)m=f+r-1,(y=f+n-1)in b?b[m]=b[y]:delete b[m];for(f=0;f<r;f++)b[f+x]=arguments[f+2];return b.length=w-n+r,o}})},9244:(e,t,r)=>{r(1223)("flatMap")},3792:(e,t,r)=>{r(1223)("flat")},6716:(e,t,r)=>{var n=r(2109),o=r(3331);n({global:!0,forced:!r(4019)},{DataView:o.DataView})},3016:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(7293)((function(){return 120!==new Date(16e11).getYear()})),i=o(Date.prototype.getFullYear);n({target:"Date",proto:!0,forced:a},{getYear:function(){return i(this)-1900}})},3843:(e,t,r)=>{var n=r(2109),o=r(7854),a=r(1702),i=o.Date,u=a(i.prototype.getTime);n({target:"Date",stat:!0},{now:function(){return u(new i)}})},1801:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(9303),i=Date.prototype,u=o(i.getTime),l=o(i.setFullYear);n({target:"Date",proto:!0},{setYear:function(e){u(this);var t=a(e);return l(this,0<=t&&t<=99?t+1900:t)}})},9550:(e,t,r)=>{r(2109)({target:"Date",proto:!0},{toGMTString:Date.prototype.toUTCString})},8733:(e,t,r)=>{var n=r(2109),o=r(5573);n({target:"Date",proto:!0,forced:Date.prototype.toISOString!==o},{toISOString:o})},5735:(e,t,r)=>{"use strict";var n=r(2109),o=r(7293),a=r(7908),i=r(7593);n({target:"Date",proto:!0,forced:o((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}))},{toJSON:function(e){var t=a(this),r=i(t,"number");return"number"!=typeof r||isFinite(r)?t.toISOString():null}})},6078:(e,t,r)=>{var n=r(2597),o=r(1320),a=r(8709),i=r(5112)("toPrimitive"),u=Date.prototype;n(u,i)||o(u,i,a)},3710:(e,t,r)=>{var n=r(1702),o=r(1320),a=Date.prototype,i="Invalid Date",u=n(a.toString),l=n(a.getTime);String(new Date(NaN))!=i&&o(a,"toString",(function(){var e=l(this);return e==e?u(this):i}))},1703:(e,t,r)=>{var n=r(2109),o=r(7854),a=r(2104),i=r(9191),u=o.WebAssembly,l=7!==Error("e",{cause:7}).cause,s=function(e,t){var r={};r[e]=i(e,t,l),n({global:!0,forced:l},r)},c=function(e,t){if(u&&u[e]){var r={};r[e]=i("WebAssembly."+e,t,l),n({target:"WebAssembly",stat:!0,forced:l},r)}};s("Error",(function(e){return function(t){return a(e,this,arguments)}})),s("EvalError",(function(e){return function(t){return a(e,this,arguments)}})),s("RangeError",(function(e){return function(t){return a(e,this,arguments)}})),s("ReferenceError",(function(e){return function(t){return a(e,this,arguments)}})),s("SyntaxError",(function(e){return function(t){return a(e,this,arguments)}})),s("TypeError",(function(e){return function(t){return a(e,this,arguments)}})),s("URIError",(function(e){return function(t){return a(e,this,arguments)}})),c("CompileError",(function(e){return function(t){return a(e,this,arguments)}})),c("LinkError",(function(e){return function(t){return a(e,this,arguments)}})),c("RuntimeError",(function(e){return function(t){return a(e,this,arguments)}}))},6647:(e,t,r)=>{var n=r(1320),o=r(7762),a=Error.prototype;a.toString!==o&&n(a,"toString",o)},2130:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(1340),i=o("".charAt),u=o("".charCodeAt),l=o(/./.exec),s=o(1..toString),c=o("".toUpperCase),f=/[\w*+\-./@]/,p=function(e,t){for(var r=s(e,16);r.length<t;)r="0"+r;return r};n({global:!0},{escape:function(e){for(var t,r,n=a(e),o="",s=n.length,d=0;d<s;)t=i(n,d++),l(f,t)?o+=t:o+=(r=u(t,0))<256?"%"+p(r,2):"%u"+c(p(r,4));return o}})},4812:(e,t,r)=>{r(2109)({target:"Function",proto:!0},{bind:r(7065)})},4855:(e,t,r)=>{"use strict";var n=r(614),o=r(111),a=r(3070),i=r(9518),u=r(5112)("hasInstance"),l=Function.prototype;u in l||a.f(l,u,{value:function(e){if(!n(this)||!o(e))return!1;var t=this.prototype;if(!o(t))return e instanceof this;for(;e=i(e);)if(t===e)return!0;return!1}})},8309:(e,t,r)=>{var n=r(9781),o=r(6530).EXISTS,a=r(1702),i=r(3070).f,u=Function.prototype,l=a(u.toString),s=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,c=a(s.exec);n&&!o&&i(u,"name",{configurable:!0,get:function(){try{return c(s,l(this))[1]}catch(e){return""}}})},5837:(e,t,r)=>{r(2109)({global:!0},{globalThis:r(7854)})},8862:(e,t,r)=>{var n=r(2109),o=r(7854),a=r(5005),i=r(2104),u=r(1702),l=r(7293),s=o.Array,c=a("JSON","stringify"),f=u(/./.exec),p=u("".charAt),d=u("".charCodeAt),h=u("".replace),v=u(1..toString),g=/[\uD800-\uDFFF]/g,y=/^[\uD800-\uDBFF]$/,m=/^[\uDC00-\uDFFF]$/,b=function(e,t,r){var n=p(r,t-1),o=p(r,t+1);return f(y,e)&&!f(m,o)||f(m,e)&&!f(y,n)?"\\u"+v(d(e,0),16):e},w=l((function(){return'"\\udf06\\ud834"'!==c("\udf06\ud834")||'"\\udead"'!==c("\udead")}));c&&n({target:"JSON",stat:!0,forced:w},{stringify:function(e,t,r){for(var n=0,o=arguments.length,a=s(o);n<o;n++)a[n]=arguments[n];var u=i(c,null,a);return"string"==typeof u?h(u,g,b):u}})},3706:(e,t,r)=>{var n=r(7854);r(8003)(n.JSON,"JSON",!0)},1532:(e,t,r)=>{"use strict";r(7710)("Map",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),r(5631))},9752:(e,t,r)=>{var n=r(2109),o=r(6513),a=Math.acosh,i=Math.log,u=Math.sqrt,l=Math.LN2;n({target:"Math",stat:!0,forced:!a||710!=Math.floor(a(Number.MAX_VALUE))||a(1/0)!=1/0},{acosh:function(e){return(e=+e)<1?NaN:e>94906265.62425156?i(e)+l:o(e-1+u(e-1)*u(e+1))}})},2376:(e,t,r)=>{var n=r(2109),o=Math.asinh,a=Math.log,i=Math.sqrt;n({target:"Math",stat:!0,forced:!(o&&1/o(0)>0)},{asinh:function e(t){return isFinite(t=+t)&&0!=t?t<0?-e(-t):a(t+i(t*t+1)):t}})},3181:(e,t,r)=>{var n=r(2109),o=Math.atanh,a=Math.log;n({target:"Math",stat:!0,forced:!(o&&1/o(-0)<0)},{atanh:function(e){return 0==(e=+e)?e:a((1+e)/(1-e))/2}})},3484:(e,t,r)=>{var n=r(2109),o=r(4310),a=Math.abs,i=Math.pow;n({target:"Math",stat:!0},{cbrt:function(e){return o(e=+e)*i(a(e),1/3)}})},2388:(e,t,r)=>{var n=r(2109),o=Math.floor,a=Math.log,i=Math.LOG2E;n({target:"Math",stat:!0},{clz32:function(e){return(e>>>=0)?31-o(a(e+.5)*i):32}})},8621:(e,t,r)=>{var n=r(2109),o=r(6736),a=Math.cosh,i=Math.abs,u=Math.E;n({target:"Math",stat:!0,forced:!a||a(710)===1/0},{cosh:function(e){var t=o(i(e)-1)+1;return(t+1/(t*u*u))*(u/2)}})},403:(e,t,r)=>{var n=r(2109),o=r(6736);n({target:"Math",stat:!0,forced:o!=Math.expm1},{expm1:o})},4755:(e,t,r)=>{r(2109)({target:"Math",stat:!0},{fround:r(6130)})},5438:(e,t,r)=>{var n=r(2109),o=Math.hypot,a=Math.abs,i=Math.sqrt;n({target:"Math",stat:!0,forced:!!o&&o(1/0,NaN)!==1/0},{hypot:function(e,t){for(var r,n,o=0,u=0,l=arguments.length,s=0;u<l;)s<(r=a(arguments[u++]))?(o=o*(n=s/r)*n+1,s=r):o+=r>0?(n=r/s)*n:r;return s===1/0?1/0:s*i(o)}})},332:(e,t,r)=>{var n=r(2109),o=r(7293),a=Math.imul;n({target:"Math",stat:!0,forced:o((function(){return-5!=a(4294967295,5)||2!=a.length}))},{imul:function(e,t){var r=65535,n=+e,o=+t,a=r&n,i=r&o;return 0|a*i+((r&n>>>16)*i+a*(r&o>>>16)<<16>>>0)}})},658:(e,t,r)=>{r(2109)({target:"Math",stat:!0},{log10:r(202)})},197:(e,t,r)=>{r(2109)({target:"Math",stat:!0},{log1p:r(6513)})},4914:(e,t,r)=>{var n=r(2109),o=Math.log,a=Math.LN2;n({target:"Math",stat:!0},{log2:function(e){return o(e)/a}})},2420:(e,t,r)=>{r(2109)({target:"Math",stat:!0},{sign:r(4310)})},160:(e,t,r)=>{var n=r(2109),o=r(7293),a=r(6736),i=Math.abs,u=Math.exp,l=Math.E;n({target:"Math",stat:!0,forced:o((function(){return-2e-17!=Math.sinh(-2e-17)}))},{sinh:function(e){return i(e=+e)<1?(a(e)-a(-e))/2:(u(e-1)-u(-e-1))*(l/2)}})},970:(e,t,r)=>{var n=r(2109),o=r(6736),a=Math.exp;n({target:"Math",stat:!0},{tanh:function(e){var t=o(e=+e),r=o(-e);return t==1/0?1:r==1/0?-1:(t-r)/(a(e)+a(-e))}})},2703:(e,t,r)=>{r(8003)(Math,"Math",!0)},3689:(e,t,r)=>{var n=r(2109),o=Math.ceil,a=Math.floor;n({target:"Math",stat:!0},{trunc:function(e){return(e>0?a:o)(e)}})},9653:(e,t,r)=>{"use strict";var n=r(9781),o=r(7854),a=r(1702),i=r(4705),u=r(1320),l=r(2597),s=r(9587),c=r(7976),f=r(2190),p=r(7593),d=r(7293),h=r(8006).f,v=r(1236).f,g=r(3070).f,y=r(863),m=r(3111).trim,b="Number",w=o.Number,x=w.prototype,E=o.TypeError,S=a("".slice),k=a("".charCodeAt),O=function(e){var t=p(e,"number");return"bigint"==typeof t?t:R(t)},R=function(e){var t,r,n,o,a,i,u,l,s=p(e,"number");if(f(s))throw E("Cannot convert a Symbol value to a number");if("string"==typeof s&&s.length>2)if(s=m(s),43===(t=k(s,0))||45===t){if(88===(r=k(s,2))||120===r)return NaN}else if(48===t){switch(k(s,1)){case 66:case 98:n=2,o=49;break;case 79:case 111:n=8,o=55;break;default:return+s}for(i=(a=S(s,2)).length,u=0;u<i;u++)if((l=k(a,u))<48||l>o)return NaN;return parseInt(a,n)}return+s};if(i(b,!w(" 0o1")||!w("0b1")||w("+0x1"))){for(var T,A=function(e){var t=arguments.length<1?0:w(O(e)),r=this;return c(x,r)&&d((function(){y(r)}))?s(Object(t),r,A):t},C=n?h(w):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),_=0;C.length>_;_++)l(w,T=C[_])&&!l(A,T)&&g(A,T,v(w,T));A.prototype=x,x.constructor=A,u(o,b,A)}},3299:(e,t,r)=>{r(2109)({target:"Number",stat:!0},{EPSILON:Math.pow(2,-52)})},5192:(e,t,r)=>{r(2109)({target:"Number",stat:!0},{isFinite:r(7023)})},3161:(e,t,r)=>{r(2109)({target:"Number",stat:!0},{isInteger:r(5988)})},4048:(e,t,r)=>{r(2109)({target:"Number",stat:!0},{isNaN:function(e){return e!=e}})},8285:(e,t,r)=>{var n=r(2109),o=r(5988),a=Math.abs;n({target:"Number",stat:!0},{isSafeInteger:function(e){return o(e)&&a(e)<=9007199254740991}})},4363:(e,t,r)=>{r(2109)({target:"Number",stat:!0},{MAX_SAFE_INTEGER:9007199254740991})},5994:(e,t,r)=>{r(2109)({target:"Number",stat:!0},{MIN_SAFE_INTEGER:-9007199254740991})},1874:(e,t,r)=>{var n=r(2109),o=r(2814);n({target:"Number",stat:!0,forced:Number.parseFloat!=o},{parseFloat:o})},9494:(e,t,r)=>{var n=r(2109),o=r(3009);n({target:"Number",stat:!0,forced:Number.parseInt!=o},{parseInt:o})},1354:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(1702),i=r(9303),u=r(863),l=r(8415),s=r(202),c=r(7293),f=o.RangeError,p=o.String,d=o.isFinite,h=Math.abs,v=Math.floor,g=Math.pow,y=Math.round,m=a(1..toExponential),b=a(l),w=a("".slice),x="-6.9000e-11"===m(-69e-12,4)&&"1.25e+0"===m(1.255,2)&&"1.235e+4"===m(12345,3)&&"3e+1"===m(25,0),E=c((function(){m(1,1/0)}))&&c((function(){m(1,-1/0)})),S=!c((function(){m(1/0,1/0)}))&&!c((function(){m(NaN,1/0)}));n({target:"Number",proto:!0,forced:!x||!E||!S},{toExponential:function(e){var t=u(this);if(void 0===e)return m(t);var r=i(e);if(!d(t))return p(t);if(r<0||r>20)throw f("Incorrect fraction digits");if(x)return m(t,r);var n="",o="",a=0,l="",c="";if(t<0&&(n="-",t=-t),0===t)a=0,o=b("0",r+1);else{var E=s(t);a=v(E);var S=0,k=g(10,a-r);2*t>=(2*(S=y(t/k))+1)*k&&(S+=1),S>=g(10,r+1)&&(S/=10,a+=1),o=p(S)}return 0!==r&&(o=w(o,0,1)+"."+w(o,1)),0===a?(l="+",c="0"):(l=a>0?"+":"-",c=p(h(a))),n+(o+"e")+l+c}})},6977:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(1702),i=r(9303),u=r(863),l=r(8415),s=r(7293),c=o.RangeError,f=o.String,p=Math.floor,d=a(l),h=a("".slice),v=a(1..toFixed),g=function(e,t,r){return 0===t?r:t%2==1?g(e,t-1,r*e):g(e*e,t/2,r)},y=function(e,t,r){for(var n=-1,o=r;++n<6;)o+=t*e[n],e[n]=o%1e7,o=p(o/1e7)},m=function(e,t){for(var r=6,n=0;--r>=0;)n+=e[r],e[r]=p(n/t),n=n%t*1e7},b=function(e){for(var t=6,r="";--t>=0;)if(""!==r||0===t||0!==e[t]){var n=f(e[t]);r=""===r?n:r+d("0",7-n.length)+n}return r};n({target:"Number",proto:!0,forced:s((function(){return"0.000"!==v(8e-5,3)||"1"!==v(.9,0)||"1.25"!==v(1.255,2)||"1000000000000000128"!==v(0xde0b6b3a7640080,0)}))||!s((function(){v({})}))},{toFixed:function(e){var t,r,n,o,a=u(this),l=i(e),s=[0,0,0,0,0,0],p="",v="0";if(l<0||l>20)throw c("Incorrect fraction digits");if(a!=a)return"NaN";if(a<=-1e21||a>=1e21)return f(a);if(a<0&&(p="-",a=-a),a>1e-21)if(r=(t=function(e){for(var t=0,r=e;r>=4096;)t+=12,r/=4096;for(;r>=2;)t+=1,r/=2;return t}(a*g(2,69,1))-69)<0?a*g(2,-t,1):a/g(2,t,1),r*=4503599627370496,(t=52-t)>0){for(y(s,0,r),n=l;n>=7;)y(s,1e7,0),n-=7;for(y(s,g(10,n,1),0),n=t-1;n>=23;)m(s,1<<23),n-=23;m(s,1<<n),y(s,1,1),m(s,2),v=b(s)}else y(s,0,r),y(s,1<<-t,0),v=b(s)+d("0",l);return l>0?p+((o=v.length)<=l?"0."+d("0",l-o)+v:h(v,0,o-l)+"."+h(v,o-l)):p+v}})},5147:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(7293),i=r(863),u=o(1..toPrecision);n({target:"Number",proto:!0,forced:a((function(){return"1"!==u(1,void 0)}))||!a((function(){u({})}))},{toPrecision:function(e){return void 0===e?u(i(this)):u(i(this),e)}})},9601:(e,t,r)=>{var n=r(2109),o=r(1574);n({target:"Object",stat:!0,forced:Object.assign!==o},{assign:o})},8011:(e,t,r)=>{r(2109)({target:"Object",stat:!0,sham:!r(9781)},{create:r(30)})},9595:(e,t,r)=>{"use strict";var n=r(2109),o=r(9781),a=r(9026),i=r(9662),u=r(7908),l=r(3070);o&&n({target:"Object",proto:!0,forced:a},{__defineGetter__:function(e,t){l.f(u(this),e,{get:i(t),enumerable:!0,configurable:!0})}})},3321:(e,t,r)=>{var n=r(2109),o=r(9781),a=r(6048).f;n({target:"Object",stat:!0,forced:Object.defineProperties!==a,sham:!o},{defineProperties:a})},9070:(e,t,r)=>{var n=r(2109),o=r(9781),a=r(3070).f;n({target:"Object",stat:!0,forced:Object.defineProperty!==a,sham:!o},{defineProperty:a})},5500:(e,t,r)=>{"use strict";var n=r(2109),o=r(9781),a=r(9026),i=r(9662),u=r(7908),l=r(3070);o&&n({target:"Object",proto:!0,forced:a},{__defineSetter__:function(e,t){l.f(u(this),e,{set:i(t),enumerable:!0,configurable:!0})}})},9720:(e,t,r)=>{var n=r(2109),o=r(4699).entries;n({target:"Object",stat:!0},{entries:function(e){return o(e)}})},3371:(e,t,r)=>{var n=r(2109),o=r(6677),a=r(7293),i=r(111),u=r(2423).onFreeze,l=Object.freeze;n({target:"Object",stat:!0,forced:a((function(){l(1)})),sham:!o},{freeze:function(e){return l&&i(e)?l(u(e)):e}})},8559:(e,t,r)=>{var n=r(2109),o=r(408),a=r(6135);n({target:"Object",stat:!0},{fromEntries:function(e){var t={};return o(e,(function(e,r){a(t,e,r)}),{AS_ENTRIES:!0}),t}})},5003:(e,t,r)=>{var n=r(2109),o=r(7293),a=r(5656),i=r(1236).f,u=r(9781),l=o((function(){i(1)}));n({target:"Object",stat:!0,forced:!u||l,sham:!u},{getOwnPropertyDescriptor:function(e,t){return i(a(e),t)}})},9337:(e,t,r)=>{var n=r(2109),o=r(9781),a=r(3887),i=r(5656),u=r(1236),l=r(6135);n({target:"Object",stat:!0,sham:!o},{getOwnPropertyDescriptors:function(e){for(var t,r,n=i(e),o=u.f,s=a(n),c={},f=0;s.length>f;)void 0!==(r=o(n,t=s[f++]))&&l(c,t,r);return c}})},6210:(e,t,r)=>{var n=r(2109),o=r(7293),a=r(1156).f;n({target:"Object",stat:!0,forced:o((function(){return!Object.getOwnPropertyNames(1)}))},{getOwnPropertyNames:a})},489:(e,t,r)=>{var n=r(2109),o=r(7293),a=r(7908),i=r(9518),u=r(8544);n({target:"Object",stat:!0,forced:o((function(){i(1)})),sham:!u},{getPrototypeOf:function(e){return i(a(e))}})},6314:(e,t,r)=>{r(2109)({target:"Object",stat:!0},{hasOwn:r(2597)})},1825:(e,t,r)=>{var n=r(2109),o=r(2050);n({target:"Object",stat:!0,forced:Object.isExtensible!==o},{isExtensible:o})},8410:(e,t,r)=>{var n=r(2109),o=r(7293),a=r(111),i=r(4326),u=r(7556),l=Object.isFrozen;n({target:"Object",stat:!0,forced:o((function(){l(1)}))||u},{isFrozen:function(e){return!a(e)||!(!u||"ArrayBuffer"!=i(e))||!!l&&l(e)}})},2200:(e,t,r)=>{var n=r(2109),o=r(7293),a=r(111),i=r(4326),u=r(7556),l=Object.isSealed;n({target:"Object",stat:!0,forced:o((function(){l(1)}))||u},{isSealed:function(e){return!a(e)||!(!u||"ArrayBuffer"!=i(e))||!!l&&l(e)}})},3304:(e,t,r)=>{r(2109)({target:"Object",stat:!0},{is:r(1150)})},7941:(e,t,r)=>{var n=r(2109),o=r(7908),a=r(1956);n({target:"Object",stat:!0,forced:r(7293)((function(){a(1)}))},{keys:function(e){return a(o(e))}})},4869:(e,t,r)=>{"use strict";var n=r(2109),o=r(9781),a=r(9026),i=r(7908),u=r(4948),l=r(9518),s=r(1236).f;o&&n({target:"Object",proto:!0,forced:a},{__lookupGetter__:function(e){var t,r=i(this),n=u(e);do{if(t=s(r,n))return t.get}while(r=l(r))}})},3952:(e,t,r)=>{"use strict";var n=r(2109),o=r(9781),a=r(9026),i=r(7908),u=r(4948),l=r(9518),s=r(1236).f;o&&n({target:"Object",proto:!0,forced:a},{__lookupSetter__:function(e){var t,r=i(this),n=u(e);do{if(t=s(r,n))return t.set}while(r=l(r))}})},7227:(e,t,r)=>{var n=r(2109),o=r(111),a=r(2423).onFreeze,i=r(6677),u=r(7293),l=Object.preventExtensions;n({target:"Object",stat:!0,forced:u((function(){l(1)})),sham:!i},{preventExtensions:function(e){return l&&o(e)?l(a(e)):e}})},514:(e,t,r)=>{var n=r(2109),o=r(111),a=r(2423).onFreeze,i=r(6677),u=r(7293),l=Object.seal;n({target:"Object",stat:!0,forced:u((function(){l(1)})),sham:!i},{seal:function(e){return l&&o(e)?l(a(e)):e}})},8304:(e,t,r)=>{r(2109)({target:"Object",stat:!0},{setPrototypeOf:r(7674)})},1539:(e,t,r)=>{var n=r(1694),o=r(1320),a=r(288);n||o(Object.prototype,"toString",a,{unsafe:!0})},6833:(e,t,r)=>{var n=r(2109),o=r(4699).values;n({target:"Object",stat:!0},{values:function(e){return o(e)}})},4678:(e,t,r)=>{var n=r(2109),o=r(2814);n({global:!0,forced:parseFloat!=o},{parseFloat:o})},1058:(e,t,r)=>{var n=r(2109),o=r(3009);n({global:!0,forced:parseInt!=o},{parseInt:o})},7922:(e,t,r)=>{"use strict";var n=r(2109),o=r(6916),a=r(9662),i=r(8523),u=r(2534),l=r(408);n({target:"Promise",stat:!0},{allSettled:function(e){var t=this,r=i.f(t),n=r.resolve,s=r.reject,c=u((function(){var r=a(t.resolve),i=[],u=0,s=1;l(e,(function(e){var a=u++,l=!1;s++,o(r,t,e).then((function(e){l||(l=!0,i[a]={status:"fulfilled",value:e},--s||n(i))}),(function(e){l||(l=!0,i[a]={status:"rejected",reason:e},--s||n(i))}))})),--s||n(i)}));return c.error&&s(c.value),r.promise}})},4668:(e,t,r)=>{"use strict";var n=r(2109),o=r(9662),a=r(5005),i=r(6916),u=r(8523),l=r(2534),s=r(408),c="No one promise resolved";n({target:"Promise",stat:!0},{any:function(e){var t=this,r=a("AggregateError"),n=u.f(t),f=n.resolve,p=n.reject,d=l((function(){var n=o(t.resolve),a=[],u=0,l=1,d=!1;s(e,(function(e){var o=u++,s=!1;l++,i(n,t,e).then((function(e){s||d||(d=!0,f(e))}),(function(e){s||d||(s=!0,a[o]=e,--l||p(new r(a,c)))}))})),--l||p(new r(a,c))}));return d.error&&p(d.value),n.promise}})},7727:(e,t,r)=>{"use strict";var n=r(2109),o=r(1913),a=r(3366),i=r(7293),u=r(5005),l=r(614),s=r(6707),c=r(9478),f=r(1320);if(n({target:"Promise",proto:!0,real:!0,forced:!!a&&i((function(){a.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(e){var t=s(this,u("Promise")),r=l(e);return this.then(r?function(r){return c(t,e()).then((function(){return r}))}:e,r?function(r){return c(t,e()).then((function(){throw r}))}:e)}}),!o&&l(a)){var p=u("Promise").prototype.finally;a.prototype.finally!==p&&f(a.prototype,"finally",p,{unsafe:!0})}},8674:(e,t,r)=>{"use strict";var n,o,a,i,u=r(2109),l=r(1913),s=r(7854),c=r(5005),f=r(6916),p=r(3366),d=r(1320),h=r(2248),v=r(7674),g=r(8003),y=r(6340),m=r(9662),b=r(614),w=r(111),x=r(5787),E=r(2788),S=r(408),k=r(7072),O=r(6707),R=r(261).set,T=r(5948),A=r(9478),C=r(842),_=r(8523),P=r(2534),N=r(8572),M=r(9909),L=r(4705),I=r(5112),j=r(7871),U=r(5268),D=r(7392),F=I("species"),z="Promise",B=M.getterFor(z),V=M.set,$=M.getterFor(z),W=p&&p.prototype,H=p,q=W,Q=s.TypeError,Y=s.document,G=s.process,K=_.f,X=K,J=!!(Y&&Y.createEvent&&s.dispatchEvent),Z=b(s.PromiseRejectionEvent),ee="unhandledrejection",te=!1,re=L(z,(function(){var e=E(H),t=e!==String(H);if(!t&&66===D)return!0;if(l&&!q.finally)return!0;if(D>=51&&/native code/.test(e))return!1;var r=new H((function(e){e(1)})),n=function(e){e((function(){}),(function(){}))};return(r.constructor={})[F]=n,!(te=r.then((function(){}))instanceof n)||!t&&j&&!Z})),ne=re||!k((function(e){H.all(e).catch((function(){}))})),oe=function(e){var t;return!(!w(e)||!b(t=e.then))&&t},ae=function(e,t){var r,n,o,a=t.value,i=1==t.state,u=i?e.ok:e.fail,l=e.resolve,s=e.reject,c=e.domain;try{u?(i||(2===t.rejection&&ce(t),t.rejection=1),!0===u?r=a:(c&&c.enter(),r=u(a),c&&(c.exit(),o=!0)),r===e.promise?s(Q("Promise-chain cycle")):(n=oe(r))?f(n,r,l,s):l(r)):s(a)}catch(e){c&&!o&&c.exit(),s(e)}},ie=function(e,t){e.notified||(e.notified=!0,T((function(){for(var r,n=e.reactions;r=n.get();)ae(r,e);e.notified=!1,t&&!e.rejection&&le(e)})))},ue=function(e,t,r){var n,o;J?((n=Y.createEvent("Event")).promise=t,n.reason=r,n.initEvent(e,!1,!0),s.dispatchEvent(n)):n={promise:t,reason:r},!Z&&(o=s["on"+e])?o(n):e===ee&&C("Unhandled promise rejection",r)},le=function(e){f(R,s,(function(){var t,r=e.facade,n=e.value;if(se(e)&&(t=P((function(){U?G.emit("unhandledRejection",n,r):ue(ee,r,n)})),e.rejection=U||se(e)?2:1,t.error))throw t.value}))},se=function(e){return 1!==e.rejection&&!e.parent},ce=function(e){f(R,s,(function(){var t=e.facade;U?G.emit("rejectionHandled",t):ue("rejectionhandled",t,e.value)}))},fe=function(e,t,r){return function(n){e(t,n,r)}},pe=function(e,t,r){e.done||(e.done=!0,r&&(e=r),e.value=t,e.state=2,ie(e,!0))},de=function(e,t,r){if(!e.done){e.done=!0,r&&(e=r);try{if(e.facade===t)throw Q("Promise can't be resolved itself");var n=oe(t);n?T((function(){var r={done:!1};try{f(n,t,fe(de,r,e),fe(pe,r,e))}catch(t){pe(r,t,e)}})):(e.value=t,e.state=1,ie(e,!1))}catch(t){pe({done:!1},t,e)}}};if(re&&(q=(H=function(e){x(this,q),m(e),f(n,this);var t=B(this);try{e(fe(de,t),fe(pe,t))}catch(e){pe(t,e)}}).prototype,(n=function(e){V(this,{type:z,done:!1,notified:!1,parent:!1,reactions:new N,rejection:!1,state:0,value:void 0})}).prototype=h(q,{then:function(e,t){var r=$(this),n=K(O(this,H));return r.parent=!0,n.ok=!b(e)||e,n.fail=b(t)&&t,n.domain=U?G.domain:void 0,0==r.state?r.reactions.add(n):T((function(){ae(n,r)})),n.promise},catch:function(e){return this.then(void 0,e)}}),o=function(){var e=new n,t=B(e);this.promise=e,this.resolve=fe(de,t),this.reject=fe(pe,t)},_.f=K=function(e){return e===H||e===a?new o(e):X(e)},!l&&b(p)&&W!==Object.prototype)){i=W.then,te||(d(W,"then",(function(e,t){var r=this;return new H((function(e,t){f(i,r,e,t)})).then(e,t)}),{unsafe:!0}),d(W,"catch",q.catch,{unsafe:!0}));try{delete W.constructor}catch(e){}v&&v(W,q)}u({global:!0,wrap:!0,forced:re},{Promise:H}),g(H,z,!1,!0),y(z),a=c(z),u({target:z,stat:!0,forced:re},{reject:function(e){var t=K(this);return f(t.reject,void 0,e),t.promise}}),u({target:z,stat:!0,forced:l||re},{resolve:function(e){return A(l&&this===a?H:this,e)}}),u({target:z,stat:!0,forced:ne},{all:function(e){var t=this,r=K(t),n=r.resolve,o=r.reject,a=P((function(){var r=m(t.resolve),a=[],i=0,u=1;S(e,(function(e){var l=i++,s=!1;u++,f(r,t,e).then((function(e){s||(s=!0,a[l]=e,--u||n(a))}),o)})),--u||n(a)}));return a.error&&o(a.value),r.promise},race:function(e){var t=this,r=K(t),n=r.reject,o=P((function(){var o=m(t.resolve);S(e,(function(e){f(o,t,e).then(r.resolve,n)}))}));return o.error&&n(o.value),r.promise}})},224:(e,t,r)=>{var n=r(2109),o=r(2104),a=r(9662),i=r(9670);n({target:"Reflect",stat:!0,forced:!r(7293)((function(){Reflect.apply((function(){}))}))},{apply:function(e,t,r){return o(a(e),t,i(r))}})},2419:(e,t,r)=>{var n=r(2109),o=r(5005),a=r(2104),i=r(7065),u=r(9483),l=r(9670),s=r(111),c=r(30),f=r(7293),p=o("Reflect","construct"),d=Object.prototype,h=[].push,v=f((function(){function e(){}return!(p((function(){}),[],e)instanceof e)})),g=!f((function(){p((function(){}))})),y=v||g;n({target:"Reflect",stat:!0,forced:y,sham:y},{construct:function(e,t){u(e),l(t);var r=arguments.length<3?e:u(arguments[2]);if(g&&!v)return p(e,t,r);if(e==r){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var n=[null];return a(h,n,t),new(a(i,e,n))}var o=r.prototype,f=c(s(o)?o:d),y=a(e,f,t);return s(y)?y:f}})},9596:(e,t,r)=>{var n=r(2109),o=r(9781),a=r(9670),i=r(4948),u=r(3070);n({target:"Reflect",stat:!0,forced:r(7293)((function(){Reflect.defineProperty(u.f({},1,{value:1}),1,{value:2})})),sham:!o},{defineProperty:function(e,t,r){a(e);var n=i(t);a(r);try{return u.f(e,n,r),!0}catch(e){return!1}}})},2586:(e,t,r)=>{var n=r(2109),o=r(9670),a=r(1236).f;n({target:"Reflect",stat:!0},{deleteProperty:function(e,t){var r=a(o(e),t);return!(r&&!r.configurable)&&delete e[t]}})},5683:(e,t,r)=>{var n=r(2109),o=r(9781),a=r(9670),i=r(1236);n({target:"Reflect",stat:!0,sham:!o},{getOwnPropertyDescriptor:function(e,t){return i.f(a(e),t)}})},9361:(e,t,r)=>{var n=r(2109),o=r(9670),a=r(9518);n({target:"Reflect",stat:!0,sham:!r(8544)},{getPrototypeOf:function(e){return a(o(e))}})},4819:(e,t,r)=>{var n=r(2109),o=r(6916),a=r(111),i=r(9670),u=r(5032),l=r(1236),s=r(9518);n({target:"Reflect",stat:!0},{get:function e(t,r){var n,c,f=arguments.length<3?t:arguments[2];return i(t)===f?t[r]:(n=l.f(t,r))?u(n)?n.value:void 0===n.get?void 0:o(n.get,f):a(c=s(t))?e(c,r,f):void 0}})},1037:(e,t,r)=>{r(2109)({target:"Reflect",stat:!0},{has:function(e,t){return t in e}})},5898:(e,t,r)=>{var n=r(2109),o=r(9670),a=r(2050);n({target:"Reflect",stat:!0},{isExtensible:function(e){return o(e),a(e)}})},7318:(e,t,r)=>{r(2109)({target:"Reflect",stat:!0},{ownKeys:r(3887)})},4361:(e,t,r)=>{var n=r(2109),o=r(5005),a=r(9670);n({target:"Reflect",stat:!0,sham:!r(6677)},{preventExtensions:function(e){a(e);try{var t=o("Object","preventExtensions");return t&&t(e),!0}catch(e){return!1}}})},9532:(e,t,r)=>{var n=r(2109),o=r(9670),a=r(6077),i=r(7674);i&&n({target:"Reflect",stat:!0},{setPrototypeOf:function(e,t){o(e),a(t);try{return i(e,t),!0}catch(e){return!1}}})},3593:(e,t,r)=>{var n=r(2109),o=r(6916),a=r(9670),i=r(111),u=r(5032),l=r(7293),s=r(3070),c=r(1236),f=r(9518),p=r(9114);n({target:"Reflect",stat:!0,forced:l((function(){var e=function(){},t=s.f(new e,"a",{configurable:!0});return!1!==Reflect.set(e.prototype,"a",1,t)}))},{set:function e(t,r,n){var l,d,h,v=arguments.length<4?t:arguments[3],g=c.f(a(t),r);if(!g){if(i(d=f(t)))return e(d,r,n,v);g=p(0)}if(u(g)){if(!1===g.writable||!i(v))return!1;if(l=c.f(v,r)){if(l.get||l.set||!1===l.writable)return!1;l.value=n,s.f(v,r,l)}else s.f(v,r,p(0,n))}else{if(void 0===(h=g.set))return!1;o(h,v,n)}return!0}})},1299:(e,t,r)=>{var n=r(2109),o=r(7854),a=r(8003);n({global:!0},{Reflect:{}}),a(o.Reflect,"Reflect",!0)},4603:(e,t,r)=>{var n=r(9781),o=r(7854),a=r(1702),i=r(4705),u=r(9587),l=r(8880),s=r(3070).f,c=r(8006).f,f=r(7976),p=r(7850),d=r(1340),h=r(7066),v=r(2999),g=r(1320),y=r(7293),m=r(2597),b=r(9909).enforce,w=r(6340),x=r(5112),E=r(9441),S=r(7168),k=x("match"),O=o.RegExp,R=O.prototype,T=o.SyntaxError,A=a(h),C=a(R.exec),_=a("".charAt),P=a("".replace),N=a("".indexOf),M=a("".slice),L=/^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/,I=/a/g,j=/a/g,U=new O(I)!==I,D=v.MISSED_STICKY,F=v.UNSUPPORTED_Y;if(i("RegExp",n&&(!U||D||E||S||y((function(){return j[k]=!1,O(I)!=I||O(j)==j||"/a/i"!=O(I,"i")}))))){for(var z=function(e,t){var r,n,o,a,i,s,c=f(R,this),h=p(e),v=void 0===t,g=[],y=e;if(!c&&h&&v&&e.constructor===z)return e;if((h||f(R,e))&&(e=e.source,v&&(t="flags"in y?y.flags:A(y))),e=void 0===e?"":d(e),t=void 0===t?"":d(t),y=e,E&&"dotAll"in I&&(n=!!t&&N(t,"s")>-1)&&(t=P(t,/s/g,"")),r=t,D&&"sticky"in I&&(o=!!t&&N(t,"y")>-1)&&F&&(t=P(t,/y/g,"")),S&&(a=function(e){for(var t,r=e.length,n=0,o="",a=[],i={},u=!1,l=!1,s=0,c="";n<=r;n++){if("\\"===(t=_(e,n)))t+=_(e,++n);else if("]"===t)u=!1;else if(!u)switch(!0){case"["===t:u=!0;break;case"("===t:C(L,M(e,n+1))&&(n+=2,l=!0),o+=t,s++;continue;case">"===t&&l:if(""===c||m(i,c))throw new T("Invalid capture group name");i[c]=!0,a[a.length]=[c,s],l=!1,c="";continue}l?c+=t:o+=t}return[o,a]}(e),e=a[0],g=a[1]),i=u(O(e,t),c?this:R,z),(n||o||g.length)&&(s=b(i),n&&(s.dotAll=!0,s.raw=z(function(e){for(var t,r=e.length,n=0,o="",a=!1;n<=r;n++)"\\"!==(t=_(e,n))?a||"."!==t?("["===t?a=!0:"]"===t&&(a=!1),o+=t):o+="[\\s\\S]":o+=t+_(e,++n);return o}(e),r)),o&&(s.sticky=!0),g.length&&(s.groups=g)),e!==y)try{l(i,"source",""===y?"(?:)":y)}catch(e){}return i},B=function(e){e in z||s(z,e,{configurable:!0,get:function(){return O[e]},set:function(t){O[e]=t}})},V=c(O),$=0;V.length>$;)B(V[$++]);R.constructor=z,z.prototype=R,g(o,"RegExp",z)}w("RegExp")},8450:(e,t,r)=>{var n=r(7854),o=r(9781),a=r(9441),i=r(4326),u=r(3070).f,l=r(9909).get,s=RegExp.prototype,c=n.TypeError;o&&a&&u(s,"dotAll",{configurable:!0,get:function(){if(this!==s){if("RegExp"===i(this))return!!l(this).dotAll;throw c("Incompatible receiver, RegExp required")}}})},4916:(e,t,r)=>{"use strict";var n=r(2109),o=r(2261);n({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},2087:(e,t,r)=>{var n=r(9781),o=r(3070),a=r(7066),i=r(7293),u=RegExp.prototype;n&&i((function(){return"sy"!==Object.getOwnPropertyDescriptor(u,"flags").get.call({dotAll:!0,sticky:!0})}))&&o.f(u,"flags",{configurable:!0,get:a})},8386:(e,t,r)=>{var n=r(7854),o=r(9781),a=r(2999).MISSED_STICKY,i=r(4326),u=r(3070).f,l=r(9909).get,s=RegExp.prototype,c=n.TypeError;o&&a&&u(s,"sticky",{configurable:!0,get:function(){if(this!==s){if("RegExp"===i(this))return!!l(this).sticky;throw c("Incompatible receiver, RegExp required")}}})},7601:(e,t,r)=>{"use strict";r(4916);var n,o,a=r(2109),i=r(7854),u=r(6916),l=r(1702),s=r(614),c=r(111),f=(n=!1,(o=/[ac]/).exec=function(){return n=!0,/./.exec.apply(this,arguments)},!0===o.test("abc")&&n),p=i.Error,d=l(/./.test);a({target:"RegExp",proto:!0,forced:!f},{test:function(e){var t=this.exec;if(!s(t))return d(this,e);var r=u(t,this,e);if(null!==r&&!c(r))throw new p("RegExp exec method returned something other than an Object or null");return!!r}})},9714:(e,t,r)=>{"use strict";var n=r(1702),o=r(6530).PROPER,a=r(1320),i=r(9670),u=r(7976),l=r(1340),s=r(7293),c=r(7066),f="toString",p=RegExp.prototype,d=p.toString,h=n(c),v=s((function(){return"/a/b"!=d.call({source:"a",flags:"b"})})),g=o&&d.name!=f;(v||g)&&a(RegExp.prototype,f,(function(){var e=i(this),t=l(e.source),r=e.flags;return"/"+t+"/"+l(void 0===r&&u(p,e)&&!("flags"in p)?h(e):r)}),{unsafe:!0})},189:(e,t,r)=>{"use strict";r(7710)("Set",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),r(5631))},5218:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("anchor")},{anchor:function(e){return o(this,"a","name",e)}})},4506:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(4488),i=r(9303),u=r(1340),l=r(7293),s=o("".charAt);n({target:"String",proto:!0,forced:l((function(){return"\ud842"!=="𠮷".at(-2)}))},{at:function(e){var t=u(a(this)),r=t.length,n=i(e),o=n>=0?n:r+n;return o<0||o>=r?void 0:s(t,o)}})},4475:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("big")},{big:function(){return o(this,"big","","")}})},7929:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("blink")},{blink:function(){return o(this,"blink","","")}})},915:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("bold")},{bold:function(){return o(this,"b","","")}})},9841:(e,t,r)=>{"use strict";var n=r(2109),o=r(8710).codeAt;n({target:"String",proto:!0},{codePointAt:function(e){return o(this,e)}})},7852:(e,t,r)=>{"use strict";var n,o=r(2109),a=r(1702),i=r(1236).f,u=r(7466),l=r(1340),s=r(3929),c=r(4488),f=r(4964),p=r(1913),d=a("".endsWith),h=a("".slice),v=Math.min,g=f("endsWith");o({target:"String",proto:!0,forced:!(!p&&!g&&(n=i(String.prototype,"endsWith"),n&&!n.writable)||g)},{endsWith:function(e){var t=l(c(this));s(e);var r=arguments.length>1?arguments[1]:void 0,n=t.length,o=void 0===r?n:v(u(r),n),a=l(e);return d?d(t,a,o):h(t,o-a.length,o)===a}})},9253:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("fixed")},{fixed:function(){return o(this,"tt","","")}})},2125:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("fontcolor")},{fontcolor:function(e){return o(this,"font","color",e)}})},8830:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("fontsize")},{fontsize:function(e){return o(this,"font","size",e)}})},4953:(e,t,r)=>{var n=r(2109),o=r(7854),a=r(1702),i=r(1400),u=o.RangeError,l=String.fromCharCode,s=String.fromCodePoint,c=a([].join);n({target:"String",stat:!0,forced:!!s&&1!=s.length},{fromCodePoint:function(e){for(var t,r=[],n=arguments.length,o=0;n>o;){if(t=+arguments[o++],i(t,1114111)!==t)throw u(t+" is not a valid code point");r[o]=t<65536?l(t):l(55296+((t-=65536)>>10),t%1024+56320)}return c(r,"")}})},2023:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(3929),i=r(4488),u=r(1340),l=r(4964),s=o("".indexOf);n({target:"String",proto:!0,forced:!l("includes")},{includes:function(e){return!!~s(u(i(this)),u(a(e)),arguments.length>1?arguments[1]:void 0)}})},8734:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("italics")},{italics:function(){return o(this,"i","","")}})},8783:(e,t,r)=>{"use strict";var n=r(8710).charAt,o=r(1340),a=r(9909),i=r(654),u="String Iterator",l=a.set,s=a.getterFor(u);i(String,"String",(function(e){l(this,{type:u,string:o(e),index:0})}),(function(){var e,t=s(this),r=t.string,o=t.index;return o>=r.length?{value:void 0,done:!0}:(e=n(r,o),t.index+=e.length,{value:e,done:!1})}))},9254:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("link")},{link:function(e){return o(this,"a","href",e)}})},6373:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(6916),i=r(1702),u=r(4994),l=r(4488),s=r(7466),c=r(1340),f=r(9670),p=r(4326),d=r(7976),h=r(7850),v=r(7066),g=r(8173),y=r(1320),m=r(7293),b=r(5112),w=r(6707),x=r(1530),E=r(7651),S=r(9909),k=r(1913),O=b("matchAll"),R="RegExp String Iterator",T=S.set,A=S.getterFor(R),C=RegExp.prototype,_=o.TypeError,P=i(v),N=i("".indexOf),M=i("".matchAll),L=!!M&&!m((function(){M("a",/./)})),I=u((function(e,t,r,n){T(this,{type:R,regexp:e,string:t,global:r,unicode:n,done:!1})}),"RegExp String",(function(){var e=A(this);if(e.done)return{value:void 0,done:!0};var t=e.regexp,r=e.string,n=E(t,r);return null===n?{value:void 0,done:e.done=!0}:e.global?(""===c(n[0])&&(t.lastIndex=x(r,s(t.lastIndex),e.unicode)),{value:n,done:!1}):(e.done=!0,{value:n,done:!1})})),j=function(e){var t,r,n,o,a,i,u=f(this),l=c(e);return t=w(u,RegExp),void 0===(r=u.flags)&&d(C,u)&&!("flags"in C)&&(r=P(u)),n=void 0===r?"":c(r),o=new t(t===RegExp?u.source:u,n),a=!!~N(n,"g"),i=!!~N(n,"u"),o.lastIndex=s(u.lastIndex),new I(o,l,a,i)};n({target:"String",proto:!0,forced:L},{matchAll:function(e){var t,r,n,o,i=l(this);if(null!=e){if(h(e)&&(t=c(l("flags"in C?e.flags:P(e))),!~N(t,"g")))throw _("`.matchAll` does not allow non-global regexes");if(L)return M(i,e);if(void 0===(n=g(e,O))&&k&&"RegExp"==p(e)&&(n=j),n)return a(n,e,i)}else if(L)return M(i,e);return r=c(i),o=new RegExp(e,"g"),k?a(j,o,r):o[O](r)}}),k||O in C||y(C,O,j)},4723:(e,t,r)=>{"use strict";var n=r(6916),o=r(7007),a=r(9670),i=r(7466),u=r(1340),l=r(4488),s=r(8173),c=r(1530),f=r(7651);o("match",(function(e,t,r){return[function(t){var r=l(this),o=null==t?void 0:s(t,e);return o?n(o,t,r):new RegExp(t)[e](u(r))},function(e){var n=a(this),o=u(e),l=r(t,n,o);if(l.done)return l.value;if(!n.global)return f(n,o);var s=n.unicode;n.lastIndex=0;for(var p,d=[],h=0;null!==(p=f(n,o));){var v=u(p[0]);d[h]=v,""===v&&(n.lastIndex=c(o,i(n.lastIndex),s)),h++}return 0===h?null:d}]}))},6528:(e,t,r)=>{"use strict";var n=r(2109),o=r(6650).end;n({target:"String",proto:!0,forced:r(7061)},{padEnd:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},3112:(e,t,r)=>{"use strict";var n=r(2109),o=r(6650).start;n({target:"String",proto:!0,forced:r(7061)},{padStart:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},8992:(e,t,r)=>{var n=r(2109),o=r(1702),a=r(5656),i=r(7908),u=r(1340),l=r(6244),s=o([].push),c=o([].join);n({target:"String",stat:!0},{raw:function(e){for(var t=a(i(e).raw),r=l(t),n=arguments.length,o=[],f=0;r>f;){if(s(o,u(t[f++])),f===r)return c(o,"");f<n&&s(o,u(arguments[f]))}}})},2481:(e,t,r)=>{r(2109)({target:"String",proto:!0},{repeat:r(8415)})},8757:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(6916),i=r(1702),u=r(4488),l=r(614),s=r(7850),c=r(1340),f=r(8173),p=r(7066),d=r(647),h=r(5112),v=r(1913),g=h("replace"),y=RegExp.prototype,m=o.TypeError,b=i(p),w=i("".indexOf),x=i("".replace),E=i("".slice),S=Math.max,k=function(e,t,r){return r>e.length?-1:""===t?r:w(e,t,r)};n({target:"String",proto:!0},{replaceAll:function(e,t){var r,n,o,i,p,h,O,R,T,A=u(this),C=0,_=0,P="";if(null!=e){if((r=s(e))&&(n=c(u("flags"in y?e.flags:b(e))),!~w(n,"g")))throw m("`.replaceAll` does not allow non-global regexes");if(o=f(e,g))return a(o,e,A,t);if(v&&r)return x(c(A),e,t)}for(i=c(A),p=c(e),(h=l(t))||(t=c(t)),O=p.length,R=S(1,O),C=k(i,p,0);-1!==C;)T=h?c(t(p,C,i)):d(p,i,C,[],void 0,t),P+=E(i,_,C)+T,_=C+O,C=k(i,p,C+R);return _<i.length&&(P+=E(i,_)),P}})},5306:(e,t,r)=>{"use strict";var n=r(2104),o=r(6916),a=r(1702),i=r(7007),u=r(7293),l=r(9670),s=r(614),c=r(9303),f=r(7466),p=r(1340),d=r(4488),h=r(1530),v=r(8173),g=r(647),y=r(7651),m=r(5112)("replace"),b=Math.max,w=Math.min,x=a([].concat),E=a([].push),S=a("".indexOf),k=a("".slice),O="$0"==="a".replace(/./,"$0"),R=!!/./[m]&&""===/./[m]("a","$0");i("replace",(function(e,t,r){var a=R?"$":"$0";return[function(e,r){var n=d(this),a=null==e?void 0:v(e,m);return a?o(a,e,n,r):o(t,p(n),e,r)},function(e,o){var i=l(this),u=p(e);if("string"==typeof o&&-1===S(o,a)&&-1===S(o,"$<")){var d=r(t,i,u,o);if(d.done)return d.value}var v=s(o);v||(o=p(o));var m=i.global;if(m){var O=i.unicode;i.lastIndex=0}for(var R=[];;){var T=y(i,u);if(null===T)break;if(E(R,T),!m)break;""===p(T[0])&&(i.lastIndex=h(u,f(i.lastIndex),O))}for(var A,C="",_=0,P=0;P<R.length;P++){for(var N=p((T=R[P])[0]),M=b(w(c(T.index),u.length),0),L=[],I=1;I<T.length;I++)E(L,void 0===(A=T[I])?A:String(A));var j=T.groups;if(v){var U=x([N],L,M,u);void 0!==j&&E(U,j);var D=p(n(o,void 0,U))}else D=g(N,u,M,L,j,o);M>=_&&(C+=k(u,_,M)+D,_=M+N.length)}return C+k(u,_)}]}),!!u((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}))||!O||R)},4765:(e,t,r)=>{"use strict";var n=r(6916),o=r(7007),a=r(9670),i=r(4488),u=r(1150),l=r(1340),s=r(8173),c=r(7651);o("search",(function(e,t,r){return[function(t){var r=i(this),o=null==t?void 0:s(t,e);return o?n(o,t,r):new RegExp(t)[e](l(r))},function(e){var n=a(this),o=l(e),i=r(t,n,o);if(i.done)return i.value;var s=n.lastIndex;u(s,0)||(n.lastIndex=0);var f=c(n,o);return u(n.lastIndex,s)||(n.lastIndex=s),null===f?-1:f.index}]}))},7268:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("small")},{small:function(){return o(this,"small","","")}})},3123:(e,t,r)=>{"use strict";var n=r(2104),o=r(6916),a=r(1702),i=r(7007),u=r(7850),l=r(9670),s=r(4488),c=r(6707),f=r(1530),p=r(7466),d=r(1340),h=r(8173),v=r(1589),g=r(7651),y=r(2261),m=r(2999),b=r(7293),w=m.UNSUPPORTED_Y,x=4294967295,E=Math.min,S=[].push,k=a(/./.exec),O=a(S),R=a("".slice);i("split",(function(e,t,r){var a;return a="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,r){var a=d(s(this)),i=void 0===r?x:r>>>0;if(0===i)return[];if(void 0===e)return[a];if(!u(e))return o(t,a,e,i);for(var l,c,f,p=[],h=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),g=0,m=new RegExp(e.source,h+"g");(l=o(y,m,a))&&!((c=m.lastIndex)>g&&(O(p,R(a,g,l.index)),l.length>1&&l.index<a.length&&n(S,p,v(l,1)),f=l[0].length,g=c,p.length>=i));)m.lastIndex===l.index&&m.lastIndex++;return g===a.length?!f&&k(m,"")||O(p,""):O(p,R(a,g)),p.length>i?v(p,0,i):p}:"0".split(void 0,0).length?function(e,r){return void 0===e&&0===r?[]:o(t,this,e,r)}:t,[function(t,r){var n=s(this),i=null==t?void 0:h(t,e);return i?o(i,t,n,r):o(a,d(n),t,r)},function(e,n){var o=l(this),i=d(e),u=r(a,o,i,n,a!==t);if(u.done)return u.value;var s=c(o,RegExp),h=o.unicode,v=(o.ignoreCase?"i":"")+(o.multiline?"m":"")+(o.unicode?"u":"")+(w?"g":"y"),y=new s(w?"^(?:"+o.source+")":o,v),m=void 0===n?x:n>>>0;if(0===m)return[];if(0===i.length)return null===g(y,i)?[i]:[];for(var b=0,S=0,k=[];S<i.length;){y.lastIndex=w?0:S;var T,A=g(y,w?R(i,S):i);if(null===A||(T=E(p(y.lastIndex+(w?S:0)),i.length))===b)S=f(i,S,h);else{if(O(k,R(i,b,S)),k.length===m)return k;for(var C=1;C<=A.length-1;C++)if(O(k,A[C]),k.length===m)return k;S=b=T}}return O(k,R(i,b)),k}]}),!!b((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var r="ab".split(e);return 2!==r.length||"a"!==r[0]||"b"!==r[1]})),w)},6755:(e,t,r)=>{"use strict";var n,o=r(2109),a=r(1702),i=r(1236).f,u=r(7466),l=r(1340),s=r(3929),c=r(4488),f=r(4964),p=r(1913),d=a("".startsWith),h=a("".slice),v=Math.min,g=f("startsWith");o({target:"String",proto:!0,forced:!(!p&&!g&&(n=i(String.prototype,"startsWith"),n&&!n.writable)||g)},{startsWith:function(e){var t=l(c(this));s(e);var r=u(v(arguments.length>1?arguments[1]:void 0,t.length)),n=l(e);return d?d(t,n,r):h(t,r,r+n.length)===n}})},7397:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("strike")},{strike:function(){return o(this,"strike","","")}})},86:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("sub")},{sub:function(){return o(this,"sub","","")}})},3650:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(4488),i=r(9303),u=r(1340),l=o("".slice),s=Math.max,c=Math.min;n({target:"String",proto:!0,forced:!"".substr||"b"!=="ab".substr(-1)},{substr:function(e,t){var r,n,o=u(a(this)),f=o.length,p=i(e);return p===1/0&&(p=0),p<0&&(p=s(f+p,0)),(r=void 0===t?f:i(t))<=0||r===1/0||p>=(n=c(p+r,f))?"":l(o,p,n)}})},623:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("sup")},{sup:function(){return o(this,"sup","","")}})},8702:(e,t,r)=>{"use strict";var n=r(2109),o=r(3111).end,a=r(6091)("trimEnd"),i=a?function(){return o(this)}:"".trimEnd;n({target:"String",proto:!0,name:"trimEnd",forced:a},{trimEnd:i,trimRight:i})},5674:(e,t,r)=>{"use strict";var n=r(2109),o=r(3111).start,a=r(6091)("trimStart"),i=a?function(){return o(this)}:"".trimStart;n({target:"String",proto:!0,name:"trimStart",forced:a},{trimStart:i,trimLeft:i})},3210:(e,t,r)=>{"use strict";var n=r(2109),o=r(3111).trim;n({target:"String",proto:!0,forced:r(6091)("trim")},{trim:function(){return o(this)}})},2443:(e,t,r)=>{r(7235)("asyncIterator")},1817:(e,t,r)=>{"use strict";var n=r(2109),o=r(9781),a=r(7854),i=r(1702),u=r(2597),l=r(614),s=r(7976),c=r(1340),f=r(3070).f,p=r(9920),d=a.Symbol,h=d&&d.prototype;if(o&&l(d)&&(!("description"in h)||void 0!==d().description)){var v={},g=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:c(arguments[0]),t=s(h,this)?new d(e):void 0===e?d():d(e);return""===e&&(v[t]=!0),t};p(g,d),g.prototype=h,h.constructor=g;var y="Symbol(test)"==String(d("test")),m=i(h.toString),b=i(h.valueOf),w=/^Symbol\((.*)\)[^)]+$/,x=i("".replace),E=i("".slice);f(h,"description",{configurable:!0,get:function(){var e=b(this),t=m(e);if(u(v,e))return"";var r=y?E(t,7,-1):x(t,w,"$1");return""===r?void 0:r}}),n({global:!0,forced:!0},{Symbol:g})}},2401:(e,t,r)=>{r(7235)("hasInstance")},8722:(e,t,r)=>{r(7235)("isConcatSpreadable")},2165:(e,t,r)=>{r(7235)("iterator")},2526:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(5005),i=r(2104),u=r(6916),l=r(1702),s=r(1913),c=r(9781),f=r(133),p=r(7293),d=r(2597),h=r(3157),v=r(614),g=r(111),y=r(7976),m=r(2190),b=r(9670),w=r(7908),x=r(5656),E=r(4948),S=r(1340),k=r(9114),O=r(30),R=r(1956),T=r(8006),A=r(1156),C=r(5181),_=r(1236),P=r(3070),N=r(6048),M=r(5296),L=r(206),I=r(1320),j=r(2309),U=r(6200),D=r(3501),F=r(9711),z=r(5112),B=r(6061),V=r(7235),$=r(8003),W=r(9909),H=r(2092).forEach,q=U("hidden"),Q="Symbol",Y=z("toPrimitive"),G=W.set,K=W.getterFor(Q),X=Object.prototype,J=o.Symbol,Z=J&&J.prototype,ee=o.TypeError,te=o.QObject,re=a("JSON","stringify"),ne=_.f,oe=P.f,ae=A.f,ie=M.f,ue=l([].push),le=j("symbols"),se=j("op-symbols"),ce=j("string-to-symbol-registry"),fe=j("symbol-to-string-registry"),pe=j("wks"),de=!te||!te.prototype||!te.prototype.findChild,he=c&&p((function(){return 7!=O(oe({},"a",{get:function(){return oe(this,"a",{value:7}).a}})).a}))?function(e,t,r){var n=ne(X,t);n&&delete X[t],oe(e,t,r),n&&e!==X&&oe(X,t,n)}:oe,ve=function(e,t){var r=le[e]=O(Z);return G(r,{type:Q,tag:e,description:t}),c||(r.description=t),r},ge=function(e,t,r){e===X&&ge(se,t,r),b(e);var n=E(t);return b(r),d(le,n)?(r.enumerable?(d(e,q)&&e[q][n]&&(e[q][n]=!1),r=O(r,{enumerable:k(0,!1)})):(d(e,q)||oe(e,q,k(1,{})),e[q][n]=!0),he(e,n,r)):oe(e,n,r)},ye=function(e,t){b(e);var r=x(t),n=R(r).concat(xe(r));return H(n,(function(t){c&&!u(me,r,t)||ge(e,t,r[t])})),e},me=function(e){var t=E(e),r=u(ie,this,t);return!(this===X&&d(le,t)&&!d(se,t))&&(!(r||!d(this,t)||!d(le,t)||d(this,q)&&this[q][t])||r)},be=function(e,t){var r=x(e),n=E(t);if(r!==X||!d(le,n)||d(se,n)){var o=ne(r,n);return!o||!d(le,n)||d(r,q)&&r[q][n]||(o.enumerable=!0),o}},we=function(e){var t=ae(x(e)),r=[];return H(t,(function(e){d(le,e)||d(D,e)||ue(r,e)})),r},xe=function(e){var t=e===X,r=ae(t?se:x(e)),n=[];return H(r,(function(e){!d(le,e)||t&&!d(X,e)||ue(n,le[e])})),n};if(f||(I(Z=(J=function(){if(y(Z,this))throw ee("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?S(arguments[0]):void 0,t=F(e),r=function(e){this===X&&u(r,se,e),d(this,q)&&d(this[q],t)&&(this[q][t]=!1),he(this,t,k(1,e))};return c&&de&&he(X,t,{configurable:!0,set:r}),ve(t,e)}).prototype,"toString",(function(){return K(this).tag})),I(J,"withoutSetter",(function(e){return ve(F(e),e)})),M.f=me,P.f=ge,N.f=ye,_.f=be,T.f=A.f=we,C.f=xe,B.f=function(e){return ve(z(e),e)},c&&(oe(Z,"description",{configurable:!0,get:function(){return K(this).description}}),s||I(X,"propertyIsEnumerable",me,{unsafe:!0}))),n({global:!0,wrap:!0,forced:!f,sham:!f},{Symbol:J}),H(R(pe),(function(e){V(e)})),n({target:Q,stat:!0,forced:!f},{for:function(e){var t=S(e);if(d(ce,t))return ce[t];var r=J(t);return ce[t]=r,fe[r]=t,r},keyFor:function(e){if(!m(e))throw ee(e+" is not a symbol");if(d(fe,e))return fe[e]},useSetter:function(){de=!0},useSimple:function(){de=!1}}),n({target:"Object",stat:!0,forced:!f,sham:!c},{create:function(e,t){return void 0===t?O(e):ye(O(e),t)},defineProperty:ge,defineProperties:ye,getOwnPropertyDescriptor:be}),n({target:"Object",stat:!0,forced:!f},{getOwnPropertyNames:we,getOwnPropertySymbols:xe}),n({target:"Object",stat:!0,forced:p((function(){C.f(1)}))},{getOwnPropertySymbols:function(e){return C.f(w(e))}}),re&&n({target:"JSON",stat:!0,forced:!f||p((function(){var e=J();return"[null]"!=re([e])||"{}"!=re({a:e})||"{}"!=re(Object(e))}))},{stringify:function(e,t,r){var n=L(arguments),o=t;if((g(t)||void 0!==e)&&!m(e))return h(t)||(t=function(e,t){if(v(o)&&(t=u(o,this,e,t)),!m(t))return t}),n[1]=t,i(re,null,n)}}),!Z[Y]){var Ee=Z.valueOf;I(Z,Y,(function(e){return u(Ee,this)}))}$(J,Q),D[q]=!0},6066:(e,t,r)=>{r(7235)("matchAll")},9007:(e,t,r)=>{r(7235)("match")},3510:(e,t,r)=>{r(7235)("replace")},1840:(e,t,r)=>{r(7235)("search")},6982:(e,t,r)=>{r(7235)("species")},2159:(e,t,r)=>{r(7235)("split")},6649:(e,t,r)=>{r(7235)("toPrimitive")},9341:(e,t,r)=>{r(7235)("toStringTag")},543:(e,t,r)=>{r(7235)("unscopables")},8675:(e,t,r)=>{"use strict";var n=r(260),o=r(6244),a=r(9303),i=n.aTypedArray;(0,n.exportTypedArrayMethod)("at",(function(e){var t=i(this),r=o(t),n=a(e),u=n>=0?n:r+n;return u<0||u>=r?void 0:t[u]}))},2990:(e,t,r)=>{"use strict";var n=r(1702),o=r(260),a=n(r(1048)),i=o.aTypedArray;(0,o.exportTypedArrayMethod)("copyWithin",(function(e,t){return a(i(this),e,t,arguments.length>2?arguments[2]:void 0)}))},8927:(e,t,r)=>{"use strict";var n=r(260),o=r(2092).every,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("every",(function(e){return o(a(this),e,arguments.length>1?arguments[1]:void 0)}))},3105:(e,t,r)=>{"use strict";var n=r(260),o=r(6916),a=r(1285),i=n.aTypedArray;(0,n.exportTypedArrayMethod)("fill",(function(e){var t=arguments.length;return o(a,i(this),e,t>1?arguments[1]:void 0,t>2?arguments[2]:void 0)}))},5035:(e,t,r)=>{"use strict";var n=r(260),o=r(2092).filter,a=r(3074),i=n.aTypedArray;(0,n.exportTypedArrayMethod)("filter",(function(e){var t=o(i(this),e,arguments.length>1?arguments[1]:void 0);return a(this,t)}))},7174:(e,t,r)=>{"use strict";var n=r(260),o=r(2092).findIndex,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("findIndex",(function(e){return o(a(this),e,arguments.length>1?arguments[1]:void 0)}))},4345:(e,t,r)=>{"use strict";var n=r(260),o=r(2092).find,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("find",(function(e){return o(a(this),e,arguments.length>1?arguments[1]:void 0)}))},4197:(e,t,r)=>{r(9843)("Float32",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},6495:(e,t,r)=>{r(9843)("Float64",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},2846:(e,t,r)=>{"use strict";var n=r(260),o=r(2092).forEach,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("forEach",(function(e){o(a(this),e,arguments.length>1?arguments[1]:void 0)}))},8145:(e,t,r)=>{"use strict";var n=r(3832);(0,r(260).exportTypedArrayStaticMethod)("from",r(7321),n)},4731:(e,t,r)=>{"use strict";var n=r(260),o=r(1318).includes,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("includes",(function(e){return o(a(this),e,arguments.length>1?arguments[1]:void 0)}))},7209:(e,t,r)=>{"use strict";var n=r(260),o=r(1318).indexOf,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("indexOf",(function(e){return o(a(this),e,arguments.length>1?arguments[1]:void 0)}))},5109:(e,t,r)=>{r(9843)("Int16",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},5125:(e,t,r)=>{r(9843)("Int32",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},7145:(e,t,r)=>{r(9843)("Int8",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},6319:(e,t,r)=>{"use strict";var n=r(7854),o=r(7293),a=r(1702),i=r(260),u=r(6992),l=r(5112)("iterator"),s=n.Uint8Array,c=a(u.values),f=a(u.keys),p=a(u.entries),d=i.aTypedArray,h=i.exportTypedArrayMethod,v=s&&s.prototype,g=!o((function(){v[l].call([1])})),y=!!v&&v.values&&v[l]===v.values&&"values"===v.values.name,m=function(){return c(d(this))};h("entries",(function(){return p(d(this))}),g),h("keys",(function(){return f(d(this))}),g),h("values",m,g||!y,{name:"values"}),h(l,m,g||!y,{name:"values"})},8867:(e,t,r)=>{"use strict";var n=r(260),o=r(1702),a=n.aTypedArray,i=n.exportTypedArrayMethod,u=o([].join);i("join",(function(e){return u(a(this),e)}))},7789:(e,t,r)=>{"use strict";var n=r(260),o=r(2104),a=r(6583),i=n.aTypedArray;(0,n.exportTypedArrayMethod)("lastIndexOf",(function(e){var t=arguments.length;return o(a,i(this),t>1?[e,arguments[1]]:[e])}))},3739:(e,t,r)=>{"use strict";var n=r(260),o=r(2092).map,a=r(6304),i=n.aTypedArray;(0,n.exportTypedArrayMethod)("map",(function(e){return o(i(this),e,arguments.length>1?arguments[1]:void 0,(function(e,t){return new(a(e))(t)}))}))},5206:(e,t,r)=>{"use strict";var n=r(260),o=r(3832),a=n.aTypedArrayConstructor;(0,n.exportTypedArrayStaticMethod)("of",(function(){for(var e=0,t=arguments.length,r=new(a(this))(t);t>e;)r[e]=arguments[e++];return r}),o)},4483:(e,t,r)=>{"use strict";var n=r(260),o=r(3671).right,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("reduceRight",(function(e){var t=arguments.length;return o(a(this),e,t,t>1?arguments[1]:void 0)}))},9368:(e,t,r)=>{"use strict";var n=r(260),o=r(3671).left,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("reduce",(function(e){var t=arguments.length;return o(a(this),e,t,t>1?arguments[1]:void 0)}))},2056:(e,t,r)=>{"use strict";var n=r(260),o=n.aTypedArray,a=n.exportTypedArrayMethod,i=Math.floor;a("reverse",(function(){for(var e,t=this,r=o(t).length,n=i(r/2),a=0;a<n;)e=t[a],t[a++]=t[--r],t[r]=e;return t}))},3462:(e,t,r)=>{"use strict";var n=r(7854),o=r(6916),a=r(260),i=r(6244),u=r(4590),l=r(7908),s=r(7293),c=n.RangeError,f=n.Int8Array,p=f&&f.prototype,d=p&&p.set,h=a.aTypedArray,v=a.exportTypedArrayMethod,g=!s((function(){var e=new Uint8ClampedArray(2);return o(d,e,{length:1,0:3},1),3!==e[1]})),y=g&&a.NATIVE_ARRAY_BUFFER_VIEWS&&s((function(){var e=new f(2);return e.set(1),e.set("2",1),0!==e[0]||2!==e[1]}));v("set",(function(e){h(this);var t=u(arguments.length>1?arguments[1]:void 0,1),r=l(e);if(g)return o(d,this,r,t);var n=this.length,a=i(r),s=0;if(a+t>n)throw c("Wrong length");for(;s<a;)this[t+s]=r[s++]}),!g||y)},678:(e,t,r)=>{"use strict";var n=r(260),o=r(6304),a=r(7293),i=r(206),u=n.aTypedArray;(0,n.exportTypedArrayMethod)("slice",(function(e,t){for(var r=i(u(this),e,t),n=o(this),a=0,l=r.length,s=new n(l);l>a;)s[a]=r[a++];return s}),a((function(){new Int8Array(1).slice()})))},7462:(e,t,r)=>{"use strict";var n=r(260),o=r(2092).some,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("some",(function(e){return o(a(this),e,arguments.length>1?arguments[1]:void 0)}))},3824:(e,t,r)=>{"use strict";var n=r(7854),o=r(1702),a=r(7293),i=r(9662),u=r(4362),l=r(260),s=r(8886),c=r(256),f=r(7392),p=r(8008),d=n.Array,h=l.aTypedArray,v=l.exportTypedArrayMethod,g=n.Uint16Array,y=g&&o(g.prototype.sort),m=!(!y||a((function(){y(new g(2),null)}))&&a((function(){y(new g(2),{})}))),b=!!y&&!a((function(){if(f)return f<74;if(s)return s<67;if(c)return!0;if(p)return p<602;var e,t,r=new g(516),n=d(516);for(e=0;e<516;e++)t=e%4,r[e]=515-e,n[e]=e-2*t+3;for(y(r,(function(e,t){return(e/4|0)-(t/4|0)})),e=0;e<516;e++)if(r[e]!==n[e])return!0}));v("sort",(function(e){return void 0!==e&&i(e),b?y(this,e):u(h(this),function(e){return function(t,r){return void 0!==e?+e(t,r)||0:r!=r?-1:t!=t?1:0===t&&0===r?1/t>0&&1/r<0?1:-1:t>r}}(e))}),!b||m)},5021:(e,t,r)=>{"use strict";var n=r(260),o=r(7466),a=r(1400),i=r(6304),u=n.aTypedArray;(0,n.exportTypedArrayMethod)("subarray",(function(e,t){var r=u(this),n=r.length,l=a(e,n);return new(i(r))(r.buffer,r.byteOffset+l*r.BYTES_PER_ELEMENT,o((void 0===t?n:a(t,n))-l))}))},2974:(e,t,r)=>{"use strict";var n=r(7854),o=r(2104),a=r(260),i=r(7293),u=r(206),l=n.Int8Array,s=a.aTypedArray,c=a.exportTypedArrayMethod,f=[].toLocaleString,p=!!l&&i((function(){f.call(new l(1))}));c("toLocaleString",(function(){return o(f,p?u(s(this)):s(this),u(arguments))}),i((function(){return[1,2].toLocaleString()!=new l([1,2]).toLocaleString()}))||!i((function(){l.prototype.toLocaleString.call([1,2])})))},5016:(e,t,r)=>{"use strict";var n=r(260).exportTypedArrayMethod,o=r(7293),a=r(7854),i=r(1702),u=a.Uint8Array,l=u&&u.prototype||{},s=[].toString,c=i([].join);o((function(){s.call({})}))&&(s=function(){return c(this)});var f=l.toString!=s;n("toString",s,f)},8255:(e,t,r)=>{r(9843)("Uint16",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},9135:(e,t,r)=>{r(9843)("Uint32",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},2472:(e,t,r)=>{r(9843)("Uint8",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},9743:(e,t,r)=>{r(9843)("Uint8",(function(e){return function(t,r,n){return e(this,t,r,n)}}),!0)},8221:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(1340),i=String.fromCharCode,u=o("".charAt),l=o(/./.exec),s=o("".slice),c=/^[\da-f]{2}$/i,f=/^[\da-f]{4}$/i;n({global:!0},{unescape:function(e){for(var t,r,n=a(e),o="",p=n.length,d=0;d<p;){if("%"===(t=u(n,d++)))if("u"===u(n,d)){if(r=s(n,d+1,d+5),l(f,r)){o+=i(parseInt(r,16)),d+=5;continue}}else if(r=s(n,d,d+2),l(c,r)){o+=i(parseInt(r,16)),d+=2;continue}o+=t}return o}})},4129:(e,t,r)=>{"use strict";var n,o=r(7854),a=r(1702),i=r(2248),u=r(2423),l=r(7710),s=r(9320),c=r(111),f=r(2050),p=r(9909).enforce,d=r(8536),h=!o.ActiveXObject&&"ActiveXObject"in o,v=function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},g=l("WeakMap",v,s);if(d&&h){n=s.getConstructor(v,"WeakMap",!0),u.enable();var y=g.prototype,m=a(y.delete),b=a(y.has),w=a(y.get),x=a(y.set);i(y,{delete:function(e){if(c(e)&&!f(e)){var t=p(this);return t.frozen||(t.frozen=new n),m(this,e)||t.frozen.delete(e)}return m(this,e)},has:function(e){if(c(e)&&!f(e)){var t=p(this);return t.frozen||(t.frozen=new n),b(this,e)||t.frozen.has(e)}return b(this,e)},get:function(e){if(c(e)&&!f(e)){var t=p(this);return t.frozen||(t.frozen=new n),b(this,e)?w(this,e):t.frozen.get(e)}return w(this,e)},set:function(e,t){if(c(e)&&!f(e)){var r=p(this);r.frozen||(r.frozen=new n),b(this,e)?x(this,e,t):r.frozen.set(e,t)}else x(this,e,t);return this}})}},8478:(e,t,r)=>{"use strict";r(7710)("WeakSet",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),r(9320))},4747:(e,t,r)=>{var n=r(7854),o=r(8324),a=r(8509),i=r(8533),u=r(8880),l=function(e){if(e&&e.forEach!==i)try{u(e,"forEach",i)}catch(t){e.forEach=i}};for(var s in o)o[s]&&l(n[s]&&n[s].prototype);l(a)},3948:(e,t,r)=>{var n=r(7854),o=r(8324),a=r(8509),i=r(6992),u=r(8880),l=r(5112),s=l("iterator"),c=l("toStringTag"),f=i.values,p=function(e,t){if(e){if(e[s]!==f)try{u(e,s,f)}catch(t){e[s]=f}if(e[c]||u(e,c,t),o[t])for(var r in i)if(e[r]!==i[r])try{u(e,r,i[r])}catch(t){e[r]=i[r]}}};for(var d in o)p(n[d]&&n[d].prototype,d);p(a,"DOMTokenList")},7714:(e,t,r)=>{"use strict";var n=r(2109),o=r(4038),a=r(5005),i=r(7293),u=r(30),l=r(9114),s=r(3070).f,c=r(6048).f,f=r(1320),p=r(2597),d=r(5787),h=r(9670),v=r(7762),g=r(6277),y=r(3678),m=r(7741),b=r(9909),w=r(9781),x=r(1913),E="DOMException",S=a("Error"),k=a(E)||function(){try{(new(a("MessageChannel")||o("worker_threads").MessageChannel)).port1.postMessage(new WeakMap)}catch(e){if("DATA_CLONE_ERR"==e.name&&25==e.code)return e.constructor}}(),O=k&&k.prototype,R=S.prototype,T=b.set,A=b.getterFor(E),C="stack"in S(E),_=function(e){return p(y,e)&&y[e].m?y[e].c:0},P=function(){d(this,N);var e=arguments.length,t=g(e<1?void 0:arguments[0]),r=g(e<2?void 0:arguments[1],"Error"),n=_(r);if(T(this,{type:E,name:r,message:t,code:n}),w||(this.name=r,this.message=t,this.code=n),C){var o=S(t);o.name=E,s(this,"stack",l(1,m(o.stack,1)))}},N=P.prototype=u(R),M=function(e){return{enumerable:!0,configurable:!0,get:e}},L=function(e){return M((function(){return A(this)[e]}))};w&&c(N,{name:L("name"),message:L("message"),code:L("code")}),s(N,"constructor",l(1,P));var I=i((function(){return!(new k instanceof S)})),j=I||i((function(){return R.toString!==v||"2: 1"!==String(new k(1,2))})),U=I||i((function(){return 25!==new k(1,"DataCloneError").code})),D=I||25!==k.DATA_CLONE_ERR||25!==O.DATA_CLONE_ERR,F=x?j||U||D:I;n({global:!0,forced:F},{DOMException:F?P:k});var z=a(E),B=z.prototype;for(var V in j&&(x||k===z)&&f(B,"toString",v),U&&w&&k===z&&s(B,"code",M((function(){return _(h(this).name)}))),y)if(p(y,V)){var $=y[V],W=$.s,H=l(6,$.c);p(z,W)||s(z,W,H),p(B,W)||s(B,W,H)}},2801:(e,t,r)=>{"use strict";var n=r(2109),o=r(5005),a=r(9114),i=r(3070).f,u=r(2597),l=r(5787),s=r(9587),c=r(6277),f=r(3678),p=r(7741),d=r(1913),h="DOMException",v=o("Error"),g=o(h),y=function(){l(this,m);var e=arguments.length,t=c(e<1?void 0:arguments[0]),r=c(e<2?void 0:arguments[1],"Error"),n=new g(t,r),o=v(t);return o.name=h,i(n,"stack",a(1,p(o.stack,1))),s(n,this,y),n},m=y.prototype=g.prototype,b="stack"in v(h),w="stack"in new g(1,2),x=b&&!w;n({global:!0,forced:d||x},{DOMException:x?y:g});var E=o(h),S=E.prototype;if(S.constructor!==E)for(var k in d||i(S,"constructor",a(1,E)),f)if(u(f,k)){var O=f[k],R=O.s;u(E,R)||i(E,R,a(6,O.c))}},1174:(e,t,r)=>{var n=r(5005),o="DOMException";r(8003)(n(o),o)},4633:(e,t,r)=>{var n=r(2109),o=r(7854),a=r(261);n({global:!0,bind:!0,enumerable:!0,forced:!o.setImmediate||!o.clearImmediate},{setImmediate:a.set,clearImmediate:a.clear})},5844:(e,t,r)=>{var n=r(2109),o=r(7854),a=r(5948),i=r(5268),u=o.process;n({global:!0,enumerable:!0,noTargetGet:!0},{queueMicrotask:function(e){var t=i&&u.domain;a(t?t.bind(e):e)}})},1295:(e,t,r)=>{var n,o=r(1913),a=r(2109),i=r(7854),u=r(5005),l=r(1702),s=r(7293),c=r(9711),f=r(614),p=r(4411),d=r(111),h=r(2190),v=r(408),g=r(9670),y=r(648),m=r(2597),b=r(6135),w=r(8880),x=r(6244),E=r(7066),S=r(2914),k=i.Object,O=i.Date,R=i.Error,T=i.EvalError,A=i.RangeError,C=i.ReferenceError,_=i.SyntaxError,P=i.TypeError,N=i.URIError,M=i.PerformanceMark,L=i.WebAssembly,I=L&&L.CompileError||R,j=L&&L.LinkError||R,U=L&&L.RuntimeError||R,D=u("DOMException"),F=u("Set"),z=u("Map"),B=z.prototype,V=l(B.has),$=l(B.get),W=l(B.set),H=l(F.prototype.add),q=u("Object","keys"),Q=l([].push),Y=l((!0).valueOf),G=l(1..valueOf),K=l("".valueOf),X=l(E),J=l(O.prototype.getTime),Z=c("structuredClone"),ee="DataCloneError",te="Transferring",re=function(e){return!s((function(){var t=new i.Set([7]),r=e(t),n=e(k(7));return r==t||!r.has(7)||"object"!=typeof n||7!=n}))&&e},ne=i.structuredClone,oe=o||(n=ne,!(!s((function(){var e=n(new i.AggregateError([1],Z,{cause:3}));return"AggregateError"!=e.name||1!=e.errors[0]||e.message!=Z||3!=e.cause}))&&n)),ae=!ne&&re((function(e){return new M(Z,{detail:e}).detail})),ie=re(ne)||ae,ue=function(e){throw new D("Uncloneable type: "+e,ee)},le=function(e,t){throw new D((t||"Cloning")+" of "+e+" cannot be properly polyfilled in this engine",ee)},se=function(e,t){if(h(e)&&ue("Symbol"),!d(e))return e;if(t){if(V(t,e))return $(t,e)}else t=new z;var r,n,o,a,l,s,c,v,g,E,M=y(e),L=!1;switch(M){case"Array":o=[],L=!0;break;case"Object":o={},L=!0;break;case"Map":o=new z,L=!0;break;case"Set":o=new F,L=!0;break;case"RegExp":o=new RegExp(e.source,"flags"in e?e.flags:X(e));break;case"Error":switch(n=e.name){case"AggregateError":o=u("AggregateError")([]);break;case"EvalError":o=T();break;case"RangeError":o=A();break;case"ReferenceError":o=C();break;case"SyntaxError":o=_();break;case"TypeError":o=P();break;case"URIError":o=N();break;case"CompileError":o=I();break;case"LinkError":o=j();break;case"RuntimeError":o=U();break;default:o=R()}L=!0;break;case"DOMException":o=new D(e.message,e.name),L=!0;break;case"DataView":case"Int8Array":case"Uint8Array":case"Uint8ClampedArray":case"Int16Array":case"Uint16Array":case"Int32Array":case"Uint32Array":case"Float32Array":case"Float64Array":case"BigInt64Array":case"BigUint64Array":r=i[M],d(r)||le(M),o=new r(se(e.buffer,t),e.byteOffset,"DataView"===M?e.byteLength:e.length);break;case"DOMQuad":try{o=new DOMQuad(se(e.p1,t),se(e.p2,t),se(e.p3,t),se(e.p4,t))}catch(t){ie?o=ie(e):le(M)}break;case"FileList":if(r=i.DataTransfer,p(r)){for(a=new r,l=0,s=x(e);l<s;l++)a.items.add(se(e[l],t));o=a.files}else ie?o=ie(e):le(M);break;case"ImageData":try{o=new ImageData(se(e.data,t),e.width,e.height,{colorSpace:e.colorSpace})}catch(t){ie?o=ie(e):le(M)}break;default:if(ie)o=ie(e);else switch(M){case"BigInt":o=k(e.valueOf());break;case"Boolean":o=k(Y(e));break;case"Number":o=k(G(e));break;case"String":o=k(K(e));break;case"Date":o=new O(J(e));break;case"ArrayBuffer":(r=i.DataView)||"function"==typeof e.slice||le(M);try{if("function"==typeof e.slice)o=e.slice(0);else for(s=e.byteLength,o=new ArrayBuffer(s),g=new r(e),E=new r(o),l=0;l<s;l++)E.setUint8(l,g.getUint8(l))}catch(e){throw new D("ArrayBuffer is detached",ee)}break;case"SharedArrayBuffer":o=e;break;case"Blob":try{o=e.slice(0,e.size,e.type)}catch(e){le(M)}break;case"DOMPoint":case"DOMPointReadOnly":r=i[M];try{o=r.fromPoint?r.fromPoint(e):new r(e.x,e.y,e.z,e.w)}catch(e){le(M)}break;case"DOMRect":case"DOMRectReadOnly":r=i[M];try{o=r.fromRect?r.fromRect(e):new r(e.x,e.y,e.width,e.height)}catch(e){le(M)}break;case"DOMMatrix":case"DOMMatrixReadOnly":r=i[M];try{o=r.fromMatrix?r.fromMatrix(e):new r(e)}catch(e){le(M)}break;case"AudioData":case"VideoFrame":f(e.clone)||le(M);try{o=e.clone()}catch(e){ue(M)}break;case"File":try{o=new File([e],e.name,e)}catch(e){le(M)}break;case"CryptoKey":case"GPUCompilationMessage":case"GPUCompilationInfo":case"ImageBitmap":case"RTCCertificate":case"WebAssembly.Module":le(M);default:ue(M)}}if(W(t,e,o),L)switch(M){case"Array":case"Object":for(c=q(e),l=0,s=x(c);l<s;l++)v=c[l],b(o,v,se(e[v],t));break;case"Map":e.forEach((function(e,r){W(o,se(r,t),se(e,t))}));break;case"Set":e.forEach((function(e){H(o,se(e,t))}));break;case"Error":w(o,"message",se(e.message,t)),m(e,"cause")&&w(o,"cause",se(e.cause,t)),"AggregateError"==n&&(o.errors=se(e.errors,t));case"DOMException":S&&w(o,"stack",se(e.stack,t))}return o},ce=ne&&!s((function(){var e=new ArrayBuffer(8),t=ne(e,{transfer:[e]});return 0!=e.byteLength||8!=t.byteLength})),fe=function(e,t){if(!d(e))throw P("Transfer option cannot be converted to a sequence");var r=[];v(e,(function(e){Q(r,g(e))}));var n,o,a,u,l,s,c=0,h=x(r);if(ce)for(u=ne(r,{transfer:r});c<h;)W(t,r[c],u[c++]);else for(;c<h;){if(n=r[c++],V(t,n))throw new D("Duplicate transferable",ee);switch(o=y(n)){case"ImageBitmap":a=i.OffscreenCanvas,p(a)||le(o,te);try{(s=new a(n.width,n.height)).getContext("bitmaprenderer").transferFromImageBitmap(n),l=s.transferToImageBitmap()}catch(e){}break;case"AudioData":case"VideoFrame":f(n.clone)&&f(n.close)||le(o,te);try{l=n.clone(),n.close()}catch(e){}break;case"ArrayBuffer":case"MessagePort":case"OffscreenCanvas":case"ReadableStream":case"TransformStream":case"WritableStream":le(o,te)}if(void 0===l)throw new D("This object cannot be transferred: "+o,ee);W(t,n,l)}};a({global:!0,enumerable:!0,sham:!ce,forced:oe},{structuredClone:function(e){var t,r=arguments.length>1?g(arguments[1]):void 0,n=r?r.transfer:void 0;return void 0!==n&&(t=new z,fe(n,t)),se(e,t)}})},2564:(e,t,r)=>{var n=r(2109),o=r(7854),a=r(2104),i=r(614),u=r(8113),l=r(206),s=/MSIE .\./.test(u),c=o.Function,f=function(e){return function(t,r){var n=arguments.length>2,o=n?l(arguments,2):void 0;return e(n?function(){a(i(t)?t:c(t),this,o)}:t,r)}};n({global:!0,bind:!0,forced:s},{setTimeout:f(o.setTimeout),setInterval:f(o.setInterval)})},1637:(e,t,r)=>{"use strict";r(6992);var n=r(2109),o=r(7854),a=r(5005),i=r(6916),u=r(1702),l=r(590),s=r(1320),c=r(2248),f=r(8003),p=r(4994),d=r(9909),h=r(5787),v=r(614),g=r(2597),y=r(9974),m=r(648),b=r(9670),w=r(111),x=r(1340),E=r(30),S=r(9114),k=r(8554),O=r(1246),R=r(5112),T=r(4362),A=R("iterator"),C="URLSearchParams",_="URLSearchParamsIterator",P=d.set,N=d.getterFor(C),M=d.getterFor(_),L=a("fetch"),I=a("Request"),j=a("Headers"),U=I&&I.prototype,D=j&&j.prototype,F=o.RegExp,z=o.TypeError,B=o.decodeURIComponent,V=o.encodeURIComponent,$=u("".charAt),W=u([].join),H=u([].push),q=u("".replace),Q=u([].shift),Y=u([].splice),G=u("".split),K=u("".slice),X=/\+/g,J=Array(4),Z=function(e){return J[e-1]||(J[e-1]=F("((?:%[\\da-f]{2}){"+e+"})","gi"))},ee=function(e){try{return B(e)}catch(t){return e}},te=function(e){var t=q(e,X," "),r=4;try{return B(t)}catch(e){for(;r;)t=q(t,Z(r--),ee);return t}},re=/[!'()~]|%20/g,ne={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},oe=function(e){return ne[e]},ae=function(e){return q(V(e),re,oe)},ie=function(e,t){if(e<t)throw z("Not enough arguments")},ue=p((function(e,t){P(this,{type:_,iterator:k(N(e).entries),kind:t})}),"Iterator",(function(){var e=M(this),t=e.kind,r=e.iterator.next(),n=r.value;return r.done||(r.value="keys"===t?n.key:"values"===t?n.value:[n.key,n.value]),r}),!0),le=function(e){this.entries=[],this.url=null,void 0!==e&&(w(e)?this.parseObject(e):this.parseQuery("string"==typeof e?"?"===$(e,0)?K(e,1):e:x(e)))};le.prototype={type:C,bindURL:function(e){this.url=e,this.update()},parseObject:function(e){var t,r,n,o,a,u,l,s=O(e);if(s)for(r=(t=k(e,s)).next;!(n=i(r,t)).done;){if(a=(o=k(b(n.value))).next,(u=i(a,o)).done||(l=i(a,o)).done||!i(a,o).done)throw z("Expected sequence with length 2");H(this.entries,{key:x(u.value),value:x(l.value)})}else for(var c in e)g(e,c)&&H(this.entries,{key:c,value:x(e[c])})},parseQuery:function(e){if(e)for(var t,r,n=G(e,"&"),o=0;o<n.length;)(t=n[o++]).length&&(r=G(t,"="),H(this.entries,{key:te(Q(r)),value:te(W(r,"="))}))},serialize:function(){for(var e,t=this.entries,r=[],n=0;n<t.length;)e=t[n++],H(r,ae(e.key)+"="+ae(e.value));return W(r,"&")},update:function(){this.entries.length=0,this.parseQuery(this.url.query)},updateURL:function(){this.url&&this.url.update()}};var se=function(){h(this,ce);var e=arguments.length>0?arguments[0]:void 0;P(this,new le(e))},ce=se.prototype;if(c(ce,{append:function(e,t){ie(arguments.length,2);var r=N(this);H(r.entries,{key:x(e),value:x(t)}),r.updateURL()},delete:function(e){ie(arguments.length,1);for(var t=N(this),r=t.entries,n=x(e),o=0;o<r.length;)r[o].key===n?Y(r,o,1):o++;t.updateURL()},get:function(e){ie(arguments.length,1);for(var t=N(this).entries,r=x(e),n=0;n<t.length;n++)if(t[n].key===r)return t[n].value;return null},getAll:function(e){ie(arguments.length,1);for(var t=N(this).entries,r=x(e),n=[],o=0;o<t.length;o++)t[o].key===r&&H(n,t[o].value);return n},has:function(e){ie(arguments.length,1);for(var t=N(this).entries,r=x(e),n=0;n<t.length;)if(t[n++].key===r)return!0;return!1},set:function(e,t){ie(arguments.length,1);for(var r,n=N(this),o=n.entries,a=!1,i=x(e),u=x(t),l=0;l<o.length;l++)(r=o[l]).key===i&&(a?Y(o,l--,1):(a=!0,r.value=u));a||H(o,{key:i,value:u}),n.updateURL()},sort:function(){var e=N(this);T(e.entries,(function(e,t){return e.key>t.key?1:-1})),e.updateURL()},forEach:function(e){for(var t,r=N(this).entries,n=y(e,arguments.length>1?arguments[1]:void 0),o=0;o<r.length;)n((t=r[o++]).value,t.key,this)},keys:function(){return new ue(this,"keys")},values:function(){return new ue(this,"values")},entries:function(){return new ue(this,"entries")}},{enumerable:!0}),s(ce,A,ce.entries,{name:"entries"}),s(ce,"toString",(function(){return N(this).serialize()}),{enumerable:!0}),f(se,C),n({global:!0,forced:!l},{URLSearchParams:se}),!l&&v(j)){var fe=u(D.has),pe=u(D.set),de=function(e){if(w(e)){var t,r=e.body;if(m(r)===C)return t=e.headers?new j(e.headers):new j,fe(t,"content-type")||pe(t,"content-type","application/x-www-form-urlencoded;charset=UTF-8"),E(e,{body:S(0,x(r)),headers:S(0,t)})}return e};if(v(L)&&n({global:!0,enumerable:!0,forced:!0},{fetch:function(e){return L(e,arguments.length>1?de(arguments[1]):{})}}),v(I)){var he=function(e){return h(this,U),new I(e,arguments.length>1?de(arguments[1]):{})};U.constructor=he,he.prototype=U,n({global:!0,forced:!0},{Request:he})}}e.exports={URLSearchParams:se,getState:N}},285:(e,t,r)=>{"use strict";r(8783);var n,o=r(2109),a=r(9781),i=r(590),u=r(7854),l=r(9974),s=r(1702),c=r(6048).f,f=r(1320),p=r(5787),d=r(2597),h=r(1574),v=r(8457),g=r(1589),y=r(8710).codeAt,m=r(3197),b=r(1340),w=r(8003),x=r(1637),E=r(9909),S=E.set,k=E.getterFor("URL"),O=x.URLSearchParams,R=x.getState,T=u.URL,A=u.TypeError,C=u.parseInt,_=Math.floor,P=Math.pow,N=s("".charAt),M=s(/./.exec),L=s([].join),I=s(1..toString),j=s([].pop),U=s([].push),D=s("".replace),F=s([].shift),z=s("".split),B=s("".slice),V=s("".toLowerCase),$=s([].unshift),W="Invalid scheme",H="Invalid host",q="Invalid port",Q=/[a-z]/i,Y=/[\d+-.a-z]/i,G=/\d/,K=/^0x/i,X=/^[0-7]+$/,J=/^\d+$/,Z=/^[\da-f]+$/i,ee=/[\0\t\n\r #%/:<>?@[\\\]^|]/,te=/[\0\t\n\r #/:<>?@[\\\]^|]/,re=/^[\u0000-\u0020]+|[\u0000-\u0020]+$/g,ne=/[\t\n\r]/g,oe=function(e){var t,r,n,o;if("number"==typeof e){for(t=[],r=0;r<4;r++)$(t,e%256),e=_(e/256);return L(t,".")}if("object"==typeof e){for(t="",n=function(e){for(var t=null,r=1,n=null,o=0,a=0;a<8;a++)0!==e[a]?(o>r&&(t=n,r=o),n=null,o=0):(null===n&&(n=a),++o);return o>r&&(t=n,r=o),t}(e),r=0;r<8;r++)o&&0===e[r]||(o&&(o=!1),n===r?(t+=r?":":"::",o=!0):(t+=I(e[r],16),r<7&&(t+=":")));return"["+t+"]"}return e},ae={},ie=h({},ae,{" ":1,'"':1,"<":1,">":1,"`":1}),ue=h({},ie,{"#":1,"?":1,"{":1,"}":1}),le=h({},ue,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),se=function(e,t){var r=y(e,0);return r>32&&r<127&&!d(t,e)?e:encodeURIComponent(e)},ce={ftp:21,file:null,http:80,https:443,ws:80,wss:443},fe=function(e,t){var r;return 2==e.length&&M(Q,N(e,0))&&(":"==(r=N(e,1))||!t&&"|"==r)},pe=function(e){var t;return e.length>1&&fe(B(e,0,2))&&(2==e.length||"/"===(t=N(e,2))||"\\"===t||"?"===t||"#"===t)},de=function(e){return"."===e||"%2e"===V(e)},he={},ve={},ge={},ye={},me={},be={},we={},xe={},Ee={},Se={},ke={},Oe={},Re={},Te={},Ae={},Ce={},_e={},Pe={},Ne={},Me={},Le={},Ie=function(e,t,r){var n,o,a,i=b(e);if(t){if(o=this.parse(i))throw A(o);this.searchParams=null}else{if(void 0!==r&&(n=new Ie(r,!0)),o=this.parse(i,null,n))throw A(o);(a=R(new O)).bindURL(this),this.searchParams=a}};Ie.prototype={type:"URL",parse:function(e,t,r){var o,a,i,u,l,s=this,c=t||he,f=0,p="",h=!1,y=!1,m=!1;for(e=b(e),t||(s.scheme="",s.username="",s.password="",s.host=null,s.port=null,s.path=[],s.query=null,s.fragment=null,s.cannotBeABaseURL=!1,e=D(e,re,"")),e=D(e,ne,""),o=v(e);f<=o.length;){switch(a=o[f],c){case he:if(!a||!M(Q,a)){if(t)return W;c=ge;continue}p+=V(a),c=ve;break;case ve:if(a&&(M(Y,a)||"+"==a||"-"==a||"."==a))p+=V(a);else{if(":"!=a){if(t)return W;p="",c=ge,f=0;continue}if(t&&(s.isSpecial()!=d(ce,p)||"file"==p&&(s.includesCredentials()||null!==s.port)||"file"==s.scheme&&!s.host))return;if(s.scheme=p,t)return void(s.isSpecial()&&ce[s.scheme]==s.port&&(s.port=null));p="","file"==s.scheme?c=Te:s.isSpecial()&&r&&r.scheme==s.scheme?c=ye:s.isSpecial()?c=xe:"/"==o[f+1]?(c=me,f++):(s.cannotBeABaseURL=!0,U(s.path,""),c=Ne)}break;case ge:if(!r||r.cannotBeABaseURL&&"#"!=a)return W;if(r.cannotBeABaseURL&&"#"==a){s.scheme=r.scheme,s.path=g(r.path),s.query=r.query,s.fragment="",s.cannotBeABaseURL=!0,c=Le;break}c="file"==r.scheme?Te:be;continue;case ye:if("/"!=a||"/"!=o[f+1]){c=be;continue}c=Ee,f++;break;case me:if("/"==a){c=Se;break}c=Pe;continue;case be:if(s.scheme=r.scheme,a==n)s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=g(r.path),s.query=r.query;else if("/"==a||"\\"==a&&s.isSpecial())c=we;else if("?"==a)s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=g(r.path),s.query="",c=Me;else{if("#"!=a){s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=g(r.path),s.path.length--,c=Pe;continue}s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=g(r.path),s.query=r.query,s.fragment="",c=Le}break;case we:if(!s.isSpecial()||"/"!=a&&"\\"!=a){if("/"!=a){s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,c=Pe;continue}c=Se}else c=Ee;break;case xe:if(c=Ee,"/"!=a||"/"!=N(p,f+1))continue;f++;break;case Ee:if("/"!=a&&"\\"!=a){c=Se;continue}break;case Se:if("@"==a){h&&(p="%40"+p),h=!0,i=v(p);for(var w=0;w<i.length;w++){var x=i[w];if(":"!=x||m){var E=se(x,le);m?s.password+=E:s.username+=E}else m=!0}p=""}else if(a==n||"/"==a||"?"==a||"#"==a||"\\"==a&&s.isSpecial()){if(h&&""==p)return"Invalid authority";f-=v(p).length+1,p="",c=ke}else p+=a;break;case ke:case Oe:if(t&&"file"==s.scheme){c=Ce;continue}if(":"!=a||y){if(a==n||"/"==a||"?"==a||"#"==a||"\\"==a&&s.isSpecial()){if(s.isSpecial()&&""==p)return H;if(t&&""==p&&(s.includesCredentials()||null!==s.port))return;if(u=s.parseHost(p))return u;if(p="",c=_e,t)return;continue}"["==a?y=!0:"]"==a&&(y=!1),p+=a}else{if(""==p)return H;if(u=s.parseHost(p))return u;if(p="",c=Re,t==Oe)return}break;case Re:if(!M(G,a)){if(a==n||"/"==a||"?"==a||"#"==a||"\\"==a&&s.isSpecial()||t){if(""!=p){var S=C(p,10);if(S>65535)return q;s.port=s.isSpecial()&&S===ce[s.scheme]?null:S,p=""}if(t)return;c=_e;continue}return q}p+=a;break;case Te:if(s.scheme="file","/"==a||"\\"==a)c=Ae;else{if(!r||"file"!=r.scheme){c=Pe;continue}if(a==n)s.host=r.host,s.path=g(r.path),s.query=r.query;else if("?"==a)s.host=r.host,s.path=g(r.path),s.query="",c=Me;else{if("#"!=a){pe(L(g(o,f),""))||(s.host=r.host,s.path=g(r.path),s.shortenPath()),c=Pe;continue}s.host=r.host,s.path=g(r.path),s.query=r.query,s.fragment="",c=Le}}break;case Ae:if("/"==a||"\\"==a){c=Ce;break}r&&"file"==r.scheme&&!pe(L(g(o,f),""))&&(fe(r.path[0],!0)?U(s.path,r.path[0]):s.host=r.host),c=Pe;continue;case Ce:if(a==n||"/"==a||"\\"==a||"?"==a||"#"==a){if(!t&&fe(p))c=Pe;else if(""==p){if(s.host="",t)return;c=_e}else{if(u=s.parseHost(p))return u;if("localhost"==s.host&&(s.host=""),t)return;p="",c=_e}continue}p+=a;break;case _e:if(s.isSpecial()){if(c=Pe,"/"!=a&&"\\"!=a)continue}else if(t||"?"!=a)if(t||"#"!=a){if(a!=n&&(c=Pe,"/"!=a))continue}else s.fragment="",c=Le;else s.query="",c=Me;break;case Pe:if(a==n||"/"==a||"\\"==a&&s.isSpecial()||!t&&("?"==a||"#"==a)){if(".."===(l=V(l=p))||"%2e."===l||".%2e"===l||"%2e%2e"===l?(s.shortenPath(),"/"==a||"\\"==a&&s.isSpecial()||U(s.path,"")):de(p)?"/"==a||"\\"==a&&s.isSpecial()||U(s.path,""):("file"==s.scheme&&!s.path.length&&fe(p)&&(s.host&&(s.host=""),p=N(p,0)+":"),U(s.path,p)),p="","file"==s.scheme&&(a==n||"?"==a||"#"==a))for(;s.path.length>1&&""===s.path[0];)F(s.path);"?"==a?(s.query="",c=Me):"#"==a&&(s.fragment="",c=Le)}else p+=se(a,ue);break;case Ne:"?"==a?(s.query="",c=Me):"#"==a?(s.fragment="",c=Le):a!=n&&(s.path[0]+=se(a,ae));break;case Me:t||"#"!=a?a!=n&&("'"==a&&s.isSpecial()?s.query+="%27":s.query+="#"==a?"%23":se(a,ae)):(s.fragment="",c=Le);break;case Le:a!=n&&(s.fragment+=se(a,ie))}f++}},parseHost:function(e){var t,r,n;if("["==N(e,0)){if("]"!=N(e,e.length-1))return H;if(t=function(e){var t,r,n,o,a,i,u,l=[0,0,0,0,0,0,0,0],s=0,c=null,f=0,p=function(){return N(e,f)};if(":"==p()){if(":"!=N(e,1))return;f+=2,c=++s}for(;p();){if(8==s)return;if(":"!=p()){for(t=r=0;r<4&&M(Z,p());)t=16*t+C(p(),16),f++,r++;if("."==p()){if(0==r)return;if(f-=r,s>6)return;for(n=0;p();){if(o=null,n>0){if(!("."==p()&&n<4))return;f++}if(!M(G,p()))return;for(;M(G,p());){if(a=C(p(),10),null===o)o=a;else{if(0==o)return;o=10*o+a}if(o>255)return;f++}l[s]=256*l[s]+o,2!=++n&&4!=n||s++}if(4!=n)return;break}if(":"==p()){if(f++,!p())return}else if(p())return;l[s++]=t}else{if(null!==c)return;f++,c=++s}}if(null!==c)for(i=s-c,s=7;0!=s&&i>0;)u=l[s],l[s--]=l[c+i-1],l[c+--i]=u;else if(8!=s)return;return l}(B(e,1,-1)),!t)return H;this.host=t}else if(this.isSpecial()){if(e=m(e),M(ee,e))return H;if(t=function(e){var t,r,n,o,a,i,u,l=z(e,".");if(l.length&&""==l[l.length-1]&&l.length--,(t=l.length)>4)return e;for(r=[],n=0;n<t;n++){if(""==(o=l[n]))return e;if(a=10,o.length>1&&"0"==N(o,0)&&(a=M(K,o)?16:8,o=B(o,8==a?1:2)),""===o)i=0;else{if(!M(10==a?J:8==a?X:Z,o))return e;i=C(o,a)}U(r,i)}for(n=0;n<t;n++)if(i=r[n],n==t-1){if(i>=P(256,5-t))return null}else if(i>255)return null;for(u=j(r),n=0;n<r.length;n++)u+=r[n]*P(256,3-n);return u}(e),null===t)return H;this.host=t}else{if(M(te,e))return H;for(t="",r=v(e),n=0;n<r.length;n++)t+=se(r[n],ae);this.host=t}},cannotHaveUsernamePasswordPort:function(){return!this.host||this.cannotBeABaseURL||"file"==this.scheme},includesCredentials:function(){return""!=this.username||""!=this.password},isSpecial:function(){return d(ce,this.scheme)},shortenPath:function(){var e=this.path,t=e.length;!t||"file"==this.scheme&&1==t&&fe(e[0],!0)||e.length--},serialize:function(){var e=this,t=e.scheme,r=e.username,n=e.password,o=e.host,a=e.port,i=e.path,u=e.query,l=e.fragment,s=t+":";return null!==o?(s+="//",e.includesCredentials()&&(s+=r+(n?":"+n:"")+"@"),s+=oe(o),null!==a&&(s+=":"+a)):"file"==t&&(s+="//"),s+=e.cannotBeABaseURL?i[0]:i.length?"/"+L(i,"/"):"",null!==u&&(s+="?"+u),null!==l&&(s+="#"+l),s},setHref:function(e){var t=this.parse(e);if(t)throw A(t);this.searchParams.update()},getOrigin:function(){var e=this.scheme,t=this.port;if("blob"==e)try{return new je(e.path[0]).origin}catch(e){return"null"}return"file"!=e&&this.isSpecial()?e+"://"+oe(this.host)+(null!==t?":"+t:""):"null"},getProtocol:function(){return this.scheme+":"},setProtocol:function(e){this.parse(b(e)+":",he)},getUsername:function(){return this.username},setUsername:function(e){var t=v(b(e));if(!this.cannotHaveUsernamePasswordPort()){this.username="";for(var r=0;r<t.length;r++)this.username+=se(t[r],le)}},getPassword:function(){return this.password},setPassword:function(e){var t=v(b(e));if(!this.cannotHaveUsernamePasswordPort()){this.password="";for(var r=0;r<t.length;r++)this.password+=se(t[r],le)}},getHost:function(){var e=this.host,t=this.port;return null===e?"":null===t?oe(e):oe(e)+":"+t},setHost:function(e){this.cannotBeABaseURL||this.parse(e,ke)},getHostname:function(){var e=this.host;return null===e?"":oe(e)},setHostname:function(e){this.cannotBeABaseURL||this.parse(e,Oe)},getPort:function(){var e=this.port;return null===e?"":b(e)},setPort:function(e){this.cannotHaveUsernamePasswordPort()||(""==(e=b(e))?this.port=null:this.parse(e,Re))},getPathname:function(){var e=this.path;return this.cannotBeABaseURL?e[0]:e.length?"/"+L(e,"/"):""},setPathname:function(e){this.cannotBeABaseURL||(this.path=[],this.parse(e,_e))},getSearch:function(){var e=this.query;return e?"?"+e:""},setSearch:function(e){""==(e=b(e))?this.query=null:("?"==N(e,0)&&(e=B(e,1)),this.query="",this.parse(e,Me)),this.searchParams.update()},getSearchParams:function(){return this.searchParams.facade},getHash:function(){var e=this.fragment;return e?"#"+e:""},setHash:function(e){""!=(e=b(e))?("#"==N(e,0)&&(e=B(e,1)),this.fragment="",this.parse(e,Le)):this.fragment=null},update:function(){this.query=this.searchParams.serialize()||null}};var je=function(e){var t=p(this,Ue),r=arguments.length>1?arguments[1]:void 0,n=S(t,new Ie(e,!1,r));a||(t.href=n.serialize(),t.origin=n.getOrigin(),t.protocol=n.getProtocol(),t.username=n.getUsername(),t.password=n.getPassword(),t.host=n.getHost(),t.hostname=n.getHostname(),t.port=n.getPort(),t.pathname=n.getPathname(),t.search=n.getSearch(),t.searchParams=n.getSearchParams(),t.hash=n.getHash())},Ue=je.prototype,De=function(e,t){return{get:function(){return k(this)[e]()},set:t&&function(e){return k(this)[t](e)},configurable:!0,enumerable:!0}};if(a&&c(Ue,{href:De("serialize","setHref"),origin:De("getOrigin"),protocol:De("getProtocol","setProtocol"),username:De("getUsername","setUsername"),password:De("getPassword","setPassword"),host:De("getHost","setHost"),hostname:De("getHostname","setHostname"),port:De("getPort","setPort"),pathname:De("getPathname","setPathname"),search:De("getSearch","setSearch"),searchParams:De("getSearchParams"),hash:De("getHash","setHash")}),f(Ue,"toJSON",(function(){return k(this).serialize()}),{enumerable:!0}),f(Ue,"toString",(function(){return k(this).serialize()}),{enumerable:!0}),T){var Fe=T.createObjectURL,ze=T.revokeObjectURL;Fe&&f(je,"createObjectURL",l(Fe,T)),ze&&f(je,"revokeObjectURL",l(ze,T))}w(je,"URL"),o({global:!0,forced:!i,sham:!a},{URL:je})},3753:(e,t,r)=>{"use strict";var n=r(2109),o=r(6916);n({target:"URL",proto:!0,enumerable:!0},{toJSON:function(){return o(URL.prototype.toString,this)}})},8594:(e,t,r)=>{r(2526),r(1817),r(2443),r(2401),r(8722),r(2165),r(9007),r(6066),r(3510),r(1840),r(6982),r(2159),r(6649),r(9341),r(543),r(1703),r(6647),r(9170),r(2120),r(2262),r(2222),r(545),r(6541),r(3290),r(7327),r(9826),r(4553),r(4944),r(6535),r(9554),r(1038),r(6699),r(2772),r(9753),r(6992),r(9600),r(4986),r(1249),r(6572),r(5827),r(6644),r(5069),r(7042),r(5212),r(2707),r(8706),r(561),r(3792),r(9244),r(8264),r(6938),r(9575),r(6716),r(3016),r(3843),r(1801),r(9550),r(8733),r(5735),r(6078),r(3710),r(2130),r(4812),r(4855),r(8309),r(5837),r(8862),r(3706),r(1532),r(9752),r(2376),r(3181),r(3484),r(2388),r(8621),r(403),r(4755),r(5438),r(332),r(658),r(197),r(4914),r(2420),r(160),r(970),r(2703),r(3689),r(9653),r(3299),r(5192),r(3161),r(4048),r(8285),r(4363),r(5994),r(1874),r(9494),r(1354),r(6977),r(5147),r(9601),r(8011),r(9595),r(3321),r(9070),r(5500),r(9720),r(3371),r(8559),r(5003),r(9337),r(6210),r(489),r(6314),r(3304),r(1825),r(8410),r(2200),r(7941),r(4869),r(3952),r(7227),r(514),r(8304),r(1539),r(6833),r(4678),r(1058),r(8674),r(7922),r(4668),r(7727),r(224),r(2419),r(9596),r(2586),r(4819),r(5683),r(9361),r(1037),r(5898),r(7318),r(4361),r(3593),r(9532),r(1299),r(4603),r(8450),r(4916),r(2087),r(8386),r(7601),r(9714),r(189),r(4506),r(9841),r(7852),r(4953),r(2023),r(8783),r(4723),r(6373),r(6528),r(3112),r(8992),r(2481),r(5306),r(8757),r(4765),r(3123),r(6755),r(3650),r(3210),r(8702),r(5674),r(5218),r(4475),r(7929),r(915),r(9253),r(2125),r(8830),r(8734),r(9254),r(7268),r(7397),r(86),r(623),r(4197),r(6495),r(7145),r(5109),r(5125),r(2472),r(9743),r(8255),r(9135),r(8675),r(2990),r(8927),r(3105),r(5035),r(4345),r(7174),r(2846),r(8145),r(4731),r(7209),r(6319),r(8867),r(7789),r(3739),r(5206),r(9368),r(4483),r(2056),r(3462),r(678),r(7462),r(3824),r(5021),r(2974),r(5016),r(8221),r(4129),r(8478),r(4747),r(3948),r(7714),r(2801),r(1174),r(4633),r(5844),r(1295),r(2564),r(285),r(3753),r(1637),r(857)},8679:(e,t,r)=>{"use strict";var n=r(9864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return n.isMemo(e)?i:u[e.$$typeof]||o}u[n.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[n.Memo]=i;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,r,n){if("string"!=typeof r){if(h){var o=d(r);o&&o!==h&&e(t,o,n)}var i=c(r);f&&(i=i.concat(f(r)));for(var u=l(t),v=l(r),g=0;g<i.length;++g){var y=i[g];if(!(a[y]||n&&n[y]||v&&v[y]||u&&u[y])){var m=p(r,y);try{s(t,y,m)}catch(e){}}}}return t}},5826:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,u,l=o(e),s=1;s<arguments.length;s++){for(var c in i=Object(arguments[s]))r.call(i,c)&&(l[c]=i[c]);if(t){u=t(i);for(var f=0;f<u.length;f++)n.call(i,u[f])&&(l[u[f]]=i[u[f]])}}return l}},4779:(e,t,r)=>{var n=r(5826);e.exports=function e(t,r,o){return n(r)||(o=r||o,r=[]),o=o||{},t instanceof RegExp?function(e,t){var r=e.source.match(/\((?!\?)/g);if(r)for(var n=0;n<r.length;n++)t.push({name:n,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(t,r):n(t)?function(t,r,n){for(var o=[],a=0;a<t.length;a++)o.push(e(t[a],r,n).source);return c(new RegExp("(?:"+o.join("|")+")",f(n)),r)}(t,r,o):function(e,t,r){return p(a(e,r),t,r)}(t,r,o)},e.exports.parse=a,e.exports.compile=function(e,t){return u(a(e,t),t)},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var r,n=[],a=0,i=0,u="",c=t&&t.delimiter||"/";null!=(r=o.exec(e));){var f=r[0],p=r[1],d=r.index;if(u+=e.slice(i,d),i=d+f.length,p)u+=p[1];else{var h=e[i],v=r[2],g=r[3],y=r[4],m=r[5],b=r[6],w=r[7];u&&(n.push(u),u="");var x=null!=v&&null!=h&&h!==v,E="+"===b||"*"===b,S="?"===b||"*"===b,k=r[2]||c,O=y||m;n.push({name:g||a++,prefix:v||"",delimiter:k,optional:S,repeat:E,partial:x,asterisk:!!w,pattern:O?s(O):w?".*":"[^"+l(k)+"]+?"})}}return i<e.length&&(u+=e.substr(i)),u&&n.push(u),n}function i(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function u(e,t){for(var r=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(r[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var a="",u=t||{},l=(o||{}).pretty?i:encodeURIComponent,s=0;s<e.length;s++){var c=e[s];if("string"!=typeof c){var f,p=u[c.name];if(null==p){if(c.optional){c.partial&&(a+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(n(p)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(f=l(p[d]),!r[s].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");a+=(0===d?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(p).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):l(p),!r[s].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');a+=c.prefix+f}}else a+=c}return a}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function p(e,t,r){n(t)||(r=t||r,t=[]);for(var o=(r=r||{}).strict,a=!1!==r.end,i="",u=0;u<e.length;u++){var s=e[u];if("string"==typeof s)i+=l(s);else{var p=l(s.prefix),d="(?:"+s.pattern+")";t.push(s),s.repeat&&(d+="(?:"+p+d+")*"),i+=d=s.optional?s.partial?p+"("+d+")?":"(?:"+p+"("+d+"))?":p+"("+d+")"}}var h=l(r.delimiter||"/"),v=i.slice(-h.length)===h;return o||(i=(v?i.slice(0,-h.length):i)+"(?:"+h+"(?=$))?"),i+=a?"$":o&&v?"":"(?="+h+"|$)",c(new RegExp("^"+i,f(r)),t)}},7834:(e,t,r)=>{"use strict";var n=r(414);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,r,o,a,i){if(i!==n){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var r={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return r.PropTypes=r,r}},5697:(e,t,r)=>{e.exports=r(7834)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(e,t,r)=>{"use strict";var n=r(7294),o=r(7418),a=r(3840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!n)throw Error(i(227));var u=new Set,l={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)u.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,d=Object.prototype.hasOwnProperty,h={},v={};function g(e,t,r,n,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=n,this.attributeNamespace=o,this.mustUseProperty=r,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var m=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,r,n){var o=y.hasOwnProperty(t)?y[t]:null;(null!==o?0===o.type:!n&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,r,n){if(null==t||function(e,t,r,n){if(null!==r&&0===r.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!n&&(null!==r?!r.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,r,n))return!0;if(n)return!1;if(null!==r)switch(r.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,r,o,n)&&(r=null),n||null===o?function(e){return!!d.call(v,e)||!d.call(h,e)&&(p.test(e)?v[e]=!0:(h[e]=!0,!1))}(t)&&(null===r?e.removeAttribute(t):e.setAttribute(t,""+r)):o.mustUseProperty?e[o.propertyName]=null===r?3!==o.type&&"":r:(t=o.attributeName,n=o.attributeNamespace,null===r?e.removeAttribute(t):(r=3===(o=o.type)||4===o&&!0===r?"":""+r,n?e.setAttributeNS(n,t,r):e.setAttribute(t,r))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(m,b);y[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(m,b);y[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(m,b);y[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var x=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=60103,S=60106,k=60107,O=60108,R=60114,T=60109,A=60110,C=60112,_=60113,P=60120,N=60115,M=60116,L=60121,I=60128,j=60129,U=60130,D=60131;if("function"==typeof Symbol&&Symbol.for){var F=Symbol.for;E=F("react.element"),S=F("react.portal"),k=F("react.fragment"),O=F("react.strict_mode"),R=F("react.profiler"),T=F("react.provider"),A=F("react.context"),C=F("react.forward_ref"),_=F("react.suspense"),P=F("react.suspense_list"),N=F("react.memo"),M=F("react.lazy"),L=F("react.block"),F("react.scope"),I=F("react.opaque.id"),j=F("react.debug_trace_mode"),U=F("react.offscreen"),D=F("react.legacy_hidden")}var z,B="function"==typeof Symbol&&Symbol.iterator;function V(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=B&&e[B]||e["@@iterator"])?e:null}function $(e){if(void 0===z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);z=t&&t[1]||""}return"\n"+z+e}var W=!1;function H(e,t){if(!e||W)return"";W=!0;var r=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var n=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){n=e}e.call(t.prototype)}else{try{throw Error()}catch(e){n=e}e()}}catch(e){if(e&&n&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),a=n.stack.split("\n"),i=o.length-1,u=a.length-1;1<=i&&0<=u&&o[i]!==a[u];)u--;for(;1<=i&&0<=u;i--,u--)if(o[i]!==a[u]){if(1!==i||1!==u)do{if(i--,0>--u||o[i]!==a[u])return"\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=u);break}}}finally{W=!1,Error.prepareStackTrace=r}return(e=e?e.displayName||e.name:"")?$(e):""}function q(e){switch(e.tag){case 5:return $(e.type);case 16:return $("Lazy");case 13:return $("Suspense");case 19:return $("SuspenseList");case 0:case 2:case 15:return H(e.type,!1);case 11:return H(e.type.render,!1);case 22:return H(e.type._render,!1);case 1:return H(e.type,!0);default:return""}}function Q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case S:return"Portal";case R:return"Profiler";case O:return"StrictMode";case _:return"Suspense";case P:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case A:return(e.displayName||"Context")+".Consumer";case T:return(e._context.displayName||"Context")+".Provider";case C:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case N:return Q(e.type);case L:return Q(e._render);case M:t=e._payload,e=e._init;try{return Q(e(t))}catch(e){}}return null}function Y(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function G(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function K(e){e._valueTracker||(e._valueTracker=function(e){var t=G(e)?"checked":"value",r=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),n=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==r&&"function"==typeof r.get&&"function"==typeof r.set){var o=r.get,a=r.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){n=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:r.enumerable}),{getValue:function(){return n},setValue:function(e){n=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var r=t.getValue(),n="";return e&&(n=G(e)?e.checked?"true":"false":e.value),(e=n)!==r&&(t.setValue(e),!0)}function J(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var r=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:e._wrapperState.initialChecked})}function ee(e,t){var r=null==t.defaultValue?"":t.defaultValue,n=null!=t.checked?t.checked:t.defaultChecked;r=Y(null!=t.value?t.value:r),e._wrapperState={initialChecked:n,initialValue:r,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function re(e,t){te(e,t);var r=Y(t.value),n=t.type;if(null!=r)"number"===n?(0===r&&""===e.value||e.value!=r)&&(e.value=""+r):e.value!==""+r&&(e.value=""+r);else if("submit"===n||"reset"===n)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,r):t.hasOwnProperty("defaultValue")&&oe(e,t.type,Y(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function ne(e,t,r){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var n=t.type;if(!("submit"!==n&&"reset"!==n||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,r||t===e.value||(e.value=t),e.defaultValue=t}""!==(r=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==r&&(e.name=r)}function oe(e,t,r){"number"===t&&J(e.ownerDocument)===e||(null==r?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+r&&(e.defaultValue=""+r))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return n.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,r,n){if(e=e.options,t){t={};for(var o=0;o<r.length;o++)t["$"+r[o]]=!0;for(r=0;r<e.length;r++)o=t.hasOwnProperty("$"+e[r].value),e[r].selected!==o&&(e[r].selected=o),o&&n&&(e[r].defaultSelected=!0)}else{for(r=""+Y(r),t=null,o=0;o<e.length;o++){if(e[o].value===r)return e[o].selected=!0,void(n&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function ue(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var r=t.value;if(null==r){if(r=t.children,t=t.defaultValue,null!=r){if(null!=t)throw Error(i(92));if(Array.isArray(r)){if(!(1>=r.length))throw Error(i(93));r=r[0]}t=r}null==t&&(t=""),r=t}e._wrapperState={initialValue:Y(r)}}function se(e,t){var r=Y(t.value),n=Y(t.defaultValue);null!=r&&((r=""+r)!==e.value&&(e.value=r),null==t.defaultValue&&e.defaultValue!==r&&(e.defaultValue=r)),null!=n&&(e.defaultValue=""+n)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function pe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function de(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?pe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,ve,ge=(ve=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,r,n){MSApp.execUnsafeLocalFunction((function(){return ve(e,t)}))}:ve);function ye(e,t){if(t){var r=e.firstChild;if(r&&r===e.lastChild&&3===r.nodeType)return void(r.nodeValue=t)}e.textContent=t}var me={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,r){return null==t||"boolean"==typeof t||""===t?"":r||"number"!=typeof t||0===t||me.hasOwnProperty(e)&&me[e]?(""+t).trim():t+"px"}function xe(e,t){for(var r in e=e.style,t)if(t.hasOwnProperty(r)){var n=0===r.indexOf("--"),o=we(r,t[r],n);"float"===r&&(r="cssFloat"),n?e.setProperty(r,o):e[r]=o}}Object.keys(me).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),me[t]=me[e]}))}));var Ee=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Se(e,t){if(t){if(Ee[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function ke(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Oe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Re=null,Te=null,Ae=null;function Ce(e){if(e=to(e)){if("function"!=typeof Re)throw Error(i(280));var t=e.stateNode;t&&(t=no(t),Re(e.stateNode,e.type,t))}}function _e(e){Te?Ae?Ae.push(e):Ae=[e]:Te=e}function Pe(){if(Te){var e=Te,t=Ae;if(Ae=Te=null,Ce(e),t)for(e=0;e<t.length;e++)Ce(t[e])}}function Ne(e,t){return e(t)}function Me(e,t,r,n,o){return e(t,r,n,o)}function Le(){}var Ie=Ne,je=!1,Ue=!1;function De(){null===Te&&null===Ae||(Le(),Pe())}function Fe(e,t){var r=e.stateNode;if(null===r)return null;var n=no(r);if(null===n)return null;r=n[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(n=!n.disabled)||(n=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!n;break e;default:e=!1}if(e)return null;if(r&&"function"!=typeof r)throw Error(i(231,t,typeof r));return r}var ze=!1;if(f)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){ze=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(ve){ze=!1}function Ve(e,t,r,n,o,a,i,u,l){var s=Array.prototype.slice.call(arguments,3);try{t.apply(r,s)}catch(e){this.onError(e)}}var $e=!1,We=null,He=!1,qe=null,Qe={onError:function(e){$e=!0,We=e}};function Ye(e,t,r,n,o,a,i,u,l){$e=!1,We=null,Ve.apply(Qe,arguments)}function Ge(e){var t=e,r=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(r=t.return),e=t.return}while(e)}return 3===t.tag?r:null}function Ke(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Xe(e){if(Ge(e)!==e)throw Error(i(188))}function Je(e,t){for(var r=e.alternate;null!==t;){if(t===e||t===r)return!0;t=t.return}return!1}var Ze,et,tt,rt,nt=!1,ot=[],at=null,it=null,ut=null,lt=new Map,st=new Map,ct=[],ft="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,r,n,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|r,nativeEvent:o,targetContainers:[n]}}function dt(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":it=null;break;case"mouseover":case"mouseout":ut=null;break;case"pointerover":case"pointerout":lt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":st.delete(t.pointerId)}}function ht(e,t,r,n,o,a){return null===e||e.nativeEvent!==a?(e=pt(t,r,n,o,a),null!==t&&null!==(t=to(t))&&et(t),e):(e.eventSystemFlags|=n,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function vt(e){var t=eo(e.target);if(null!==t){var r=Ge(t);if(null!==r)if(13===(t=r.tag)){if(null!==(t=Ke(r)))return e.blockedOn=t,void rt(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){tt(r)}))}))}else if(3===t&&r.stateNode.hydrate)return void(e.blockedOn=3===r.tag?r.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var r=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==r)return null!==(t=to(r))&&et(t),e.blockedOn=r,!1;t.shift()}return!0}function yt(e,t,r){gt(e)&&r.delete(t)}function mt(){for(nt=!1;0<ot.length;){var e=ot[0];if(null!==e.blockedOn){null!==(e=to(e.blockedOn))&&Ze(e);break}for(var t=e.targetContainers;0<t.length;){var r=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==r){e.blockedOn=r;break}t.shift()}null===e.blockedOn&&ot.shift()}null!==at&&gt(at)&&(at=null),null!==it&&gt(it)&&(it=null),null!==ut&&gt(ut)&&(ut=null),lt.forEach(yt),st.forEach(yt)}function bt(e,t){e.blockedOn===t&&(e.blockedOn=null,nt||(nt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,mt)))}function wt(e){function t(t){return bt(t,e)}if(0<ot.length){bt(ot[0],e);for(var r=1;r<ot.length;r++){var n=ot[r];n.blockedOn===e&&(n.blockedOn=null)}}for(null!==at&&bt(at,e),null!==it&&bt(it,e),null!==ut&&bt(ut,e),lt.forEach(t),st.forEach(t),r=0;r<ct.length;r++)(n=ct[r]).blockedOn===e&&(n.blockedOn=null);for(;0<ct.length&&null===(r=ct[0]).blockedOn;)vt(r),null===r.blockedOn&&ct.shift()}function xt(e,t){var r={};return r[e.toLowerCase()]=t.toLowerCase(),r["Webkit"+e]="webkit"+t,r["Moz"+e]="moz"+t,r}var Et={animationend:xt("Animation","AnimationEnd"),animationiteration:xt("Animation","AnimationIteration"),animationstart:xt("Animation","AnimationStart"),transitionend:xt("Transition","TransitionEnd")},St={},kt={};function Ot(e){if(St[e])return St[e];if(!Et[e])return e;var t,r=Et[e];for(t in r)if(r.hasOwnProperty(t)&&t in kt)return St[e]=r[t];return e}f&&(kt=document.createElement("div").style,"AnimationEvent"in window||(delete Et.animationend.animation,delete Et.animationiteration.animation,delete Et.animationstart.animation),"TransitionEvent"in window||delete Et.transitionend.transition);var Rt=Ot("animationend"),Tt=Ot("animationiteration"),At=Ot("animationstart"),Ct=Ot("transitionend"),_t=new Map,Pt=new Map,Nt=["abort","abort",Rt,"animationEnd",Tt,"animationIteration",At,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ct,"transitionEnd","waiting","waiting"];function Mt(e,t){for(var r=0;r<e.length;r+=2){var n=e[r],o=e[r+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Pt.set(n,t),_t.set(n,o),s(o,[n])}}(0,a.unstable_now)();var Lt=8;function It(e){if(0!=(1&e))return Lt=15,1;if(0!=(2&e))return Lt=14,2;if(0!=(4&e))return Lt=13,4;var t=24&e;return 0!==t?(Lt=12,t):0!=(32&e)?(Lt=11,32):0!=(t=192&e)?(Lt=10,t):0!=(256&e)?(Lt=9,256):0!=(t=3584&e)?(Lt=8,t):0!=(4096&e)?(Lt=7,4096):0!=(t=4186112&e)?(Lt=6,t):0!=(t=62914560&e)?(Lt=5,t):67108864&e?(Lt=4,67108864):0!=(134217728&e)?(Lt=3,134217728):0!=(t=805306368&e)?(Lt=2,t):0!=(1073741824&e)?(Lt=1,1073741824):(Lt=8,e)}function jt(e,t){var r=e.pendingLanes;if(0===r)return Lt=0;var n=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,u=e.pingedLanes;if(0!==a)n=a,o=Lt=15;else if(0!=(a=134217727&r)){var l=a&~i;0!==l?(n=It(l),o=Lt):0!=(u&=a)&&(n=It(u),o=Lt)}else 0!=(a=r&~i)?(n=It(a),o=Lt):0!==u&&(n=It(u),o=Lt);if(0===n)return 0;if(n=r&((0>(n=31-Vt(n))?0:1<<n)<<1)-1,0!==t&&t!==n&&0==(t&i)){if(It(t),o<=Lt)return t;Lt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=n;0<t;)o=1<<(r=31-Vt(t)),n|=e[r],t&=~o;return n}function Ut(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Dt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ft(24&~t))?Dt(10,t):e;case 10:return 0===(e=Ft(192&~t))?Dt(8,t):e;case 8:return 0===(e=Ft(3584&~t))&&0===(e=Ft(4186112&~t))&&(e=512),e;case 2:return 0===(t=Ft(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Ft(e){return e&-e}function zt(e){for(var t=[],r=0;31>r;r++)t.push(e);return t}function Bt(e,t,r){e.pendingLanes|=t;var n=t-1;e.suspendedLanes&=n,e.pingedLanes&=n,(e=e.eventTimes)[t=31-Vt(t)]=r}var Vt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-($t(e)/Wt|0)|0},$t=Math.log,Wt=Math.LN2,Ht=a.unstable_UserBlockingPriority,qt=a.unstable_runWithPriority,Qt=!0;function Yt(e,t,r,n){je||Le();var o=Kt,a=je;je=!0;try{Me(o,e,t,r,n)}finally{(je=a)||De()}}function Gt(e,t,r,n){qt(Ht,Kt.bind(null,e,t,r,n))}function Kt(e,t,r,n){var o;if(Qt)if((o=0==(4&t))&&0<ot.length&&-1<ft.indexOf(e))e=pt(null,e,t,r,n),ot.push(e);else{var a=Xt(e,t,r,n);if(null===a)o&&dt(e,n);else{if(o){if(-1<ft.indexOf(e))return e=pt(a,e,t,r,n),void ot.push(e);if(function(e,t,r,n,o){switch(t){case"focusin":return at=ht(at,e,t,r,n,o),!0;case"dragenter":return it=ht(it,e,t,r,n,o),!0;case"mouseover":return ut=ht(ut,e,t,r,n,o),!0;case"pointerover":var a=o.pointerId;return lt.set(a,ht(lt.get(a)||null,e,t,r,n,o)),!0;case"gotpointercapture":return a=o.pointerId,st.set(a,ht(st.get(a)||null,e,t,r,n,o)),!0}return!1}(a,e,t,r,n))return;dt(e,n)}Mn(e,t,n,null,r)}}}function Xt(e,t,r,n){var o=Oe(n);if(null!==(o=eo(o))){var a=Ge(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Ke(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Mn(e,t,n,o,r),null}var Jt=null,Zt=null,er=null;function tr(){if(er)return er;var e,t,r=Zt,n=r.length,o="value"in Jt?Jt.value:Jt.textContent,a=o.length;for(e=0;e<n&&r[e]===o[e];e++);var i=n-e;for(t=1;t<=i&&r[n-t]===o[a-t];t++);return er=o.slice(e,1<t?1-t:void 0)}function rr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nr(){return!0}function or(){return!1}function ar(e){function t(t,r,n,o,a){for(var i in this._reactName=t,this._targetInst=n,this.type=r,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nr:or,this.isPropagationStopped=or,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nr)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nr)},persist:function(){},isPersistent:nr}),t}var ir,ur,lr,sr={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cr=ar(sr),fr=o({},sr,{view:0,detail:0}),pr=ar(fr),dr=o({},fr,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Or,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==lr&&(lr&&"mousemove"===e.type?(ir=e.screenX-lr.screenX,ur=e.screenY-lr.screenY):ur=ir=0,lr=e),ir)},movementY:function(e){return"movementY"in e?e.movementY:ur}}),hr=ar(dr),vr=ar(o({},dr,{dataTransfer:0})),gr=ar(o({},fr,{relatedTarget:0})),yr=ar(o({},sr,{animationName:0,elapsedTime:0,pseudoElement:0})),mr=o({},sr,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),br=ar(mr),wr=ar(o({},sr,{data:0})),xr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Er={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sr[e])&&!!t[e]}function Or(){return kr}var Rr=o({},fr,{key:function(e){if(e.key){var t=xr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Er[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Or,charCode:function(e){return"keypress"===e.type?rr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Tr=ar(Rr),Ar=ar(o({},dr,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Cr=ar(o({},fr,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Or})),_r=ar(o({},sr,{propertyName:0,elapsedTime:0,pseudoElement:0})),Pr=o({},dr,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Nr=ar(Pr),Mr=[9,13,27,32],Lr=f&&"CompositionEvent"in window,Ir=null;f&&"documentMode"in document&&(Ir=document.documentMode);var jr=f&&"TextEvent"in window&&!Ir,Ur=f&&(!Lr||Ir&&8<Ir&&11>=Ir),Dr=String.fromCharCode(32),Fr=!1;function zr(e,t){switch(e){case"keyup":return-1!==Mr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Br(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Vr=!1,$r={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!$r[e.type]:"textarea"===t}function Hr(e,t,r,n){_e(n),0<(t=In(t,"onChange")).length&&(r=new cr("onChange","change",null,r,n),e.push({event:r,listeners:t}))}var qr=null,Qr=null;function Yr(e){Tn(e,0)}function Gr(e){if(X(ro(e)))return e}function Kr(e,t){if("change"===e)return t}var Xr=!1;if(f){var Jr;if(f){var Zr="oninput"in document;if(!Zr){var en=document.createElement("div");en.setAttribute("oninput","return;"),Zr="function"==typeof en.oninput}Jr=Zr}else Jr=!1;Xr=Jr&&(!document.documentMode||9<document.documentMode)}function tn(){qr&&(qr.detachEvent("onpropertychange",rn),Qr=qr=null)}function rn(e){if("value"===e.propertyName&&Gr(Qr)){var t=[];if(Hr(t,Qr,e,Oe(e)),e=Yr,je)e(t);else{je=!0;try{Ne(e,t)}finally{je=!1,De()}}}}function nn(e,t,r){"focusin"===e?(tn(),Qr=r,(qr=t).attachEvent("onpropertychange",rn)):"focusout"===e&&tn()}function on(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gr(Qr)}function an(e,t){if("click"===e)return Gr(t)}function un(e,t){if("input"===e||"change"===e)return Gr(t)}var ln="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},sn=Object.prototype.hasOwnProperty;function cn(e,t){if(ln(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(n=0;n<r.length;n++)if(!sn.call(t,r[n])||!ln(e[r[n]],t[r[n]]))return!1;return!0}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function pn(e,t){var r,n=fn(e);for(e=0;n;){if(3===n.nodeType){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=fn(n)}}function dn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function hn(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var r="string"==typeof t.contentWindow.location.href}catch(e){r=!1}if(!r)break;t=J((e=t.contentWindow).document)}return t}function vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var gn=f&&"documentMode"in document&&11>=document.documentMode,yn=null,mn=null,bn=null,wn=!1;function xn(e,t,r){var n=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;wn||null==yn||yn!==J(n)||(n="selectionStart"in(n=yn)&&vn(n)?{start:n.selectionStart,end:n.selectionEnd}:{anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},bn&&cn(bn,n)||(bn=n,0<(n=In(mn,"onSelect")).length&&(t=new cr("onSelect","select",null,t,r),e.push({event:t,listeners:n}),t.target=yn)))}Mt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Mt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Mt(Nt,2);for(var En="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Sn=0;Sn<En.length;Sn++)Pt.set(En[Sn],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var kn="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),On=new Set("cancel close invalid load scroll toggle".split(" ").concat(kn));function Rn(e,t,r){var n=e.type||"unknown-event";e.currentTarget=r,function(e,t,r,n,o,a,u,l,s){if(Ye.apply(this,arguments),$e){if(!$e)throw Error(i(198));var c=We;$e=!1,We=null,He||(He=!0,qe=c)}}(n,t,void 0,e),e.currentTarget=null}function Tn(e,t){t=0!=(4&t);for(var r=0;r<e.length;r++){var n=e[r],o=n.event;n=n.listeners;e:{var a=void 0;if(t)for(var i=n.length-1;0<=i;i--){var u=n[i],l=u.instance,s=u.currentTarget;if(u=u.listener,l!==a&&o.isPropagationStopped())break e;Rn(o,u,s),a=l}else for(i=0;i<n.length;i++){if(l=(u=n[i]).instance,s=u.currentTarget,u=u.listener,l!==a&&o.isPropagationStopped())break e;Rn(o,u,s),a=l}}}if(He)throw e=qe,He=!1,qe=null,e}function An(e,t){var r=oo(t),n=e+"__bubble";r.has(n)||(Nn(t,e,2,!1),r.add(n))}var Cn="_reactListening"+Math.random().toString(36).slice(2);function _n(e){e[Cn]||(e[Cn]=!0,u.forEach((function(t){On.has(t)||Pn(t,!1,e,null),Pn(t,!0,e,null)})))}function Pn(e,t,r,n){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=r;if("selectionchange"===e&&9!==r.nodeType&&(a=r.ownerDocument),null!==n&&!t&&On.has(e)){if("scroll"!==e)return;o|=2,a=n}var i=oo(a),u=e+"__"+(t?"capture":"bubble");i.has(u)||(t&&(o|=4),Nn(a,e,o,t),i.add(u))}function Nn(e,t,r,n){var o=Pt.get(t);switch(void 0===o?2:o){case 0:o=Yt;break;case 1:o=Gt;break;default:o=Kt}r=o.bind(null,t,r,e),o=void 0,!ze||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),n?void 0!==o?e.addEventListener(t,r,{capture:!0,passive:o}):e.addEventListener(t,r,!0):void 0!==o?e.addEventListener(t,r,{passive:o}):e.addEventListener(t,r,!1)}function Mn(e,t,r,n,o){var a=n;if(0==(1&t)&&0==(2&t)&&null!==n)e:for(;;){if(null===n)return;var i=n.tag;if(3===i||4===i){var u=n.stateNode.containerInfo;if(u===o||8===u.nodeType&&u.parentNode===o)break;if(4===i)for(i=n.return;null!==i;){var l=i.tag;if((3===l||4===l)&&((l=i.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;i=i.return}for(;null!==u;){if(null===(i=eo(u)))return;if(5===(l=i.tag)||6===l){n=a=i;continue e}u=u.parentNode}}n=n.return}!function(e,t,r){if(Ue)return e();Ue=!0;try{Ie(e,t,r)}finally{Ue=!1,De()}}((function(){var n=a,o=Oe(r),i=[];e:{var u=_t.get(e);if(void 0!==u){var l=cr,s=e;switch(e){case"keypress":if(0===rr(r))break e;case"keydown":case"keyup":l=Tr;break;case"focusin":s="focus",l=gr;break;case"focusout":s="blur",l=gr;break;case"beforeblur":case"afterblur":l=gr;break;case"click":if(2===r.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=hr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=vr;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Cr;break;case Rt:case Tt:case At:l=yr;break;case Ct:l=_r;break;case"scroll":l=pr;break;case"wheel":l=Nr;break;case"copy":case"cut":case"paste":l=br;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Ar}var c=0!=(4&t),f=!c&&"scroll"===e,p=c?null!==u?u+"Capture":null:u;c=[];for(var d,h=n;null!==h;){var v=(d=h).stateNode;if(5===d.tag&&null!==v&&(d=v,null!==p&&null!=(v=Fe(h,p))&&c.push(Ln(h,v,d))),f)break;h=h.return}0<c.length&&(u=new l(u,s,null,r,o),i.push({event:u,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(u="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(s=r.relatedTarget||r.fromElement)||!eo(s)&&!s[Jn])&&(l||u)&&(u=o.window===o?o:(u=o.ownerDocument)?u.defaultView||u.parentWindow:window,l?(l=n,null!==(s=(s=r.relatedTarget||r.toElement)?eo(s):null)&&(s!==(f=Ge(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(l=null,s=n),l!==s)){if(c=hr,v="onMouseLeave",p="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Ar,v="onPointerLeave",p="onPointerEnter",h="pointer"),f=null==l?u:ro(l),d=null==s?u:ro(s),(u=new c(v,h+"leave",l,r,o)).target=f,u.relatedTarget=d,v=null,eo(o)===n&&((c=new c(p,h+"enter",s,r,o)).target=d,c.relatedTarget=f,v=c),f=v,l&&s)e:{for(p=s,h=0,d=c=l;d;d=jn(d))h++;for(d=0,v=p;v;v=jn(v))d++;for(;0<h-d;)c=jn(c),h--;for(;0<d-h;)p=jn(p),d--;for(;h--;){if(c===p||null!==p&&c===p.alternate)break e;c=jn(c),p=jn(p)}c=null}else c=null;null!==l&&Un(i,u,l,c,!1),null!==s&&null!==f&&Un(i,f,s,c,!0)}if("select"===(l=(u=n?ro(n):window).nodeName&&u.nodeName.toLowerCase())||"input"===l&&"file"===u.type)var g=Kr;else if(Wr(u))if(Xr)g=un;else{g=on;var y=nn}else(l=u.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===u.type||"radio"===u.type)&&(g=an);switch(g&&(g=g(e,n))?Hr(i,g,r,o):(y&&y(e,u,n),"focusout"===e&&(y=u._wrapperState)&&y.controlled&&"number"===u.type&&oe(u,"number",u.value)),y=n?ro(n):window,e){case"focusin":(Wr(y)||"true"===y.contentEditable)&&(yn=y,mn=n,bn=null);break;case"focusout":bn=mn=yn=null;break;case"mousedown":wn=!0;break;case"contextmenu":case"mouseup":case"dragend":wn=!1,xn(i,r,o);break;case"selectionchange":if(gn)break;case"keydown":case"keyup":xn(i,r,o)}var m;if(Lr)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Vr?zr(e,r)&&(b="onCompositionEnd"):"keydown"===e&&229===r.keyCode&&(b="onCompositionStart");b&&(Ur&&"ko"!==r.locale&&(Vr||"onCompositionStart"!==b?"onCompositionEnd"===b&&Vr&&(m=tr()):(Zt="value"in(Jt=o)?Jt.value:Jt.textContent,Vr=!0)),0<(y=In(n,b)).length&&(b=new wr(b,e,null,r,o),i.push({event:b,listeners:y}),(m||null!==(m=Br(r)))&&(b.data=m))),(m=jr?function(e,t){switch(e){case"compositionend":return Br(t);case"keypress":return 32!==t.which?null:(Fr=!0,Dr);case"textInput":return(e=t.data)===Dr&&Fr?null:e;default:return null}}(e,r):function(e,t){if(Vr)return"compositionend"===e||!Lr&&zr(e,t)?(e=tr(),er=Zt=Jt=null,Vr=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ur&&"ko"!==t.locale?null:t.data}}(e,r))&&0<(n=In(n,"onBeforeInput")).length&&(o=new wr("onBeforeInput","beforeinput",null,r,o),i.push({event:o,listeners:n}),o.data=m)}Tn(i,t)}))}function Ln(e,t,r){return{instance:e,listener:t,currentTarget:r}}function In(e,t){for(var r=t+"Capture",n=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Fe(e,r))&&n.unshift(Ln(e,a,o)),null!=(a=Fe(e,t))&&n.push(Ln(e,a,o))),e=e.return}return n}function jn(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Un(e,t,r,n,o){for(var a=t._reactName,i=[];null!==r&&r!==n;){var u=r,l=u.alternate,s=u.stateNode;if(null!==l&&l===n)break;5===u.tag&&null!==s&&(u=s,o?null!=(l=Fe(r,a))&&i.unshift(Ln(r,l,u)):o||null!=(l=Fe(r,a))&&i.push(Ln(r,l,u))),r=r.return}0!==i.length&&e.push({event:t,listeners:i})}function Dn(){}var Fn=null,zn=null;function Bn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Vn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var $n="function"==typeof setTimeout?setTimeout:void 0,Wn="function"==typeof clearTimeout?clearTimeout:void 0;function Hn(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function qn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Qn(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var r=e.data;if("$"===r||"$!"===r||"$?"===r){if(0===t)return e;t--}else"/$"===r&&t++}e=e.previousSibling}return null}var Yn=0,Gn=Math.random().toString(36).slice(2),Kn="__reactFiber$"+Gn,Xn="__reactProps$"+Gn,Jn="__reactContainer$"+Gn,Zn="__reactEvents$"+Gn;function eo(e){var t=e[Kn];if(t)return t;for(var r=e.parentNode;r;){if(t=r[Jn]||r[Kn]){if(r=t.alternate,null!==t.child||null!==r&&null!==r.child)for(e=Qn(e);null!==e;){if(r=e[Kn])return r;e=Qn(e)}return t}r=(e=r).parentNode}return null}function to(e){return!(e=e[Kn]||e[Jn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ro(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function no(e){return e[Xn]||null}function oo(e){var t=e[Zn];return void 0===t&&(t=e[Zn]=new Set),t}var ao=[],io=-1;function uo(e){return{current:e}}function lo(e){0>io||(e.current=ao[io],ao[io]=null,io--)}function so(e,t){io++,ao[io]=e.current,e.current=t}var co={},fo=uo(co),po=uo(!1),ho=co;function vo(e,t){var r=e.type.contextTypes;if(!r)return co;var n=e.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===t)return n.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in r)a[o]=t[o];return n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function go(e){return null!=e.childContextTypes}function yo(){lo(po),lo(fo)}function mo(e,t,r){if(fo.current!==co)throw Error(i(168));so(fo,t),so(po,r)}function bo(e,t,r){var n=e.stateNode;if(e=t.childContextTypes,"function"!=typeof n.getChildContext)return r;for(var a in n=n.getChildContext())if(!(a in e))throw Error(i(108,Q(t)||"Unknown",a));return o({},r,n)}function wo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||co,ho=fo.current,so(fo,e),so(po,po.current),!0}function xo(e,t,r){var n=e.stateNode;if(!n)throw Error(i(169));r?(e=bo(e,t,ho),n.__reactInternalMemoizedMergedChildContext=e,lo(po),lo(fo),so(fo,e)):lo(po),so(po,r)}var Eo=null,So=null,ko=a.unstable_runWithPriority,Oo=a.unstable_scheduleCallback,Ro=a.unstable_cancelCallback,To=a.unstable_shouldYield,Ao=a.unstable_requestPaint,Co=a.unstable_now,_o=a.unstable_getCurrentPriorityLevel,Po=a.unstable_ImmediatePriority,No=a.unstable_UserBlockingPriority,Mo=a.unstable_NormalPriority,Lo=a.unstable_LowPriority,Io=a.unstable_IdlePriority,jo={},Uo=void 0!==Ao?Ao:function(){},Do=null,Fo=null,zo=!1,Bo=Co(),Vo=1e4>Bo?Co:function(){return Co()-Bo};function $o(){switch(_o()){case Po:return 99;case No:return 98;case Mo:return 97;case Lo:return 96;case Io:return 95;default:throw Error(i(332))}}function Wo(e){switch(e){case 99:return Po;case 98:return No;case 97:return Mo;case 96:return Lo;case 95:return Io;default:throw Error(i(332))}}function Ho(e,t){return e=Wo(e),ko(e,t)}function qo(e,t,r){return e=Wo(e),Oo(e,t,r)}function Qo(){if(null!==Fo){var e=Fo;Fo=null,Ro(e)}Yo()}function Yo(){if(!zo&&null!==Do){zo=!0;var e=0;try{var t=Do;Ho(99,(function(){for(;e<t.length;e++){var r=t[e];do{r=r(!0)}while(null!==r)}})),Do=null}catch(t){throw null!==Do&&(Do=Do.slice(e+1)),Oo(Po,Qo),t}finally{zo=!1}}}var Go=x.ReactCurrentBatchConfig;function Ko(e,t){if(e&&e.defaultProps){for(var r in t=o({},t),e=e.defaultProps)void 0===t[r]&&(t[r]=e[r]);return t}return t}var Xo=uo(null),Jo=null,Zo=null,ea=null;function ta(){ea=Zo=Jo=null}function ra(e){var t=Xo.current;lo(Xo),e.type._context._currentValue=t}function na(e,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)===t){if(null===r||(r.childLanes&t)===t)break;r.childLanes|=t}else e.childLanes|=t,null!==r&&(r.childLanes|=t);e=e.return}}function oa(e,t){Jo=e,ea=Zo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ii=!0),e.firstContext=null)}function aa(e,t){if(ea!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ea=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Zo){if(null===Jo)throw Error(i(308));Zo=t,Jo.dependencies={lanes:0,firstContext:t,responders:null}}else Zo=Zo.next=t;return e._currentValue}var ia=!1;function ua(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function la(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function sa(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ca(e,t){if(null!==(e=e.updateQueue)){var r=(e=e.shared).pending;null===r?t.next=t:(t.next=r.next,r.next=t),e.pending=t}}function fa(e,t){var r=e.updateQueue,n=e.alternate;if(null!==n&&r===(n=n.updateQueue)){var o=null,a=null;if(null!==(r=r.firstBaseUpdate)){do{var i={eventTime:r.eventTime,lane:r.lane,tag:r.tag,payload:r.payload,callback:r.callback,next:null};null===a?o=a=i:a=a.next=i,r=r.next}while(null!==r);null===a?o=a=t:a=a.next=t}else o=a=t;return r={baseState:n.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:n.shared,effects:n.effects},void(e.updateQueue=r)}null===(e=r.lastBaseUpdate)?r.firstBaseUpdate=t:e.next=t,r.lastBaseUpdate=t}function pa(e,t,r,n){var a=e.updateQueue;ia=!1;var i=a.firstBaseUpdate,u=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var s=l,c=s.next;s.next=null,null===u?i=c:u.next=c,u=s;var f=e.alternate;if(null!==f){var p=(f=f.updateQueue).lastBaseUpdate;p!==u&&(null===p?f.firstBaseUpdate=c:p.next=c,f.lastBaseUpdate=s)}}if(null!==i){for(p=a.baseState,u=0,f=c=s=null;;){l=i.lane;var d=i.eventTime;if((n&l)===l){null!==f&&(f=f.next={eventTime:d,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,v=i;switch(l=t,d=r,v.tag){case 1:if("function"==typeof(h=v.payload)){p=h.call(d,p,l);break e}p=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(l="function"==typeof(h=v.payload)?h.call(d,p,l):h))break e;p=o({},p,l);break e;case 2:ia=!0}}null!==i.callback&&(e.flags|=32,null===(l=a.effects)?a.effects=[i]:l.push(i))}else d={eventTime:d,lane:l,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(c=f=d,s=p):f=f.next=d,u|=l;if(null===(i=i.next)){if(null===(l=a.shared.pending))break;i=l.next,l.next=null,a.lastBaseUpdate=l,a.shared.pending=null}}null===f&&(s=p),a.baseState=s,a.firstBaseUpdate=c,a.lastBaseUpdate=f,Uu|=u,e.lanes=u,e.memoizedState=p}}function da(e,t,r){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var n=e[t],o=n.callback;if(null!==o){if(n.callback=null,n=r,"function"!=typeof o)throw Error(i(191,o));o.call(n)}}}var ha=(new n.Component).refs;function va(e,t,r,n){r=null==(r=r(n,t=e.memoizedState))?t:o({},t,r),e.memoizedState=r,0===e.lanes&&(e.updateQueue.baseState=r)}var ga={isMounted:function(e){return!!(e=e._reactInternals)&&Ge(e)===e},enqueueSetState:function(e,t,r){e=e._reactInternals;var n=ll(),o=sl(e),a=sa(n,o);a.payload=t,null!=r&&(a.callback=r),ca(e,a),cl(e,o,n)},enqueueReplaceState:function(e,t,r){e=e._reactInternals;var n=ll(),o=sl(e),a=sa(n,o);a.tag=1,a.payload=t,null!=r&&(a.callback=r),ca(e,a),cl(e,o,n)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var r=ll(),n=sl(e),o=sa(r,n);o.tag=2,null!=t&&(o.callback=t),ca(e,o),cl(e,n,r)}};function ya(e,t,r,n,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(n,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&cn(r,n)&&cn(o,a))}function ma(e,t,r){var n=!1,o=co,a=t.contextType;return"object"==typeof a&&null!==a?a=aa(a):(o=go(t)?ho:fo.current,a=(n=null!=(n=t.contextTypes))?vo(e,o):co),t=new t(r,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ga,e.stateNode=t,t._reactInternals=e,n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ba(e,t,r,n){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(r,n),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(r,n),t.state!==e&&ga.enqueueReplaceState(t,t.state,null)}function wa(e,t,r,n){var o=e.stateNode;o.props=r,o.state=e.memoizedState,o.refs=ha,ua(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=aa(a):(a=go(t)?ho:fo.current,o.context=vo(e,a)),pa(e,r,o,n),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(va(e,t,a,r),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ga.enqueueReplaceState(o,o.state,null),pa(e,r,o,n),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var xa=Array.isArray;function Ea(e,t,r){if(null!==(e=r.ref)&&"function"!=typeof e&&"object"!=typeof e){if(r._owner){if(r=r._owner){if(1!==r.tag)throw Error(i(309));var n=r.stateNode}if(!n)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=n.refs;t===ha&&(t=n.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!r._owner)throw Error(i(290,e))}return e}function Sa(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function ka(e){function t(t,r){if(e){var n=t.lastEffect;null!==n?(n.nextEffect=r,t.lastEffect=r):t.firstEffect=t.lastEffect=r,r.nextEffect=null,r.flags=8}}function r(r,n){if(!e)return null;for(;null!==n;)t(r,n),n=n.sibling;return null}function n(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=zl(e,t)).index=0,e.sibling=null,e}function a(t,r,n){return t.index=n,e?null!==(n=t.alternate)?(n=n.index)<r?(t.flags=2,r):n:(t.flags=2,r):r}function u(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,r,n){return null===t||6!==t.tag?((t=Wl(r,e.mode,n)).return=e,t):((t=o(t,r)).return=e,t)}function s(e,t,r,n){return null!==t&&t.elementType===r.type?((n=o(t,r.props)).ref=Ea(e,t,r),n.return=e,n):((n=Bl(r.type,r.key,r.props,null,e.mode,n)).ref=Ea(e,t,r),n.return=e,n)}function c(e,t,r,n){return null===t||4!==t.tag||t.stateNode.containerInfo!==r.containerInfo||t.stateNode.implementation!==r.implementation?((t=Hl(r,e.mode,n)).return=e,t):((t=o(t,r.children||[])).return=e,t)}function f(e,t,r,n,a){return null===t||7!==t.tag?((t=Vl(r,e.mode,n,a)).return=e,t):((t=o(t,r)).return=e,t)}function p(e,t,r){if("string"==typeof t||"number"==typeof t)return(t=Wl(""+t,e.mode,r)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case E:return(r=Bl(t.type,t.key,t.props,null,e.mode,r)).ref=Ea(e,null,t),r.return=e,r;case S:return(t=Hl(t,e.mode,r)).return=e,t}if(xa(t)||V(t))return(t=Vl(t,e.mode,r,null)).return=e,t;Sa(e,t)}return null}function d(e,t,r,n){var o=null!==t?t.key:null;if("string"==typeof r||"number"==typeof r)return null!==o?null:l(e,t,""+r,n);if("object"==typeof r&&null!==r){switch(r.$$typeof){case E:return r.key===o?r.type===k?f(e,t,r.props.children,n,o):s(e,t,r,n):null;case S:return r.key===o?c(e,t,r,n):null}if(xa(r)||V(r))return null!==o?null:f(e,t,r,n,null);Sa(e,r)}return null}function h(e,t,r,n,o){if("string"==typeof n||"number"==typeof n)return l(t,e=e.get(r)||null,""+n,o);if("object"==typeof n&&null!==n){switch(n.$$typeof){case E:return e=e.get(null===n.key?r:n.key)||null,n.type===k?f(t,e,n.props.children,o,n.key):s(t,e,n,o);case S:return c(t,e=e.get(null===n.key?r:n.key)||null,n,o)}if(xa(n)||V(n))return f(t,e=e.get(r)||null,n,o,null);Sa(t,n)}return null}function v(o,i,u,l){for(var s=null,c=null,f=i,v=i=0,g=null;null!==f&&v<u.length;v++){f.index>v?(g=f,f=null):g=f.sibling;var y=d(o,f,u[v],l);if(null===y){null===f&&(f=g);break}e&&f&&null===y.alternate&&t(o,f),i=a(y,i,v),null===c?s=y:c.sibling=y,c=y,f=g}if(v===u.length)return r(o,f),s;if(null===f){for(;v<u.length;v++)null!==(f=p(o,u[v],l))&&(i=a(f,i,v),null===c?s=f:c.sibling=f,c=f);return s}for(f=n(o,f);v<u.length;v++)null!==(g=h(f,o,v,u[v],l))&&(e&&null!==g.alternate&&f.delete(null===g.key?v:g.key),i=a(g,i,v),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return t(o,e)})),s}function g(o,u,l,s){var c=V(l);if("function"!=typeof c)throw Error(i(150));if(null==(l=c.call(l)))throw Error(i(151));for(var f=c=null,v=u,g=u=0,y=null,m=l.next();null!==v&&!m.done;g++,m=l.next()){v.index>g?(y=v,v=null):y=v.sibling;var b=d(o,v,m.value,s);if(null===b){null===v&&(v=y);break}e&&v&&null===b.alternate&&t(o,v),u=a(b,u,g),null===f?c=b:f.sibling=b,f=b,v=y}if(m.done)return r(o,v),c;if(null===v){for(;!m.done;g++,m=l.next())null!==(m=p(o,m.value,s))&&(u=a(m,u,g),null===f?c=m:f.sibling=m,f=m);return c}for(v=n(o,v);!m.done;g++,m=l.next())null!==(m=h(v,o,g,m.value,s))&&(e&&null!==m.alternate&&v.delete(null===m.key?g:m.key),u=a(m,u,g),null===f?c=m:f.sibling=m,f=m);return e&&v.forEach((function(e){return t(o,e)})),c}return function(e,n,a,l){var s="object"==typeof a&&null!==a&&a.type===k&&null===a.key;s&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case E:e:{for(c=a.key,s=n;null!==s;){if(s.key===c){if(7===s.tag){if(a.type===k){r(e,s.sibling),(n=o(s,a.props.children)).return=e,e=n;break e}}else if(s.elementType===a.type){r(e,s.sibling),(n=o(s,a.props)).ref=Ea(e,s,a),n.return=e,e=n;break e}r(e,s);break}t(e,s),s=s.sibling}a.type===k?((n=Vl(a.props.children,e.mode,l,a.key)).return=e,e=n):((l=Bl(a.type,a.key,a.props,null,e.mode,l)).ref=Ea(e,n,a),l.return=e,e=l)}return u(e);case S:e:{for(s=a.key;null!==n;){if(n.key===s){if(4===n.tag&&n.stateNode.containerInfo===a.containerInfo&&n.stateNode.implementation===a.implementation){r(e,n.sibling),(n=o(n,a.children||[])).return=e,e=n;break e}r(e,n);break}t(e,n),n=n.sibling}(n=Hl(a,e.mode,l)).return=e,e=n}return u(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==n&&6===n.tag?(r(e,n.sibling),(n=o(n,a)).return=e,e=n):(r(e,n),(n=Wl(a,e.mode,l)).return=e,e=n),u(e);if(xa(a))return v(e,n,a,l);if(V(a))return g(e,n,a,l);if(c&&Sa(e,a),void 0===a&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,Q(e.type)||"Component"))}return r(e,n)}}var Oa=ka(!0),Ra=ka(!1),Ta={},Aa=uo(Ta),Ca=uo(Ta),_a=uo(Ta);function Pa(e){if(e===Ta)throw Error(i(174));return e}function Na(e,t){switch(so(_a,t),so(Ca,e),so(Aa,Ta),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:de(null,"");break;default:t=de(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}lo(Aa),so(Aa,t)}function Ma(){lo(Aa),lo(Ca),lo(_a)}function La(e){Pa(_a.current);var t=Pa(Aa.current),r=de(t,e.type);t!==r&&(so(Ca,e),so(Aa,r))}function Ia(e){Ca.current===e&&(lo(Aa),lo(Ca))}var ja=uo(0);function Ua(e){for(var t=e;null!==t;){if(13===t.tag){var r=t.memoizedState;if(null!==r&&(null===(r=r.dehydrated)||"$?"===r.data||"$!"===r.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Da=null,Fa=null,za=!1;function Ba(e,t){var r=Dl(5,null,null,0);r.elementType="DELETED",r.type="DELETED",r.stateNode=t,r.return=e,r.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=r,e.lastEffect=r):e.firstEffect=e.lastEffect=r}function Va(e,t){switch(e.tag){case 5:var r=e.type;return null!==(t=1!==t.nodeType||r.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function $a(e){if(za){var t=Fa;if(t){var r=t;if(!Va(e,t)){if(!(t=qn(r.nextSibling))||!Va(e,t))return e.flags=-1025&e.flags|2,za=!1,void(Da=e);Ba(Da,r)}Da=e,Fa=qn(t.firstChild)}else e.flags=-1025&e.flags|2,za=!1,Da=e}}function Wa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Da=e}function Ha(e){if(e!==Da)return!1;if(!za)return Wa(e),za=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Vn(t,e.memoizedProps))for(t=Fa;t;)Ba(e,t),t=qn(t.nextSibling);if(Wa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var r=e.data;if("/$"===r){if(0===t){Fa=qn(e.nextSibling);break e}t--}else"$"!==r&&"$!"!==r&&"$?"!==r||t++}e=e.nextSibling}Fa=null}}else Fa=Da?qn(e.stateNode.nextSibling):null;return!0}function qa(){Fa=Da=null,za=!1}var Qa=[];function Ya(){for(var e=0;e<Qa.length;e++)Qa[e]._workInProgressVersionPrimary=null;Qa.length=0}var Ga=x.ReactCurrentDispatcher,Ka=x.ReactCurrentBatchConfig,Xa=0,Ja=null,Za=null,ei=null,ti=!1,ri=!1;function ni(){throw Error(i(321))}function oi(e,t){if(null===t)return!1;for(var r=0;r<t.length&&r<e.length;r++)if(!ln(e[r],t[r]))return!1;return!0}function ai(e,t,r,n,o,a){if(Xa=a,Ja=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Ga.current=null===e||null===e.memoizedState?Pi:Ni,e=r(n,o),ri){a=0;do{if(ri=!1,!(25>a))throw Error(i(301));a+=1,ei=Za=null,t.updateQueue=null,Ga.current=Mi,e=r(n,o)}while(ri)}if(Ga.current=_i,t=null!==Za&&null!==Za.next,Xa=0,ei=Za=Ja=null,ti=!1,t)throw Error(i(300));return e}function ii(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ei?Ja.memoizedState=ei=e:ei=ei.next=e,ei}function ui(){if(null===Za){var e=Ja.alternate;e=null!==e?e.memoizedState:null}else e=Za.next;var t=null===ei?Ja.memoizedState:ei.next;if(null!==t)ei=t,Za=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Za=e).memoizedState,baseState:Za.baseState,baseQueue:Za.baseQueue,queue:Za.queue,next:null},null===ei?Ja.memoizedState=ei=e:ei=ei.next=e}return ei}function li(e,t){return"function"==typeof t?t(e):t}function si(e){var t=ui(),r=t.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=e;var n=Za,o=n.baseQueue,a=r.pending;if(null!==a){if(null!==o){var u=o.next;o.next=a.next,a.next=u}n.baseQueue=o=a,r.pending=null}if(null!==o){o=o.next,n=n.baseState;var l=u=a=null,s=o;do{var c=s.lane;if((Xa&c)===c)null!==l&&(l=l.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),n=s.eagerReducer===e?s.eagerState:e(n,s.action);else{var f={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===l?(u=l=f,a=n):l=l.next=f,Ja.lanes|=c,Uu|=c}s=s.next}while(null!==s&&s!==o);null===l?a=n:l.next=u,ln(n,t.memoizedState)||(Ii=!0),t.memoizedState=n,t.baseState=a,t.baseQueue=l,r.lastRenderedState=n}return[t.memoizedState,r.dispatch]}function ci(e){var t=ui(),r=t.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=e;var n=r.dispatch,o=r.pending,a=t.memoizedState;if(null!==o){r.pending=null;var u=o=o.next;do{a=e(a,u.action),u=u.next}while(u!==o);ln(a,t.memoizedState)||(Ii=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),r.lastRenderedState=a}return[a,n]}function fi(e,t,r){var n=t._getVersion;n=n(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===n:(e=e.mutableReadLanes,(e=(Xa&e)===e)&&(t._workInProgressVersionPrimary=n,Qa.push(t))),e)return r(t._source);throw Qa.push(t),Error(i(350))}function pi(e,t,r,n){var o=Cu;if(null===o)throw Error(i(349));var a=t._getVersion,u=a(t._source),l=Ga.current,s=l.useState((function(){return fi(o,t,r)})),c=s[1],f=s[0];s=ei;var p=e.memoizedState,d=p.refs,h=d.getSnapshot,v=p.source;p=p.subscribe;var g=Ja;return e.memoizedState={refs:d,source:t,subscribe:n},l.useEffect((function(){d.getSnapshot=r,d.setSnapshot=c;var e=a(t._source);if(!ln(u,e)){e=r(t._source),ln(f,e)||(c(e),e=sl(g),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var n=o.entanglements,i=e;0<i;){var l=31-Vt(i),s=1<<l;n[l]|=e,i&=~s}}}),[r,t,n]),l.useEffect((function(){return n(t._source,(function(){var e=d.getSnapshot,r=d.setSnapshot;try{r(e(t._source));var n=sl(g);o.mutableReadLanes|=n&o.pendingLanes}catch(e){r((function(){throw e}))}}))}),[t,n]),ln(h,r)&&ln(v,t)&&ln(p,n)||((e={pending:null,dispatch:null,lastRenderedReducer:li,lastRenderedState:f}).dispatch=c=Ci.bind(null,Ja,e),s.queue=e,s.baseQueue=null,f=fi(o,t,r),s.memoizedState=s.baseState=f),f}function di(e,t,r){return pi(ui(),e,t,r)}function hi(e){var t=ii();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:li,lastRenderedState:e}).dispatch=Ci.bind(null,Ja,e),[t.memoizedState,e]}function vi(e,t,r,n){return e={tag:e,create:t,destroy:r,deps:n,next:null},null===(t=Ja.updateQueue)?(t={lastEffect:null},Ja.updateQueue=t,t.lastEffect=e.next=e):null===(r=t.lastEffect)?t.lastEffect=e.next=e:(n=r.next,r.next=e,e.next=n,t.lastEffect=e),e}function gi(e){return e={current:e},ii().memoizedState=e}function yi(){return ui().memoizedState}function mi(e,t,r,n){var o=ii();Ja.flags|=e,o.memoizedState=vi(1|t,r,void 0,void 0===n?null:n)}function bi(e,t,r,n){var o=ui();n=void 0===n?null:n;var a=void 0;if(null!==Za){var i=Za.memoizedState;if(a=i.destroy,null!==n&&oi(n,i.deps))return void vi(t,r,a,n)}Ja.flags|=e,o.memoizedState=vi(1|t,r,a,n)}function wi(e,t){return mi(516,4,e,t)}function xi(e,t){return bi(516,4,e,t)}function Ei(e,t){return bi(4,2,e,t)}function Si(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ki(e,t,r){return r=null!=r?r.concat([e]):null,bi(4,2,Si.bind(null,t,e),r)}function Oi(){}function Ri(e,t){var r=ui();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&oi(t,n[1])?n[0]:(r.memoizedState=[e,t],e)}function Ti(e,t){var r=ui();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&oi(t,n[1])?n[0]:(e=e(),r.memoizedState=[e,t],e)}function Ai(e,t){var r=$o();Ho(98>r?98:r,(function(){e(!0)})),Ho(97<r?97:r,(function(){var r=Ka.transition;Ka.transition=1;try{e(!1),t()}finally{Ka.transition=r}}))}function Ci(e,t,r){var n=ll(),o=sl(e),a={lane:o,action:r,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Ja||null!==i&&i===Ja)ri=ti=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var u=t.lastRenderedState,l=i(u,r);if(a.eagerReducer=i,a.eagerState=l,ln(l,u))return}catch(e){}cl(e,o,n)}}var _i={readContext:aa,useCallback:ni,useContext:ni,useEffect:ni,useImperativeHandle:ni,useLayoutEffect:ni,useMemo:ni,useReducer:ni,useRef:ni,useState:ni,useDebugValue:ni,useDeferredValue:ni,useTransition:ni,useMutableSource:ni,useOpaqueIdentifier:ni,unstable_isNewReconciler:!1},Pi={readContext:aa,useCallback:function(e,t){return ii().memoizedState=[e,void 0===t?null:t],e},useContext:aa,useEffect:wi,useImperativeHandle:function(e,t,r){return r=null!=r?r.concat([e]):null,mi(4,2,Si.bind(null,t,e),r)},useLayoutEffect:function(e,t){return mi(4,2,e,t)},useMemo:function(e,t){var r=ii();return t=void 0===t?null:t,e=e(),r.memoizedState=[e,t],e},useReducer:function(e,t,r){var n=ii();return t=void 0!==r?r(t):t,n.memoizedState=n.baseState=t,e=(e=n.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ci.bind(null,Ja,e),[n.memoizedState,e]},useRef:gi,useState:hi,useDebugValue:Oi,useDeferredValue:function(e){var t=hi(e),r=t[0],n=t[1];return wi((function(){var t=Ka.transition;Ka.transition=1;try{n(e)}finally{Ka.transition=t}}),[e]),r},useTransition:function(){var e=hi(!1),t=e[0];return gi(e=Ai.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,r){var n=ii();return n.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:r},pi(n,e,t,r)},useOpaqueIdentifier:function(){if(za){var e=!1,t=function(e){return{$$typeof:I,toString:e,valueOf:e}}((function(){throw e||(e=!0,r("r:"+(Yn++).toString(36))),Error(i(355))})),r=hi(t)[1];return 0==(2&Ja.mode)&&(Ja.flags|=516,vi(5,(function(){r("r:"+(Yn++).toString(36))}),void 0,null)),t}return hi(t="r:"+(Yn++).toString(36)),t},unstable_isNewReconciler:!1},Ni={readContext:aa,useCallback:Ri,useContext:aa,useEffect:xi,useImperativeHandle:ki,useLayoutEffect:Ei,useMemo:Ti,useReducer:si,useRef:yi,useState:function(){return si(li)},useDebugValue:Oi,useDeferredValue:function(e){var t=si(li),r=t[0],n=t[1];return xi((function(){var t=Ka.transition;Ka.transition=1;try{n(e)}finally{Ka.transition=t}}),[e]),r},useTransition:function(){var e=si(li)[0];return[yi().current,e]},useMutableSource:di,useOpaqueIdentifier:function(){return si(li)[0]},unstable_isNewReconciler:!1},Mi={readContext:aa,useCallback:Ri,useContext:aa,useEffect:xi,useImperativeHandle:ki,useLayoutEffect:Ei,useMemo:Ti,useReducer:ci,useRef:yi,useState:function(){return ci(li)},useDebugValue:Oi,useDeferredValue:function(e){var t=ci(li),r=t[0],n=t[1];return xi((function(){var t=Ka.transition;Ka.transition=1;try{n(e)}finally{Ka.transition=t}}),[e]),r},useTransition:function(){var e=ci(li)[0];return[yi().current,e]},useMutableSource:di,useOpaqueIdentifier:function(){return ci(li)[0]},unstable_isNewReconciler:!1},Li=x.ReactCurrentOwner,Ii=!1;function ji(e,t,r,n){t.child=null===e?Ra(t,null,r,n):Oa(t,e.child,r,n)}function Ui(e,t,r,n,o){r=r.render;var a=t.ref;return oa(t,o),n=ai(e,t,r,n,a,o),null===e||Ii?(t.flags|=1,ji(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,tu(e,t,o))}function Di(e,t,r,n,o,a){if(null===e){var i=r.type;return"function"!=typeof i||Fl(i)||void 0!==i.defaultProps||null!==r.compare||void 0!==r.defaultProps?((e=Bl(r.type,null,n,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Fi(e,t,i,n,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(r=null!==(r=r.compare)?r:cn)(o,n)&&e.ref===t.ref)?tu(e,t,a):(t.flags|=1,(e=zl(i,n)).ref=t.ref,e.return=t,t.child=e)}function Fi(e,t,r,n,o,a){if(null!==e&&cn(e.memoizedProps,n)&&e.ref===t.ref){if(Ii=!1,0==(a&o))return t.lanes=e.lanes,tu(e,t,a);0!=(16384&e.flags)&&(Ii=!0)}return Vi(e,t,r,n,a)}function zi(e,t,r){var n=t.pendingProps,o=n.children,a=null!==e?e.memoizedState:null;if("hidden"===n.mode||"unstable-defer-without-hiding"===n.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},gl(0,r);else{if(0==(1073741824&r))return e=null!==a?a.baseLanes|r:r,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},gl(0,e),null;t.memoizedState={baseLanes:0},gl(0,null!==a?a.baseLanes:r)}else null!==a?(n=a.baseLanes|r,t.memoizedState=null):n=r,gl(0,n);return ji(e,t,o,r),t.child}function Bi(e,t){var r=t.ref;(null===e&&null!==r||null!==e&&e.ref!==r)&&(t.flags|=128)}function Vi(e,t,r,n,o){var a=go(r)?ho:fo.current;return a=vo(t,a),oa(t,o),r=ai(e,t,r,n,a,o),null===e||Ii?(t.flags|=1,ji(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,tu(e,t,o))}function $i(e,t,r,n,o){if(go(r)){var a=!0;wo(t)}else a=!1;if(oa(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ma(t,r,n),wa(t,r,n,o),n=!0;else if(null===e){var i=t.stateNode,u=t.memoizedProps;i.props=u;var l=i.context,s=r.contextType;s="object"==typeof s&&null!==s?aa(s):vo(t,s=go(r)?ho:fo.current);var c=r.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(u!==n||l!==s)&&ba(t,i,n,s),ia=!1;var p=t.memoizedState;i.state=p,pa(t,n,i,o),l=t.memoizedState,u!==n||p!==l||po.current||ia?("function"==typeof c&&(va(t,r,c,n),l=t.memoizedState),(u=ia||ya(t,r,u,n,p,l,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=n,t.memoizedState=l),i.props=n,i.state=l,i.context=s,n=u):("function"==typeof i.componentDidMount&&(t.flags|=4),n=!1)}else{i=t.stateNode,la(e,t),u=t.memoizedProps,s=t.type===t.elementType?u:Ko(t.type,u),i.props=s,f=t.pendingProps,p=i.context,l="object"==typeof(l=r.contextType)&&null!==l?aa(l):vo(t,l=go(r)?ho:fo.current);var d=r.getDerivedStateFromProps;(c="function"==typeof d||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(u!==f||p!==l)&&ba(t,i,n,l),ia=!1,p=t.memoizedState,i.state=p,pa(t,n,i,o);var h=t.memoizedState;u!==f||p!==h||po.current||ia?("function"==typeof d&&(va(t,r,d,n),h=t.memoizedState),(s=ia||ya(t,r,s,n,p,h,l))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(n,h,l),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(n,h,l)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||u===e.memoizedProps&&p===e.memoizedState||(t.flags|=256),t.memoizedProps=n,t.memoizedState=h),i.props=n,i.state=h,i.context=l,n=s):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||u===e.memoizedProps&&p===e.memoizedState||(t.flags|=256),n=!1)}return Wi(e,t,r,n,a,o)}function Wi(e,t,r,n,o,a){Bi(e,t);var i=0!=(64&t.flags);if(!n&&!i)return o&&xo(t,r,!1),tu(e,t,a);n=t.stateNode,Li.current=t;var u=i&&"function"!=typeof r.getDerivedStateFromError?null:n.render();return t.flags|=1,null!==e&&i?(t.child=Oa(t,e.child,null,a),t.child=Oa(t,null,u,a)):ji(e,t,u,a),t.memoizedState=n.state,o&&xo(t,r,!0),t.child}function Hi(e){var t=e.stateNode;t.pendingContext?mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&mo(0,t.context,!1),Na(e,t.containerInfo)}var qi,Qi,Yi,Gi={dehydrated:null,retryLane:0};function Ki(e,t,r){var n,o=t.pendingProps,a=ja.current,i=!1;return(n=0!=(64&t.flags))||(n=(null===e||null!==e.memoizedState)&&0!=(2&a)),n?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),so(ja,1&a),null===e?(void 0!==o.fallback&&$a(t),e=o.children,a=o.fallback,i?(e=Xi(t,e,a,r),t.child.memoizedState={baseLanes:r},t.memoizedState=Gi,e):"number"==typeof o.unstable_expectedLoadTime?(e=Xi(t,e,a,r),t.child.memoizedState={baseLanes:r},t.memoizedState=Gi,t.lanes=33554432,e):((r=$l({mode:"visible",children:e},t.mode,r,null)).return=t,t.child=r)):(e.memoizedState,i?(o=function(e,t,r,n,o){var a=t.mode,i=e.child;e=i.sibling;var u={mode:"hidden",children:r};return 0==(2&a)&&t.child!==i?((r=t.child).childLanes=0,r.pendingProps=u,null!==(i=r.lastEffect)?(t.firstEffect=r.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):r=zl(i,u),null!==e?n=zl(e,n):(n=Vl(n,a,o,null)).flags|=2,n.return=t,r.return=t,r.sibling=n,t.child=r,n}(e,t,o.children,o.fallback,r),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:r}:{baseLanes:a.baseLanes|r},i.childLanes=e.childLanes&~r,t.memoizedState=Gi,o):(r=function(e,t,r,n){var o=e.child;return e=o.sibling,r=zl(o,{mode:"visible",children:r}),0==(2&t.mode)&&(r.lanes=n),r.return=t,r.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=r}(e,t,o.children,r),t.memoizedState=null,r))}function Xi(e,t,r,n){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=$l(t,o,0,null),r=Vl(r,o,n,null),a.return=e,r.return=e,a.sibling=r,e.child=a,r}function Ji(e,t){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),na(e.return,t)}function Zi(e,t,r,n,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:n,tail:r,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=n,i.tail=r,i.tailMode=o,i.lastEffect=a)}function eu(e,t,r){var n=t.pendingProps,o=n.revealOrder,a=n.tail;if(ji(e,t,n.children,r),0!=(2&(n=ja.current)))n=1&n|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ji(e,r);else if(19===e.tag)Ji(e,r);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}n&=1}if(so(ja,n),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(r=t.child,o=null;null!==r;)null!==(e=r.alternate)&&null===Ua(e)&&(o=r),r=r.sibling;null===(r=o)?(o=t.child,t.child=null):(o=r.sibling,r.sibling=null),Zi(t,!1,o,r,a,t.lastEffect);break;case"backwards":for(r=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ua(e)){t.child=o;break}e=o.sibling,o.sibling=r,r=o,o=e}Zi(t,!0,r,null,a,t.lastEffect);break;case"together":Zi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function tu(e,t,r){if(null!==e&&(t.dependencies=e.dependencies),Uu|=t.lanes,0!=(r&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(r=zl(e=t.child,e.pendingProps),t.child=r,r.return=t;null!==e.sibling;)e=e.sibling,(r=r.sibling=zl(e,e.pendingProps)).return=t;r.sibling=null}return t.child}return null}function ru(e,t){if(!za)switch(e.tailMode){case"hidden":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?e.tail=null:r.sibling=null;break;case"collapsed":r=e.tail;for(var n=null;null!==r;)null!==r.alternate&&(n=r),r=r.sibling;null===n?t||null===e.tail?e.tail=null:e.tail.sibling=null:n.sibling=null}}function nu(e,t,r){var n=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return go(t.type)&&yo(),null;case 3:return Ma(),lo(po),lo(fo),Ya(),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(Ha(t)?t.flags|=4:n.hydrate||(t.flags|=256)),null;case 5:Ia(t);var a=Pa(_a.current);if(r=t.type,null!==e&&null!=t.stateNode)Qi(e,t,r,n),e.ref!==t.ref&&(t.flags|=128);else{if(!n){if(null===t.stateNode)throw Error(i(166));return null}if(e=Pa(Aa.current),Ha(t)){n=t.stateNode,r=t.type;var u=t.memoizedProps;switch(n[Kn]=t,n[Xn]=u,r){case"dialog":An("cancel",n),An("close",n);break;case"iframe":case"object":case"embed":An("load",n);break;case"video":case"audio":for(e=0;e<kn.length;e++)An(kn[e],n);break;case"source":An("error",n);break;case"img":case"image":case"link":An("error",n),An("load",n);break;case"details":An("toggle",n);break;case"input":ee(n,u),An("invalid",n);break;case"select":n._wrapperState={wasMultiple:!!u.multiple},An("invalid",n);break;case"textarea":le(n,u),An("invalid",n)}for(var s in Se(r,u),e=null,u)u.hasOwnProperty(s)&&(a=u[s],"children"===s?"string"==typeof a?n.textContent!==a&&(e=["children",a]):"number"==typeof a&&n.textContent!==""+a&&(e=["children",""+a]):l.hasOwnProperty(s)&&null!=a&&"onScroll"===s&&An("scroll",n));switch(r){case"input":K(n),ne(n,u,!0);break;case"textarea":K(n),ce(n);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(n.onclick=Dn)}n=e,t.updateQueue=n,null!==n&&(t.flags|=4)}else{switch(s=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=pe(r)),e===fe?"script"===r?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof n.is?e=s.createElement(r,{is:n.is}):(e=s.createElement(r),"select"===r&&(s=e,n.multiple?s.multiple=!0:n.size&&(s.size=n.size))):e=s.createElementNS(e,r),e[Kn]=t,e[Xn]=n,qi(e,t),t.stateNode=e,s=ke(r,n),r){case"dialog":An("cancel",e),An("close",e),a=n;break;case"iframe":case"object":case"embed":An("load",e),a=n;break;case"video":case"audio":for(a=0;a<kn.length;a++)An(kn[a],e);a=n;break;case"source":An("error",e),a=n;break;case"img":case"image":case"link":An("error",e),An("load",e),a=n;break;case"details":An("toggle",e),a=n;break;case"input":ee(e,n),a=Z(e,n),An("invalid",e);break;case"option":a=ae(e,n);break;case"select":e._wrapperState={wasMultiple:!!n.multiple},a=o({},n,{value:void 0}),An("invalid",e);break;case"textarea":le(e,n),a=ue(e,n),An("invalid",e);break;default:a=n}Se(r,a);var c=a;for(u in c)if(c.hasOwnProperty(u)){var f=c[u];"style"===u?xe(e,f):"dangerouslySetInnerHTML"===u?null!=(f=f?f.__html:void 0)&&ge(e,f):"children"===u?"string"==typeof f?("textarea"!==r||""!==f)&&ye(e,f):"number"==typeof f&&ye(e,""+f):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(l.hasOwnProperty(u)?null!=f&&"onScroll"===u&&An("scroll",e):null!=f&&w(e,u,f,s))}switch(r){case"input":K(e),ne(e,n,!1);break;case"textarea":K(e),ce(e);break;case"option":null!=n.value&&e.setAttribute("value",""+Y(n.value));break;case"select":e.multiple=!!n.multiple,null!=(u=n.value)?ie(e,!!n.multiple,u,!1):null!=n.defaultValue&&ie(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Dn)}Bn(r,n)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Yi(0,t,e.memoizedProps,n);else{if("string"!=typeof n&&null===t.stateNode)throw Error(i(166));r=Pa(_a.current),Pa(Aa.current),Ha(t)?(n=t.stateNode,r=t.memoizedProps,n[Kn]=t,n.nodeValue!==r&&(t.flags|=4)):((n=(9===r.nodeType?r:r.ownerDocument).createTextNode(n))[Kn]=t,t.stateNode=n)}return null;case 13:return lo(ja),n=t.memoizedState,0!=(64&t.flags)?(t.lanes=r,t):(n=null!==n,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Ha(t):r=null!==e.memoizedState,n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&ja.current)?0===Lu&&(Lu=3):(0!==Lu&&3!==Lu||(Lu=4),null===Cu||0==(134217727&Uu)&&0==(134217727&Du)||hl(Cu,Pu))),(n||r)&&(t.flags|=4),null);case 4:return Ma(),null===e&&_n(t.stateNode.containerInfo),null;case 10:return ra(t),null;case 19:if(lo(ja),null===(n=t.memoizedState))return null;if(u=0!=(64&t.flags),null===(s=n.rendering))if(u)ru(n,!1);else{if(0!==Lu||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(s=Ua(e))){for(t.flags|=64,ru(n,!1),null!==(u=s.updateQueue)&&(t.updateQueue=u,t.flags|=4),null===n.lastEffect&&(t.firstEffect=null),t.lastEffect=n.lastEffect,n=r,r=t.child;null!==r;)e=n,(u=r).flags&=2,u.nextEffect=null,u.firstEffect=null,u.lastEffect=null,null===(s=u.alternate)?(u.childLanes=0,u.lanes=e,u.child=null,u.memoizedProps=null,u.memoizedState=null,u.updateQueue=null,u.dependencies=null,u.stateNode=null):(u.childLanes=s.childLanes,u.lanes=s.lanes,u.child=s.child,u.memoizedProps=s.memoizedProps,u.memoizedState=s.memoizedState,u.updateQueue=s.updateQueue,u.type=s.type,e=s.dependencies,u.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),r=r.sibling;return so(ja,1&ja.current|2),t.child}e=e.sibling}null!==n.tail&&Vo()>Vu&&(t.flags|=64,u=!0,ru(n,!1),t.lanes=33554432)}else{if(!u)if(null!==(e=Ua(s))){if(t.flags|=64,u=!0,null!==(r=e.updateQueue)&&(t.updateQueue=r,t.flags|=4),ru(n,!0),null===n.tail&&"hidden"===n.tailMode&&!s.alternate&&!za)return null!==(t=t.lastEffect=n.lastEffect)&&(t.nextEffect=null),null}else 2*Vo()-n.renderingStartTime>Vu&&1073741824!==r&&(t.flags|=64,u=!0,ru(n,!1),t.lanes=33554432);n.isBackwards?(s.sibling=t.child,t.child=s):(null!==(r=n.last)?r.sibling=s:t.child=s,n.last=s)}return null!==n.tail?(r=n.tail,n.rendering=r,n.tail=r.sibling,n.lastEffect=t.lastEffect,n.renderingStartTime=Vo(),r.sibling=null,t=ja.current,so(ja,u?1&t|2:1&t),r):null;case 23:case 24:return yl(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==n.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function ou(e){switch(e.tag){case 1:go(e.type)&&yo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ma(),lo(po),lo(fo),Ya(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Ia(e),null;case 13:return lo(ja),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return lo(ja),null;case 4:return Ma(),null;case 10:return ra(e),null;case 23:case 24:return yl(),null;default:return null}}function au(e,t){try{var r="",n=t;do{r+=q(n),n=n.return}while(n);var o=r}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function iu(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}qi=function(e,t){for(var r=t.child;null!==r;){if(5===r.tag||6===r.tag)e.appendChild(r.stateNode);else if(4!==r.tag&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===t)break;for(;null===r.sibling;){if(null===r.return||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}},Qi=function(e,t,r,n){var a=e.memoizedProps;if(a!==n){e=t.stateNode,Pa(Aa.current);var i,u=null;switch(r){case"input":a=Z(e,a),n=Z(e,n),u=[];break;case"option":a=ae(e,a),n=ae(e,n),u=[];break;case"select":a=o({},a,{value:void 0}),n=o({},n,{value:void 0}),u=[];break;case"textarea":a=ue(e,a),n=ue(e,n),u=[];break;default:"function"!=typeof a.onClick&&"function"==typeof n.onClick&&(e.onclick=Dn)}for(f in Se(r,n),r=null,a)if(!n.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var s=a[f];for(i in s)s.hasOwnProperty(i)&&(r||(r={}),r[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(l.hasOwnProperty(f)?u||(u=[]):(u=u||[]).push(f,null));for(f in n){var c=n[f];if(s=null!=a?a[f]:void 0,n.hasOwnProperty(f)&&c!==s&&(null!=c||null!=s))if("style"===f)if(s){for(i in s)!s.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(r||(r={}),r[i]="");for(i in c)c.hasOwnProperty(i)&&s[i]!==c[i]&&(r||(r={}),r[i]=c[i])}else r||(u||(u=[]),u.push(f,r)),r=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(u=u||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(u=u||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(l.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&An("scroll",e),u||s===c||(u=[])):"object"==typeof c&&null!==c&&c.$$typeof===I?c.toString():(u=u||[]).push(f,c))}r&&(u=u||[]).push("style",r);var f=u;(t.updateQueue=f)&&(t.flags|=4)}},Yi=function(e,t,r,n){r!==n&&(t.flags|=4)};var uu="function"==typeof WeakMap?WeakMap:Map;function lu(e,t,r){(r=sa(-1,r)).tag=3,r.payload={element:null};var n=t.value;return r.callback=function(){qu||(qu=!0,Qu=n),iu(0,t)},r}function su(e,t,r){(r=sa(-1,r)).tag=3;var n=e.type.getDerivedStateFromError;if("function"==typeof n){var o=t.value;r.payload=function(){return iu(0,t),n(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(r.callback=function(){"function"!=typeof n&&(null===Yu?Yu=new Set([this]):Yu.add(this),iu(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),r}var cu="function"==typeof WeakSet?WeakSet:Set;function fu(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ll(e,t)}else t.current=null}function pu(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var r=e.memoizedProps,n=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?r:Ko(t.type,r),n),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Hn(t.stateNode.containerInfo))}throw Error(i(163))}function du(e,t,r){switch(r.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=r.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var n=e.create;e.destroy=n()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=r.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;n=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Pl(r,e),_l(r,e)),e=n}while(e!==t)}return;case 1:return e=r.stateNode,4&r.flags&&(null===t?e.componentDidMount():(n=r.elementType===r.type?t.memoizedProps:Ko(r.type,t.memoizedProps),e.componentDidUpdate(n,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=r.updateQueue)&&da(r,t,e));case 3:if(null!==(t=r.updateQueue)){if(e=null,null!==r.child)switch(r.child.tag){case 5:case 1:e=r.child.stateNode}da(r,t,e)}return;case 5:return e=r.stateNode,void(null===t&&4&r.flags&&Bn(r.type,r.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===r.memoizedState&&(r=r.alternate,null!==r&&(r=r.memoizedState,null!==r&&(r=r.dehydrated,null!==r&&wt(r)))))}throw Error(i(163))}function hu(e,t){for(var r=e;;){if(5===r.tag){var n=r.stateNode;if(t)"function"==typeof(n=n.style).setProperty?n.setProperty("display","none","important"):n.display="none";else{n=r.stateNode;var o=r.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,n.style.display=we("display",o)}}else if(6===r.tag)r.stateNode.nodeValue=t?"":r.memoizedProps;else if((23!==r.tag&&24!==r.tag||null===r.memoizedState||r===e)&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===e)break;for(;null===r.sibling;){if(null===r.return||r.return===e)return;r=r.return}r.sibling.return=r.return,r=r.sibling}}function vu(e,t){if(So&&"function"==typeof So.onCommitFiberUnmount)try{So.onCommitFiberUnmount(Eo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e=e.next;do{var n=r,o=n.destroy;if(n=n.tag,void 0!==o)if(0!=(4&n))Pl(t,r);else{n=t;try{o()}catch(e){Ll(n,e)}}r=r.next}while(r!==e)}break;case 1:if(fu(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Ll(t,e)}break;case 5:fu(t);break;case 4:xu(e,t)}}function gu(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function yu(e){return 5===e.tag||3===e.tag||4===e.tag}function mu(e){e:{for(var t=e.return;null!==t;){if(yu(t))break e;t=t.return}throw Error(i(160))}var r=t;switch(t=r.stateNode,r.tag){case 5:var n=!1;break;case 3:case 4:t=t.containerInfo,n=!0;break;default:throw Error(i(161))}16&r.flags&&(ye(t,""),r.flags&=-17);e:t:for(r=e;;){for(;null===r.sibling;){if(null===r.return||yu(r.return)){r=null;break e}r=r.return}for(r.sibling.return=r.return,r=r.sibling;5!==r.tag&&6!==r.tag&&18!==r.tag;){if(2&r.flags)continue t;if(null===r.child||4===r.tag)continue t;r.child.return=r,r=r.child}if(!(2&r.flags)){r=r.stateNode;break e}}n?bu(e,r,t):wu(e,r,t)}function bu(e,t,r){var n=e.tag,o=5===n||6===n;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===r.nodeType?r.parentNode.insertBefore(e,t):r.insertBefore(e,t):(8===r.nodeType?(t=r.parentNode).insertBefore(e,r):(t=r).appendChild(e),null!=(r=r._reactRootContainer)||null!==t.onclick||(t.onclick=Dn));else if(4!==n&&null!==(e=e.child))for(bu(e,t,r),e=e.sibling;null!==e;)bu(e,t,r),e=e.sibling}function wu(e,t,r){var n=e.tag,o=5===n||6===n;if(o)e=o?e.stateNode:e.stateNode.instance,t?r.insertBefore(e,t):r.appendChild(e);else if(4!==n&&null!==(e=e.child))for(wu(e,t,r),e=e.sibling;null!==e;)wu(e,t,r),e=e.sibling}function xu(e,t){for(var r,n,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(r=a.stateNode,a.tag){case 5:n=!1;break e;case 3:case 4:r=r.containerInfo,n=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var u=e,l=o,s=l;;)if(vu(u,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===l)break e;for(;null===s.sibling;){if(null===s.return||s.return===l)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}n?(u=r,l=o.stateNode,8===u.nodeType?u.parentNode.removeChild(l):u.removeChild(l)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,n=!0,o.child.return=o,o=o.child;continue}}else if(vu(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function Eu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var n=r=r.next;do{3==(3&n.tag)&&(e=n.destroy,n.destroy=void 0,void 0!==e&&e()),n=n.next}while(n!==r)}return;case 1:case 12:case 17:return;case 5:if(null!=(r=t.stateNode)){n=t.memoizedProps;var o=null!==e?e.memoizedProps:n;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(r[Xn]=n,"input"===e&&"radio"===n.type&&null!=n.name&&te(r,n),ke(e,o),t=ke(e,n),o=0;o<a.length;o+=2){var u=a[o],l=a[o+1];"style"===u?xe(r,l):"dangerouslySetInnerHTML"===u?ge(r,l):"children"===u?ye(r,l):w(r,u,l,t)}switch(e){case"input":re(r,n);break;case"textarea":se(r,n);break;case"select":e=r._wrapperState.wasMultiple,r._wrapperState.wasMultiple=!!n.multiple,null!=(a=n.value)?ie(r,!!n.multiple,a,!1):e!==!!n.multiple&&(null!=n.defaultValue?ie(r,!!n.multiple,n.defaultValue,!0):ie(r,!!n.multiple,n.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((r=t.stateNode).hydrate&&(r.hydrate=!1,wt(r.containerInfo)));case 13:return null!==t.memoizedState&&(Bu=Vo(),hu(t.child,!0)),void Su(t);case 19:return void Su(t);case 23:case 24:return void hu(t,null!==t.memoizedState)}throw Error(i(163))}function Su(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var r=e.stateNode;null===r&&(r=e.stateNode=new cu),t.forEach((function(t){var n=jl.bind(null,e,t);r.has(t)||(r.add(t),t.then(n,n))}))}}function ku(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Ou=Math.ceil,Ru=x.ReactCurrentDispatcher,Tu=x.ReactCurrentOwner,Au=0,Cu=null,_u=null,Pu=0,Nu=0,Mu=uo(0),Lu=0,Iu=null,ju=0,Uu=0,Du=0,Fu=0,zu=null,Bu=0,Vu=1/0;function $u(){Vu=Vo()+500}var Wu,Hu=null,qu=!1,Qu=null,Yu=null,Gu=!1,Ku=null,Xu=90,Ju=[],Zu=[],el=null,tl=0,rl=null,nl=-1,ol=0,al=0,il=null,ul=!1;function ll(){return 0!=(48&Au)?Vo():-1!==nl?nl:nl=Vo()}function sl(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===$o()?1:2;if(0===ol&&(ol=ju),0!==Go.transition){0!==al&&(al=null!==zu?zu.pendingLanes:0),e=ol;var t=4186112&~al;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=$o(),e=Dt(0!=(4&Au)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),ol)}function cl(e,t,r){if(50<tl)throw tl=0,rl=null,Error(i(185));if(null===(e=fl(e,t)))return null;Bt(e,t,r),e===Cu&&(Du|=t,4===Lu&&hl(e,Pu));var n=$o();1===t?0!=(8&Au)&&0==(48&Au)?vl(e):(pl(e,r),0===Au&&($u(),Qo())):(0==(4&Au)||98!==n&&99!==n||(null===el?el=new Set([e]):el.add(e)),pl(e,r)),zu=e}function fl(e,t){e.lanes|=t;var r=e.alternate;for(null!==r&&(r.lanes|=t),r=e,e=e.return;null!==e;)e.childLanes|=t,null!==(r=e.alternate)&&(r.childLanes|=t),r=e,e=e.return;return 3===r.tag?r.stateNode:null}function pl(e,t){for(var r=e.callbackNode,n=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,u=e.pendingLanes;0<u;){var l=31-Vt(u),s=1<<l,c=a[l];if(-1===c){if(0==(s&n)||0!=(s&o)){c=t,It(s);var f=Lt;a[l]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=s);u&=~s}if(n=jt(e,e===Cu?Pu:0),t=Lt,0===n)null!==r&&(r!==jo&&Ro(r),e.callbackNode=null,e.callbackPriority=0);else{if(null!==r){if(e.callbackPriority===t)return;r!==jo&&Ro(r)}15===t?(r=vl.bind(null,e),null===Do?(Do=[r],Fo=Oo(Po,Yo)):Do.push(r),r=jo):14===t?r=qo(99,vl.bind(null,e)):(r=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),r=qo(r,dl.bind(null,e))),e.callbackPriority=t,e.callbackNode=r}}function dl(e){if(nl=-1,al=ol=0,0!=(48&Au))throw Error(i(327));var t=e.callbackNode;if(Cl()&&e.callbackNode!==t)return null;var r=jt(e,e===Cu?Pu:0);if(0===r)return null;var n=r,o=Au;Au|=16;var a=wl();for(Cu===e&&Pu===n||($u(),ml(e,n));;)try{Sl();break}catch(t){bl(e,t)}if(ta(),Ru.current=a,Au=o,null!==_u?n=0:(Cu=null,Pu=0,n=Lu),0!=(ju&Du))ml(e,0);else if(0!==n){if(2===n&&(Au|=64,e.hydrate&&(e.hydrate=!1,Hn(e.containerInfo)),0!==(r=Ut(e))&&(n=xl(e,r))),1===n)throw t=Iu,ml(e,0),hl(e,r),pl(e,Vo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=r,n){case 0:case 1:throw Error(i(345));case 2:case 5:Rl(e);break;case 3:if(hl(e,r),(62914560&r)===r&&10<(n=Bu+500-Vo())){if(0!==jt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){ll(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=$n(Rl.bind(null,e),n);break}Rl(e);break;case 4:if(hl(e,r),(4186112&r)===r)break;for(n=e.eventTimes,o=-1;0<r;){var u=31-Vt(r);a=1<<u,(u=n[u])>o&&(o=u),r&=~a}if(r=o,10<(r=(120>(r=Vo()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Ou(r/1960))-r)){e.timeoutHandle=$n(Rl.bind(null,e),r);break}Rl(e);break;default:throw Error(i(329))}}return pl(e,Vo()),e.callbackNode===t?dl.bind(null,e):null}function hl(e,t){for(t&=~Fu,t&=~Du,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var r=31-Vt(t),n=1<<r;e[r]=-1,t&=~n}}function vl(e){if(0!=(48&Au))throw Error(i(327));if(Cl(),e===Cu&&0!=(e.expiredLanes&Pu)){var t=Pu,r=xl(e,t);0!=(ju&Du)&&(r=xl(e,t=jt(e,t)))}else r=xl(e,t=jt(e,0));if(0!==e.tag&&2===r&&(Au|=64,e.hydrate&&(e.hydrate=!1,Hn(e.containerInfo)),0!==(t=Ut(e))&&(r=xl(e,t))),1===r)throw r=Iu,ml(e,0),hl(e,t),pl(e,Vo()),r;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Rl(e),pl(e,Vo()),null}function gl(e,t){so(Mu,Nu),Nu|=t,ju|=t}function yl(){Nu=Mu.current,lo(Mu)}function ml(e,t){e.finishedWork=null,e.finishedLanes=0;var r=e.timeoutHandle;if(-1!==r&&(e.timeoutHandle=-1,Wn(r)),null!==_u)for(r=_u.return;null!==r;){var n=r;switch(n.tag){case 1:null!=(n=n.type.childContextTypes)&&yo();break;case 3:Ma(),lo(po),lo(fo),Ya();break;case 5:Ia(n);break;case 4:Ma();break;case 13:case 19:lo(ja);break;case 10:ra(n);break;case 23:case 24:yl()}r=r.return}Cu=e,_u=zl(e.current,null),Pu=Nu=ju=t,Lu=0,Iu=null,Fu=Du=Uu=0}function bl(e,t){for(;;){var r=_u;try{if(ta(),Ga.current=_i,ti){for(var n=Ja.memoizedState;null!==n;){var o=n.queue;null!==o&&(o.pending=null),n=n.next}ti=!1}if(Xa=0,ei=Za=Ja=null,ri=!1,Tu.current=null,null===r||null===r.return){Lu=1,Iu=t,_u=null;break}e:{var a=e,i=r.return,u=r,l=t;if(t=Pu,u.flags|=2048,u.firstEffect=u.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var s=l;if(0==(2&u.mode)){var c=u.alternate;c?(u.updateQueue=c.updateQueue,u.memoizedState=c.memoizedState,u.lanes=c.lanes):(u.updateQueue=null,u.memoizedState=null)}var f=0!=(1&ja.current),p=i;do{var d;if(d=13===p.tag){var h=p.memoizedState;if(null!==h)d=null!==h.dehydrated;else{var v=p.memoizedProps;d=void 0!==v.fallback&&(!0!==v.unstable_avoidThisFallback||!f)}}if(d){var g=p.updateQueue;if(null===g){var y=new Set;y.add(s),p.updateQueue=y}else g.add(s);if(0==(2&p.mode)){if(p.flags|=64,u.flags|=16384,u.flags&=-2981,1===u.tag)if(null===u.alternate)u.tag=17;else{var m=sa(-1,1);m.tag=2,ca(u,m)}u.lanes|=1;break e}l=void 0,u=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new uu,l=new Set,b.set(s,l)):void 0===(l=b.get(s))&&(l=new Set,b.set(s,l)),!l.has(u)){l.add(u);var w=Il.bind(null,a,s,u);s.then(w,w)}p.flags|=4096,p.lanes=t;break e}p=p.return}while(null!==p);l=Error((Q(u.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Lu&&(Lu=2),l=au(l,u),p=i;do{switch(p.tag){case 3:a=l,p.flags|=4096,t&=-t,p.lanes|=t,fa(p,lu(0,a,t));break e;case 1:a=l;var x=p.type,E=p.stateNode;if(0==(64&p.flags)&&("function"==typeof x.getDerivedStateFromError||null!==E&&"function"==typeof E.componentDidCatch&&(null===Yu||!Yu.has(E)))){p.flags|=4096,t&=-t,p.lanes|=t,fa(p,su(p,a,t));break e}}p=p.return}while(null!==p)}Ol(r)}catch(e){t=e,_u===r&&null!==r&&(_u=r=r.return);continue}break}}function wl(){var e=Ru.current;return Ru.current=_i,null===e?_i:e}function xl(e,t){var r=Au;Au|=16;var n=wl();for(Cu===e&&Pu===t||ml(e,t);;)try{El();break}catch(t){bl(e,t)}if(ta(),Au=r,Ru.current=n,null!==_u)throw Error(i(261));return Cu=null,Pu=0,Lu}function El(){for(;null!==_u;)kl(_u)}function Sl(){for(;null!==_u&&!To();)kl(_u)}function kl(e){var t=Wu(e.alternate,e,Nu);e.memoizedProps=e.pendingProps,null===t?Ol(e):_u=t,Tu.current=null}function Ol(e){var t=e;do{var r=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(r=nu(r,t,Nu)))return void(_u=r);if(24!==(r=t).tag&&23!==r.tag||null===r.memoizedState||0!=(1073741824&Nu)||0==(4&r.mode)){for(var n=0,o=r.child;null!==o;)n|=o.lanes|o.childLanes,o=o.sibling;r.childLanes=n}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(r=ou(t)))return r.flags&=2047,void(_u=r);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(_u=t);_u=t=e}while(null!==t);0===Lu&&(Lu=5)}function Rl(e){var t=$o();return Ho(99,Tl.bind(null,e,t)),null}function Tl(e,t){do{Cl()}while(null!==Ku);if(0!=(48&Au))throw Error(i(327));var r=e.finishedWork;if(null===r)return null;if(e.finishedWork=null,e.finishedLanes=0,r===e.current)throw Error(i(177));e.callbackNode=null;var n=r.lanes|r.childLanes,o=n,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var u=e.eventTimes,l=e.expirationTimes;0<a;){var s=31-Vt(a),c=1<<s;o[s]=0,u[s]=-1,l[s]=-1,a&=~c}if(null!==el&&0==(24&n)&&el.has(e)&&el.delete(e),e===Cu&&(_u=Cu=null,Pu=0),1<r.flags?null!==r.lastEffect?(r.lastEffect.nextEffect=r,n=r.firstEffect):n=r:n=r.firstEffect,null!==n){if(o=Au,Au|=32,Tu.current=null,Fn=Qt,vn(u=hn())){if("selectionStart"in u)l={start:u.selectionStart,end:u.selectionEnd};else e:if(l=(l=u.ownerDocument)&&l.defaultView||window,(c=l.getSelection&&l.getSelection())&&0!==c.rangeCount){l=c.anchorNode,a=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{l.nodeType,s.nodeType}catch(e){l=null;break e}var f=0,p=-1,d=-1,h=0,v=0,g=u,y=null;t:for(;;){for(var m;g!==l||0!==a&&3!==g.nodeType||(p=f+a),g!==s||0!==c&&3!==g.nodeType||(d=f+c),3===g.nodeType&&(f+=g.nodeValue.length),null!==(m=g.firstChild);)y=g,g=m;for(;;){if(g===u)break t;if(y===l&&++h===a&&(p=f),y===s&&++v===c&&(d=f),null!==(m=g.nextSibling))break;y=(g=y).parentNode}g=m}l=-1===p||-1===d?null:{start:p,end:d}}else l=null;l=l||{start:0,end:0}}else l=null;zn={focusedElem:u,selectionRange:l},Qt=!1,il=null,ul=!1,Hu=n;do{try{Al()}catch(e){if(null===Hu)throw Error(i(330));Ll(Hu,e),Hu=Hu.nextEffect}}while(null!==Hu);il=null,Hu=n;do{try{for(u=e;null!==Hu;){var b=Hu.flags;if(16&b&&ye(Hu.stateNode,""),128&b){var w=Hu.alternate;if(null!==w){var x=w.ref;null!==x&&("function"==typeof x?x(null):x.current=null)}}switch(1038&b){case 2:mu(Hu),Hu.flags&=-3;break;case 6:mu(Hu),Hu.flags&=-3,Eu(Hu.alternate,Hu);break;case 1024:Hu.flags&=-1025;break;case 1028:Hu.flags&=-1025,Eu(Hu.alternate,Hu);break;case 4:Eu(Hu.alternate,Hu);break;case 8:xu(u,l=Hu);var E=l.alternate;gu(l),null!==E&&gu(E)}Hu=Hu.nextEffect}}catch(e){if(null===Hu)throw Error(i(330));Ll(Hu,e),Hu=Hu.nextEffect}}while(null!==Hu);if(x=zn,w=hn(),b=x.focusedElem,u=x.selectionRange,w!==b&&b&&b.ownerDocument&&dn(b.ownerDocument.documentElement,b)){null!==u&&vn(b)&&(w=u.start,void 0===(x=u.end)&&(x=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(x,b.value.length)):(x=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(x=x.getSelection(),l=b.textContent.length,E=Math.min(u.start,l),u=void 0===u.end?E:Math.min(u.end,l),!x.extend&&E>u&&(l=u,u=E,E=l),l=pn(b,E),a=pn(b,u),l&&a&&(1!==x.rangeCount||x.anchorNode!==l.node||x.anchorOffset!==l.offset||x.focusNode!==a.node||x.focusOffset!==a.offset)&&((w=w.createRange()).setStart(l.node,l.offset),x.removeAllRanges(),E>u?(x.addRange(w),x.extend(a.node,a.offset)):(w.setEnd(a.node,a.offset),x.addRange(w))))),w=[];for(x=b;x=x.parentNode;)1===x.nodeType&&w.push({element:x,left:x.scrollLeft,top:x.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(x=w[b]).element.scrollLeft=x.left,x.element.scrollTop=x.top}Qt=!!Fn,zn=Fn=null,e.current=r,Hu=n;do{try{for(b=e;null!==Hu;){var S=Hu.flags;if(36&S&&du(b,Hu.alternate,Hu),128&S){w=void 0;var k=Hu.ref;if(null!==k){var O=Hu.stateNode;Hu.tag,w=O,"function"==typeof k?k(w):k.current=w}}Hu=Hu.nextEffect}}catch(e){if(null===Hu)throw Error(i(330));Ll(Hu,e),Hu=Hu.nextEffect}}while(null!==Hu);Hu=null,Uo(),Au=o}else e.current=r;if(Gu)Gu=!1,Ku=e,Xu=t;else for(Hu=n;null!==Hu;)t=Hu.nextEffect,Hu.nextEffect=null,8&Hu.flags&&((S=Hu).sibling=null,S.stateNode=null),Hu=t;if(0===(n=e.pendingLanes)&&(Yu=null),1===n?e===rl?tl++:(tl=0,rl=e):tl=0,r=r.stateNode,So&&"function"==typeof So.onCommitFiberRoot)try{So.onCommitFiberRoot(Eo,r,void 0,64==(64&r.current.flags))}catch(e){}if(pl(e,Vo()),qu)throw qu=!1,e=Qu,Qu=null,e;return 0!=(8&Au)||Qo(),null}function Al(){for(;null!==Hu;){var e=Hu.alternate;ul||null===il||(0!=(8&Hu.flags)?Je(Hu,il)&&(ul=!0):13===Hu.tag&&ku(e,Hu)&&Je(Hu,il)&&(ul=!0));var t=Hu.flags;0!=(256&t)&&pu(e,Hu),0==(512&t)||Gu||(Gu=!0,qo(97,(function(){return Cl(),null}))),Hu=Hu.nextEffect}}function Cl(){if(90!==Xu){var e=97<Xu?97:Xu;return Xu=90,Ho(e,Nl)}return!1}function _l(e,t){Ju.push(t,e),Gu||(Gu=!0,qo(97,(function(){return Cl(),null})))}function Pl(e,t){Zu.push(t,e),Gu||(Gu=!0,qo(97,(function(){return Cl(),null})))}function Nl(){if(null===Ku)return!1;var e=Ku;if(Ku=null,0!=(48&Au))throw Error(i(331));var t=Au;Au|=32;var r=Zu;Zu=[];for(var n=0;n<r.length;n+=2){var o=r[n],a=r[n+1],u=o.destroy;if(o.destroy=void 0,"function"==typeof u)try{u()}catch(e){if(null===a)throw Error(i(330));Ll(a,e)}}for(r=Ju,Ju=[],n=0;n<r.length;n+=2){o=r[n],a=r[n+1];try{var l=o.create;o.destroy=l()}catch(e){if(null===a)throw Error(i(330));Ll(a,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Au=t,Qo(),!0}function Ml(e,t,r){ca(e,t=lu(0,t=au(r,t),1)),t=ll(),null!==(e=fl(e,1))&&(Bt(e,1,t),pl(e,t))}function Ll(e,t){if(3===e.tag)Ml(e,e,t);else for(var r=e.return;null!==r;){if(3===r.tag){Ml(r,e,t);break}if(1===r.tag){var n=r.stateNode;if("function"==typeof r.type.getDerivedStateFromError||"function"==typeof n.componentDidCatch&&(null===Yu||!Yu.has(n))){var o=su(r,e=au(t,e),1);if(ca(r,o),o=ll(),null!==(r=fl(r,1)))Bt(r,1,o),pl(r,o);else if("function"==typeof n.componentDidCatch&&(null===Yu||!Yu.has(n)))try{n.componentDidCatch(t,e)}catch(e){}break}}r=r.return}}function Il(e,t,r){var n=e.pingCache;null!==n&&n.delete(t),t=ll(),e.pingedLanes|=e.suspendedLanes&r,Cu===e&&(Pu&r)===r&&(4===Lu||3===Lu&&(62914560&Pu)===Pu&&500>Vo()-Bu?ml(e,0):Fu|=r),pl(e,t)}function jl(e,t){var r=e.stateNode;null!==r&&r.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===$o()?1:2:(0===ol&&(ol=ju),0===(t=Ft(62914560&~ol))&&(t=4194304))),r=ll(),null!==(e=fl(e,t))&&(Bt(e,t,r),pl(e,r))}function Ul(e,t,r,n){this.tag=e,this.key=r,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Dl(e,t,r,n){return new Ul(e,t,r,n)}function Fl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function zl(e,t){var r=e.alternate;return null===r?((r=Dl(e.tag,t,e.key,e.mode)).elementType=e.elementType,r.type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.type=e.type,r.flags=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.childLanes=e.childLanes,r.lanes=e.lanes,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,t=e.dependencies,r.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Bl(e,t,r,n,o,a){var u=2;if(n=e,"function"==typeof e)Fl(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case k:return Vl(r.children,o,a,t);case j:u=8,o|=16;break;case O:u=8,o|=1;break;case R:return(e=Dl(12,r,t,8|o)).elementType=R,e.type=R,e.lanes=a,e;case _:return(e=Dl(13,r,t,o)).type=_,e.elementType=_,e.lanes=a,e;case P:return(e=Dl(19,r,t,o)).elementType=P,e.lanes=a,e;case U:return $l(r,o,a,t);case D:return(e=Dl(24,r,t,o)).elementType=D,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case T:u=10;break e;case A:u=9;break e;case C:u=11;break e;case N:u=14;break e;case M:u=16,n=null;break e;case L:u=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Dl(u,r,t,o)).elementType=e,t.type=n,t.lanes=a,t}function Vl(e,t,r,n){return(e=Dl(7,e,n,t)).lanes=r,e}function $l(e,t,r,n){return(e=Dl(23,e,n,t)).elementType=U,e.lanes=r,e}function Wl(e,t,r){return(e=Dl(6,e,null,t)).lanes=r,e}function Hl(e,t,r){return(t=Dl(4,null!==e.children?e.children:[],e.key,t)).lanes=r,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function ql(e,t,r){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=r,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=zt(0),this.expirationTimes=zt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=zt(0),this.mutableSourceEagerHydrationData=null}function Ql(e,t,r,n){var o=t.current,a=ll(),u=sl(o);e:if(r){t:{if(Ge(r=r._reactInternals)!==r||1!==r.tag)throw Error(i(170));var l=r;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(go(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(i(171))}if(1===r.tag){var s=r.type;if(go(s)){r=bo(r,s,l);break e}}r=l}else r=co;return null===t.context?t.context=r:t.pendingContext=r,(t=sa(a,u)).payload={element:e},null!==(n=void 0===n?null:n)&&(t.callback=n),ca(o,t),cl(o,u,a),u}function Yl(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Gl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var r=e.retryLane;e.retryLane=0!==r&&r<t?r:t}}function Kl(e,t){Gl(e,t),(e=e.alternate)&&Gl(e,t)}function Xl(e,t,r){var n=null!=r&&null!=r.hydrationOptions&&r.hydrationOptions.mutableSources||null;if(r=new ql(e,t,null!=r&&!0===r.hydrate),t=Dl(3,null,null,2===t?7:1===t?3:0),r.current=t,t.stateNode=r,ua(t),e[Jn]=r.current,_n(8===e.nodeType?e.parentNode:e),n)for(e=0;e<n.length;e++){var o=(t=n[e])._getVersion;o=o(t._source),null==r.mutableSourceEagerHydrationData?r.mutableSourceEagerHydrationData=[t,o]:r.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=r}function Jl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zl(e,t,r,n,o){var a=r._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var u=o;o=function(){var e=Yl(i);u.call(e)}}Ql(t,i,e,o)}else{if(a=r._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var r;r=e.lastChild;)e.removeChild(r);return new Xl(e,0,t?{hydrate:!0}:void 0)}(r,n),i=a._internalRoot,"function"==typeof o){var l=o;o=function(){var e=Yl(i);l.call(e)}}!function(e,t){var r=Au;Au&=-2,Au|=8;try{e(t)}finally{0===(Au=r)&&($u(),Qo())}}((function(){Ql(t,i,e,o)}))}return Yl(i)}Wu=function(e,t,r){var n=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||po.current)Ii=!0;else{if(0==(r&n)){switch(Ii=!1,t.tag){case 3:Hi(t),qa();break;case 5:La(t);break;case 1:go(t.type)&&wo(t);break;case 4:Na(t,t.stateNode.containerInfo);break;case 10:n=t.memoizedProps.value;var o=t.type._context;so(Xo,o._currentValue),o._currentValue=n;break;case 13:if(null!==t.memoizedState)return 0!=(r&t.child.childLanes)?Ki(e,t,r):(so(ja,1&ja.current),null!==(t=tu(e,t,r))?t.sibling:null);so(ja,1&ja.current);break;case 19:if(n=0!=(r&t.childLanes),0!=(64&e.flags)){if(n)return eu(e,t,r);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),so(ja,ja.current),n)break;return null;case 23:case 24:return t.lanes=0,zi(e,t,r)}return tu(e,t,r)}Ii=0!=(16384&e.flags)}else Ii=!1;switch(t.lanes=0,t.tag){case 2:if(n=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=vo(t,fo.current),oa(t,r),o=ai(null,t,n,e,o,r),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,go(n)){var a=!0;wo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ua(t);var u=n.getDerivedStateFromProps;"function"==typeof u&&va(t,n,u,e),o.updater=ga,t.stateNode=o,o._reactInternals=t,wa(t,n,e,r),t=Wi(null,t,n,!0,a,r)}else t.tag=0,ji(null,t,o,r),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"==typeof e)return Fl(e)?1:0;if(null!=e){if((e=e.$$typeof)===C)return 11;if(e===N)return 14}return 2}(o),e=Ko(o,e),a){case 0:t=Vi(null,t,o,e,r);break e;case 1:t=$i(null,t,o,e,r);break e;case 11:t=Ui(null,t,o,e,r);break e;case 14:t=Di(null,t,o,Ko(o.type,e),n,r);break e}throw Error(i(306,o,""))}return t;case 0:return n=t.type,o=t.pendingProps,Vi(e,t,n,o=t.elementType===n?o:Ko(n,o),r);case 1:return n=t.type,o=t.pendingProps,$i(e,t,n,o=t.elementType===n?o:Ko(n,o),r);case 3:if(Hi(t),n=t.updateQueue,null===e||null===n)throw Error(i(282));if(n=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,la(e,t),pa(t,n,null,r),(n=t.memoizedState.element)===o)qa(),t=tu(e,t,r);else{if((a=(o=t.stateNode).hydrate)&&(Fa=qn(t.stateNode.containerInfo.firstChild),Da=t,a=za=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],Qa.push(a);for(r=Ra(t,null,n,r),t.child=r;r;)r.flags=-3&r.flags|1024,r=r.sibling}else ji(e,t,n,r),qa();t=t.child}return t;case 5:return La(t),null===e&&$a(t),n=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,u=o.children,Vn(n,o)?u=null:null!==a&&Vn(n,a)&&(t.flags|=16),Bi(e,t),ji(e,t,u,r),t.child;case 6:return null===e&&$a(t),null;case 13:return Ki(e,t,r);case 4:return Na(t,t.stateNode.containerInfo),n=t.pendingProps,null===e?t.child=Oa(t,null,n,r):ji(e,t,n,r),t.child;case 11:return n=t.type,o=t.pendingProps,Ui(e,t,n,o=t.elementType===n?o:Ko(n,o),r);case 7:return ji(e,t,t.pendingProps,r),t.child;case 8:case 12:return ji(e,t,t.pendingProps.children,r),t.child;case 10:e:{n=t.type._context,o=t.pendingProps,u=t.memoizedProps,a=o.value;var l=t.type._context;if(so(Xo,l._currentValue),l._currentValue=a,null!==u)if(l=u.value,0==(a=ln(l,a)?0:0|("function"==typeof n._calculateChangedBits?n._calculateChangedBits(l,a):1073741823))){if(u.children===o.children&&!po.current){t=tu(e,t,r);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var s=l.dependencies;if(null!==s){u=l.child;for(var c=s.firstContext;null!==c;){if(c.context===n&&0!=(c.observedBits&a)){1===l.tag&&((c=sa(-1,r&-r)).tag=2,ca(l,c)),l.lanes|=r,null!==(c=l.alternate)&&(c.lanes|=r),na(l.return,r),s.lanes|=r;break}c=c.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}ji(e,t,o.children,r),t=t.child}return t;case 9:return o=t.type,n=(a=t.pendingProps).children,oa(t,r),n=n(o=aa(o,a.unstable_observedBits)),t.flags|=1,ji(e,t,n,r),t.child;case 14:return a=Ko(o=t.type,t.pendingProps),Di(e,t,o,a=Ko(o.type,a),n,r);case 15:return Fi(e,t,t.type,t.pendingProps,n,r);case 17:return n=t.type,o=t.pendingProps,o=t.elementType===n?o:Ko(n,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,go(n)?(e=!0,wo(t)):e=!1,oa(t,r),ma(t,n,o),wa(t,n,o,r),Wi(null,t,n,!0,e,r);case 19:return eu(e,t,r);case 23:case 24:return zi(e,t,r)}throw Error(i(156,t.tag))},Xl.prototype.render=function(e){Ql(e,this._internalRoot,null,null)},Xl.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ql(null,e,null,(function(){t[Jn]=null}))},Ze=function(e){13===e.tag&&(cl(e,4,ll()),Kl(e,4))},et=function(e){13===e.tag&&(cl(e,67108864,ll()),Kl(e,67108864))},tt=function(e){if(13===e.tag){var t=ll(),r=sl(e);cl(e,r,t),Kl(e,r)}},rt=function(e,t){return t()},Re=function(e,t,r){switch(t){case"input":if(re(e,r),t=r.name,"radio"===r.type&&null!=t){for(r=e;r.parentNode;)r=r.parentNode;for(r=r.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<r.length;t++){var n=r[t];if(n!==e&&n.form===e.form){var o=no(n);if(!o)throw Error(i(90));X(n),re(n,o)}}}break;case"textarea":se(e,r);break;case"select":null!=(t=r.value)&&ie(e,!!r.multiple,t,!1)}},Ne=function(e,t){var r=Au;Au|=1;try{return e(t)}finally{0===(Au=r)&&($u(),Qo())}},Me=function(e,t,r,n,o){var a=Au;Au|=4;try{return Ho(98,e.bind(null,t,r,n,o))}finally{0===(Au=a)&&($u(),Qo())}},Le=function(){0==(49&Au)&&(function(){if(null!==el){var e=el;el=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,pl(e,Vo())}))}Qo()}(),Cl())},Ie=function(e,t){var r=Au;Au|=2;try{return e(t)}finally{0===(Au=r)&&($u(),Qo())}};var es={findFiberByHostInstance:eo,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},ts={bundleType:es.bundleType,version:es.version,rendererPackageName:es.rendererPackageName,rendererConfig:es.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:x.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=function(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ge(e)))throw Error(i(188));return t!==e?null:e}for(var r=e,n=t;;){var o=r.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(n=o.return)){r=n;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===r)return Xe(o),e;if(a===n)return Xe(o),t;a=a.sibling}throw Error(i(188))}if(r.return!==n.return)r=o,n=a;else{for(var u=!1,l=o.child;l;){if(l===r){u=!0,r=o,n=a;break}if(l===n){u=!0,n=o,r=a;break}l=l.sibling}if(!u){for(l=a.child;l;){if(l===r){u=!0,r=a,n=o;break}if(l===n){u=!0,n=a,r=o;break}l=l.sibling}if(!u)throw Error(i(189))}}if(r.alternate!==n)throw Error(i(190))}if(3!==r.tag)throw Error(i(188));return r.stateNode.current===r?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},findFiberByHostInstance:es.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rs=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rs.isDisabled&&rs.supportsFiber)try{Eo=rs.inject(ts),So=rs}catch(ve){}}t.render=function(e,t,r){if(!Jl(t))throw Error(i(200));return Zl(null,e,t,!1,r)}},3935:(e,t,r)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=r(4448)},9921:(e,t)=>{"use strict";var r="function"==typeof Symbol&&Symbol.for,n=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,i=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,l=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,c=r?Symbol.for("react.async_mode"):60111,f=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,d=r?Symbol.for("react.suspense"):60113,h=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116,y=r?Symbol.for("react.block"):60121,m=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118,w=r?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case c:case f:case a:case u:case i:case d:return e;default:switch(e=e&&e.$$typeof){case s:case p:case g:case v:case l:return e;default:return t}}case o:return t}}}function E(e){return x(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=l,t.Element=n,t.ForwardRef=p,t.Fragment=a,t.Lazy=g,t.Memo=v,t.Portal=o,t.Profiler=u,t.StrictMode=i,t.Suspense=d,t.isAsyncMode=function(e){return E(e)||x(e)===c},t.isConcurrentMode=E,t.isContextConsumer=function(e){return x(e)===s},t.isContextProvider=function(e){return x(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===n},t.isForwardRef=function(e){return x(e)===p},t.isFragment=function(e){return x(e)===a},t.isLazy=function(e){return x(e)===g},t.isMemo=function(e){return x(e)===v},t.isPortal=function(e){return x(e)===o},t.isProfiler=function(e){return x(e)===u},t.isStrictMode=function(e){return x(e)===i},t.isSuspense=function(e){return x(e)===d},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===f||e===u||e===i||e===d||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===v||e.$$typeof===l||e.$$typeof===s||e.$$typeof===p||e.$$typeof===m||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=x},9864:(e,t,r)=>{"use strict";e.exports=r(9921)},2408:(e,t,r)=>{"use strict";var n=r(7418),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,u=60110,l=60112;t.Suspense=60113;var s=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),u=f("react.context"),l=f("react.forward_ref"),t.Suspense=f("react.suspense"),s=f("react.memo"),c=f("react.lazy")}var p="function"==typeof Symbol&&Symbol.iterator;function d(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v={};function g(e,t,r){this.props=e,this.context=t,this.refs=v,this.updater=r||h}function y(){}function m(e,t,r){this.props=e,this.context=t,this.refs=v,this.updater=r||h}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(d(85));this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=g.prototype;var b=m.prototype=new y;b.constructor=m,n(b,g.prototype),b.isPureReactComponent=!0;var w={current:null},x=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,r){var n,a={},i=null,u=null;if(null!=t)for(n in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(i=""+t.key),t)x.call(t,n)&&!E.hasOwnProperty(n)&&(a[n]=t[n]);var l=arguments.length-2;if(1===l)a.children=r;else if(1<l){for(var s=Array(l),c=0;c<l;c++)s[c]=arguments[c+2];a.children=s}if(e&&e.defaultProps)for(n in l=e.defaultProps)void 0===a[n]&&(a[n]=l[n]);return{$$typeof:o,type:e,key:i,ref:u,props:a,_owner:w.current}}function k(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var O=/\/+/g;function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,r,n,i){var u=typeof e;"undefined"!==u&&"boolean"!==u||(e=null);var l=!1;if(null===e)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case o:case a:l=!0}}if(l)return i=i(l=e),e=""===n?"."+R(l,0):n,Array.isArray(i)?(r="",null!=e&&(r=e.replace(O,"$&/")+"/"),T(i,t,r,"",(function(e){return e}))):null!=i&&(k(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,r+(!i.key||l&&l.key===i.key?"":(""+i.key).replace(O,"$&/")+"/")+e)),t.push(i)),1;if(l=0,n=""===n?".":n+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=n+R(u=e[s],s);l+=T(u,t,r,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(u=e.next()).done;)l+=T(u=u.value,t,r,c=n+R(u,s++),i);else if("object"===u)throw t=""+e,Error(d(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function A(e,t,r){if(null==e)return e;var n=[],o=0;return T(e,n,"","",(function(e){return t.call(r,e,o++)})),n}function C(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var _={current:null};function P(){var e=_.current;if(null===e)throw Error(d(321));return e}var N={ReactCurrentDispatcher:_,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:n};t.Children={map:A,forEach:function(e,t,r){A(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return A(e,(function(){t++})),t},toArray:function(e){return A(e,(function(e){return e}))||[]},only:function(e){if(!k(e))throw Error(d(143));return e}},t.Component=g,t.PureComponent=m,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=N,t.cloneElement=function(e,t,r){if(null==e)throw Error(d(267,e));var a=n({},e.props),i=e.key,u=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,l=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)x.call(t,c)&&!E.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=r;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:o,type:e.type,key:i,ref:u,props:a,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:u,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=k,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:C}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return P().useCallback(e,t)},t.useContext=function(e,t){return P().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return P().useEffect(e,t)},t.useImperativeHandle=function(e,t,r){return P().useImperativeHandle(e,t,r)},t.useLayoutEffect=function(e,t){return P().useLayoutEffect(e,t)},t.useMemo=function(e,t){return P().useMemo(e,t)},t.useReducer=function(e,t,r){return P().useReducer(e,t,r)},t.useRef=function(e){return P().useRef(e)},t.useState=function(e){return P().useState(e)},t.version="17.0.2"},7294:(e,t,r)=>{"use strict";e.exports=r(2408)},5666:e=>{var t=function(e){"use strict";var t,r=Object.prototype,n=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag";function l(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,r){return e[t]=r}}function s(e,t,r,n){var o=t&&t.prototype instanceof g?t:g,a=Object.create(o.prototype),i=new A(n||[]);return a._invoke=function(e,t,r){var n=f;return function(o,a){if(n===d)throw new Error("Generator is already running");if(n===h){if("throw"===o)throw a;return _()}for(r.method=o,r.arg=a;;){var i=r.delegate;if(i){var u=O(i,r);if(u){if(u===v)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===f)throw n=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=d;var l=c(e,t,r);if("normal"===l.type){if(n=r.done?h:p,l.arg===v)continue;return{value:l.arg,done:r.done}}"throw"===l.type&&(n=h,r.method="throw",r.arg=l.arg)}}}(e,r,i),a}function c(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f="suspendedStart",p="suspendedYield",d="executing",h="completed",v={};function g(){}function y(){}function m(){}var b={};l(b,a,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(C([])));x&&x!==r&&n.call(x,a)&&(b=x);var E=m.prototype=g.prototype=Object.create(b);function S(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function r(o,a,i,u){var l=c(e[o],e,a);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==typeof f&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){r("next",e,i,u)}),(function(e){r("throw",e,i,u)})):t.resolve(f).then((function(e){s.value=e,i(s)}),(function(e){return r("throw",e,i,u)}))}u(l.arg)}var o;this._invoke=function(e,n){function a(){return new t((function(t,o){r(e,n,t,o)}))}return o=o?o.then(a,a):a()}}function O(e,r){var n=e.iterator[r.method];if(n===t){if(r.delegate=null,"throw"===r.method){if(e.iterator.return&&(r.method="return",r.arg=t,O(e,r),"throw"===r.method))return v;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=c(n,e.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,v;var a=o.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,v):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,v)}function R(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function A(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(R,this),this.reset(!0)}function C(e){if(e){var r=e[a];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function r(){for(;++o<e.length;)if(n.call(e,o))return r.value=e[o],r.done=!1,r;return r.value=t,r.done=!0,r};return i.next=i}}return{next:_}}function _(){return{value:t,done:!0}}return y.prototype=m,l(E,"constructor",m),l(m,"constructor",y),y.displayName=l(m,u,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,l(e,u,"GeneratorFunction")),e.prototype=Object.create(E),e},e.awrap=function(e){return{__await:e}},S(k.prototype),l(k.prototype,i,(function(){return this})),e.AsyncIterator=k,e.async=function(t,r,n,o,a){void 0===a&&(a=Promise);var i=new k(s(t,r,n,o),a);return e.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(E),l(E,u,"Generator"),l(E,a,(function(){return this})),l(E,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=C,A.prototype={constructor:A,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function o(n,o){return u.type="throw",u.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],u=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var l=n.call(i,"catchLoc"),s=n.call(i,"finallyLoc");if(l&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),T(r),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;T(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:C(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),v}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}},53:(e,t)=>{"use strict";var r,n,o,a;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var u=Date,l=u.now();t.unstable_now=function(){return u.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,c=null,f=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(f,0),e}};r=function(e){null!==s?setTimeout(r,0,e):(s=e,setTimeout(f,0))},n=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var p=window.setTimeout,d=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,g=null,y=-1,m=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):m=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,x=w.port2;w.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();b=e+m;try{g(!0,e)?x.postMessage(null):(v=!1,g=null)}catch(e){throw x.postMessage(null),e}}else v=!1},r=function(e){g=e,v||(v=!0,x.postMessage(null))},n=function(e,r){y=p((function(){e(t.unstable_now())}),r)},o=function(){d(y),y=-1}}function E(e,t){var r=e.length;e.push(t);e:for(;;){var n=r-1>>>1,o=e[n];if(!(void 0!==o&&0<O(o,t)))break e;e[n]=t,e[r]=o,r=n}}function S(e){return void 0===(e=e[0])?null:e}function k(e){var t=e[0];if(void 0!==t){var r=e.pop();if(r!==t){e[0]=r;e:for(var n=0,o=e.length;n<o;){var a=2*(n+1)-1,i=e[a],u=a+1,l=e[u];if(void 0!==i&&0>O(i,r))void 0!==l&&0>O(l,i)?(e[n]=l,e[u]=r,n=u):(e[n]=i,e[a]=r,n=a);else{if(!(void 0!==l&&0>O(l,r)))break e;e[n]=l,e[u]=r,n=u}}}return t}return null}function O(e,t){var r=e.sortIndex-t.sortIndex;return 0!==r?r:e.id-t.id}var R=[],T=[],A=1,C=null,_=3,P=!1,N=!1,M=!1;function L(e){for(var t=S(T);null!==t;){if(null===t.callback)k(T);else{if(!(t.startTime<=e))break;k(T),t.sortIndex=t.expirationTime,E(R,t)}t=S(T)}}function I(e){if(M=!1,L(e),!N)if(null!==S(R))N=!0,r(j);else{var t=S(T);null!==t&&n(I,t.startTime-e)}}function j(e,r){N=!1,M&&(M=!1,o()),P=!0;var a=_;try{for(L(r),C=S(R);null!==C&&(!(C.expirationTime>r)||e&&!t.unstable_shouldYield());){var i=C.callback;if("function"==typeof i){C.callback=null,_=C.priorityLevel;var u=i(C.expirationTime<=r);r=t.unstable_now(),"function"==typeof u?C.callback=u:C===S(R)&&k(R),L(r)}else k(R);C=S(R)}if(null!==C)var l=!0;else{var s=S(T);null!==s&&n(I,s.startTime-r),l=!1}return l}finally{C=null,_=a,P=!1}}var U=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){N||P||(N=!0,r(j))},t.unstable_getCurrentPriorityLevel=function(){return _},t.unstable_getFirstCallbackNode=function(){return S(R)},t.unstable_next=function(e){switch(_){case 1:case 2:case 3:var t=3;break;default:t=_}var r=_;_=t;try{return e()}finally{_=r}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=U,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=_;_=e;try{return t()}finally{_=r}},t.unstable_scheduleCallback=function(e,a,i){var u=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?u+i:u,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:A++,callback:a,priorityLevel:e,startTime:i,expirationTime:l=i+l,sortIndex:-1},i>u?(e.sortIndex=i,E(T,e),null===S(R)&&e===S(T)&&(M?o():M=!0,n(I,i-u))):(e.sortIndex=l,E(R,e),N||P||(N=!0,r(j))),e},t.unstable_wrapCallback=function(e){var t=_;return function(){var r=_;_=t;try{return e.apply(this,arguments)}finally{_=r}}}},3840:(e,t,r)=>{"use strict";e.exports=r(53)},8593:e=>{"use strict";e.exports=JSON.parse('{"name":"axios","version":"0.21.4","description":"Promise based HTTP client for the browser and node.js","main":"index.js","scripts":{"test":"grunt test","start":"node ./sandbox/server.js","build":"NODE_ENV=production grunt build","preversion":"npm test","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json","postversion":"git push && git push --tags","examples":"node ./examples/server.js","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","fix":"eslint --fix lib/**/*.js"},"repository":{"type":"git","url":"https://github.com/axios/axios.git"},"keywords":["xhr","http","ajax","promise","node"],"author":"Matt Zabriskie","license":"MIT","bugs":{"url":"https://github.com/axios/axios/issues"},"homepage":"https://axios-http.com","devDependencies":{"coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^8.2.1","sinon":"^4.5.0","terser-webpack-plugin":"^4.2.3","typescript":"^4.0.5","url-search-params":"^0.10.0","webpack":"^4.44.2","webpack-dev-server":"^3.11.0"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"jsdelivr":"dist/axios.min.js","unpkg":"dist/axios.min.js","typings":"./index.d.ts","dependencies":{"follow-redirects":"^1.14.0"},"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}]}')}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={exports:{}};return e[n](a,a.exports,r),a.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";r(8594),r(5666);var e=r(7294),t=r(3935);function n(e,t){return n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},n(e,t)}function o(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,n(e,t)}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a.apply(this,arguments)}function i(e){return"/"===e.charAt(0)}function u(e,t){for(var r=t,n=r+1,o=e.length;n<o;r+=1,n+=1)e[r]=e[n];e.pop()}function l(e,t){if(!e)throw new Error("Invariant failed")}function s(e){return"/"===e.charAt(0)?e:"/"+e}function c(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function f(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function p(e){var t=e.pathname,r=e.search,n=e.hash,o=t||"/";return r&&"?"!==r&&(o+="?"===r.charAt(0)?r:"?"+r),n&&"#"!==n&&(o+="#"===n.charAt(0)?n:"#"+n),o}function d(e,t,r,n){var o;"string"==typeof e?(o=function(e){var t=e||"/",r="",n="",o=t.indexOf("#");-1!==o&&(n=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(r=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===r?"":r,hash:"#"===n?"":n}}(e),o.state=t):(void 0===(o=a({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return r&&(o.key=r),n?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=function(e,t){void 0===t&&(t="");var r,n=e&&e.split("/")||[],o=t&&t.split("/")||[],a=e&&i(e),l=t&&i(t),s=a||l;if(e&&i(e)?o=n:n.length&&(o.pop(),o=o.concat(n)),!o.length)return"/";if(o.length){var c=o[o.length-1];r="."===c||".."===c||""===c}else r=!1;for(var f=0,p=o.length;p>=0;p--){var d=o[p];"."===d?u(o,p):".."===d?(u(o,p),f++):f&&(u(o,p),f--)}if(!s)for(;f--;f)o.unshift("..");!s||""===o[0]||o[0]&&i(o[0])||o.unshift("");var h=o.join("/");return r&&"/"!==h.substr(-1)&&(h+="/"),h}(o.pathname,n.pathname)):o.pathname=n.pathname:o.pathname||(o.pathname="/"),o}function h(){var e=null,t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,r,n,o){if(null!=e){var a="function"==typeof e?e(t,r):e;"string"==typeof a?"function"==typeof n?n(a,o):o(!0):o(!1!==a)}else o(!0)},appendListener:function(e){var r=!0;function n(){r&&e.apply(void 0,arguments)}return t.push(n),function(){r=!1,t=t.filter((function(e){return e!==n}))}},notifyListeners:function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];t.forEach((function(e){return e.apply(void 0,r)}))}}}var v=!("undefined"==typeof window||!window.document||!window.document.createElement);function g(e,t){t(window.confirm(e))}var y="popstate",m="hashchange";function b(){try{return window.history.state||{}}catch(e){return{}}}function w(e){void 0===e&&(e={}),v||l(!1);var t,r=window.history,n=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,u=i.forceRefresh,w=void 0!==u&&u,x=i.getUserConfirmation,E=void 0===x?g:x,S=i.keyLength,k=void 0===S?6:S,O=e.basename?f(s(e.basename)):"";function R(e){var t=e||{},r=t.key,n=t.state,o=window.location,a=o.pathname+o.search+o.hash;return O&&(a=c(a,O)),d(a,n,r)}function T(){return Math.random().toString(36).substr(2,k)}var A=h();function C(e){a(B,e),B.length=r.length,A.notifyListeners(B.location,B.action)}function _(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||M(R(e.state))}function P(){M(R(b()))}var N=!1;function M(e){N?(N=!1,C()):A.confirmTransitionTo(e,"POP",E,(function(t){t?C({action:"POP",location:e}):function(e){var t=B.location,r=I.indexOf(t.key);-1===r&&(r=0);var n=I.indexOf(e.key);-1===n&&(n=0);var o=r-n;o&&(N=!0,U(o))}(e)}))}var L=R(b()),I=[L.key];function j(e){return O+p(e)}function U(e){r.go(e)}var D=0;function F(e){1===(D+=e)&&1===e?(window.addEventListener(y,_),o&&window.addEventListener(m,P)):0===D&&(window.removeEventListener(y,_),o&&window.removeEventListener(m,P))}var z=!1,B={length:r.length,action:"POP",location:L,createHref:j,push:function(e,t){var o="PUSH",a=d(e,t,T(),B.location);A.confirmTransitionTo(a,o,E,(function(e){if(e){var t=j(a),i=a.key,u=a.state;if(n)if(r.pushState({key:i,state:u},null,t),w)window.location.href=t;else{var l=I.indexOf(B.location.key),s=I.slice(0,l+1);s.push(a.key),I=s,C({action:o,location:a})}else window.location.href=t}}))},replace:function(e,t){var o="REPLACE",a=d(e,t,T(),B.location);A.confirmTransitionTo(a,o,E,(function(e){if(e){var t=j(a),i=a.key,u=a.state;if(n)if(r.replaceState({key:i,state:u},null,t),w)window.location.replace(t);else{var l=I.indexOf(B.location.key);-1!==l&&(I[l]=a.key),C({action:o,location:a})}else window.location.replace(t)}}))},go:U,goBack:function(){U(-1)},goForward:function(){U(1)},block:function(e){void 0===e&&(e=!1);var t=A.setPrompt(e);return z||(F(1),z=!0),function(){return z&&(z=!1,F(-1)),t()}},listen:function(e){var t=A.appendListener(e);return F(1),function(){F(-1),t()}}};return B}var x=r(5697),E=r.n(x),S=1073741823,k="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==r.g?r.g:{};function O(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(r,n){e=r,t.forEach((function(t){return t(e,n)}))}}}const R=e.createContext||function(t,r){var n,a,i,u="__create-react-context-"+((k[i="__global_unique_id__"]=(k[i]||0)+1)+"__"),l=function(e){function t(){var t;return(t=e.apply(this,arguments)||this).emitter=O(t.props.value),t}o(t,e);var n=t.prototype;return n.getChildContext=function(){var e;return(e={})[u]=this.emitter,e},n.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t,n=this.props.value,o=e.value;((a=n)===(i=o)?0!==a||1/a==1/i:a!=a&&i!=i)?t=0:(t="function"==typeof r?r(n,o):S,0!=(t|=0)&&this.emitter.set(e.value,t))}var a,i},n.render=function(){return this.props.children},t}(e.Component);l.childContextTypes=((n={})[u]=E().object.isRequired,n);var s=function(e){function r(){var t;return(t=e.apply(this,arguments)||this).state={value:t.getValue()},t.onUpdate=function(e,r){0!=((0|t.observedBits)&r)&&t.setState({value:t.getValue()})},t}o(r,e);var n=r.prototype;return n.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?S:t},n.componentDidMount=function(){this.context[u]&&this.context[u].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?S:e},n.componentWillUnmount=function(){this.context[u]&&this.context[u].off(this.onUpdate)},n.getValue=function(){return this.context[u]?this.context[u].get():t},n.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},r}(e.Component);return s.contextTypes=((a={})[u]=E().object,a),{Provider:l,Consumer:s}};var T=r(4779),A=r.n(T);function C(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}r(9864),r(8679);var _=function(e){var t=R();return t.displayName=e,t},P=_("Router-History"),N=_("Router"),M=function(t){function r(e){var r;return(r=t.call(this,e)||this).state={location:e.history.location},r._isMounted=!1,r._pendingLocation=null,e.staticContext||(r.unlisten=e.history.listen((function(e){r._isMounted?r.setState({location:e}):r._pendingLocation=e}))),r}o(r,t),r.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=r.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&(this.unlisten(),this._isMounted=!1,this._pendingLocation=null)},n.render=function(){return e.createElement(N.Provider,{value:{history:this.props.history,location:this.state.location,match:r.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},e.createElement(P.Provider,{children:this.props.children||null,value:this.props.history}))},r}(e.Component);e.Component,e.Component;var L={},I=0;e.Component,e.Component,e.Component,e.useContext;var j=function(t){function r(){for(var e,r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return(e=t.call.apply(t,[this].concat(n))||this).history=w(e.props),e}return o(r,t),r.prototype.render=function(){return e.createElement(M,{history:this.history,children:this.props.children})},r}(e.Component);e.Component;var U=function(e,t){return"function"==typeof e?e(t):e},D=function(e,t){return"string"==typeof e?d(e,null,null,t):e},F=function(e){return e},z=e.forwardRef;void 0===z&&(z=F);var B=z((function(t,r){var n=t.innerRef,o=t.navigate,i=t.onClick,u=C(t,["innerRef","navigate","onClick"]),l=u.target,s=a({},u,{onClick:function(e){try{i&&i(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||l&&"_self"!==l||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),o())}});return s.ref=F!==z&&r||n,e.createElement("a",s)})),V=z((function(t,r){var n=t.component,o=void 0===n?B:n,i=t.replace,u=t.to,s=t.innerRef,c=C(t,["component","replace","to","innerRef"]);return e.createElement(N.Consumer,null,(function(t){t||l(!1);var n=t.history,f=D(U(u,t.location),t.location),d=f?n.createHref(f):"",h=a({},c,{href:d,navigate:function(){var e=U(u,t.location),r=p(t.location)===p(D(e));(i||r?n.replace:n.push)(e)}});return F!==z?h.ref=r||s:h.innerRef=s,e.createElement(o,h)}))})),$=function(e){return e},W=e.forwardRef;void 0===W&&(W=$),W((function(t,r){var n=t["aria-current"],o=void 0===n?"page":n,i=t.activeClassName,u=void 0===i?"active":i,s=t.activeStyle,c=t.className,f=t.exact,p=t.isActive,d=t.location,h=t.sensitive,v=t.strict,g=t.style,y=t.to,m=t.innerRef,b=C(t,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return e.createElement(N.Consumer,null,(function(t){t||l(!1);var n=d||t.location,i=D(U(y,n),n),w=i.pathname,x=w&&w.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),E=x?function(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var r=t,n=r.path,o=r.exact,a=void 0!==o&&o,i=r.strict,u=void 0!==i&&i,l=r.sensitive,s=void 0!==l&&l;return[].concat(n).reduce((function(t,r){if(!r&&""!==r)return null;if(t)return t;var n=function(e,t){var r=""+t.end+t.strict+t.sensitive,n=L[r]||(L[r]={});if(n[e])return n[e];var o=[],a={regexp:A()(e,o,t),keys:o};return I<1e4&&(n[e]=a,I++),a}(r,{end:a,strict:u,sensitive:s}),o=n.regexp,i=n.keys,l=o.exec(e);if(!l)return null;var c=l[0],f=l.slice(1),p=e===c;return a&&!p?null:{path:r,url:"/"===r&&""===c?"/":c,isExact:p,params:i.reduce((function(e,t,r){return e[t.name]=f[r],e}),{})}}),null)}(n.pathname,{path:x,exact:f,sensitive:h,strict:v}):null,S=!!(p?p(E,n):E),k="function"==typeof c?c(S):c,O="function"==typeof g?g(S):g;S&&(k=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return t.filter((function(e){return e})).join(" ")}(k,u),O=a({},O,s));var R=a({"aria-current":S&&o||null,className:k,style:O,to:i},b);return $!==W?R.ref=r||m:R.innerRef=m,e.createElement(V,R)}))}));var H=r(9669),q=r.n(H);const Q=function(){return e.createElement("div",null,"초기 세팅입니다.")};q().defaults.withCredentials=!0,q().defaults.baseURL="https://sleact.nodebird.com",(0,t.render)(e.createElement(j,null,e.createElement(Q,null)),document.querySelector("#app"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE1BQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFR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LEVBQXFDLG1CQUFsQkQsRUFBK0JBLEVBQWMvRyxHQUFZK0csRUFDNUUvdUUsRUFBNkIsbUJBQWRtdkUsRUFBMkJBLEVBQVVuSCxHQUFZbUgsRUFFaEVuSCxJQUNGZ0gsRUFqRE4sV0FDRSxJQUFLLElBQUk5RyxFQUFPcitGLFVBQVVtQixPQUFROGtHLEVBQWEsSUFBSWpsRyxNQUFNcTlGLEdBQU9DLEVBQU8sRUFBR0EsRUFBT0QsRUFBTUMsSUFDckYySCxFQUFXM0gsR0FBUXQrRixVQUFVcytGLEdBRy9CLE9BQU8ySCxFQUFXeGhHLFFBQU8sU0FBVStCLEdBQ2pDLE9BQU9BLEtBQ05PLEtBQUssS0EwQ1FtL0YsQ0FBZWYsRUFBV0gsR0FDdEM3dUUsRUFBUSxFQUFTLEdBQUlBLEVBQU84dUUsSUFHOUIsSUFBSXR1RSxFQUFRLEVBQVMsQ0FDbkIsZUFBZ0J3bkUsR0FBWTJHLEdBQWUsS0FDM0NLLFVBQVdBLEVBQ1hodkUsTUFBT0EsRUFDUG5nQixHQUFJc3FGLEdBQ0g4RCxHQVNILE9BTklPLElBQXFCQyxFQUN2Qmp1RSxFQUFNaW9ELElBQU1vbEIsR0FBZ0JDLEVBRTVCdHRFLEVBQU1zdEUsU0FBV0EsRUFHQyxnQkFBb0JNLEVBQU01dEUsU0FyRGxELHVCQzdPQSxRQUpZLFdBQ1YsT0FBTyx5Q0NNVHg0QixJQUFBQSxTQUFBQSxpQkFBaUMsRUFDakNBLElBQUFBLFNBQUFBLFFBQzBDLCtCQUUxQ2cwRCxFQUFBQSxFQUFBQSxRQUNFLGdCQUFDd3hDLEVBQUQsS0FDRSxnQkFBQyxFQUFELE9BRUZoOEYsU0FBU3crRixjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0F4aW9zRXJyb3IuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3ZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLWNhbGxhYmxlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5hdGl2ZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5vbi1leHRlbnNpYmxlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWNvcHktd2l0aGluLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1maWxsLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZnJvbS1jb25zdHJ1Y3Rvci1hbmQtbGlzdC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZnJvbS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXJlZHVjZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc2xpY2Utc2ltcGxlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zbGljZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc29ydC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YtcmF3LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGVhci1lcnJvci1zdGFjay5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24td2Vhay5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtaHRtbC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGF0ZS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS1leGNlcHRpb24tY29uc3RhbnRzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb20taXRlcmFibGVzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb20tdG9rZW4tbGlzdC1wcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1mZi12ZXJzaW9uLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWllLW9yLWVkZ2UuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MtcGViYmxlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtaW9zLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLXdlYm9zLXdlYmtpdC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtd2Via2l0LXZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Vycm9yLXN0YWNrLWluc3RhbGxhYmxlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lcnJvci10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2V4cG9ydC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZsYXR0ZW4taW50by1hcnJheS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnJlZXppbmcuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1zdWJzdGl0dXRpb24uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZGVuLWtleXMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hvc3QtcmVwb3J0LWVycm9ycy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaHRtbC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2llZWU3NTQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zdGFsbC1lcnJvci1jYXVzZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1jYWxsYWJsZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWRhdGEtZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZm9yY2VkLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1pbnRlZ3JhbC1udW1iZXIuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcHVyZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcmVnZXhwLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdGUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMtY29yZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWF0aC1leHBtMS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWF0aC1mcm91bmQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21hdGgtbG9nMTAuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21hdGgtbG9nMXAuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21hdGgtc2lnbi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWljcm90YXNrLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXVybC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9ub3JtYWxpemUtc3RyaW5nLWFyZ3VtZW50LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9ub3QtYS1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL251bWJlci1pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL251bWJlci1wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbnVtYmVyLXBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXByb3RvdHlwZS1hY2Nlc3NvcnMtZm9yY2VkLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLWFycmF5LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtdG8tc3RyaW5nLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vcmRpbmFyeS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL293bi1rZXlzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wYXRoLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wZXJmb3JtLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3F1ZXVlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1mbGFncy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtZG90LWFsbC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLW5jZy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zYW1lLXZhbHVlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtZ2xvYmFsLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1zdG9yZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1wYWQtd2Via2l0LWJ1Zy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXB1bnljb2RlLXRvLWFzY2lpLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctcmVwZWF0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctdHJpbS1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy10cmltLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90YXNrLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90aGlzLW51bWJlci12YWx1ZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tbGVuZ3RoLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9mZnNldC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcG9zaXRpdmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tc3RyaW5nLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90cnktbm9kZS1yZXF1aXJlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90cnktdG8tc3RyaW5nLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3JzLXJlcXVpcmUtd3JhcHBlcnMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3R5cGVkLWFycmF5LWZyb20tc3BlY2llcy1hbmQtbGlzdC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdHlwZWQtYXJyYXktZnJvbS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdHlwZWQtYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdWlkLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93aGl0ZXNwYWNlcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd3JhcC1lcnJvci1jb25zdHJ1Y3Rvci13aXRoLWNhdXNlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYWdncmVnYXRlLWVycm9yLmNhdXNlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYWdncmVnYXRlLWVycm9yLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXktYnVmZmVyLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXktYnVmZmVyLmlzLXZpZXcuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5hdC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvcHktd2l0aGluLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZXZlcnkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWxsLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mbGF0LW1hcC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZsYXQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkub2YuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZXZlcnNlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb21lLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS51bnNjb3BhYmxlcy5mbGF0LW1hcC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnVuc2NvcGFibGVzLmZsYXQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRhLXZpZXcuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLmdldC15ZWFyLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS5ub3cuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnNldC15ZWFyLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1nbXQtc3RyaW5nLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1qc29uLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmVycm9yLmNhdXNlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZXJyb3IudG8tc3RyaW5nLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZXNjYXBlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5nbG9iYWwtdGhpcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmpzb24uc3RyaW5naWZ5LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuanNvbi50by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWFwLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5hY29zaC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguYXNpbmguanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmF0YW5oLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5jYnJ0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5jbHozMi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguY29zaC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguZXhwbTEuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmZyb3VuZC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguaHlwb3QuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmltdWwuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmxvZzEwLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5sb2cxcC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGgubG9nMi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguc2lnbi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguc2luaC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGgudGFuaC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGgudG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGgudHJ1bmMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuZXBzaWxvbi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuaXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5pcy1uYW4uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIubWluLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIudG8tZXhwb25lbnRpYWwuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIudG8tZml4ZWQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIudG8tcHJlY2lzaW9uLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLWdldHRlci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXNldHRlci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5lbnRyaWVzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmZyZWV6ZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5mcm9tLWVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0Lmhhcy1vd24uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5pcy1mcm96ZW4uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuaXMtc2VhbGVkLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmlzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QubG9va3VwLWdldHRlci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5sb29rdXAtc2V0dGVyLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnZhbHVlcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucGFyc2UtaW50LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5hbGwtc2V0dGxlZC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuYW55LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuYXBwbHkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuZ2V0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5oYXMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0Lm93bi1rZXlzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LnNldC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QudG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5kb3QtYWxsLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuc3RpY2t5LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRlc3QuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc2V0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmFuY2hvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5hdC1hbHRlcm5hdGl2ZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5iaWcuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuYmxpbmsuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuYm9sZC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmVuZHMtd2l0aC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5maXhlZC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5mb250Y29sb3IuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZm9udHNpemUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0YWxpY3MuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubGluay5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5tYXRjaC1hbGwuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2guanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucGFkLWVuZC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmF3LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGVhdC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlLWFsbC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNlYXJjaC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zbWFsbC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdHJpa2UuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3ViLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN1YnN0ci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdXAuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbS1lbmQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbS1zdGFydC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pcy1jb25jYXQtc3ByZWFkYWJsZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5tYXRjaC1hbGwuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wubWF0Y2guanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5zZWFyY2guanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5zcGxpdC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC50by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wudG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC51bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmF0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbGwuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZsb2F0MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mbG9hdDY0LWFycmF5LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mcm9tLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDE2LWFycmF5LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbnQ4LWFycmF5LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5qb2luLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lm9mLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmV2ZXJzZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNldC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNsaWNlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc29tZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNvcnQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zdWJhcnJheS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnRvLWxvY2FsZS1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQ4LWNsYW1wZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy51bmVzY2FwZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLndlYWstbWFwLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMud2Vhay1zZXQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tZXhjZXB0aW9uLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1leGNlcHRpb24uc3RhY2suanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWV4Y2VwdGlvbi50by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5xdWV1ZS1taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuc3RydWN0dXJlZC1jbG9uZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudXJsLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnVybC50by1qc29uLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL3N0YWJsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250L3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2VzbS9yZXNvbHZlLXBhdGhuYW1lLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lc20vaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dC9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzbS9yZWFjdC1yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXNtL3JlYWN0LXJvdXRlci1kb20uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbGF5b3V0cy9BcHAudHN4Iiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL2NsaWVudC50c3giXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG4gICAgdmFyIHJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChjb25maWcuYXV0aC5wYXNzd29yZCkpIDogJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZGVuZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFyZXNwb25zZVR5cGUgfHwgcmVzcG9uc2VUeXBlID09PSAndGV4dCcgfHwgIHJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nID9cbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoJ29ubG9hZGVuZCcgaW4gcmVxdWVzdCkge1xuICAgICAgLy8gVXNlIG9ubG9hZGVuZCBpZiBhdmFpbGFibGVcbiAgICAgIHJlcXVlc3Qub25sb2FkZW5kID0gb25sb2FkZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlIHRvIGVtdWxhdGUgb25sb2FkZW5kXG4gICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVhZHlzdGF0ZSBoYW5kbGVyIGlzIGNhbGxpbmcgYmVmb3JlIG9uZXJyb3Igb3Igb250aW1lb3V0IGhhbmRsZXJzLFxuICAgICAgICAvLyBzbyB3ZSBzaG91bGQgY2FsbCBvbmxvYWRlbmQgb24gdGhlIG5leHQgJ3RpY2snXG4gICAgICAgIHNldFRpbWVvdXQob25sb2FkZW5kKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHZhciB0aW1lb3V0RXJyb3JNZXNzYWdlID0gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJztcbiAgICAgIGlmIChjb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgY29uZmlnLnRyYW5zaXRpb25hbCAmJiBjb25maWcudHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyAnRVRJTUVET1VUJyA6ICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKHJlc3BvbnNlVHlwZSAmJiByZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghcmVxdWVzdERhdGEpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhheGlvcy5kZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4vaGVscGVycy9pc0F4aW9zRXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcbnZhciB2YWxpZGF0b3IgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3ZhbGlkYXRvcicpO1xuXG52YXIgdmFsaWRhdG9ycyA9IHZhbGlkYXRvci52YWxpZGF0b3JzO1xuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcbiAgICBjb25maWcudXJsID0gYXJndW1lbnRzWzBdO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgaWYgKGNvbmZpZy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdHMubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IHRoaXMuZGVmYXVsdHMubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnLm1ldGhvZCA9ICdnZXQnO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWw7XG5cbiAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnModHJhbnNpdGlvbmFsLCB7XG4gICAgICBzaWxlbnRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuLCAnMS4wLjAnKSxcbiAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4sICcxLjAuMCcpLFxuICAgICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuLCAnMS4wLjAnKVxuICAgIH0sIGZhbHNlKTtcbiAgfVxuXG4gIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgdmFyIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gIHZhciBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHZhciByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHByb21pc2U7XG5cbiAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuXG4gICAgQXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICBjaGFpbiA9IGNoYWluLmNvbmNhdChyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO1xuXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuXG4gIHZhciBuZXdDb25maWcgPSBjb25maWc7XG4gIHdoaWxlIChyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICB2YXIgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHZhciBvblJlamVjdGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKTtcbiAgICB0cnkge1xuICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgb25SZWplY3RlZChlcnJvcik7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB0cnkge1xuICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QobmV3Q29uZmlnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9XG5cbiAgd2hpbGUgKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IChjb25maWcgfHwge30pLmRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCwgb3B0aW9ucykge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZCxcbiAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICBjb25maWcsXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNcbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgIGNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIGVycm9yLmlzQXhpb3NFcnJvciA9IHRydWU7XG5cbiAgZXJyb3IudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICB2YXIgdmFsdWVGcm9tQ29uZmlnMktleXMgPSBbJ3VybCcsICdtZXRob2QnLCAnZGF0YSddO1xuICB2YXIgbWVyZ2VEZWVwUHJvcGVydGllc0tleXMgPSBbJ2hlYWRlcnMnLCAnYXV0aCcsICdwcm94eScsICdwYXJhbXMnXTtcbiAgdmFyIGRlZmF1bHRUb0NvbmZpZzJLZXlzID0gW1xuICAgICdiYXNlVVJMJywgJ3RyYW5zZm9ybVJlcXVlc3QnLCAndHJhbnNmb3JtUmVzcG9uc2UnLCAncGFyYW1zU2VyaWFsaXplcicsXG4gICAgJ3RpbWVvdXQnLCAndGltZW91dE1lc3NhZ2UnLCAnd2l0aENyZWRlbnRpYWxzJywgJ2FkYXB0ZXInLCAncmVzcG9uc2VUeXBlJywgJ3hzcmZDb29raWVOYW1lJyxcbiAgICAneHNyZkhlYWRlck5hbWUnLCAnb25VcGxvYWRQcm9ncmVzcycsICdvbkRvd25sb2FkUHJvZ3Jlc3MnLCAnZGVjb21wcmVzcycsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnLCAnbWF4Qm9keUxlbmd0aCcsICdtYXhSZWRpcmVjdHMnLCAndHJhbnNwb3J0JywgJ2h0dHBBZ2VudCcsXG4gICAgJ2h0dHBzQWdlbnQnLCAnY2FuY2VsVG9rZW4nLCAnc29ja2V0UGF0aCcsICdyZXNwb25zZUVuY29kaW5nJ1xuICBdO1xuICB2YXIgZGlyZWN0TWVyZ2VLZXlzID0gWyd2YWxpZGF0ZVN0YXR1cyddO1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgdXRpbHMuZm9yRWFjaCh2YWx1ZUZyb21Db25maWcyS2V5cywgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gobWVyZ2VEZWVwUHJvcGVydGllc0tleXMsIG1lcmdlRGVlcFByb3BlcnRpZXMpO1xuXG4gIHV0aWxzLmZvckVhY2goZGVmYXVsdFRvQ29uZmlnMktleXMsIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKGRpcmVjdE1lcmdlS2V5cywgZnVuY3Rpb24gbWVyZ2UocHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGF4aW9zS2V5cyA9IHZhbHVlRnJvbUNvbmZpZzJLZXlzXG4gICAgLmNvbmNhdChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cylcbiAgICAuY29uY2F0KGRlZmF1bHRUb0NvbmZpZzJLZXlzKVxuICAgIC5jb25jYXQoZGlyZWN0TWVyZ2VLZXlzKTtcblxuICB2YXIgb3RoZXJLZXlzID0gT2JqZWN0XG4gICAgLmtleXMoY29uZmlnMSlcbiAgICAuY29uY2F0KE9iamVjdC5rZXlzKGNvbmZpZzIpKVxuICAgIC5maWx0ZXIoZnVuY3Rpb24gZmlsdGVyQXhpb3NLZXlzKGtleSkge1xuICAgICAgcmV0dXJuIGF4aW9zS2V5cy5pbmRleE9mKGtleSkgPT09IC0xO1xuICAgIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gob3RoZXJLZXlzLCBtZXJnZURlZXBQcm9wZXJ0aWVzKTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICB2YXIgY29udGV4dCA9IHRoaXMgfHwgZGVmYXVsdHM7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuLmNhbGwoY29udGV4dCwgZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vY29yZS9lbmhhbmNlRXJyb3InKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlTYWZlbHkocmF3VmFsdWUsIHBhcnNlciwgZW5jb2Rlcikge1xuICBpZiAodXRpbHMuaXNTdHJpbmcocmF3VmFsdWUpKSB7XG4gICAgdHJ5IHtcbiAgICAgIChwYXJzZXIgfHwgSlNPTi5wYXJzZSkocmF3VmFsdWUpO1xuICAgICAgcmV0dXJuIHV0aWxzLnRyaW0ocmF3VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm5hbWUgIT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGVuY29kZXIgfHwgSlNPTi5zdHJpbmdpZnkpKHJhd1ZhbHVlKTtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuXG4gIHRyYW5zaXRpb25hbDoge1xuICAgIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICAgIGZvcmNlZEpTT05QYXJzaW5nOiB0cnVlLFxuICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IGZhbHNlXG4gIH0sXG5cbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQWNjZXB0Jyk7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSB8fCAoaGVhZGVycyAmJiBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgdmFyIHRyYW5zaXRpb25hbCA9IHRoaXMudHJhbnNpdGlvbmFsO1xuICAgIHZhciBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgdmFyIGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICB2YXIgc3RyaWN0SlNPTlBhcnNpbmcgPSAhc2lsZW50SlNPTlBhcnNpbmcgJiYgdGhpcy5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIGlmIChzdHJpY3RKU09OUGFyc2luZyB8fCAoZm9yY2VkSlNPTlBhcnNpbmcgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgZGF0YS5sZW5ndGgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgZW5oYW5jZUVycm9yKGUsIHRoaXMsICdFX0pTT05fUEFSU0UnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiAodHlwZW9mIHBheWxvYWQgPT09ICdvYmplY3QnKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcGtnID0gcmVxdWlyZSgnLi8uLi8uLi9wYWNrYWdlLmpzb24nKTtcblxudmFyIHZhbGlkYXRvcnMgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUsIGkpIHtcbiAgdmFsaWRhdG9yc1t0eXBlXSA9IGZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IHR5cGUgfHwgJ2EnICsgKGkgPCAxID8gJ24gJyA6ICcgJykgKyB0eXBlO1xuICB9O1xufSk7XG5cbnZhciBkZXByZWNhdGVkV2FybmluZ3MgPSB7fTtcbnZhciBjdXJyZW50VmVyQXJyID0gcGtnLnZlcnNpb24uc3BsaXQoJy4nKTtcblxuLyoqXG4gKiBDb21wYXJlIHBhY2thZ2UgdmVyc2lvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZz99IHRoYW5WZXJzaW9uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNPbGRlclZlcnNpb24odmVyc2lvbiwgdGhhblZlcnNpb24pIHtcbiAgdmFyIHBrZ1ZlcnNpb25BcnIgPSB0aGFuVmVyc2lvbiA/IHRoYW5WZXJzaW9uLnNwbGl0KCcuJykgOiBjdXJyZW50VmVyQXJyO1xuICB2YXIgZGVzdFZlciA9IHZlcnNpb24uc3BsaXQoJy4nKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICBpZiAocGtnVmVyc2lvbkFycltpXSA+IGRlc3RWZXJbaV0pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAocGtnVmVyc2lvbkFycltpXSA8IGRlc3RWZXJbaV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufGJvb2xlYW4/fSB2YWxpZGF0b3JcbiAqIEBwYXJhbSB7c3RyaW5nP30gdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIHZhciBpc0RlcHJlY2F0ZWQgPSB2ZXJzaW9uICYmIGlzT2xkZXJWZXJzaW9uKHZlcnNpb24pO1xuXG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBwa2cudmVyc2lvbiArICddIFRyYW5zaXRpb25hbCBvcHRpb24gXFwnJyArIG9wdCArICdcXCcnICsgZGVzYyArIChtZXNzYWdlID8gJy4gJyArIG1lc3NhZ2UgOiAnJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG9wdCwgb3B0cykge1xuICAgIGlmICh2YWxpZGF0b3IgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0TWVzc2FnZShvcHQsICcgaGFzIGJlZW4gcmVtb3ZlZCBpbiAnICsgdmVyc2lvbikpO1xuICAgIH1cblxuICAgIGlmIChpc0RlcHJlY2F0ZWQgJiYgIWRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdKSB7XG4gICAgICBkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSA9IHRydWU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKFxuICAgICAgICAgIG9wdCxcbiAgICAgICAgICAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgc2luY2UgdicgKyB2ZXJzaW9uICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZWFyIGZ1dHVyZSdcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yID8gdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdHMpIDogdHJ1ZTtcbiAgfTtcbn07XG5cbi8qKlxuICogQXNzZXJ0IG9iamVjdCdzIHByb3BlcnRpZXMgdHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGFsbG93VW5rbm93blxuICovXG5cbmZ1bmN0aW9uIGFzc2VydE9wdGlvbnMob3B0aW9ucywgc2NoZW1hLCBhbGxvd1Vua25vd24pIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIHZhciBvcHQgPSBrZXlzW2ldO1xuICAgIHZhciB2YWxpZGF0b3IgPSBzY2hlbWFbb3B0XTtcbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICB2YXIgdmFsdWUgPSBvcHRpb25zW29wdF07XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0aW9ucyk7XG4gICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiAnICsgb3B0ICsgJyBtdXN0IGJlICcgKyByZXN1bHQpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbGxvd1Vua25vd24gIT09IHRydWUpIHtcbiAgICAgIHRocm93IEVycm9yKCdVbmtub3duIG9wdGlvbiAnICsgb3B0KTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzT2xkZXJWZXJzaW9uOiBpc09sZGVyVmVyc2lvbixcbiAgYXNzZXJ0T3B0aW9uczogYXNzZXJ0T3B0aW9ucyxcbiAgdmFsaWRhdG9yczogdmFsaWRhdG9yc1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsKSB7XG4gIGlmICh0b1N0cmluZy5jYWxsKHZhbCkgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gcHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnRyaW0gPyBzdHIudHJpbSgpIDogc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOYXRpdmVTY3JpcHQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOUycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W2tleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuZnVuY3Rpb24gc3RyaXBCT00oY29udGVudCkge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0OiBpc1BsYWluT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW0sXG4gIHN0cmlwQk9NOiBzdHJpcEJPTVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcblxudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbi8vIGBBc3NlcnQ6IElzQ2FsbGFibGUoYXJndW1lbnQpIGlzIHRydWVgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBJc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSBpcyB0cnVlYFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzQ29uc3RydWN0b3IoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93IFR5cGVFcnJvcih0cnlUb1N0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBhIGNvbnN0cnVjdG9yJyk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmICh0eXBlb2YgYXJndW1lbnQgPT0gJ29iamVjdCcgfHwgaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3Qgc2V0IFwiICsgU3RyaW5nKGFyZ3VtZW50KSArICcgYXMgYSBwcm90b3R5cGUnKTtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbnZhciBVTlNDT1BBQkxFUyA9IHdlbGxLbm93blN5bWJvbCgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5pZiAoQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkge1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKEFycmF5UHJvdG90eXBlLCBVTlNDT1BBQkxFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogY3JlYXRlKG51bGwpXG4gIH0pO1xufVxuXG4vLyBhZGQgYSBrZXkgdG8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjaGFyQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNoYXJBdDtcblxuLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBjaGFyQXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUHJvdG90eXBlKSB7XG4gIGlmIChpc1Byb3RvdHlwZU9mKFByb3RvdHlwZSwgaXQpKSByZXR1cm4gaXQ7XG4gIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGludm9jYXRpb24nKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgU3RyaW5nID0gZ2xvYmFsLlN0cmluZztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBUeXBlKGFyZ3VtZW50KSBpcyBPYmplY3RgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNPYmplY3QoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93IFR5cGVFcnJvcihTdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG59O1xuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXR5cGVkLWFycmF5cyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBBcnJheUJ1ZmZlciAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgRGF0YVZpZXcgIT0gJ3VuZGVmaW5lZCc7XG4iLCIvLyBGRjI2LSBidWc6IEFycmF5QnVmZmVycyBhcmUgbm9uLWV4dGVuc2libGUsIGJ1dCBPYmplY3QuaXNFeHRlbnNpYmxlIGRvZXMgbm90IHJlcG9ydCBpdFxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyID09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDgpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtaXNleHRlbnNpYmxlLCBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxuICAgIGlmIChPYmplY3QuaXNFeHRlbnNpYmxlKGJ1ZmZlcikpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShidWZmZXIsICdhJywgeyB2YWx1ZTogOCB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItbmF0aXZlJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG5cbnZhciBJbnQ4QXJyYXkgPSBnbG9iYWwuSW50OEFycmF5O1xudmFyIEludDhBcnJheVByb3RvdHlwZSA9IEludDhBcnJheSAmJiBJbnQ4QXJyYXkucHJvdG90eXBlO1xudmFyIFVpbnQ4Q2xhbXBlZEFycmF5ID0gZ2xvYmFsLlVpbnQ4Q2xhbXBlZEFycmF5O1xudmFyIFVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlID0gVWludDhDbGFtcGVkQXJyYXkgJiYgVWludDhDbGFtcGVkQXJyYXkucHJvdG90eXBlO1xudmFyIFR5cGVkQXJyYXkgPSBJbnQ4QXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoSW50OEFycmF5KTtcbnZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gSW50OEFycmF5UHJvdG90eXBlICYmIGdldFByb3RvdHlwZU9mKEludDhBcnJheVByb3RvdHlwZSk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBUWVBFRF9BUlJBWV9UQUcgPSB1aWQoJ1RZUEVEX0FSUkFZX1RBRycpO1xudmFyIFRZUEVEX0FSUkFZX0NPTlNUUlVDVE9SID0gdWlkKCdUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUicpO1xuLy8gRml4aW5nIG5hdGl2ZSB0eXBlZCBhcnJheXMgaW4gT3BlcmEgUHJlc3RvIGNyYXNoZXMgdGhlIGJyb3dzZXIsIHNlZSAjNTk1XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyA9IE5BVElWRV9BUlJBWV9CVUZGRVIgJiYgISFzZXRQcm90b3R5cGVPZiAmJiBjbGFzc29mKGdsb2JhbC5vcGVyYSkgIT09ICdPcGVyYSc7XG52YXIgVFlQRURfQVJSQVlfVEFHX1JFUVVJUkVEID0gZmFsc2U7XG52YXIgTkFNRSwgQ29uc3RydWN0b3IsIFByb3RvdHlwZTtcblxudmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0ID0ge1xuICBJbnQ4QXJyYXk6IDEsXG4gIFVpbnQ4QXJyYXk6IDEsXG4gIFVpbnQ4Q2xhbXBlZEFycmF5OiAxLFxuICBJbnQxNkFycmF5OiAyLFxuICBVaW50MTZBcnJheTogMixcbiAgSW50MzJBcnJheTogNCxcbiAgVWludDMyQXJyYXk6IDQsXG4gIEZsb2F0MzJBcnJheTogNCxcbiAgRmxvYXQ2NEFycmF5OiA4XG59O1xuXG52YXIgQmlnSW50QXJyYXlDb25zdHJ1Y3RvcnNMaXN0ID0ge1xuICBCaWdJbnQ2NEFycmF5OiA4LFxuICBCaWdVaW50NjRBcnJheTogOFxufTtcblxudmFyIGlzVmlldyA9IGZ1bmN0aW9uIGlzVmlldyhpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGZhbHNlO1xuICB2YXIga2xhc3MgPSBjbGFzc29mKGl0KTtcbiAgcmV0dXJuIGtsYXNzID09PSAnRGF0YVZpZXcnXG4gICAgfHwgaGFzT3duKFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0LCBrbGFzcylcbiAgICB8fCBoYXNPd24oQmlnSW50QXJyYXlDb25zdHJ1Y3RvcnNMaXN0LCBrbGFzcyk7XG59O1xuXG52YXIgaXNUeXBlZEFycmF5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gZmFsc2U7XG4gIHZhciBrbGFzcyA9IGNsYXNzb2YoaXQpO1xuICByZXR1cm4gaGFzT3duKFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0LCBrbGFzcylcbiAgICB8fCBoYXNPd24oQmlnSW50QXJyYXlDb25zdHJ1Y3RvcnNMaXN0LCBrbGFzcyk7XG59O1xuXG52YXIgYVR5cGVkQXJyYXkgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGlzVHlwZWRBcnJheShpdCkpIHJldHVybiBpdDtcbiAgdGhyb3cgVHlwZUVycm9yKCdUYXJnZXQgaXMgbm90IGEgdHlwZWQgYXJyYXknKTtcbn07XG5cbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKEMpIHtcbiAgaWYgKGlzQ2FsbGFibGUoQykgJiYgKCFzZXRQcm90b3R5cGVPZiB8fCBpc1Byb3RvdHlwZU9mKFR5cGVkQXJyYXksIEMpKSkgcmV0dXJuIEM7XG4gIHRocm93IFR5cGVFcnJvcih0cnlUb1N0cmluZyhDKSArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3InKTtcbn07XG5cbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gZnVuY3Rpb24gKEtFWSwgcHJvcGVydHksIGZvcmNlZCwgb3B0aW9ucykge1xuICBpZiAoIURFU0NSSVBUT1JTKSByZXR1cm47XG4gIGlmIChmb3JjZWQpIGZvciAodmFyIEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgdmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFtBUlJBWV07XG4gICAgaWYgKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAmJiBoYXNPd24oVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZSwgS0VZKSkgdHJ5IHtcbiAgICAgIGRlbGV0ZSBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlW0tFWV07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIG9sZCBXZWJLaXQgYnVnIC0gc29tZSBtZXRob2RzIGFyZSBub24tY29uZmlndXJhYmxlXG4gICAgICB0cnkge1xuICAgICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlW0tFWV0gPSBwcm9wZXJ0eTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yMikgeyAvKiBlbXB0eSAqLyB9XG4gICAgfVxuICB9XG4gIGlmICghVHlwZWRBcnJheVByb3RvdHlwZVtLRVldIHx8IGZvcmNlZCkge1xuICAgIHJlZGVmaW5lKFR5cGVkQXJyYXlQcm90b3R5cGUsIEtFWSwgZm9yY2VkID8gcHJvcGVydHlcbiAgICAgIDogTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyAmJiBJbnQ4QXJyYXlQcm90b3R5cGVbS0VZXSB8fCBwcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG5cbnZhciBleHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kID0gZnVuY3Rpb24gKEtFWSwgcHJvcGVydHksIGZvcmNlZCkge1xuICB2YXIgQVJSQVksIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbiAgaWYgKCFERVNDUklQVE9SUykgcmV0dXJuO1xuICBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgICBpZiAoZm9yY2VkKSBmb3IgKEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQVJSQVldO1xuICAgICAgaWYgKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAmJiBoYXNPd24oVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBLRVkpKSB0cnkge1xuICAgICAgICBkZWxldGUgVHlwZWRBcnJheUNvbnN0cnVjdG9yW0tFWV07XG4gICAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gICAgfVxuICAgIGlmICghVHlwZWRBcnJheVtLRVldIHx8IGZvcmNlZCkge1xuICAgICAgLy8gVjggfiBDaHJvbWUgNDktNTAgYCVUeXBlZEFycmF5JWAgbWV0aG9kcyBhcmUgbm9uLXdyaXRhYmxlIG5vbi1jb25maWd1cmFibGVcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiByZWRlZmluZShUeXBlZEFycmF5LCBLRVksIGZvcmNlZCA/IHByb3BlcnR5IDogTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyAmJiBUeXBlZEFycmF5W0tFWV0gfHwgcHJvcGVydHkpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICAgIH0gZWxzZSByZXR1cm47XG4gIH1cbiAgZm9yIChBUlJBWSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkge1xuICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFtBUlJBWV07XG4gICAgaWYgKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAmJiAoIVR5cGVkQXJyYXlDb25zdHJ1Y3RvcltLRVldIHx8IGZvcmNlZCkpIHtcbiAgICAgIHJlZGVmaW5lKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgS0VZLCBwcm9wZXJ0eSk7XG4gICAgfVxuICB9XG59O1xuXG5mb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgQ29uc3RydWN0b3IgPSBnbG9iYWxbTkFNRV07XG4gIFByb3RvdHlwZSA9IENvbnN0cnVjdG9yICYmIENvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgaWYgKFByb3RvdHlwZSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFByb3RvdHlwZSwgVFlQRURfQVJSQVlfQ09OU1RSVUNUT1IsIENvbnN0cnVjdG9yKTtcbiAgZWxzZSBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gZmFsc2U7XG59XG5cbmZvciAoTkFNRSBpbiBCaWdJbnRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgQ29uc3RydWN0b3IgPSBnbG9iYWxbTkFNRV07XG4gIFByb3RvdHlwZSA9IENvbnN0cnVjdG9yICYmIENvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgaWYgKFByb3RvdHlwZSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFByb3RvdHlwZSwgVFlQRURfQVJSQVlfQ09OU1RSVUNUT1IsIENvbnN0cnVjdG9yKTtcbn1cblxuLy8gV2ViS2l0IGJ1ZyAtIHR5cGVkIGFycmF5cyBjb25zdHJ1Y3RvcnMgcHJvdG90eXBlIGlzIE9iamVjdC5wcm90b3R5cGVcbmlmICghTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB8fCAhaXNDYWxsYWJsZShUeXBlZEFycmF5KSB8fCBUeXBlZEFycmF5ID09PSBGdW5jdGlvbi5wcm90b3R5cGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdyAtLSBzYWZlXG4gIFR5cGVkQXJyYXkgPSBmdW5jdGlvbiBUeXBlZEFycmF5KCkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGludm9jYXRpb24nKTtcbiAgfTtcbiAgaWYgKE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MpIGZvciAoTkFNRSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkge1xuICAgIGlmIChnbG9iYWxbTkFNRV0pIHNldFByb3RvdHlwZU9mKGdsb2JhbFtOQU1FXSwgVHlwZWRBcnJheSk7XG4gIH1cbn1cblxuaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIHx8ICFUeXBlZEFycmF5UHJvdG90eXBlIHx8IFR5cGVkQXJyYXlQcm90b3R5cGUgPT09IE9iamVjdFByb3RvdHlwZSkge1xuICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheS5wcm90b3R5cGU7XG4gIGlmIChOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTKSBmb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgICBpZiAoZ2xvYmFsW05BTUVdKSBzZXRQcm90b3R5cGVPZihnbG9iYWxbTkFNRV0ucHJvdG90eXBlLCBUeXBlZEFycmF5UHJvdG90eXBlKTtcbiAgfVxufVxuXG4vLyBXZWJLaXQgYnVnIC0gb25lIG1vcmUgb2JqZWN0IGluIFVpbnQ4Q2xhbXBlZEFycmF5IHByb3RvdHlwZSBjaGFpblxuaWYgKE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgJiYgZ2V0UHJvdG90eXBlT2YoVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUpICE9PSBUeXBlZEFycmF5UHJvdG90eXBlKSB7XG4gIHNldFByb3RvdHlwZU9mKFVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlLCBUeXBlZEFycmF5UHJvdG90eXBlKTtcbn1cblxuaWYgKERFU0NSSVBUT1JTICYmICFoYXNPd24oVHlwZWRBcnJheVByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRykpIHtcbiAgVFlQRURfQVJSQVlfVEFHX1JFUVVJUkVEID0gdHJ1ZTtcbiAgZGVmaW5lUHJvcGVydHkoVHlwZWRBcnJheVByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgeyBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaXNPYmplY3QodGhpcykgPyB0aGlzW1RZUEVEX0FSUkFZX1RBR10gOiB1bmRlZmluZWQ7XG4gIH0gfSk7XG4gIGZvciAoTkFNRSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkgaWYgKGdsb2JhbFtOQU1FXSkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShnbG9iYWxbTkFNRV0sIFRZUEVEX0FSUkFZX1RBRywgTkFNRSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1M6IE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MsXG4gIFRZUEVEX0FSUkFZX0NPTlNUUlVDVE9SOiBUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUixcbiAgVFlQRURfQVJSQVlfVEFHOiBUWVBFRF9BUlJBWV9UQUdfUkVRVUlSRUQgJiYgVFlQRURfQVJSQVlfVEFHLFxuICBhVHlwZWRBcnJheTogYVR5cGVkQXJyYXksXG4gIGFUeXBlZEFycmF5Q29uc3RydWN0b3I6IGFUeXBlZEFycmF5Q29uc3RydWN0b3IsXG4gIGV4cG9ydFR5cGVkQXJyYXlNZXRob2Q6IGV4cG9ydFR5cGVkQXJyYXlNZXRob2QsXG4gIGV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2Q6IGV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2QsXG4gIGlzVmlldzogaXNWaWV3LFxuICBpc1R5cGVkQXJyYXk6IGlzVHlwZWRBcnJheSxcbiAgVHlwZWRBcnJheTogVHlwZWRBcnJheSxcbiAgVHlwZWRBcnJheVByb3RvdHlwZTogVHlwZWRBcnJheVByb3RvdHlwZVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci1uYXRpdmUnKTtcbnZhciBGdW5jdGlvbk5hbWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4Jyk7XG52YXIgSUVFRTc1NCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZWVlNzU0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1maWxsJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIFBST1BFUl9GVU5DVElPTl9OQU1FID0gRnVuY3Rpb25OYW1lLlBST1BFUjtcbnZhciBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSA9IEZ1bmN0aW9uTmFtZS5DT05GSUdVUkFCTEU7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIERBVEFfVklFVyA9ICdEYXRhVmlldyc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXgnO1xudmFyIE5hdGl2ZUFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG52YXIgJEFycmF5QnVmZmVyID0gTmF0aXZlQXJyYXlCdWZmZXI7XG52YXIgQXJyYXlCdWZmZXJQcm90b3R5cGUgPSAkQXJyYXlCdWZmZXIgJiYgJEFycmF5QnVmZmVyW1BST1RPVFlQRV07XG52YXIgJERhdGFWaWV3ID0gZ2xvYmFsW0RBVEFfVklFV107XG52YXIgRGF0YVZpZXdQcm90b3R5cGUgPSAkRGF0YVZpZXcgJiYgJERhdGFWaWV3W1BST1RPVFlQRV07XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbnZhciBBcnJheSA9IGdsb2JhbC5BcnJheTtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG52YXIgZmlsbCA9IHVuY3VycnlUaGlzKGFycmF5RmlsbCk7XG52YXIgcmV2ZXJzZSA9IHVuY3VycnlUaGlzKFtdLnJldmVyc2UpO1xuXG52YXIgcGFja0lFRUU3NTQgPSBJRUVFNzU0LnBhY2s7XG52YXIgdW5wYWNrSUVFRTc1NCA9IElFRUU3NTQudW5wYWNrO1xuXG52YXIgcGFja0ludDggPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHJldHVybiBbbnVtYmVyICYgMHhGRl07XG59O1xuXG52YXIgcGFja0ludDE2ID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gW251bWJlciAmIDB4RkYsIG51bWJlciA+PiA4ICYgMHhGRl07XG59O1xuXG52YXIgcGFja0ludDMyID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gW251bWJlciAmIDB4RkYsIG51bWJlciA+PiA4ICYgMHhGRiwgbnVtYmVyID4+IDE2ICYgMHhGRiwgbnVtYmVyID4+IDI0ICYgMHhGRl07XG59O1xuXG52YXIgdW5wYWNrSW50MzIgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gIHJldHVybiBidWZmZXJbM10gPDwgMjQgfCBidWZmZXJbMl0gPDwgMTYgfCBidWZmZXJbMV0gPDwgOCB8IGJ1ZmZlclswXTtcbn07XG5cbnZhciBwYWNrRmxvYXQzMiA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KG51bWJlciwgMjMsIDQpO1xufTtcblxudmFyIHBhY2tGbG9hdDY0ID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gcGFja0lFRUU3NTQobnVtYmVyLCA1MiwgOCk7XG59O1xuXG52YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBrZXkpIHtcbiAgZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3JbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKVtrZXldOyB9IH0pO1xufTtcblxudmFyIGdldCA9IGZ1bmN0aW9uICh2aWV3LCBjb3VudCwgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgoaW5kZXgpO1xuICB2YXIgc3RvcmUgPSBnZXRJbnRlcm5hbFN0YXRlKHZpZXcpO1xuICBpZiAoaW50SW5kZXggKyBjb3VudCA+IHN0b3JlLmJ5dGVMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgYnl0ZXMgPSBnZXRJbnRlcm5hbFN0YXRlKHN0b3JlLmJ1ZmZlcikuYnl0ZXM7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgc3RvcmUuYnl0ZU9mZnNldDtcbiAgdmFyIHBhY2sgPSBhcnJheVNsaWNlKGJ5dGVzLCBzdGFydCwgc3RhcnQgKyBjb3VudCk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiByZXZlcnNlKHBhY2spO1xufTtcblxudmFyIHNldCA9IGZ1bmN0aW9uICh2aWV3LCBjb3VudCwgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KGluZGV4KTtcbiAgdmFyIHN0b3JlID0gZ2V0SW50ZXJuYWxTdGF0ZSh2aWV3KTtcbiAgaWYgKGludEluZGV4ICsgY291bnQgPiBzdG9yZS5ieXRlTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIGJ5dGVzID0gZ2V0SW50ZXJuYWxTdGF0ZShzdG9yZS5idWZmZXIpLmJ5dGVzO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHN0b3JlLmJ5dGVPZmZzZXQ7XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIGJ5dGVzW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGNvdW50IC0gaSAtIDFdO1xufTtcblxuaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgQXJyYXlCdWZmZXJQcm90b3R5cGUpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgYnl0ZXM6IGZpbGwoQXJyYXkoYnl0ZUxlbmd0aCksIDApLFxuICAgICAgYnl0ZUxlbmd0aDogYnl0ZUxlbmd0aFxuICAgIH0pO1xuICAgIGlmICghREVTQ1JJUFRPUlMpIHRoaXMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgQXJyYXlCdWZmZXJQcm90b3R5cGUgPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXTtcblxuICAkRGF0YVZpZXcgPSBmdW5jdGlvbiBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsIERhdGFWaWV3UHJvdG90eXBlKTtcbiAgICBhbkluc3RhbmNlKGJ1ZmZlciwgQXJyYXlCdWZmZXJQcm90b3R5cGUpO1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBnZXRJbnRlcm5hbFN0YXRlKGJ1ZmZlcikuYnl0ZUxlbmd0aDtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyT3JJbmZpbml0eShieXRlT2Zmc2V0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCcpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgYnVmZmVyOiBidWZmZXIsXG4gICAgICBieXRlTGVuZ3RoOiBieXRlTGVuZ3RoLFxuICAgICAgYnl0ZU9mZnNldDogb2Zmc2V0XG4gICAgfSk7XG4gICAgaWYgKCFERVNDUklQVE9SUykge1xuICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgICB0aGlzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoO1xuICAgICAgdGhpcy5ieXRlT2Zmc2V0ID0gb2Zmc2V0O1xuICAgIH1cbiAgfTtcblxuICBEYXRhVmlld1Byb3RvdHlwZSA9ICREYXRhVmlld1tQUk9UT1RZUEVdO1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsICdieXRlTGVuZ3RoJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgJ2J1ZmZlcicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsICdieXRlTGVuZ3RoJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgJ2J5dGVPZmZzZXQnKTtcbiAgfVxuXG4gIHJlZGVmaW5lQWxsKERhdGFWaWV3UHJvdG90eXBlLCB7XG4gICAgZ2V0SW50ODogZnVuY3Rpb24gZ2V0SW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0O1xuICAgIH0sXG4gICAgZ2V0VWludDg6IGZ1bmN0aW9uIGdldFVpbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF07XG4gICAgfSxcbiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJbnQzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJbnQzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKSA+Pj4gMDtcbiAgICB9LFxuICAgIGdldEZsb2F0MzI6IGZ1bmN0aW9uIGdldEZsb2F0MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSwgMjMpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpLCA1Mik7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0ludDgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJbnQ4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSW50MTYsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzZXRVaW50MTY6IGZ1bmN0aW9uIHNldFVpbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJbnQxNiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJbnQzMiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0ludDMyLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0RmxvYXQzMjogZnVuY3Rpb24gc2V0RmxvYXQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGbG9hdDMyLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0RmxvYXQ2NDogZnVuY3Rpb24gc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIHBhY2tGbG9hdDY0LCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICB2YXIgSU5DT1JSRUNUX0FSUkFZX0JVRkZFUl9OQU1FID0gUFJPUEVSX0ZVTkNUSU9OX05BTUUgJiYgTmF0aXZlQXJyYXlCdWZmZXIubmFtZSAhPT0gQVJSQVlfQlVGRkVSO1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1uZXcgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgTmF0aXZlQXJyYXlCdWZmZXIoMSk7XG4gIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IE5hdGl2ZUFycmF5QnVmZmVyKC0xKTtcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcigpO1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcigxLjUpO1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcihOYU4pO1xuICAgIHJldHVybiBJTkNPUlJFQ1RfQVJSQVlfQlVGRkVSX05BTUUgJiYgIUNPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FO1xuICB9KSkge1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLW5ldyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xuICAgICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgICAgYW5JbnN0YW5jZSh0aGlzLCBBcnJheUJ1ZmZlclByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gbmV3IE5hdGl2ZUFycmF5QnVmZmVyKHRvSW5kZXgobGVuZ3RoKSk7XG4gICAgfTtcblxuICAgICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdID0gQXJyYXlCdWZmZXJQcm90b3R5cGU7XG5cbiAgICBmb3IgKHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhOYXRpdmVBcnJheUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajspIHtcbiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIHtcbiAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KCRBcnJheUJ1ZmZlciwga2V5LCBOYXRpdmVBcnJheUJ1ZmZlcltrZXldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBBcnJheUJ1ZmZlclByb3RvdHlwZS5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfSBlbHNlIGlmIChJTkNPUlJFQ1RfQVJSQVlfQlVGRkVSX05BTUUgJiYgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoTmF0aXZlQXJyYXlCdWZmZXIsICduYW1lJywgQVJSQVlfQlVGRkVSKTtcbiAgfVxuXG4gIC8vIFdlYktpdCBidWcgLSB0aGUgc2FtZSBwYXJlbnQgcHJvdG90eXBlIGZvciB0eXBlZCBhcnJheXMgYW5kIGRhdGEgdmlld1xuICBpZiAoc2V0UHJvdG90eXBlT2YgJiYgZ2V0UHJvdG90eXBlT2YoRGF0YVZpZXdQcm90b3R5cGUpICE9PSBPYmplY3RQcm90b3R5cGUpIHtcbiAgICBzZXRQcm90b3R5cGVPZihEYXRhVmlld1Byb3RvdHlwZSwgT2JqZWN0UHJvdG90eXBlKTtcbiAgfVxuXG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdGVzdFZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpO1xuICB2YXIgJHNldEludDggPSB1bmN1cnJ5VGhpcyhEYXRhVmlld1Byb3RvdHlwZS5zZXRJbnQ4KTtcbiAgdGVzdFZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdGVzdFZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYgKHRlc3RWaWV3LmdldEludDgoMCkgfHwgIXRlc3RWaWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKERhdGFWaWV3UHJvdG90eXBlLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDgodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfVxuICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcbn1cblxuc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlcixcbiAgRGF0YVZpZXc6ICREYXRhVmlld1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbmAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb3B5d2l0aGluXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWNvcHl3aXRoaW4gLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gbWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbGxgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsbFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xuICB2YXIgZW5kID0gYXJndW1lbnRzTGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKTtcbiAgd2hpbGUgKGVuZFBvcyA+IGluZGV4KSBPW2luZGV4KytdID0gdmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2ZvckVhY2gnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbm1vZHVsZS5leHBvcnRzID0gIVNUUklDVF9NRVRIT0QgPyBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWZvcmVhY2ggLS0gc2FmZVxufSA6IFtdLmZvckVhY2g7XG4iLCJ2YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIGxpc3QpIHtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKGxpc3QpO1xuICB2YXIgcmVzdWx0ID0gbmV3IENvbnN0cnVjdG9yKGxlbmd0aCk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG52YXIgQXJyYXkgPSBnbG9iYWwuQXJyYXk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgdmFyIElTX0NPTlNUUlVDVE9SID0gaXNDb25zdHJ1Y3Rvcih0aGlzKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgaWYgKG1hcHBpbmcpIG1hcGZuID0gYmluZChtYXBmbiwgYXJndW1lbnRzTGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKE8pO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yLCBuZXh0LCB2YWx1ZTtcbiAgLy8gaWYgdGhlIHRhcmdldCBpcyBub3QgaXRlcmFibGUgb3IgaXQncyBhbiBhcnJheSB3aXRoIHRoZSBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIGEgc2ltcGxlIGNhc2VcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICYmICEodGhpcyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlcmF0b3JNZXRob2QpKSkge1xuICAgIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoTywgaXRlcmF0b3JNZXRob2QpO1xuICAgIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICAgIHJlc3VsdCA9IElTX0NPTlNUUlVDVE9SID8gbmV3IHRoaXMoKSA6IFtdO1xuICAgIGZvciAoOyEoc3RlcCA9IGNhbGwobmV4dCwgaXRlcmF0b3IpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICByZXN1bHQgPSBJU19DT05TVFJVQ1RPUiA/IG5ldyB0aGlzKGxlbmd0aCkgOiBBcnJheShsZW5ndGgpO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF07XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXgsIGZpbHRlclJlamVjdCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBJU19GSUxURVJfUkVKRUNUID0gVFlQRSA9PSA3O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQpO1xuICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShzZWxmKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBjcmVhdGUgPSBzcGVjaWZpY0NyZWF0ZSB8fCBhcnJheVNwZWNpZXNDcmVhdGU7XG4gICAgdmFyIHRhcmdldCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiB8fCBJU19GSUxURVJfUkVKRUNUID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsdWUsIHJlc3VsdDtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbHVlID0gc2VsZltpbmRleF07XG4gICAgICByZXN1bHQgPSBib3VuZEZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSB0YXJnZXRbaW5kZXhdID0gcmVzdWx0OyAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzdWx0KSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbHVlOyAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcHVzaCh0YXJnZXQsIHZhbHVlKTsgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIGZhbHNlOyAgICAgICAgICAgICAvLyBldmVyeVxuICAgICAgICAgIGNhc2UgNzogcHVzaCh0YXJnZXQsIHZhbHVlKTsgICAgICAvLyBmaWx0ZXJSZWplY3RcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogdGFyZ2V0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbiAgZm9yRWFjaDogY3JlYXRlTWV0aG9kKDApLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuICBtYXA6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgZmlsdGVyOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvbWVcbiAgc29tZTogY3JlYXRlTWV0aG9kKDMpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZXZlcnlcbiAgZXZlcnk6IGNyZWF0ZU1ldGhvZCg0KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuICBmaW5kOiBjcmVhdGVNZXRob2QoNSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZEluZGV4XG4gIGZpbmRJbmRleDogY3JlYXRlTWV0aG9kKDYpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlclJlamVjdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWFycmF5LWZpbHRlcmluZ1xuICBmaWx0ZXJSZWplY3Q6IGNyZWF0ZU1ldGhvZCg3KVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLWFycmF5LXByb3RvdHlwZS1sYXN0aW5kZXhvZiAtLSBzYWZlICovXG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG52YXIgJGxhc3RJbmRleE9mID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJGxhc3RJbmRleE9mICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnbGFzdEluZGV4T2YnKTtcbnZhciBGT1JDRUQgPSBORUdBVElWRV9aRVJPIHx8ICFTVFJJQ1RfTUVUSE9EO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmxhc3RpbmRleG9mXG5tb2R1bGUuZXhwb3J0cyA9IEZPUkNFRCA/IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pIHtcbiAgLy8gY29udmVydCAtMCB0byArMFxuICBpZiAoTkVHQVRJVkVfWkVSTykgcmV0dXJuIGFwcGx5KCRsYXN0SW5kZXhPZiwgdGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIGluZGV4ID0gbWluKGluZGV4LCB0b0ludGVnZXJPckluZmluaXR5KGFyZ3VtZW50c1sxXSkpO1xuICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTyAmJiBPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gIHJldHVybiAtMTtcbn0gOiAkbGFzdEluZGV4T2Y7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB0aGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc3XG4gIHJldHVybiBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gYXJyYXkuY29uc3RydWN0b3IgPSB7fTtcbiAgICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGZvbzogMSB9O1xuICAgIH07XG4gICAgcmV0dXJuIGFycmF5W01FVEhPRF9OQU1FXShCb29sZWFuKS5mb28gIT09IDE7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSwgYXJndW1lbnQpIHtcbiAgdmFyIG1ldGhvZCA9IFtdW01FVEhPRF9OQU1FXTtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsLG5vLXRocm93LWxpdGVyYWwgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICBtZXRob2QuY2FsbChudWxsLCBhcmd1bWVudCB8fCBmdW5jdGlvbiAoKSB7IHRocm93IDE7IH0sIDEpO1xuICB9KTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgcmVkdWNlLCByZWR1Y2VSaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX1JJR0hUKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYXJndW1lbnRzTGVuZ3RoLCBtZW1vKSB7XG4gICAgYUNhbGxhYmxlKGNhbGxiYWNrZm4pO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICB2YXIgaW5kZXggPSBJU19SSUdIVCA/IGxlbmd0aCAtIDEgOiAwO1xuICAgIHZhciBpID0gSVNfUklHSFQgPyAtMSA6IDE7XG4gICAgaWYgKGFyZ3VtZW50c0xlbmd0aCA8IDIpIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICAgIGluZGV4ICs9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGlmIChJU19SSUdIVCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICg7SVNfUklHSFQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICAgIH1cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJlZHVjZVxuICBsZWZ0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlcmlnaHRcbiAgcmlnaHQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcblxudmFyIEFycmF5ID0gZ2xvYmFsLkFycmF5O1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgdmFyIGsgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbmd0aCk7XG4gIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gIHZhciByZXN1bHQgPSBBcnJheShtYXgoZmluIC0gaywgMCkpO1xuICBmb3IgKHZhciBuID0gMDsgayA8IGZpbjsgaysrLCBuKyspIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgbiwgT1trXSk7XG4gIHJlc3VsdC5sZW5ndGggPSBuO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpcyhbXS5zbGljZSk7XG4iLCJ2YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUnKTtcblxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxudmFyIG1lcmdlU29ydCA9IGZ1bmN0aW9uIChhcnJheSwgY29tcGFyZWZuKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHZhciBtaWRkbGUgPSBmbG9vcihsZW5ndGggLyAyKTtcbiAgcmV0dXJuIGxlbmd0aCA8IDggPyBpbnNlcnRpb25Tb3J0KGFycmF5LCBjb21wYXJlZm4pIDogbWVyZ2UoXG4gICAgYXJyYXksXG4gICAgbWVyZ2VTb3J0KGFycmF5U2xpY2UoYXJyYXksIDAsIG1pZGRsZSksIGNvbXBhcmVmbiksXG4gICAgbWVyZ2VTb3J0KGFycmF5U2xpY2UoYXJyYXksIG1pZGRsZSksIGNvbXBhcmVmbiksXG4gICAgY29tcGFyZWZuXG4gICk7XG59O1xuXG52YXIgaW5zZXJ0aW9uU29ydCA9IGZ1bmN0aW9uIChhcnJheSwgY29tcGFyZWZuKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHZhciBpID0gMTtcbiAgdmFyIGVsZW1lbnQsIGo7XG5cbiAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICBqID0gaTtcbiAgICBlbGVtZW50ID0gYXJyYXlbaV07XG4gICAgd2hpbGUgKGogJiYgY29tcGFyZWZuKGFycmF5W2ogLSAxXSwgZWxlbWVudCkgPiAwKSB7XG4gICAgICBhcnJheVtqXSA9IGFycmF5Wy0tal07XG4gICAgfVxuICAgIGlmIChqICE9PSBpKyspIGFycmF5W2pdID0gZWxlbWVudDtcbiAgfSByZXR1cm4gYXJyYXk7XG59O1xuXG52YXIgbWVyZ2UgPSBmdW5jdGlvbiAoYXJyYXksIGxlZnQsIHJpZ2h0LCBjb21wYXJlZm4pIHtcbiAgdmFyIGxsZW5ndGggPSBsZWZ0Lmxlbmd0aDtcbiAgdmFyIHJsZW5ndGggPSByaWdodC5sZW5ndGg7XG4gIHZhciBsaW5kZXggPSAwO1xuICB2YXIgcmluZGV4ID0gMDtcblxuICB3aGlsZSAobGluZGV4IDwgbGxlbmd0aCB8fCByaW5kZXggPCBybGVuZ3RoKSB7XG4gICAgYXJyYXlbbGluZGV4ICsgcmluZGV4XSA9IChsaW5kZXggPCBsbGVuZ3RoICYmIHJpbmRleCA8IHJsZW5ndGgpXG4gICAgICA/IGNvbXBhcmVmbihsZWZ0W2xpbmRleF0sIHJpZ2h0W3JpbmRleF0pIDw9IDAgPyBsZWZ0W2xpbmRleCsrXSA6IHJpZ2h0W3JpbmRleCsrXVxuICAgICAgOiBsaW5kZXggPCBsbGVuZ3RoID8gbGVmdFtsaW5kZXgrK10gOiByaWdodFtyaW5kZXgrK107XG4gIH0gcmV0dXJuIGFycmF5O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZXJnZVNvcnQ7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgQXJyYXkgPSBnbG9iYWwuQXJyYXk7XG5cbi8vIGEgcGFydCBvZiBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5KSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbEFycmF5KSkge1xuICAgIEMgPSBvcmlnaW5hbEFycmF5LmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKGlzQ29uc3RydWN0b3IoQykgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBlbHNlIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG4iLCJ2YXIgYXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoYXJyYXlTcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWxBcnJheSkpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIEVOVFJJRVMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gRU5UUklFUyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICd0aHJvdycsIGVycm9yKTtcbiAgfVxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgY2FsbGVkID0gMDtcbiAgdmFyIGl0ZXJhdG9yV2l0aFJldHVybiA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBkb25lOiAhIWNhbGxlZCsrIH07XG4gICAgfSxcbiAgICAncmV0dXJuJzogZnVuY3Rpb24gKCkge1xuICAgICAgU0FGRV9DTE9TSU5HID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGl0ZXJhdG9yV2l0aFJldHVybltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1mcm9tLCBuby10aHJvdy1saXRlcmFsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIEFycmF5LmZyb20oaXRlcmF0b3JXaXRoUmV0dXJuLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBTS0lQX0NMT1NJTkcpIHtcbiAgaWYgKCFTS0lQX0NMT1NJTkcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgSVRFUkFUSU9OX1NVUFBPUlQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgb2JqZWN0W0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4geyBkb25lOiBJVEVSQVRJT05fU1VQUE9SVCA9IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIGV4ZWMob2JqZWN0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gSVRFUkFUSU9OX1NVUFBPUlQ7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgdG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyh7fS50b1N0cmluZyk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBzdHJpbmdTbGljZSh0b1N0cmluZyhpdCksIDgsIC0xKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgY2xhc3NvZlJhdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBPYmplY3QgPSBnbG9iYWwuT2JqZWN0O1xuXG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIENPUlJFQ1RfQVJHVU1FTlRTID0gY2xhc3NvZlJhdyhmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxufTtcblxuLy8gZ2V0dGluZyB0YWcgZnJvbSBFUzYrIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYFxubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyBjbGFzc29mUmF3IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCB0YWcsIHJlc3VsdDtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKHRhZyA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT0gJ09iamVjdCcgJiYgaXNDYWxsYWJsZShPLmNhbGxlZSkgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG5cbnZhciBURVNUID0gKGZ1bmN0aW9uIChhcmcpIHsgcmV0dXJuIFN0cmluZyhFcnJvcihhcmcpLnN0YWNrKTsgfSkoJ3p4Y2FzZCcpO1xudmFyIFY4X09SX0NIQUtSQV9TVEFDS19FTlRSWSA9IC9cXG5cXHMqYXQgW146XSo6W15cXG5dKi87XG52YXIgSVNfVjhfT1JfQ0hBS1JBX1NUQUNLID0gVjhfT1JfQ0hBS1JBX1NUQUNLX0VOVFJZLnRlc3QoVEVTVCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0YWNrLCBkcm9wRW50cmllcykge1xuICBpZiAoSVNfVjhfT1JfQ0hBS1JBX1NUQUNLICYmIHR5cGVvZiBzdGFjayA9PSAnc3RyaW5nJykge1xuICAgIHdoaWxlIChkcm9wRW50cmllcy0tKSBzdGFjayA9IHJlcGxhY2Uoc3RhY2ssIFY4X09SX0NIQUtSQV9TVEFDS19FTlRSWSwgJycpO1xuICB9IHJldHVybiBzdGFjaztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYXN0S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJykuZmFzdEtleTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgaW50ZXJuYWxTdGF0ZUdldHRlckZvciA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIENvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgUHJvdG90eXBlKTtcbiAgICAgIHNldEludGVybmFsU3RhdGUodGhhdCwge1xuICAgICAgICB0eXBlOiBDT05TVFJVQ1RPUl9OQU1FLFxuICAgICAgICBpbmRleDogY3JlYXRlKG51bGwpLFxuICAgICAgICBmaXJzdDogdW5kZWZpbmVkLFxuICAgICAgICBsYXN0OiB1bmRlZmluZWQsXG4gICAgICAgIHNpemU6IDBcbiAgICAgIH0pO1xuICAgICAgaWYgKCFERVNDUklQVE9SUykgdGhhdC5zaXplID0gMDtcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGl0ZXJhdGUoaXRlcmFibGUsIHRoYXRbQURERVJdLCB7IHRoYXQ6IHRoYXQsIEFTX0VOVFJJRVM6IElTX01BUCB9KTtcbiAgICB9KTtcblxuICAgIHZhciBQcm90b3R5cGUgPSBDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbiAgICB2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoQ09OU1RSVUNUT1JfTkFNRSk7XG5cbiAgICB2YXIgZGVmaW5lID0gZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgdmFyIHByZXZpb3VzLCBpbmRleDtcbiAgICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgIGVudHJ5LnZhbHVlID0gdmFsdWU7XG4gICAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5sYXN0ID0gZW50cnkgPSB7XG4gICAgICAgICAgaW5kZXg6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLFxuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBwcmV2aW91czogcHJldmlvdXMgPSBzdGF0ZS5sYXN0LFxuICAgICAgICAgIG5leHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICByZW1vdmVkOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICBpZiAoIXN0YXRlLmZpcnN0KSBzdGF0ZS5maXJzdCA9IGVudHJ5O1xuICAgICAgICBpZiAocHJldmlvdXMpIHByZXZpb3VzLm5leHQgPSBlbnRyeTtcbiAgICAgICAgaWYgKERFU0NSSVBUT1JTKSBzdGF0ZS5zaXplKys7XG4gICAgICAgIGVsc2UgdGhhdC5zaXplKys7XG4gICAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgICBpZiAoaW5kZXggIT09ICdGJykgc3RhdGUuaW5kZXhbaW5kZXhdID0gZW50cnk7XG4gICAgICB9IHJldHVybiB0aGF0O1xuICAgIH07XG5cbiAgICB2YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgLy8gZmFzdCBjYXNlXG4gICAgICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gICAgICB2YXIgZW50cnk7XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHN0YXRlLmluZGV4W2luZGV4XTtcbiAgICAgIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICAgICAgZm9yIChlbnRyeSA9IHN0YXRlLmZpcnN0OyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uZXh0KSB7XG4gICAgICAgIGlmIChlbnRyeS5rZXkgPT0ga2V5KSByZXR1cm4gZW50cnk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJlZGVmaW5lQWxsKFByb3RvdHlwZSwge1xuICAgICAgLy8gYHsgTWFwLCBTZXQgfS5wcm90b3R5cGUuY2xlYXIoKWAgbWV0aG9kc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmNsZWFyXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuY2xlYXJcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgICB2YXIgZGF0YSA9IHN0YXRlLmluZGV4O1xuICAgICAgICB2YXIgZW50cnkgPSBzdGF0ZS5maXJzdDtcbiAgICAgICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICAgICAgZW50cnkucmVtb3ZlZCA9IHRydWU7XG4gICAgICAgICAgaWYgKGVudHJ5LnByZXZpb3VzKSBlbnRyeS5wcmV2aW91cyA9IGVudHJ5LnByZXZpb3VzLm5leHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaW5kZXhdO1xuICAgICAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5maXJzdCA9IHN0YXRlLmxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChERVNDUklQVE9SUykgc3RhdGUuc2l6ZSA9IDA7XG4gICAgICAgIGVsc2UgdGhhdC5zaXplID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZS5kZWxldGUoa2V5KWAgbWV0aG9kc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmRlbGV0ZVxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmRlbGV0ZVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm5leHQ7XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wcmV2aW91cztcbiAgICAgICAgICBkZWxldGUgc3RhdGUuaW5kZXhbZW50cnkuaW5kZXhdO1xuICAgICAgICAgIGVudHJ5LnJlbW92ZWQgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm5leHQgPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnByZXZpb3VzID0gcHJldjtcbiAgICAgICAgICBpZiAoc3RhdGUuZmlyc3QgPT0gZW50cnkpIHN0YXRlLmZpcnN0ID0gbmV4dDtcbiAgICAgICAgICBpZiAoc3RhdGUubGFzdCA9PSBlbnRyeSkgc3RhdGUubGFzdCA9IHByZXY7XG4gICAgICAgICAgaWYgKERFU0NSSVBUT1JTKSBzdGF0ZS5zaXplLS07XG4gICAgICAgICAgZWxzZSB0aGF0LnNpemUtLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpYCBtZXRob2RzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuZm9yZWFjaFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmZvcmVhY2hcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm5leHQgOiBzdGF0ZS5maXJzdCkge1xuICAgICAgICAgIGJvdW5kRnVuY3Rpb24oZW50cnkudmFsdWUsIGVudHJ5LmtleSwgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnJlbW92ZWQpIGVudHJ5ID0gZW50cnkucHJldmlvdXM7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBgeyBNYXAsIFNldH0ucHJvdG90eXBlLmhhcyhrZXkpYCBtZXRob2RzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuaGFzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuaGFzXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlZGVmaW5lQWxsKFByb3RvdHlwZSwgSVNfTUFQID8ge1xuICAgICAgLy8gYE1hcC5wcm90b3R5cGUuZ2V0KGtleSlgIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmdldFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52YWx1ZTtcbiAgICAgIH0sXG4gICAgICAvLyBgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlgIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLnNldFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IDoge1xuICAgICAgLy8gYFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKWAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuYWRkXG4gICAgICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRlZmluZVByb3BlcnR5KFByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykuc2l6ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH0sXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVApIHtcbiAgICB2YXIgSVRFUkFUT1JfTkFNRSA9IENPTlNUUlVDVE9SX05BTUUgKyAnIEl0ZXJhdG9yJztcbiAgICB2YXIgZ2V0SW50ZXJuYWxDb2xsZWN0aW9uU3RhdGUgPSBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yKENPTlNUUlVDVE9SX05BTUUpO1xuICAgIHZhciBnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUgPSBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yKElURVJBVE9SX05BTUUpO1xuICAgIC8vIGB7IE1hcCwgU2V0IH0ucHJvdG90eXBlLnsga2V5cywgdmFsdWVzLCBlbnRyaWVzLCBAQGl0ZXJhdG9yIH0oKWAgbWV0aG9kc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5lbnRyaWVzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmtleXNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUudmFsdWVzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLUBAaXRlcmF0b3JcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuZW50cmllc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5rZXlzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLnZhbHVlc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS1AQGl0ZXJhdG9yXG4gICAgZGVmaW5lSXRlcmF0b3IoQ29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICAgIHR5cGU6IElURVJBVE9SX05BTUUsXG4gICAgICAgIHRhcmdldDogaXRlcmF0ZWQsXG4gICAgICAgIHN0YXRlOiBnZXRJbnRlcm5hbENvbGxlY3Rpb25TdGF0ZShpdGVyYXRlZCksXG4gICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgIGxhc3Q6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlKHRoaXMpO1xuICAgICAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICAgICAgdmFyIGVudHJ5ID0gc3RhdGUubGFzdDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnJlbW92ZWQpIGVudHJ5ID0gZW50cnkucHJldmlvdXM7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCFzdGF0ZS50YXJnZXQgfHwgIShzdGF0ZS5sYXN0ID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm5leHQgOiBzdGF0ZS5zdGF0ZS5maXJzdCkpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgc3RhdGUudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiB7IHZhbHVlOiBlbnRyeS5rZXksIGRvbmU6IGZhbHNlIH07XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IGVudHJ5LnZhbHVlLCBkb25lOiBmYWxzZSB9O1xuICAgICAgcmV0dXJuIHsgdmFsdWU6IFtlbnRyeS5rZXksIGVudHJ5LnZhbHVlXSwgZG9uZTogZmFsc2UgfTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZVtAQHNwZWNpZXNdYCBhY2Nlc3NvcnNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1tYXAtQEBzcGVjaWVzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtc2V0LUBAc3BlY2llc1xuICAgIHNldFNwZWNpZXMoQ09OU1RSVUNUT1JfTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgZ2V0V2Vha0RhdGEgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5nZXRXZWFrRGF0YTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgQXJyYXlJdGVyYXRpb25Nb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgaW50ZXJuYWxTdGF0ZUdldHRlckZvciA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yO1xudmFyIGZpbmQgPSBBcnJheUl0ZXJhdGlvbk1vZHVsZS5maW5kO1xudmFyIGZpbmRJbmRleCA9IEFycmF5SXRlcmF0aW9uTW9kdWxlLmZpbmRJbmRleDtcbnZhciBzcGxpY2UgPSB1bmN1cnJ5VGhpcyhbXS5zcGxpY2UpO1xudmFyIGlkID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uIChzdG9yZSkge1xuICByZXR1cm4gc3RvcmUuZnJvemVuIHx8IChzdG9yZS5mcm96ZW4gPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSgpKTtcbn07XG5cbnZhciBVbmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVudHJpZXMgPSBbXTtcbn07XG5cbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbiAoc3RvcmUsIGtleSkge1xuICByZXR1cm4gZmluZChzdG9yZS5lbnRyaWVzLCBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgfSk7XG59O1xuXG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSBlbnRyeVsxXSA9IHZhbHVlO1xuICAgIGVsc2UgdGhpcy5lbnRyaWVzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgaW5kZXggPSBmaW5kSW5kZXgodGhpcy5lbnRyaWVzLCBmdW5jdGlvbiAoaXQpIHtcbiAgICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICAgIH0pO1xuICAgIGlmICh+aW5kZXgpIHNwbGljZSh0aGlzLmVudHJpZXMsIGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIENPTlNUUlVDVE9SX05BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQ29uc3RydWN0b3IgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBQcm90b3R5cGUpO1xuICAgICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGF0LCB7XG4gICAgICAgIHR5cGU6IENPTlNUUlVDVE9SX05BTUUsXG4gICAgICAgIGlkOiBpZCsrLFxuICAgICAgICBmcm96ZW46IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBpdGVyYXRlKGl0ZXJhYmxlLCB0aGF0W0FEREVSXSwgeyB0aGF0OiB0aGF0LCBBU19FTlRSSUVTOiBJU19NQVAgfSk7XG4gICAgfSk7XG5cbiAgICB2YXIgUHJvdG90eXBlID0gQ29uc3RydWN0b3IucHJvdG90eXBlO1xuXG4gICAgdmFyIGdldEludGVybmFsU3RhdGUgPSBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yKENPTlNUUlVDVE9SX05BTUUpO1xuXG4gICAgdmFyIGRlZmluZSA9IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrRGF0YShhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICAgIGlmIChkYXRhID09PSB0cnVlKSB1bmNhdWdodEZyb3plblN0b3JlKHN0YXRlKS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICBlbHNlIGRhdGFbc3RhdGUuaWRdID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhhdDtcbiAgICB9O1xuXG4gICAgcmVkZWZpbmVBbGwoUHJvdG90eXBlLCB7XG4gICAgICAvLyBgeyBXZWFrTWFwLCBXZWFrU2V0IH0ucHJvdG90eXBlLmRlbGV0ZShrZXkpYCBtZXRob2RzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWttYXAucHJvdG90eXBlLmRlbGV0ZVxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy13ZWFrc2V0LnByb3RvdHlwZS5kZWxldGVcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWtEYXRhKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZShzdGF0ZSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmIGhhc093bihkYXRhLCBzdGF0ZS5pZCkgJiYgZGVsZXRlIGRhdGFbc3RhdGUuaWRdO1xuICAgICAgfSxcbiAgICAgIC8vIGB7IFdlYWtNYXAsIFdlYWtTZXQgfS5wcm90b3R5cGUuaGFzKGtleSlgIG1ldGhvZHNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha21hcC5wcm90b3R5cGUuaGFzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWtzZXQucHJvdG90eXBlLmhhc1xuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWtEYXRhKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZShzdGF0ZSkuaGFzKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmIGhhc093bihkYXRhLCBzdGF0ZS5pZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZWRlZmluZUFsbChQcm90b3R5cGUsIElTX01BUCA/IHtcbiAgICAgIC8vIGBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KWAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWttYXAucHJvdG90eXBlLmdldFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrRGF0YShrZXkpO1xuICAgICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZShzdGF0ZSkuZ2V0KGtleSk7XG4gICAgICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3N0YXRlLmlkXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIGBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlgIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy13ZWFrbWFwLnByb3RvdHlwZS5zZXRcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZSh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IDoge1xuICAgICAgLy8gYFdlYWtTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlgIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy13ZWFrc2V0LnByb3RvdHlwZS5hZGRcbiAgICAgIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmUodGhpcywgdmFsdWUsIHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTlNUUlVDVE9SX05BTUUsIHdyYXBwZXIsIGNvbW1vbikge1xuICB2YXIgSVNfTUFQID0gQ09OU1RSVUNUT1JfTkFNRS5pbmRleE9mKCdNYXAnKSAhPT0gLTE7XG4gIHZhciBJU19XRUFLID0gQ09OU1RSVUNUT1JfTkFNRS5pbmRleE9mKCdXZWFrJykgIT09IC0xO1xuICB2YXIgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnO1xuICB2YXIgTmF0aXZlQ29uc3RydWN0b3IgPSBnbG9iYWxbQ09OU1RSVUNUT1JfTkFNRV07XG4gIHZhciBOYXRpdmVQcm90b3R5cGUgPSBOYXRpdmVDb25zdHJ1Y3RvciAmJiBOYXRpdmVDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIHZhciBDb25zdHJ1Y3RvciA9IE5hdGl2ZUNvbnN0cnVjdG9yO1xuICB2YXIgZXhwb3J0ZWQgPSB7fTtcblxuICB2YXIgZml4TWV0aG9kID0gZnVuY3Rpb24gKEtFWSkge1xuICAgIHZhciB1bmN1cnJpZWROYXRpdmVNZXRob2QgPSB1bmN1cnJ5VGhpcyhOYXRpdmVQcm90b3R5cGVbS0VZXSk7XG4gICAgcmVkZWZpbmUoTmF0aXZlUHJvdG90eXBlLCBLRVksXG4gICAgICBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICAgICAgdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHRoaXMsIHZhbHVlID09PSAwID8gMCA6IHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9IDogS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3Qoa2V5KSA/IGZhbHNlIDogdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXkpO1xuICAgICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGtleSkgPyB1bmRlZmluZWQgOiB1bmN1cnJpZWROYXRpdmVNZXRob2QodGhpcywga2V5ID09PSAwID8gMCA6IGtleSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3Qoa2V5KSA/IGZhbHNlIDogdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXkpO1xuICAgICAgfSA6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHVuY3VycmllZE5hdGl2ZU1ldGhvZCh0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICk7XG4gIH07XG5cbiAgdmFyIFJFUExBQ0UgPSBpc0ZvcmNlZChcbiAgICBDT05TVFJVQ1RPUl9OQU1FLFxuICAgICFpc0NhbGxhYmxlKE5hdGl2ZUNvbnN0cnVjdG9yKSB8fCAhKElTX1dFQUsgfHwgTmF0aXZlUHJvdG90eXBlLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBOYXRpdmVDb25zdHJ1Y3RvcigpLmVudHJpZXMoKS5uZXh0KCk7XG4gICAgfSkpXG4gICk7XG5cbiAgaWYgKFJFUExBQ0UpIHtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIENvbnN0cnVjdG9yID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIENPTlNUUlVDVE9SX05BTUUsIElTX01BUCwgQURERVIpO1xuICAgIEludGVybmFsTWV0YWRhdGFNb2R1bGUuZW5hYmxlKCk7XG4gIH0gZWxzZSBpZiAoaXNGb3JjZWQoQ09OU1RSVUNUT1JfTkFNRSwgdHJ1ZSkpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgdmFyIEhBU05UX0NIQUlOSU5HID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZTtcbiAgICAvLyBWOCB+IENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICAgIHZhciBBQ0NFUFRfSVRFUkFCTEVTID0gY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkgeyBuZXcgTmF0aXZlQ29uc3RydWN0b3IoaXRlcmFibGUpOyB9KTtcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBOYXRpdmVDb25zdHJ1Y3RvcigpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuXG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDb25zdHJ1Y3RvciA9IHdyYXBwZXIoZnVuY3Rpb24gKGR1bW15LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKGR1bW15LCBOYXRpdmVQcm90b3R5cGUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBOYXRpdmVDb25zdHJ1Y3RvcigpLCBkdW1teSwgQ29uc3RydWN0b3IpO1xuICAgICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBpdGVyYXRlKGl0ZXJhYmxlLCB0aGF0W0FEREVSXSwgeyB0aGF0OiB0aGF0LCBBU19FTlRSSUVTOiBJU19NQVAgfSk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBOYXRpdmVQcm90b3R5cGU7XG4gICAgICBOYXRpdmVQcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcjtcbiAgICB9XG5cbiAgICBpZiAoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTykge1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG5cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcblxuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgTmF0aXZlUHJvdG90eXBlLmNsZWFyKSBkZWxldGUgTmF0aXZlUHJvdG90eXBlLmNsZWFyO1xuICB9XG5cbiAgZXhwb3J0ZWRbQ09OU1RSVUNUT1JfTkFNRV0gPSBDb25zdHJ1Y3RvcjtcbiAgJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBDb25zdHJ1Y3RvciAhPSBOYXRpdmVDb25zdHJ1Y3RvciB9LCBleHBvcnRlZCk7XG5cbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUpO1xuXG4gIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQ29uc3RydWN0b3I7XG59O1xuIiwidmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSwgZXhjZXB0aW9ucykge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhc093bih0YXJnZXQsIGtleSkgJiYgIShleGNlcHRpb25zICYmIGhhc093bihleGNlcHRpb25zLCBrZXkpKSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgIH1cbiAgfVxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICB2YXIgcmVnZXhwID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW01FVEhPRF9OQU1FXShyZWdleHApO1xuICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICB0cnkge1xuICAgICAgcmVnZXhwW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICcvLi8nW01FVEhPRF9OQU1FXShyZWdleHApO1xuICAgIH0gY2F0Y2ggKGVycm9yMikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIGZhbHNlO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgRi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBudWxsO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldHByb3RvdHlwZW9mIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IEYoKSkgIT09IEYucHJvdG90eXBlO1xufSk7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcblxudmFyIHF1b3QgPSAvXCIvZztcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG5cbi8vIGBDcmVhdGVIVE1MYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlaHRtbFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgdmFyIFMgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIHJlcGxhY2UodG9TdHJpbmcodmFsdWUpLCBxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQsIEVOVU1FUkFCTEVfTkVYVCkge1xuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCshRU5VTUVSQUJMRV9ORVhULCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JDb25zdHJ1Y3RvciwgVE9fU1RSSU5HX1RBRywgZmFsc2UsIHRydWUpO1xuICBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICByZXR1cm4gSXRlcmF0b3JDb25zdHJ1Y3Rvcjtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBwcm9wZXJ0eUtleSA9IHRvUHJvcGVydHlLZXkoa2V5KTtcbiAgaWYgKHByb3BlcnR5S2V5IGluIG9iamVjdCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbcHJvcGVydHlLZXldID0gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHBhZFN0YXJ0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQnKS5zdGFydDtcblxudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBEYXRlUHJvdG90eXBlID0gRGF0ZS5wcm90b3R5cGU7XG52YXIgbiREYXRlVG9JU09TdHJpbmcgPSBEYXRlUHJvdG90eXBlLnRvSVNPU3RyaW5nO1xudmFyIGdldFRpbWUgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFRpbWUpO1xudmFyIGdldFVUQ0RhdGUgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFVUQ0RhdGUpO1xudmFyIGdldFVUQ0Z1bGxZZWFyID0gdW5jdXJyeVRoaXMoRGF0ZVByb3RvdHlwZS5nZXRVVENGdWxsWWVhcik7XG52YXIgZ2V0VVRDSG91cnMgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFVUQ0hvdXJzKTtcbnZhciBnZXRVVENNaWxsaXNlY29uZHMgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFVUQ01pbGxpc2Vjb25kcyk7XG52YXIgZ2V0VVRDTWludXRlcyA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VVRDTWludXRlcyk7XG52YXIgZ2V0VVRDTW9udGggPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFVUQ01vbnRoKTtcbnZhciBnZXRVVENTZWNvbmRzID0gdW5jdXJyeVRoaXMoRGF0ZVByb3RvdHlwZS5nZXRVVENTZWNvbmRzKTtcblxuLy8gYERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUudG9pc29zdHJpbmdcbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgZmFpbHMgaGVyZTpcbm1vZHVsZS5leHBvcnRzID0gKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG4kRGF0ZVRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoLTVlMTMgLSAxKSkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBuJERhdGVUb0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKE5hTikpO1xufSkpID8gZnVuY3Rpb24gdG9JU09TdHJpbmcoKSB7XG4gIGlmICghaXNGaW5pdGUoZ2V0VGltZSh0aGlzKSkpIHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZGF0ZSA9IHRoaXM7XG4gIHZhciB5ZWFyID0gZ2V0VVRDRnVsbFllYXIoZGF0ZSk7XG4gIHZhciBtaWxsaXNlY29uZHMgPSBnZXRVVENNaWxsaXNlY29uZHMoZGF0ZSk7XG4gIHZhciBzaWduID0geWVhciA8IDAgPyAnLScgOiB5ZWFyID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gc2lnbiArIHBhZFN0YXJ0KGFicyh5ZWFyKSwgc2lnbiA/IDYgOiA0LCAwKSArXG4gICAgJy0nICsgcGFkU3RhcnQoZ2V0VVRDTW9udGgoZGF0ZSkgKyAxLCAyLCAwKSArXG4gICAgJy0nICsgcGFkU3RhcnQoZ2V0VVRDRGF0ZShkYXRlKSwgMiwgMCkgK1xuICAgICdUJyArIHBhZFN0YXJ0KGdldFVUQ0hvdXJzKGRhdGUpLCAyLCAwKSArXG4gICAgJzonICsgcGFkU3RhcnQoZ2V0VVRDTWludXRlcyhkYXRlKSwgMiwgMCkgK1xuICAgICc6JyArIHBhZFN0YXJ0KGdldFVUQ1NlY29uZHMoZGF0ZSksIDIsIDApICtcbiAgICAnLicgKyBwYWRTdGFydChtaWxsaXNlY29uZHMsIDMsIDApICtcbiAgICAnWic7XG59IDogbiREYXRlVG9JU09TdHJpbmc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5VG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3JkaW5hcnktdG8tcHJpbWl0aXZlJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XG4gIGFuT2JqZWN0KHRoaXMpO1xuICBpZiAoaGludCA9PT0gJ3N0cmluZycgfHwgaGludCA9PT0gJ2RlZmF1bHQnKSBoaW50ID0gJ3N0cmluZyc7XG4gIGVsc2UgaWYgKGhpbnQgIT09ICdudW1iZXInKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiBvcmRpbmFyeVRvUHJpbWl0aXZlKHRoaXMsIGhpbnQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIEZ1bmN0aW9uTmFtZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEl0ZXJhdG9yc0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKTtcblxudmFyIFBST1BFUl9GVU5DVElPTl9OQU1FID0gRnVuY3Rpb25OYW1lLlBST1BFUjtcbnZhciBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSA9IEZ1bmN0aW9uTmFtZS5DT05GSUdVUkFCTEU7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSBJdGVyYXRvcnNDb3JlLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBJdGVyYXRvcnNDb3JlLkJVR0dZX1NBRkFSSV9JVEVSQVRPUlM7XG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcbnZhciBFTlRSSUVTID0gJ2VudHJpZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhYmxlLCBOQU1FLCBJdGVyYXRvckNvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuXG4gIHZhciBnZXRJdGVyYXRpb25NZXRob2QgPSBmdW5jdGlvbiAoS0lORCkge1xuICAgIGlmIChLSU5EID09PSBERUZBVUxUICYmIGRlZmF1bHRJdGVyYXRvcikgcmV0dXJuIGRlZmF1bHRJdGVyYXRvcjtcbiAgICBpZiAoIUJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgJiYgS0lORCBpbiBJdGVyYWJsZVByb3RvdHlwZSkgcmV0dXJuIEl0ZXJhYmxlUHJvdG90eXBlW0tJTkRdO1xuICAgIHN3aXRjaCAoS0lORCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgRU5UUklFUzogcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzKTsgfTtcbiAgfTtcblxuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IGZhbHNlO1xuICB2YXIgSXRlcmFibGVQcm90b3R5cGUgPSBJdGVyYWJsZS5wcm90b3R5cGU7XG4gIHZhciBuYXRpdmVJdGVyYXRvciA9IEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXVxuICAgIHx8IEl0ZXJhYmxlUHJvdG90eXBlWydAQGl0ZXJhdG9yJ11cbiAgICB8fCBERUZBVUxUICYmIEl0ZXJhYmxlUHJvdG90eXBlW0RFRkFVTFRdO1xuICB2YXIgZGVmYXVsdEl0ZXJhdG9yID0gIUJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgJiYgbmF0aXZlSXRlcmF0b3IgfHwgZ2V0SXRlcmF0aW9uTWV0aG9kKERFRkFVTFQpO1xuICB2YXIgYW55TmF0aXZlSXRlcmF0b3IgPSBOQU1FID09ICdBcnJheScgPyBJdGVyYWJsZVByb3RvdHlwZS5lbnRyaWVzIHx8IG5hdGl2ZUl0ZXJhdG9yIDogbmF0aXZlSXRlcmF0b3I7XG4gIHZhciBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIG1ldGhvZHMsIEtFWTtcblxuICAvLyBmaXggbmF0aXZlXG4gIGlmIChhbnlOYXRpdmVJdGVyYXRvcikge1xuICAgIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGFueU5hdGl2ZUl0ZXJhdG9yLmNhbGwobmV3IEl0ZXJhYmxlKCkpKTtcbiAgICBpZiAoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICBpZiAoIUlTX1BVUkUgJiYgZ2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlKSAhPT0gSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgc2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJdGVyYXRvclByb3RvdHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzQ2FsbGFibGUoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSkpIHtcbiAgICAgICAgICByZWRlZmluZShDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCB0cnVlLCB0cnVlKTtcbiAgICAgIGlmIChJU19QVVJFKSBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpeCBBcnJheS5wcm90b3R5cGUueyB2YWx1ZXMsIEBAaXRlcmF0b3IgfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKFBST1BFUl9GVU5DVElPTl9OQU1FICYmIERFRkFVTFQgPT0gVkFMVUVTICYmIG5hdGl2ZUl0ZXJhdG9yICYmIG5hdGl2ZUl0ZXJhdG9yLm5hbWUgIT09IFZBTFVFUykge1xuICAgIGlmICghSVNfUFVSRSAmJiBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhYmxlUHJvdG90eXBlLCAnbmFtZScsIFZBTFVFUyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IHRydWU7XG4gICAgICBkZWZhdWx0SXRlcmF0b3IgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBjYWxsKG5hdGl2ZUl0ZXJhdG9yLCB0aGlzKTsgfTtcbiAgICB9XG4gIH1cblxuICAvLyBleHBvcnQgYWRkaXRpb25hbCBtZXRob2RzXG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogZ2V0SXRlcmF0aW9uTWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyBkZWZhdWx0SXRlcmF0b3IgOiBnZXRJdGVyYXRpb25NZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiBnZXRJdGVyYXRpb25NZXRob2QoRU5UUklFUylcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoS0VZIGluIG1ldGhvZHMpIHtcbiAgICAgIGlmIChCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB8fCAhKEtFWSBpbiBJdGVyYWJsZVByb3RvdHlwZSkpIHtcbiAgICAgICAgcmVkZWZpbmUoSXRlcmFibGVQcm90b3R5cGUsIEtFWSwgbWV0aG9kc1tLRVldKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgJCh7IHRhcmdldDogTkFNRSwgcHJvdG86IHRydWUsIGZvcmNlZDogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfSwgbWV0aG9kcyk7XG4gIH1cblxuICAvLyBkZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghSVNfUFVSRSB8fCBGT1JDRUQpICYmIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gZGVmYXVsdEl0ZXJhdG9yKSB7XG4gICAgcmVkZWZpbmUoSXRlcmFibGVQcm90b3R5cGUsIElURVJBVE9SLCBkZWZhdWx0SXRlcmF0b3IsIHsgbmFtZTogREVGQVVMVCB9KTtcbiAgfVxuICBJdGVyYXRvcnNbTkFNRV0gPSBkZWZhdWx0SXRlcmF0b3I7XG5cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHtcbiAgdmFyIFN5bWJvbCA9IHBhdGguU3ltYm9sIHx8IChwYXRoLlN5bWJvbCA9IHt9KTtcbiAgaWYgKCFoYXNPd24oU3ltYm9sLCBOQU1FKSkgZGVmaW5lUHJvcGVydHkoU3ltYm9sLCBOQU1FLCB7XG4gICAgdmFsdWU6IHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZihOQU1FKVxuICB9KTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gRGV0ZWN0IElFOCdzIGluY29tcGxldGUgZGVmaW5lUHJvcGVydHkgaW1wbGVtZW50YXRpb25cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPSA3O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBFWElTVFMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBFWElTVFMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBJbmRleFNpemVFcnJvcjogeyBzOiAnSU5ERVhfU0laRV9FUlInLCBjOiAxLCBtOiAxIH0sXG4gIERPTVN0cmluZ1NpemVFcnJvcjogeyBzOiAnRE9NU1RSSU5HX1NJWkVfRVJSJywgYzogMiwgbTogMCB9LFxuICBIaWVyYXJjaHlSZXF1ZXN0RXJyb3I6IHsgczogJ0hJRVJBUkNIWV9SRVFVRVNUX0VSUicsIGM6IDMsIG06IDEgfSxcbiAgV3JvbmdEb2N1bWVudEVycm9yOiB7IHM6ICdXUk9OR19ET0NVTUVOVF9FUlInLCBjOiA0LCBtOiAxIH0sXG4gIEludmFsaWRDaGFyYWN0ZXJFcnJvcjogeyBzOiAnSU5WQUxJRF9DSEFSQUNURVJfRVJSJywgYzogNSwgbTogMSB9LFxuICBOb0RhdGFBbGxvd2VkRXJyb3I6IHsgczogJ05PX0RBVEFfQUxMT1dFRF9FUlInLCBjOiA2LCBtOiAwIH0sXG4gIE5vTW9kaWZpY2F0aW9uQWxsb3dlZEVycm9yOiB7IHM6ICdOT19NT0RJRklDQVRJT05fQUxMT1dFRF9FUlInLCBjOiA3LCBtOiAxIH0sXG4gIE5vdEZvdW5kRXJyb3I6IHsgczogJ05PVF9GT1VORF9FUlInLCBjOiA4LCBtOiAxIH0sXG4gIE5vdFN1cHBvcnRlZEVycm9yOiB7IHM6ICdOT1RfU1VQUE9SVEVEX0VSUicsIGM6IDksIG06IDEgfSxcbiAgSW5Vc2VBdHRyaWJ1dGVFcnJvcjogeyBzOiAnSU5VU0VfQVRUUklCVVRFX0VSUicsIGM6IDEwLCBtOiAxIH0sXG4gIEludmFsaWRTdGF0ZUVycm9yOiB7IHM6ICdJTlZBTElEX1NUQVRFX0VSUicsIGM6IDExLCBtOiAxIH0sXG4gIFN5bnRheEVycm9yOiB7IHM6ICdTWU5UQVhfRVJSJywgYzogMTIsIG06IDEgfSxcbiAgSW52YWxpZE1vZGlmaWNhdGlvbkVycm9yOiB7IHM6ICdJTlZBTElEX01PRElGSUNBVElPTl9FUlInLCBjOiAxMywgbTogMSB9LFxuICBOYW1lc3BhY2VFcnJvcjogeyBzOiAnTkFNRVNQQUNFX0VSUicsIGM6IDE0LCBtOiAxIH0sXG4gIEludmFsaWRBY2Nlc3NFcnJvcjogeyBzOiAnSU5WQUxJRF9BQ0NFU1NfRVJSJywgYzogMTUsIG06IDEgfSxcbiAgVmFsaWRhdGlvbkVycm9yOiB7IHM6ICdWQUxJREFUSU9OX0VSUicsIGM6IDE2LCBtOiAwIH0sXG4gIFR5cGVNaXNtYXRjaEVycm9yOiB7IHM6ICdUWVBFX01JU01BVENIX0VSUicsIGM6IDE3LCBtOiAxIH0sXG4gIFNlY3VyaXR5RXJyb3I6IHsgczogJ1NFQ1VSSVRZX0VSUicsIGM6IDE4LCBtOiAxIH0sXG4gIE5ldHdvcmtFcnJvcjogeyBzOiAnTkVUV09SS19FUlInLCBjOiAxOSwgbTogMSB9LFxuICBBYm9ydEVycm9yOiB7IHM6ICdBQk9SVF9FUlInLCBjOiAyMCwgbTogMSB9LFxuICBVUkxNaXNtYXRjaEVycm9yOiB7IHM6ICdVUkxfTUlTTUFUQ0hfRVJSJywgYzogMjEsIG06IDEgfSxcbiAgUXVvdGFFeGNlZWRlZEVycm9yOiB7IHM6ICdRVU9UQV9FWENFRURFRF9FUlInLCBjOiAyMiwgbTogMSB9LFxuICBUaW1lb3V0RXJyb3I6IHsgczogJ1RJTUVPVVRfRVJSJywgYzogMjMsIG06IDEgfSxcbiAgSW52YWxpZE5vZGVUeXBlRXJyb3I6IHsgczogJ0lOVkFMSURfTk9ERV9UWVBFX0VSUicsIGM6IDI0LCBtOiAxIH0sXG4gIERhdGFDbG9uZUVycm9yOiB7IHM6ICdEQVRBX0NMT05FX0VSUicsIGM6IDI1LCBtOiAxIH1cbn07XG4iLCIvLyBpdGVyYWJsZSBET00gY29sbGVjdGlvbnNcbi8vIGZsYWcgLSBgaXRlcmFibGVgIGludGVyZmFjZSAtICdlbnRyaWVzJywgJ2tleXMnLCAndmFsdWVzJywgJ2ZvckVhY2gnIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBDU1NSdWxlTGlzdDogMCxcbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogMCxcbiAgQ1NTVmFsdWVMaXN0OiAwLFxuICBDbGllbnRSZWN0TGlzdDogMCxcbiAgRE9NUmVjdExpc3Q6IDAsXG4gIERPTVN0cmluZ0xpc3Q6IDAsXG4gIERPTVRva2VuTGlzdDogMSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IDAsXG4gIEZpbGVMaXN0OiAwLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogMCxcbiAgSFRNTENvbGxlY3Rpb246IDAsXG4gIEhUTUxGb3JtRWxlbWVudDogMCxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IDAsXG4gIE1lZGlhTGlzdDogMCxcbiAgTWltZVR5cGVBcnJheTogMCxcbiAgTmFtZWROb2RlTWFwOiAwLFxuICBOb2RlTGlzdDogMSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogMCxcbiAgUGx1Z2luOiAwLFxuICBQbHVnaW5BcnJheTogMCxcbiAgU1ZHTGVuZ3RoTGlzdDogMCxcbiAgU1ZHTnVtYmVyTGlzdDogMCxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IDAsXG4gIFNWR1BvaW50TGlzdDogMCxcbiAgU1ZHU3RyaW5nTGlzdDogMCxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogMCxcbiAgU291cmNlQnVmZmVyTGlzdDogMCxcbiAgU3R5bGVTaGVldExpc3Q6IDAsXG4gIFRleHRUcmFja0N1ZUxpc3Q6IDAsXG4gIFRleHRUcmFja0xpc3Q6IDAsXG4gIFRvdWNoTGlzdDogMFxufTtcbiIsIi8vIGluIG9sZCBXZWJLaXQgdmVyc2lvbnMsIGBlbGVtZW50LmNsYXNzTGlzdGAgaXMgbm90IGFuIGluc3RhbmNlIG9mIGdsb2JhbCBgRE9NVG9rZW5MaXN0YFxudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG52YXIgY2xhc3NMaXN0ID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdzcGFuJykuY2xhc3NMaXN0O1xudmFyIERPTVRva2VuTGlzdFByb3RvdHlwZSA9IGNsYXNzTGlzdCAmJiBjbGFzc0xpc3QuY29uc3RydWN0b3IgJiYgY2xhc3NMaXN0LmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBET01Ub2tlbkxpc3RQcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgPyB1bmRlZmluZWQgOiBET01Ub2tlbkxpc3RQcm90b3R5cGU7XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciBmaXJlZm94ID0gdXNlckFnZW50Lm1hdGNoKC9maXJlZm94XFwvKFxcZCspL2kpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICEhZmlyZWZveCAmJiArZmlyZWZveFsxXTtcbiIsIm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JztcbiIsInZhciBVQSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC9NU0lFfFRyaWRlbnQvLnRlc3QoVUEpO1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvaXBhZHxpcGhvbmV8aXBvZC9pLnRlc3QodXNlckFnZW50KSAmJiBnbG9iYWwuUGViYmxlICE9PSB1bmRlZmluZWQ7XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gLyg/OmlwYWR8aXBob25lfGlwb2QpLiphcHBsZXdlYmtpdC9pLnRlc3QodXNlckFnZW50KTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzb2YoZ2xvYmFsLnByb2Nlc3MpID09ICdwcm9jZXNzJztcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvd2ViMHMoPyEuKmNocm9tZSkvaS50ZXN0KHVzZXJBZ2VudCk7XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCduYXZpZ2F0b3InLCAndXNlckFnZW50JykgfHwgJyc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIERlbm8gPSBnbG9iYWwuRGVubztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucyB8fCBEZW5vICYmIERlbm8udmVyc2lvbjtcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4O1xudmFyIG1hdGNoLCB2ZXJzaW9uO1xuXG5pZiAodjgpIHtcbiAgbWF0Y2ggPSB2OC5zcGxpdCgnLicpO1xuICAvLyBpbiBvbGQgQ2hyb21lLCB2ZXJzaW9ucyBvZiBWOCBpc24ndCBWOCA9IENocm9tZSAvIDEwXG4gIC8vIGJ1dCB0aGVpciBjb3JyZWN0IHZlcnNpb25zIGFyZSBub3QgaW50ZXJlc3RpbmcgZm9yIHVzXG4gIHZlcnNpb24gPSBtYXRjaFswXSA+IDAgJiYgbWF0Y2hbMF0gPCA0ID8gMSA6ICsobWF0Y2hbMF0gKyBtYXRjaFsxXSk7XG59XG5cbi8vIEJyb3dzZXJGUyBOb2RlSlMgYHByb2Nlc3NgIHBvbHlmaWxsIGluY29ycmVjdGx5IHNldCBgLnY4YCB0byBgMC4wYFxuLy8gc28gY2hlY2sgYHVzZXJBZ2VudGAgZXZlbiBpZiBgLnY4YCBleGlzdHMsIGJ1dCAwXG5pZiAoIXZlcnNpb24gJiYgdXNlckFnZW50KSB7XG4gIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9FZGdlXFwvKFxcZCspLyk7XG4gIGlmICghbWF0Y2ggfHwgbWF0Y2hbMV0gPj0gNzQpIHtcbiAgICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvQ2hyb21lXFwvKFxcZCspLyk7XG4gICAgaWYgKG1hdGNoKSB2ZXJzaW9uID0gK21hdGNoWzFdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmVyc2lvbjtcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxudmFyIHdlYmtpdCA9IHVzZXJBZ2VudC5tYXRjaCgvQXBwbGVXZWJLaXRcXC8oXFxkKylcXC4vKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhIXdlYmtpdCAmJiArd2Via2l0WzFdO1xuIiwiLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgZXJyb3IgPSBFcnJvcignYScpO1xuICBpZiAoISgnc3RhY2snIGluIGVycm9yKSkgcmV0dXJuIHRydWU7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXJyb3IsICdzdGFjaycsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCA3KSk7XG4gIHJldHVybiBlcnJvci5zdGFjayAhPT0gNztcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vcm1hbGl6ZS1zdHJpbmctYXJndW1lbnQnKTtcblxudmFyIG5hdGl2ZUVycm9yVG9TdHJpbmcgPSBFcnJvci5wcm90b3R5cGUudG9TdHJpbmc7XG5cbnZhciBJTkNPUlJFQ1RfVE9fU1RSSU5HID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICAvLyBDaHJvbWUgMzItIGluY29ycmVjdGx5IGNhbGwgYWNjZXNzb3JcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbiAgICB2YXIgb2JqZWN0ID0gY3JlYXRlKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ25hbWUnLCB7IGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMgPT09IG9iamVjdDtcbiAgICB9IH0pKTtcbiAgICBpZiAobmF0aXZlRXJyb3JUb1N0cmluZy5jYWxsKG9iamVjdCkgIT09ICd0cnVlJykgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gRkYxMC0gZG9lcyBub3QgcHJvcGVybHkgaGFuZGxlIG5vbi1zdHJpbmdzXG4gIHJldHVybiBuYXRpdmVFcnJvclRvU3RyaW5nLmNhbGwoeyBtZXNzYWdlOiAxLCBuYW1lOiAyIH0pICE9PSAnMjogMSdcbiAgICAvLyBJRTggZG9lcyBub3QgcHJvcGVybHkgaGFuZGxlIGRlZmF1bHRzXG4gICAgfHwgbmF0aXZlRXJyb3JUb1N0cmluZy5jYWxsKHt9KSAhPT0gJ0Vycm9yJztcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IElOQ09SUkVDVF9UT19TVFJJTkcgPyBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgdmFyIE8gPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIG5hbWUgPSBub3JtYWxpemVTdHJpbmdBcmd1bWVudChPLm5hbWUsICdFcnJvcicpO1xuICB2YXIgbWVzc2FnZSA9IG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50KE8ubWVzc2FnZSk7XG4gIHJldHVybiAhbmFtZSA/IG1lc3NhZ2UgOiAhbWVzc2FnZSA/IG5hbWUgOiBuYW1lICsgJzogJyArIG1lc3NhZ2U7XG59IDogbmF0aXZlRXJyb3JUb1N0cmluZztcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcblxuLypcbiAgb3B0aW9ucy50YXJnZXQgICAgICAtIG5hbWUgb2YgdGhlIHRhcmdldCBvYmplY3RcbiAgb3B0aW9ucy5nbG9iYWwgICAgICAtIHRhcmdldCBpcyB0aGUgZ2xvYmFsIG9iamVjdFxuICBvcHRpb25zLnN0YXQgICAgICAgIC0gZXhwb3J0IGFzIHN0YXRpYyBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnByb3RvICAgICAgIC0gZXhwb3J0IGFzIHByb3RvdHlwZSBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnJlYWwgICAgICAgIC0gcmVhbCBwcm90b3R5cGUgbWV0aG9kIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy5mb3JjZWQgICAgICAtIGV4cG9ydCBldmVuIGlmIHRoZSBuYXRpdmUgZmVhdHVyZSBpcyBhdmFpbGFibGVcbiAgb3B0aW9ucy5iaW5kICAgICAgICAtIGJpbmQgbWV0aG9kcyB0byB0aGUgdGFyZ2V0LCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMud3JhcCAgICAgICAgLSB3cmFwIGNvbnN0cnVjdG9ycyB0byBwcmV2ZW50aW5nIGdsb2JhbCBwb2xsdXRpb24sIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy51bnNhZmUgICAgICAtIHVzZSB0aGUgc2ltcGxlIGFzc2lnbm1lbnQgb2YgcHJvcGVydHkgaW5zdGVhZCBvZiBkZWxldGUgKyBkZWZpbmVQcm9wZXJ0eVxuICBvcHRpb25zLnNoYW0gICAgICAgIC0gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICBvcHRpb25zLmVudW1lcmFibGUgIC0gZXhwb3J0IGFzIGVudW1lcmFibGUgcHJvcGVydHlcbiAgb3B0aW9ucy5ub1RhcmdldEdldCAtIHByZXZlbnQgY2FsbGluZyBhIGdldHRlciBvbiB0YXJnZXRcbiAgb3B0aW9ucy5uYW1lICAgICAgICAtIHRoZSAubmFtZSBvZiB0aGUgZnVuY3Rpb24gaWYgaXQgZG9lcyBub3QgbWF0Y2ggdGhlIGtleVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMsIHNvdXJjZSkge1xuICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7XG4gIHZhciBHTE9CQUwgPSBvcHRpb25zLmdsb2JhbDtcbiAgdmFyIFNUQVRJQyA9IG9wdGlvbnMuc3RhdDtcbiAgdmFyIEZPUkNFRCwgdGFyZ2V0LCBrZXksIHRhcmdldFByb3BlcnR5LCBzb3VyY2VQcm9wZXJ0eSwgZGVzY3JpcHRvcjtcbiAgaWYgKEdMT0JBTCkge1xuICAgIHRhcmdldCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmIChTVEFUSUMpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWxbVEFSR0VUXSB8fCBzZXRHbG9iYWwoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5ub1RhcmdldEdldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIG1vdmVkIHRvIGVudHJ5IHBvaW50c1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAuZXhlYycpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYywgRk9SQ0VELCBTSEFNKSB7XG4gIHZhciBTWU1CT0wgPSB3ZWxsS25vd25TeW1ib2woS0VZKTtcblxuICB2YXIgREVMRUdBVEVTX1RPX1NZTUJPTCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3RyaW5nIG1ldGhvZHMgY2FsbCBzeW1ib2wtbmFtZWQgUmVnRXAgbWV0aG9kc1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KTtcblxuICB2YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBERUxFR0FURVNfVE9fU1lNQk9MICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3ltYm9sLW5hbWVkIFJlZ0V4cCBtZXRob2RzIGNhbGwgLmV4ZWNcbiAgICB2YXIgZXhlY0NhbGxlZCA9IGZhbHNlO1xuICAgIHZhciByZSA9IC9hLztcblxuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFdlIGNhbid0IHVzZSByZWFsIHJlZ2V4IGhlcmUgc2luY2UgaXQgY2F1c2VzIGRlb3B0aW1pemF0aW9uXG4gICAgICAvLyBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvbiBpbiBWOFxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMwNlxuICAgICAgcmUgPSB7fTtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICAgIHJlLmZsYWdzID0gJyc7XG4gICAgICByZVtTWU1CT0xdID0gLy4vW1NZTUJPTF07XG4gICAgfVxuXG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuXG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KTtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICBGT1JDRURcbiAgKSB7XG4gICAgdmFyIHVuY3VycmllZE5hdGl2ZVJlZ0V4cE1ldGhvZCA9IHVuY3VycnlUaGlzKC8uL1tTWU1CT0xdKTtcbiAgICB2YXIgbWV0aG9kcyA9IGV4ZWMoU1lNQk9MLCAnJ1tLRVldLCBmdW5jdGlvbiAobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgIHZhciB1bmN1cnJpZWROYXRpdmVNZXRob2QgPSB1bmN1cnJ5VGhpcyhuYXRpdmVNZXRob2QpO1xuICAgICAgdmFyICRleGVjID0gcmVnZXhwLmV4ZWM7XG4gICAgICBpZiAoJGV4ZWMgPT09IHJlZ2V4cEV4ZWMgfHwgJGV4ZWMgPT09IFJlZ0V4cFByb3RvdHlwZS5leGVjKSB7XG4gICAgICAgIGlmIChERUxFR0FURVNfVE9fU1lNQk9MICYmICFmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICAgIC8vIFRoZSBuYXRpdmUgU3RyaW5nIG1ldGhvZCBhbHJlYWR5IGRlbGVnYXRlcyB0byBAQG1ldGhvZCAodGhpc1xuICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAvLyBXZSBhdm9pZCBpdCBieSBkaXJlY3RseSBjYWxsaW5nIHRoZSBuYXRpdmUgQEBtZXRob2QgbWV0aG9kLlxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiB1bmN1cnJpZWROYXRpdmVSZWdFeHBNZXRob2QocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuY3VycmllZE5hdGl2ZU1ldGhvZChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XG4gICAgfSk7XG5cbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIG1ldGhvZHNbMF0pO1xuICAgIHJlZGVmaW5lKFJlZ0V4cFByb3RvdHlwZSwgU1lNQk9MLCBtZXRob2RzWzFdKTtcbiAgfVxuXG4gIGlmIChTSEFNKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoUmVnRXhwUHJvdG90eXBlW1NZTUJPTF0sICdzaGFtJywgdHJ1ZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxuLy8gYEZsYXR0ZW5JbnRvQXJyYXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSBmdW5jdGlvbiAodGFyZ2V0LCBvcmlnaW5hbCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCwgbWFwcGVyLCB0aGlzQXJnKSB7XG4gIHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xuICB2YXIgc291cmNlSW5kZXggPSAwO1xuICB2YXIgbWFwRm4gPSBtYXBwZXIgPyBiaW5kKG1hcHBlciwgdGhpc0FyZykgOiBmYWxzZTtcbiAgdmFyIGVsZW1lbnQsIGVsZW1lbnRMZW47XG5cbiAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG4gICAgaWYgKHNvdXJjZUluZGV4IGluIHNvdXJjZSkge1xuICAgICAgZWxlbWVudCA9IG1hcEZuID8gbWFwRm4oc291cmNlW3NvdXJjZUluZGV4XSwgc291cmNlSW5kZXgsIG9yaWdpbmFsKSA6IHNvdXJjZVtzb3VyY2VJbmRleF07XG5cbiAgICAgIGlmIChkZXB0aCA+IDAgJiYgaXNBcnJheShlbGVtZW50KSkge1xuICAgICAgICBlbGVtZW50TGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoZWxlbWVudCk7XG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCBlbGVtZW50TGVuLCB0YXJnZXRJbmRleCwgZGVwdGggLSAxKSAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGFyZ2V0SW5kZXggPj0gMHgxRkZGRkZGRkZGRkZGRikgdGhyb3cgVHlwZUVycm9yKCdFeGNlZWQgdGhlIGFjY2VwdGFibGUgYXJyYXkgbGVuZ3RoJyk7XG4gICAgICAgIHRhcmdldFt0YXJnZXRJbmRleF0gPSBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICB0YXJnZXRJbmRleCsrO1xuICAgIH1cbiAgICBzb3VyY2VJbmRleCsrO1xuICB9XG4gIHJldHVybiB0YXJnZXRJbmRleDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkludG9BcnJheTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtaXNleHRlbnNpYmxlLCBlcy9uby1vYmplY3QtcHJldmVudGV4dGVuc2lvbnMgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5pc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbiIsInZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBhcHBseSA9IEZ1bmN0aW9uUHJvdG90eXBlLmFwcGx5O1xudmFyIGJpbmQgPSBGdW5jdGlvblByb3RvdHlwZS5iaW5kO1xudmFyIGNhbGwgPSBGdW5jdGlvblByb3RvdHlwZS5jYWxsO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tcmVmbGVjdCAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBSZWZsZWN0ID09ICdvYmplY3QnICYmIFJlZmxlY3QuYXBwbHkgfHwgKGJpbmQgPyBjYWxsLmJpbmQoYXBwbHkpIDogZnVuY3Rpb24gKCkge1xuICByZXR1cm4gY2FsbC5hcHBseShhcHBseSwgYXJndW1lbnRzKTtcbn0pO1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG5cbnZhciBiaW5kID0gdW5jdXJyeVRoaXModW5jdXJyeVRoaXMuYmluZCk7XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQpIHtcbiAgYUNhbGxhYmxlKGZuKTtcbiAgcmV0dXJuIHRoYXQgPT09IHVuZGVmaW5lZCA/IGZuIDogYmluZCA/IGJpbmQoZm4sIHRoYXQpIDogZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG5cbnZhciBGdW5jdGlvbiA9IGdsb2JhbC5GdW5jdGlvbjtcbnZhciBjb25jYXQgPSB1bmN1cnJ5VGhpcyhbXS5jb25jYXQpO1xudmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChDLCBhcmdzTGVuZ3RoLCBhcmdzKSB7XG4gIGlmICghaGFzT3duKGZhY3RvcmllcywgYXJnc0xlbmd0aCkpIHtcbiAgICBmb3IgKHZhciBsaXN0ID0gW10sIGkgPSAwOyBpIDwgYXJnc0xlbmd0aDsgaSsrKSBsaXN0W2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgZmFjdG9yaWVzW2FyZ3NMZW5ndGhdID0gRnVuY3Rpb24oJ0MsYScsICdyZXR1cm4gbmV3IEMoJyArIGpvaW4obGlzdCwgJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1thcmdzTGVuZ3RoXShDLCBhcmdzKTtcbn07XG5cbi8vIGBGdW5jdGlvbi5wcm90b3R5cGUuYmluZGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgRiA9IGFDYWxsYWJsZSh0aGlzKTtcbiAgdmFyIFByb3RvdHlwZSA9IEYucHJvdG90eXBlO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZEZ1bmN0aW9uID0gZnVuY3Rpb24gYm91bmQoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gY29uY2F0KHBhcnRBcmdzLCBhcnJheVNsaWNlKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmRGdW5jdGlvbiA/IGNvbnN0cnVjdChGLCBhcmdzLmxlbmd0aCwgYXJncykgOiBGLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoUHJvdG90eXBlKSkgYm91bmRGdW5jdGlvbi5wcm90b3R5cGUgPSBQcm90b3R5cGU7XG4gIHJldHVybiBib3VuZEZ1bmN0aW9uO1xufTtcbiIsInZhciBjYWxsID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGw7XG5cbm1vZHVsZS5leHBvcnRzID0gY2FsbC5iaW5kID8gY2FsbC5iaW5kKGNhbGwpIDogZnVuY3Rpb24gKCkge1xuICByZXR1cm4gY2FsbC5hcHBseShjYWxsLCBhcmd1bWVudHMpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXREZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxudmFyIEVYSVNUUyA9IGhhc093bihGdW5jdGlvblByb3RvdHlwZSwgJ25hbWUnKTtcbi8vIGFkZGl0aW9uYWwgcHJvdGVjdGlvbiBmcm9tIG1pbmlmaWVkIC8gbWFuZ2xlZCAvIGRyb3BwZWQgZnVuY3Rpb24gbmFtZXNcbnZhciBQUk9QRVIgPSBFWElTVFMgJiYgKGZ1bmN0aW9uIHNvbWV0aGluZygpIHsgLyogZW1wdHkgKi8gfSkubmFtZSA9PT0gJ3NvbWV0aGluZyc7XG52YXIgQ09ORklHVVJBQkxFID0gRVhJU1RTICYmICghREVTQ1JJUFRPUlMgfHwgKERFU0NSSVBUT1JTICYmIGdldERlc2NyaXB0b3IoRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJykuY29uZmlndXJhYmxlKSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBFWElTVFM6IEVYSVNUUyxcbiAgUFJPUEVSOiBQUk9QRVIsXG4gIENPTkZJR1VSQUJMRTogQ09ORklHVVJBQkxFXG59O1xuIiwidmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIGJpbmQgPSBGdW5jdGlvblByb3RvdHlwZS5iaW5kO1xudmFyIGNhbGwgPSBGdW5jdGlvblByb3RvdHlwZS5jYWxsO1xudmFyIHVuY3VycnlUaGlzID0gYmluZCAmJiBiaW5kLmJpbmQoY2FsbCwgY2FsbCk7XG5cbm1vZHVsZS5leHBvcnRzID0gYmluZCA/IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gJiYgdW5jdXJyeVRoaXMoZm4pO1xufSA6IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gJiYgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjYWxsLmFwcGx5KGZuLCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc0NhbGxhYmxlKGFyZ3VtZW50KSA/IGFyZ3VtZW50IDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKSA6IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBnZXRNZXRob2QoaXQsIElURVJBVE9SKVxuICAgIHx8IGdldE1ldGhvZChpdCwgJ0BAaXRlcmF0b3InKVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCwgdXNpbmdJdGVyYXRvcikge1xuICB2YXIgaXRlcmF0b3JNZXRob2QgPSBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGdldEl0ZXJhdG9yTWV0aG9kKGFyZ3VtZW50KSA6IHVzaW5nSXRlcmF0b3I7XG4gIGlmIChhQ2FsbGFibGUoaXRlcmF0b3JNZXRob2QpKSByZXR1cm4gYW5PYmplY3QoY2FsbChpdGVyYXRvck1ldGhvZCwgYXJndW1lbnQpKTtcbiAgdGhyb3cgVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG59O1xuIiwidmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG5cbi8vIGBHZXRNZXRob2RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXRtZXRob2Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFYsIFApIHtcbiAgdmFyIGZ1bmMgPSBWW1BdO1xuICByZXR1cm4gZnVuYyA9PSBudWxsID8gdW5kZWZpbmVkIDogYUNhbGxhYmxlKGZ1bmMpO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcblxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MUyA9IC9cXCQoWyQmJ2BdfFxcZHsxLDJ9fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJidgXXxcXGR7MSwyfSkvZztcblxuLy8gYEdldFN1YnN0aXR1dGlvbmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldHN1YnN0aXR1dGlvblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWF0Y2hlZCwgc3RyLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VtZW50KSB7XG4gIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gIHZhciBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQ7XG4gIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XG4gICAgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTO1xuICB9XG4gIHJldHVybiByZXBsYWNlKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XG4gICAgdmFyIGNhcHR1cmU7XG4gICAgc3dpdGNoIChjaGFyQXQoY2gsIDApKSB7XG4gICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyaW5nU2xpY2Uoc3RyLCAwLCBwb3NpdGlvbik7XG4gICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyaW5nU2xpY2Uoc3RyLCB0YWlsUG9zKTtcbiAgICAgIGNhc2UgJzwnOlxuICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tzdHJpbmdTbGljZShjaCwgMSwgLTEpXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICB2YXIgZiA9IGZsb29yKG4gLyAxMCk7XG4gICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaGFyQXQoY2gsIDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2hhckF0KGNoLCAxKTtcbiAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICB9XG4gICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgfSk7XG59O1xuIiwidmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tZ2xvYmFsLXRoaXMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2YgZ2xvYmFsVGhpcyA9PSAnb2JqZWN0JyAmJiBnbG9iYWxUaGlzKSB8fFxuICBjaGVjayh0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdykgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAtLSBzYWZlXG4gIGNoZWNrKHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYpIHx8XG4gIGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmMgLS0gZmFsbGJhY2tcbiAgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pKCkgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcblxudmFyIGhhc093blByb3BlcnR5ID0gdW5jdXJyeVRoaXMoe30uaGFzT3duUHJvcGVydHkpO1xuXG4vLyBgSGFzT3duUHJvcGVydHlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1oYXNvd25wcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaGFzT3duIHx8IGZ1bmN0aW9uIGhhc093bihpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eSh0b09iamVjdChpdCksIGtleSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgdmFyIGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZTtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xuICAgIGFyZ3VtZW50cy5sZW5ndGggPT0gMSA/IGNvbnNvbGUuZXJyb3IoYSkgOiBjb25zb2xlLmVycm9yKGEsIGIpO1xuICB9XG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignZG9jdW1lbnQnLCAnZG9jdW1lbnRFbGVtZW50Jyk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCIvLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIEFycmF5ID0gZ2xvYmFsLkFycmF5O1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcblxudmFyIHBhY2sgPSBmdW5jdGlvbiAobnVtYmVyLCBtYW50aXNzYUxlbmd0aCwgYnl0ZXMpIHtcbiAgdmFyIGJ1ZmZlciA9IEFycmF5KGJ5dGVzKTtcbiAgdmFyIGV4cG9uZW50TGVuZ3RoID0gYnl0ZXMgKiA4IC0gbWFudGlzc2FMZW5ndGggLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGV4cG9uZW50TGVuZ3RoKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbWFudGlzc2FMZW5ndGggPT09IDIzID8gcG93KDIsIC0yNCkgLSBwb3coMiwgLTc3KSA6IDA7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCB8fCBudW1iZXIgPT09IDAgJiYgMSAvIG51bWJlciA8IDAgPyAxIDogMDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGV4cG9uZW50LCBtYW50aXNzYSwgYztcbiAgbnVtYmVyID0gYWJzKG51bWJlcik7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIGlmIChudW1iZXIgIT0gbnVtYmVyIHx8IG51bWJlciA9PT0gSW5maW5pdHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIG1hbnRpc3NhID0gbnVtYmVyICE9IG51bWJlciA/IDEgOiAwO1xuICAgIGV4cG9uZW50ID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBleHBvbmVudCA9IGZsb29yKGxvZyhudW1iZXIpIC8gTE4yKTtcbiAgICBjID0gcG93KDIsIC1leHBvbmVudCk7XG4gICAgaWYgKG51bWJlciAqIGMgPCAxKSB7XG4gICAgICBleHBvbmVudC0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZXhwb25lbnQgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBudW1iZXIgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICBudW1iZXIgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKG51bWJlciAqIGMgPj0gMikge1xuICAgICAgZXhwb25lbnQrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYgKGV4cG9uZW50ICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbWFudGlzc2EgPSAwO1xuICAgICAgZXhwb25lbnQgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZXhwb25lbnQgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtYW50aXNzYSA9IChudW1iZXIgKiBjIC0gMSkgKiBwb3coMiwgbWFudGlzc2FMZW5ndGgpO1xuICAgICAgZXhwb25lbnQgPSBleHBvbmVudCArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtYW50aXNzYSA9IG51bWJlciAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1hbnRpc3NhTGVuZ3RoKTtcbiAgICAgIGV4cG9uZW50ID0gMDtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKG1hbnRpc3NhTGVuZ3RoID49IDgpIHtcbiAgICBidWZmZXJbaW5kZXgrK10gPSBtYW50aXNzYSAmIDI1NTtcbiAgICBtYW50aXNzYSAvPSAyNTY7XG4gICAgbWFudGlzc2FMZW5ndGggLT0gODtcbiAgfVxuICBleHBvbmVudCA9IGV4cG9uZW50IDw8IG1hbnRpc3NhTGVuZ3RoIHwgbWFudGlzc2E7XG4gIGV4cG9uZW50TGVuZ3RoICs9IG1hbnRpc3NhTGVuZ3RoO1xuICB3aGlsZSAoZXhwb25lbnRMZW5ndGggPiAwKSB7XG4gICAgYnVmZmVyW2luZGV4KytdID0gZXhwb25lbnQgJiAyNTU7XG4gICAgZXhwb25lbnQgLz0gMjU2O1xuICAgIGV4cG9uZW50TGVuZ3RoIC09IDg7XG4gIH1cbiAgYnVmZmVyWy0taW5kZXhdIHw9IHNpZ24gKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59O1xuXG52YXIgdW5wYWNrID0gZnVuY3Rpb24gKGJ1ZmZlciwgbWFudGlzc2FMZW5ndGgpIHtcbiAgdmFyIGJ5dGVzID0gYnVmZmVyLmxlbmd0aDtcbiAgdmFyIGV4cG9uZW50TGVuZ3RoID0gYnl0ZXMgKiA4IC0gbWFudGlzc2FMZW5ndGggLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGV4cG9uZW50TGVuZ3RoKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZXhwb25lbnRMZW5ndGggLSA3O1xuICB2YXIgaW5kZXggPSBieXRlcyAtIDE7XG4gIHZhciBzaWduID0gYnVmZmVyW2luZGV4LS1dO1xuICB2YXIgZXhwb25lbnQgPSBzaWduICYgMTI3O1xuICB2YXIgbWFudGlzc2E7XG4gIHNpZ24gPj49IDc7XG4gIHdoaWxlIChuQml0cyA+IDApIHtcbiAgICBleHBvbmVudCA9IGV4cG9uZW50ICogMjU2ICsgYnVmZmVyW2luZGV4LS1dO1xuICAgIG5CaXRzIC09IDg7XG4gIH1cbiAgbWFudGlzc2EgPSBleHBvbmVudCAmICgxIDw8IC1uQml0cykgLSAxO1xuICBleHBvbmVudCA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtYW50aXNzYUxlbmd0aDtcbiAgd2hpbGUgKG5CaXRzID4gMCkge1xuICAgIG1hbnRpc3NhID0gbWFudGlzc2EgKiAyNTYgKyBidWZmZXJbaW5kZXgtLV07XG4gICAgbkJpdHMgLT0gODtcbiAgfVxuICBpZiAoZXhwb25lbnQgPT09IDApIHtcbiAgICBleHBvbmVudCA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChleHBvbmVudCA9PT0gZU1heCkge1xuICAgIHJldHVybiBtYW50aXNzYSA/IE5hTiA6IHNpZ24gPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcbiAgfSBlbHNlIHtcbiAgICBtYW50aXNzYSA9IG1hbnRpc3NhICsgcG93KDIsIG1hbnRpc3NhTGVuZ3RoKTtcbiAgICBleHBvbmVudCA9IGV4cG9uZW50IC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzaWduID8gLTEgOiAxKSAqIG1hbnRpc3NhICogcG93KDIsIGV4cG9uZW50IC0gbWFudGlzc2FMZW5ndGgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhY2s6IHBhY2ssXG4gIHVucGFjazogdW5wYWNrXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyIE9iamVjdCA9IGdsb2JhbC5PYmplY3Q7XG52YXIgc3BsaXQgPSB1bmN1cnJ5VGhpcygnJy5zcGxpdCk7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmVcbiAgcmV0dXJuICFPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0KGl0LCAnJykgOiBPYmplY3QoaXQpO1xufSA6IE9iamVjdDtcbiIsInZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gbWFrZXMgc3ViY2xhc3Npbmcgd29yayBjb3JyZWN0IGZvciB3cmFwcGVkIGJ1aWx0LWluc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoJHRoaXMsIGR1bW15LCBXcmFwcGVyKSB7XG4gIHZhciBOZXdUYXJnZXQsIE5ld1RhcmdldFByb3RvdHlwZTtcbiAgaWYgKFxuICAgIC8vIGl0IGNhbiB3b3JrIG9ubHkgd2l0aCBuYXRpdmUgYHNldFByb3RvdHlwZU9mYFxuICAgIHNldFByb3RvdHlwZU9mICYmXG4gICAgLy8gd2UgaGF2ZW4ndCBjb21wbGV0ZWx5IGNvcnJlY3QgcHJlLUVTNiB3YXkgZm9yIGdldHRpbmcgYG5ldy50YXJnZXRgLCBzbyB1c2UgdGhpc1xuICAgIGlzQ2FsbGFibGUoTmV3VGFyZ2V0ID0gZHVtbXkuY29uc3RydWN0b3IpICYmXG4gICAgTmV3VGFyZ2V0ICE9PSBXcmFwcGVyICYmXG4gICAgaXNPYmplY3QoTmV3VGFyZ2V0UHJvdG90eXBlID0gTmV3VGFyZ2V0LnByb3RvdHlwZSkgJiZcbiAgICBOZXdUYXJnZXRQcm90b3R5cGUgIT09IFdyYXBwZXIucHJvdG90eXBlXG4gICkgc2V0UHJvdG90eXBlT2YoJHRoaXMsIE5ld1RhcmdldFByb3RvdHlwZSk7XG4gIHJldHVybiAkdGhpcztcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IHVuY3VycnlUaGlzKEZ1bmN0aW9uLnRvU3RyaW5nKTtcblxuLy8gdGhpcyBoZWxwZXIgYnJva2VuIGluIGBjb3JlLWpzQDMuNC4xLTMuNC40YCwgc28gd2UgY2FuJ3QgdXNlIGBzaGFyZWRgIGhlbHBlclxuaWYgKCFpc0NhbGxhYmxlKHN0b3JlLmluc3BlY3RTb3VyY2UpKSB7XG4gIHN0b3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25Ub1N0cmluZyhpdCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmUuaW5zcGVjdFNvdXJjZTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbi8vIGBJbnN0YWxsRXJyb3JDYXVzZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvcHJvcG9zYWwtZXJyb3ItY2F1c2UvI3NlYy1lcnJvcm9iamVjdHMtaW5zdGFsbC1lcnJvci1jYXVzZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgb3B0aW9ucykge1xuICBpZiAoaXNPYmplY3Qob3B0aW9ucykgJiYgJ2NhdXNlJyBpbiBvcHRpb25zKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KE8sICdjYXVzZScsIG9wdGlvbnMuY2F1c2UpO1xuICB9XG59O1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpO1xudmFyIGlzRXh0ZW5zaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtZXh0ZW5zaWJsZScpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xuXG52YXIgUkVRVUlSRUQgPSBmYWxzZTtcbnZhciBNRVRBREFUQSA9IHVpZCgnbWV0YScpO1xudmFyIGlkID0gMDtcblxudmFyIHNldE1ldGFkYXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIGRlZmluZVByb3BlcnR5KGl0LCBNRVRBREFUQSwgeyB2YWx1ZToge1xuICAgIG9iamVjdElEOiAnTycgKyBpZCsrLCAvLyBvYmplY3QgSURcbiAgICB3ZWFrRGF0YToge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG5cbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIGEgcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhc093bihpdCwgTUVUQURBVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGFkYXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBREFUQV0ub2JqZWN0SUQ7XG59O1xuXG52YXIgZ2V0V2Vha0RhdGEgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhc093bihpdCwgTUVUQURBVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGFkYXRhKGl0KTtcbiAgLy8gcmV0dXJuIHRoZSBzdG9yZSBvZiB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBREFUQV0ud2Vha0RhdGE7XG59O1xuXG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpJTkcgJiYgUkVRVUlSRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzT3duKGl0LCBNRVRBREFUQSkpIHNldE1ldGFkYXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcblxudmFyIGVuYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgbWV0YS5lbmFibGUgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4gIFJFUVVJUkVEID0gdHJ1ZTtcbiAgdmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmY7XG4gIHZhciBzcGxpY2UgPSB1bmN1cnJ5VGhpcyhbXS5zcGxpY2UpO1xuICB2YXIgdGVzdCA9IHt9O1xuICB0ZXN0W01FVEFEQVRBXSA9IDE7XG5cbiAgLy8gcHJldmVudCBleHBvc2luZyBvZiBtZXRhZGF0YSBrZXlcbiAgaWYgKGdldE93blByb3BlcnR5TmFtZXModGVzdCkubGVuZ3RoKSB7XG4gICAgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChyZXN1bHRbaV0gPT09IE1FVEFEQVRBKSB7XG4gICAgICAgICAgc3BsaWNlKHJlc3VsdCwgaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWxNb2R1bGUuZlxuICAgIH0pO1xuICB9XG59O1xuXG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBlbmFibGU6IGVuYWJsZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2Vha0RhdGE6IGdldFdlYWtEYXRhLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG5cbmhpZGRlbktleXNbTUVUQURBVEFdID0gdHJ1ZTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEID0gJ09iamVjdCBhbHJlYWR5IGluaXRpYWxpemVkJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcbnZhciBzZXQsIGdldCwgaGFzO1xuXG52YXIgZW5mb3JjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaGFzKGl0KSA/IGdldChpdCkgOiBzZXQoaXQsIHt9KTtcbn07XG5cbnZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIHN0YXRlO1xuICAgIGlmICghaXNPYmplY3QoaXQpIHx8IChzdGF0ZSA9IGdldChpdCkpLnR5cGUgIT09IFRZUEUpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTtcbiAgICB9IHJldHVybiBzdGF0ZTtcbiAgfTtcbn07XG5cbmlmIChOQVRJVkVfV0VBS19NQVAgfHwgc2hhcmVkLnN0YXRlKSB7XG4gIHZhciBzdG9yZSA9IHNoYXJlZC5zdGF0ZSB8fCAoc2hhcmVkLnN0YXRlID0gbmV3IFdlYWtNYXAoKSk7XG4gIHZhciB3bWdldCA9IHVuY3VycnlUaGlzKHN0b3JlLmdldCk7XG4gIHZhciB3bWhhcyA9IHVuY3VycnlUaGlzKHN0b3JlLmhhcyk7XG4gIHZhciB3bXNldCA9IHVuY3VycnlUaGlzKHN0b3JlLnNldCk7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBpZiAod21oYXMoc3RvcmUsIGl0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgd21zZXQoc3RvcmUsIGl0LCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21nZXQoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzKHN0b3JlLCBpdCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmIChoYXNPd24oaXQsIFNUQVRFKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGhhc093bihpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBoYXNPd24oaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1pc2FycmF5IC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZ3VtZW50KSB7XG4gIHJldHVybiBjbGFzc29mKGFyZ3VtZW50KSA9PSAnQXJyYXknO1xufTtcbiIsIi8vIGBJc0NhbGxhYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNjYWxsYWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcblxudmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgZW1wdHkgPSBbXTtcbnZhciBjb25zdHJ1Y3QgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ2NvbnN0cnVjdCcpO1xudmFyIGNvbnN0cnVjdG9yUmVnRXhwID0gL15cXHMqKD86Y2xhc3N8ZnVuY3Rpb24pXFxiLztcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoY29uc3RydWN0b3JSZWdFeHAuZXhlYyk7XG52YXIgSU5DT1JSRUNUX1RPX1NUUklORyA9ICFjb25zdHJ1Y3RvclJlZ0V4cC5leGVjKG5vb3ApO1xuXG52YXIgaXNDb25zdHJ1Y3Rvck1vZGVybiA9IGZ1bmN0aW9uIGlzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcbiAgaWYgKCFpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGZhbHNlO1xuICB0cnkge1xuICAgIGNvbnN0cnVjdChub29wLCBlbXB0eSwgYXJndW1lbnQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxudmFyIGlzQ29uc3RydWN0b3JMZWdhY3kgPSBmdW5jdGlvbiBpc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSB7XG4gIGlmICghaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBmYWxzZTtcbiAgc3dpdGNoIChjbGFzc29mKGFyZ3VtZW50KSkge1xuICAgIGNhc2UgJ0FzeW5jRnVuY3Rpb24nOlxuICAgIGNhc2UgJ0dlbmVyYXRvckZ1bmN0aW9uJzpcbiAgICBjYXNlICdBc3luY0dlbmVyYXRvckZ1bmN0aW9uJzogcmV0dXJuIGZhbHNlO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gd2UgY2FuJ3QgY2hlY2sgLnByb3RvdHlwZSBzaW5jZSBjb25zdHJ1Y3RvcnMgcHJvZHVjZWQgYnkgLmJpbmQgaGF2ZW4ndCBpdFxuICAgIC8vIGBGdW5jdGlvbiN0b1N0cmluZ2AgdGhyb3dzIG9uIHNvbWUgYnVpbHQtaXQgZnVuY3Rpb24gaW4gc29tZSBsZWdhY3kgZW5naW5lc1xuICAgIC8vIChmb3IgZXhhbXBsZSwgYERPTVF1YWRgIGFuZCBzaW1pbGFyIGluIEZGNDEtKVxuICAgIHJldHVybiBJTkNPUlJFQ1RfVE9fU1RSSU5HIHx8ICEhZXhlYyhjb25zdHJ1Y3RvclJlZ0V4cCwgaW5zcGVjdFNvdXJjZShhcmd1bWVudCkpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5pc0NvbnN0cnVjdG9yTGVnYWN5LnNoYW0gPSB0cnVlO1xuXG4vLyBgSXNDb25zdHJ1Y3RvcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzY29uc3RydWN0b3Jcbm1vZHVsZS5leHBvcnRzID0gIWNvbnN0cnVjdCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBjYWxsZWQ7XG4gIHJldHVybiBpc0NvbnN0cnVjdG9yTW9kZXJuKGlzQ29uc3RydWN0b3JNb2Rlcm4uY2FsbClcbiAgICB8fCAhaXNDb25zdHJ1Y3Rvck1vZGVybihPYmplY3QpXG4gICAgfHwgIWlzQ29uc3RydWN0b3JNb2Rlcm4oZnVuY3Rpb24gKCkgeyBjYWxsZWQgPSB0cnVlOyB9KVxuICAgIHx8IGNhbGxlZDtcbn0pID8gaXNDb25zdHJ1Y3RvckxlZ2FjeSA6IGlzQ29uc3RydWN0b3JNb2Rlcm47XG4iLCJ2YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZGVzY3JpcHRvcikge1xuICByZXR1cm4gZGVzY3JpcHRvciAhPT0gdW5kZWZpbmVkICYmIChoYXNPd24oZGVzY3JpcHRvciwgJ3ZhbHVlJykgfHwgaGFzT3duKGRlc2NyaXB0b3IsICd3cml0YWJsZScpKTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogaXNDYWxsYWJsZShkZXRlY3Rpb24pID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBJc0ludGVncmFsTnVtYmVyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNpbnRlZ3JhbG51bWJlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW51bWJlci1pc2ludGVnZXIgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBOdW1iZXIuaXNJbnRlZ2VyIHx8IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCkge1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07XG4iLCJ2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiBpc0NhbGxhYmxlKGl0KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuXG4vLyBgSXNSZWdFeHBgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc3JlZ2V4cFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY2xhc3NvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyIE9iamVjdCA9IGdsb2JhbC5PYmplY3Q7XG5cbm1vZHVsZS5leHBvcnRzID0gVVNFX1NZTUJPTF9BU19VSUQgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyICRTeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKTtcbiAgcmV0dXJuIGlzQ2FsbGFibGUoJFN5bWJvbCkgJiYgaXNQcm90b3R5cGVPZigkU3ltYm9sLnByb3RvdHlwZSwgT2JqZWN0KGl0KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgaXRlcmF0b3JDbG9zZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jbG9zZScpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxudmFyIFJlc3VsdCA9IGZ1bmN0aW9uIChzdG9wcGVkLCByZXN1bHQpIHtcbiAgdGhpcy5zdG9wcGVkID0gc3RvcHBlZDtcbiAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG59O1xuXG52YXIgUmVzdWx0UHJvdG90eXBlID0gUmVzdWx0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIHVuYm91bmRGdW5jdGlvbiwgb3B0aW9ucykge1xuICB2YXIgdGhhdCA9IG9wdGlvbnMgJiYgb3B0aW9ucy50aGF0O1xuICB2YXIgQVNfRU5UUklFUyA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5BU19FTlRSSUVTKTtcbiAgdmFyIElTX0lURVJBVE9SID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklTX0lURVJBVE9SKTtcbiAgdmFyIElOVEVSUlVQVEVEID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklOVEVSUlVQVEVEKTtcbiAgdmFyIGZuID0gYmluZCh1bmJvdW5kRnVuY3Rpb24sIHRoYXQpO1xuICB2YXIgaXRlcmF0b3IsIGl0ZXJGbiwgaW5kZXgsIGxlbmd0aCwgcmVzdWx0LCBuZXh0LCBzdGVwO1xuXG4gIHZhciBzdG9wID0gZnVuY3Rpb24gKGNvbmRpdGlvbikge1xuICAgIGlmIChpdGVyYXRvcikgaXRlcmF0b3JDbG9zZShpdGVyYXRvciwgJ25vcm1hbCcsIGNvbmRpdGlvbik7XG4gICAgcmV0dXJuIG5ldyBSZXN1bHQodHJ1ZSwgY29uZGl0aW9uKTtcbiAgfTtcblxuICB2YXIgY2FsbEZuID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKEFTX0VOVFJJRVMpIHtcbiAgICAgIGFuT2JqZWN0KHZhbHVlKTtcbiAgICAgIHJldHVybiBJTlRFUlJVUFRFRCA/IGZuKHZhbHVlWzBdLCB2YWx1ZVsxXSwgc3RvcCkgOiBmbih2YWx1ZVswXSwgdmFsdWVbMV0pO1xuICAgIH0gcmV0dXJuIElOVEVSUlVQVEVEID8gZm4odmFsdWUsIHN0b3ApIDogZm4odmFsdWUpO1xuICB9O1xuXG4gIGlmIChJU19JVEVSQVRPUikge1xuICAgIGl0ZXJhdG9yID0gaXRlcmFibGU7XG4gIH0gZWxzZSB7XG4gICAgaXRlckZuID0gZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpO1xuICAgIGlmICghaXRlckZuKSB0aHJvdyBUeXBlRXJyb3IodHJ5VG9TdHJpbmcoaXRlcmFibGUpICsgJyBpcyBub3QgaXRlcmFibGUnKTtcbiAgICAvLyBvcHRpbWlzYXRpb24gZm9yIGFycmF5IGl0ZXJhdG9yc1xuICAgIGlmIChpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlckZuKSkge1xuICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKGl0ZXJhYmxlKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgcmVzdWx0ID0gY2FsbEZuKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgICAgIGlmIChyZXN1bHQgJiYgaXNQcm90b3R5cGVPZihSZXN1bHRQcm90b3R5cGUsIHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gICAgICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbiAgICB9XG4gICAgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihpdGVyYWJsZSwgaXRlckZuKTtcbiAgfVxuXG4gIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICB3aGlsZSAoIShzdGVwID0gY2FsbChuZXh0LCBpdGVyYXRvcikpLmRvbmUpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gY2FsbEZuKHN0ZXAudmFsdWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAndGhyb3cnLCBlcnJvcik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICdvYmplY3QnICYmIHJlc3VsdCAmJiBpc1Byb3RvdHlwZU9mKFJlc3VsdFByb3RvdHlwZSwgcmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG59O1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBraW5kLCB2YWx1ZSkge1xuICB2YXIgaW5uZXJSZXN1bHQsIGlubmVyRXJyb3I7XG4gIGFuT2JqZWN0KGl0ZXJhdG9yKTtcbiAgdHJ5IHtcbiAgICBpbm5lclJlc3VsdCA9IGdldE1ldGhvZChpdGVyYXRvciwgJ3JldHVybicpO1xuICAgIGlmICghaW5uZXJSZXN1bHQpIHtcbiAgICAgIGlmIChraW5kID09PSAndGhyb3cnKSB0aHJvdyB2YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaW5uZXJSZXN1bHQgPSBjYWxsKGlubmVyUmVzdWx0LCBpdGVyYXRvcik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW5uZXJFcnJvciA9IHRydWU7XG4gICAgaW5uZXJSZXN1bHQgPSBlcnJvcjtcbiAgfVxuICBpZiAoa2luZCA9PT0gJ3Rocm93JykgdGhyb3cgdmFsdWU7XG4gIGlmIChpbm5lckVycm9yKSB0aHJvdyBpbm5lclJlc3VsdDtcbiAgYW5PYmplY3QoaW5uZXJSZXN1bHQpO1xuICByZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IGZhbHNlO1xuXG4vLyBgJUl0ZXJhdG9yUHJvdG90eXBlJWAgb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtb2JqZWN0XG52YXIgSXRlcmF0b3JQcm90b3R5cGUsIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSwgYXJyYXlJdGVyYXRvcjtcblxuLyogZXNsaW50LWRpc2FibGUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWtleXMgLS0gc2FmZSAqL1xuaWYgKFtdLmtleXMpIHtcbiAgYXJyYXlJdGVyYXRvciA9IFtdLmtleXMoKTtcbiAgLy8gU2FmYXJpIDggaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gIGlmICghKCduZXh0JyBpbiBhcnJheUl0ZXJhdG9yKSkgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IHRydWU7XG4gIGVsc2Uge1xuICAgIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGdldFByb3RvdHlwZU9mKGFycmF5SXRlcmF0b3IpKTtcbiAgICBpZiAoUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKSBJdGVyYXRvclByb3RvdHlwZSA9IFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxufVxuXG52YXIgTkVXX0lURVJBVE9SX1BST1RPVFlQRSA9IEl0ZXJhdG9yUHJvdG90eXBlID09IHVuZGVmaW5lZCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciB0ZXN0ID0ge307XG4gIC8vIEZGNDQtIGxlZ2FjeSBpdGVyYXRvcnMgY2FzZVxuICByZXR1cm4gSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdLmNhbGwodGVzdCkgIT09IHRlc3Q7XG59KTtcblxuaWYgKE5FV19JVEVSQVRPUl9QUk9UT1RZUEUpIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5lbHNlIGlmIChJU19QVVJFKSBJdGVyYXRvclByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLUBAaXRlcmF0b3JcbmlmICghaXNDYWxsYWJsZShJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0pKSB7XG4gIHJlZGVmaW5lKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEl0ZXJhdG9yUHJvdG90eXBlOiBJdGVyYXRvclByb3RvdHlwZSxcbiAgQlVHR1lfU0FGQVJJX0lURVJBVE9SUzogQlVHR1lfU0FGQVJJX0lURVJBVE9SU1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG5cbi8vIGBMZW5ndGhPZkFycmF5TGlrZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWxlbmd0aG9mYXJyYXlsaWtlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHRvTGVuZ3RoKG9iai5sZW5ndGgpO1xufTtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLWV4cG0xIC0tIHNhZmVcbnZhciAkZXhwbTEgPSBNYXRoLmV4cG0xO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBgTWF0aC5leHBtMWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguZXhwbTFcbm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTFcbiAgLy8gT2xkIEZGIGJ1Z1xuICB8fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4XG4gIC8vIFRvciBCcm93c2VyIGJ1Z1xuICB8fCAkZXhwbTEoLTJlLTE3KSAhPSAtMmUtMTdcbikgPyBmdW5jdGlvbiBleHBtMSh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBleHAoeCkgLSAxO1xufSA6ICRleHBtMTtcbiIsInZhciBzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtc2lnbicpO1xuXG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgRVBTSUxPTiA9IHBvdygyLCAtNTIpO1xudmFyIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpO1xudmFyIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMik7XG52YXIgTUlOMzIgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbiAobikge1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG4vLyBgTWF0aC5mcm91bmRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmZyb3VuZFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtZnJvdW5kIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBhYnMoeCk7XG4gIHZhciAkc2lnbiA9IHNpZ24oeCk7XG4gIHZhciBhLCByZXN1bHQ7XG4gIGlmICgkYWJzIDwgTUlOMzIpIHJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIGlmIChyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KSByZXR1cm4gJHNpZ24gKiBJbmZpbml0eTtcbiAgcmV0dXJuICRzaWduICogcmVzdWx0O1xufTtcbiIsInZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMT0cxMEUgPSBNYXRoLkxPRzEwRTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtbG9nMTAgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzEwIHx8IGZ1bmN0aW9uIGxvZzEwKHgpIHtcbiAgcmV0dXJuIGxvZyh4KSAqIExPRzEwRTtcbn07XG4iLCJ2YXIgbG9nID0gTWF0aC5sb2c7XG5cbi8vIGBNYXRoLmxvZzFwYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5sb2cxcFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtbG9nMXAgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogbG9nKDEgKyB4KTtcbn07XG4iLCIvLyBgTWF0aC5zaWduYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5zaWduXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1zaWduIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBJU19JT1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcycpO1xudmFyIElTX0lPU19QRUJCTEUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcy1wZWJibGUnKTtcbnZhciBJU19XRUJPU19XRUJLSVQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLXdlYm9zLXdlYmtpdCcpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xuLy8gTm9kZS5qcyAxMSBzaG93cyBFeHBlcmltZW50YWxXYXJuaW5nIG9uIGdldHRpbmcgYHF1ZXVlTWljcm90YXNrYFxudmFyIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbG9iYWwsICdxdWV1ZU1pY3JvdGFzaycpO1xudmFyIHF1ZXVlTWljcm90YXNrID0gcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yICYmIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvci52YWx1ZTtcblxudmFyIGZsdXNoLCBoZWFkLCBsYXN0LCBub3RpZnksIHRvZ2dsZSwgbm9kZSwgcHJvbWlzZSwgdGhlbjtcblxuLy8gbW9kZXJuIGVuZ2luZXMgaGF2ZSBxdWV1ZU1pY3JvdGFzayBtZXRob2RcbmlmICghcXVldWVNaWNyb3Rhc2spIHtcbiAgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKElTX05PREUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgLy8gYWxzbyBleGNlcHQgV2ViT1MgV2Via2l0IGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84OThcbiAgaWYgKCFJU19JT1MgJiYgIUlTX05PREUgJiYgIUlTX1dFQk9TX1dFQktJVCAmJiBNdXRhdGlvbk9ic2VydmVyICYmIGRvY3VtZW50KSB7XG4gICAgdG9nZ2xlID0gdHJ1ZTtcbiAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoIUlTX0lPU19QRUJCTEUgJiYgUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICAvLyB3b3JrYXJvdW5kIG9mIFdlYktpdCB+IGlPUyBTYWZhcmkgMTAuMSBidWdcbiAgICBwcm9taXNlLmNvbnN0cnVjdG9yID0gUHJvbWlzZTtcbiAgICB0aGVuID0gYmluZChwcm9taXNlLnRoZW4sIHByb21pc2UpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIE5vZGUuanMgd2l0aG91dCBwcm9taXNlc1xuICB9IGVsc2UgaWYgKElTX05PREUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmJpbmQoZ2xvYmFsKVxuICAgIG1hY3JvdGFzayA9IGJpbmQobWFjcm90YXNrLCBnbG9iYWwpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG1hY3JvdGFzayhmbHVzaCk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHF1ZXVlTWljcm90YXNrIHx8IGZ1bmN0aW9uIChmbikge1xuICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gIGlmICghaGVhZCkge1xuICAgIGhlYWQgPSB0YXNrO1xuICAgIG5vdGlmeSgpO1xuICB9IGxhc3QgPSB0YXNrO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLlByb21pc2U7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gcmVxdWlyZWQgZm9yIHRlc3Rpbmdcbm1vZHVsZS5leHBvcnRzID0gISFPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBzeW1ib2wgPSBTeW1ib2woKTtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gYGdldC1vd24tcHJvcGVydHktc3ltYm9sc2AgcG9seWZpbGwgc3ltYm9scyBjb252ZXJ0ZWQgdG8gb2JqZWN0IGFyZSBub3QgU3ltYm9sIGluc3RhbmNlc1xuICByZXR1cm4gIVN0cmluZyhzeW1ib2wpIHx8ICEoT2JqZWN0KHN5bWJvbCkgaW5zdGFuY2VvZiBTeW1ib2wpIHx8XG4gICAgLy8gQ2hyb21lIDM4LTQwIHN5bWJvbHMgYXJlIG5vdCBpbmhlcml0ZWQgZnJvbSBET00gY29sbGVjdGlvbnMgcHJvdG90eXBlcyB0byBpbnN0YW5jZXNcbiAgICAhU3ltYm9sLnNoYW0gJiYgVjhfVkVSU0lPTiAmJiBWOF9WRVJTSU9OIDwgNDE7XG59KTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vcmVsYXRpdmUtdXJsLXN0eWxlIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHZhciB1cmwgPSBuZXcgVVJMKCdiP2E9MSZiPTImYz0zJywgJ2h0dHA6Ly9hJyk7XG4gIHZhciBzZWFyY2hQYXJhbXMgPSB1cmwuc2VhcmNoUGFyYW1zO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHVybC5wYXRobmFtZSA9ICdjJTIwZCc7XG4gIHNlYXJjaFBhcmFtcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgc2VhcmNoUGFyYW1zWydkZWxldGUnXSgnYicpO1xuICAgIHJlc3VsdCArPSBrZXkgKyB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiAoSVNfUFVSRSAmJiAhdXJsLnRvSlNPTilcbiAgICB8fCAhc2VhcmNoUGFyYW1zLnNvcnRcbiAgICB8fCB1cmwuaHJlZiAhPT0gJ2h0dHA6Ly9hL2MlMjBkP2E9MSZjPTMnXG4gICAgfHwgc2VhcmNoUGFyYW1zLmdldCgnYycpICE9PSAnMydcbiAgICB8fCBTdHJpbmcobmV3IFVSTFNlYXJjaFBhcmFtcygnP2E9MScpKSAhPT0gJ2E9MSdcbiAgICB8fCAhc2VhcmNoUGFyYW1zW0lURVJBVE9SXVxuICAgIC8vIHRocm93cyBpbiBFZGdlXG4gICAgfHwgbmV3IFVSTCgnaHR0cHM6Ly9hQGInKS51c2VybmFtZSAhPT0gJ2EnXG4gICAgfHwgbmV3IFVSTFNlYXJjaFBhcmFtcyhuZXcgVVJMU2VhcmNoUGFyYW1zKCdhPWInKSkuZ2V0KCdhJykgIT09ICdiJ1xuICAgIC8vIG5vdCBwdW55Y29kZWQgaW4gRWRnZVxuICAgIHx8IG5ldyBVUkwoJ2h0dHA6Ly/RgtC10YHRgicpLmhvc3QgIT09ICd4bi0tZTFheWJjJ1xuICAgIC8vIG5vdCBlc2NhcGVkIGluIENocm9tZSA2Mi1cbiAgICB8fCBuZXcgVVJMKCdodHRwOi8vYSPQsScpLmhhc2ggIT09ICcjJUQwJUIxJ1xuICAgIC8vIGZhaWxzIGluIENocm9tZSA2Ni1cbiAgICB8fCByZXN1bHQgIT09ICdhMWMzJ1xuICAgIC8vIHRocm93cyBpbiBTYWZhcmlcbiAgICB8fCBuZXcgVVJMKCdodHRwOi8veCcsIHVuZGVmaW5lZCkuaG9zdCAhPT0gJ3gnO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNDYWxsYWJsZShXZWFrTWFwKSAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoaW5zcGVjdFNvdXJjZShXZWFrTWFwKSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcblxudmFyIFByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFDYWxsYWJsZShyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhQ2FsbGFibGUocmVqZWN0KTtcbn07XG5cbi8vIGBOZXdQcm9taXNlQ2FwYWJpbGl0eWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW5ld3Byb21pc2VjYXBhYmlsaXR5XG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50LCAkZGVmYXVsdCkge1xuICByZXR1cm4gYXJndW1lbnQgPT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gJycgOiAkZGVmYXVsdCA6IHRvU3RyaW5nKGFyZ3VtZW50KTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGlzUmVnRXhwKGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihcIlRoZSBtZXRob2QgZG9lc24ndCBhY2NlcHQgcmVndWxhciBleHByZXNzaW9uc1wiKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGdsb2JhbElzRmluaXRlID0gZ2xvYmFsLmlzRmluaXRlO1xuXG4vLyBgTnVtYmVyLmlzRmluaXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLmlzZmluaXRlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbnVtYmVyLWlzZmluaXRlIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyLmlzRmluaXRlIHx8IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgZ2xvYmFsSXNGaW5pdGUoaXQpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciB0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBuJFBhcnNlRmxvYXQgPSBnbG9iYWwucGFyc2VGbG9hdDtcbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIElURVJBVE9SID0gU3ltYm9sICYmIFN5bWJvbC5pdGVyYXRvcjtcbnZhciBGT1JDRUQgPSAxIC8gbiRQYXJzZUZsb2F0KHdoaXRlc3BhY2VzICsgJy0wJykgIT09IC1JbmZpbml0eVxuICAvLyBNUyBFZGdlIDE4LSBicm9rZW4gd2l0aCBib3hlZCBzeW1ib2xzXG4gIHx8IChJVEVSQVRPUiAmJiAhZmFpbHMoZnVuY3Rpb24gKCkgeyBuJFBhcnNlRmxvYXQoT2JqZWN0KElURVJBVE9SKSk7IH0pKTtcblxuLy8gYHBhcnNlRmxvYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wYXJzZWZsb2F0LXN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBGT1JDRUQgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cmluZykge1xuICB2YXIgdHJpbW1lZFN0cmluZyA9IHRyaW0odG9TdHJpbmcoc3RyaW5nKSk7XG4gIHZhciByZXN1bHQgPSBuJFBhcnNlRmxvYXQodHJpbW1lZFN0cmluZyk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgJiYgY2hhckF0KHRyaW1tZWRTdHJpbmcsIDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6IG4kUGFyc2VGbG9hdDtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciB0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgJHBhcnNlSW50ID0gZ2xvYmFsLnBhcnNlSW50O1xudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgSVRFUkFUT1IgPSBTeW1ib2wgJiYgU3ltYm9sLml0ZXJhdG9yO1xudmFyIGhleCA9IC9eWystXT8weC9pO1xudmFyIGV4ZWMgPSB1bmN1cnJ5VGhpcyhoZXguZXhlYyk7XG52YXIgRk9SQ0VEID0gJHBhcnNlSW50KHdoaXRlc3BhY2VzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdoaXRlc3BhY2VzICsgJzB4MTYnKSAhPT0gMjJcbiAgLy8gTVMgRWRnZSAxOC0gYnJva2VuIHdpdGggYm94ZWQgc3ltYm9sc1xuICB8fCAoSVRFUkFUT1IgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHsgJHBhcnNlSW50KE9iamVjdChJVEVSQVRPUikpOyB9KSk7XG5cbi8vIGBwYXJzZUludGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXBhcnNlaW50LXN0cmluZy1yYWRpeFxubW9kdWxlLmV4cG9ydHMgPSBGT1JDRUQgPyBmdW5jdGlvbiBwYXJzZUludChzdHJpbmcsIHJhZGl4KSB7XG4gIHZhciBTID0gdHJpbSh0b1N0cmluZyhzdHJpbmcpKTtcbiAgcmV0dXJuICRwYXJzZUludChTLCAocmFkaXggPj4+IDApIHx8IChleGVjKGhleCwgUykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1hc3NpZ24gLS0gc2FmZVxudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGNvbmNhdCA9IHVuY3VycnlUaGlzKFtdLmNvbmNhdCk7XG5cbi8vIGBPYmplY3QuYXNzaWduYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmFzc2lnblxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHNob3VsZCBoYXZlIGNvcnJlY3Qgb3JkZXIgb2Ygb3BlcmF0aW9ucyAoRWRnZSBidWcpXG4gIGlmIChERVNDUklQVE9SUyAmJiAkYXNzaWduKHsgYjogMSB9LCAkYXNzaWduKGRlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGhpcywgJ2InLCB7XG4gICAgICAgIHZhbHVlOiAzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICB9KSwgeyBiOiAyIH0pKS5iICE9PSAxKSByZXR1cm4gdHJ1ZTtcbiAgLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zeW1ib2wgLS0gc2FmZVxuICB2YXIgc3ltYm9sID0gU3ltYm9sKCk7XG4gIHZhciBhbHBoYWJldCA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbc3ltYm9sXSA9IDc7XG4gIGFscGhhYmV0LnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChjaHIpIHsgQltjaHJdID0gY2hyOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW3N5bWJvbF0gIT0gNyB8fCBvYmplY3RLZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBhbHBoYWJldDtcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG4gIHdoaWxlIChhcmd1bWVudHNMZW5ndGggPiBpbmRleCkge1xuICAgIHZhciBTID0gSW5kZXhlZE9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gY29uY2F0KG9iamVjdEtleXMoUyksIGdldE93blByb3BlcnR5U3ltYm9scyhTKSkgOiBvYmplY3RLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAga2V5ID0ga2V5c1tqKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBjYWxsKHByb3BlcnR5SXNFbnVtZXJhYmxlLCBTLCBrZXkpKSBUW2tleV0gPSBTW2tleV07XG4gICAgfVxuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCIvKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAtLSBvbGQgSUUsIFdTSCAqL1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xuXG52YXIgR1QgPSAnPic7XG52YXIgTFQgPSAnPCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBFbXB0eUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIExUICsgU0NSSVBUICsgR1QgKyBjb250ZW50ICsgTFQgKyAnLycgKyBTQ1JJUFQgKyBHVDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgYWN0aXZlWERvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnJykpO1xuICBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgYWN0aXZlWERvY3VtZW50ID0gbnVsbDsgLy8gYXZvaWQgbWVtb3J5IGxlYWtcbiAgcmV0dXJuIHRlbXA7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80NzVcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhKUyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCdkb2N1bWVudC5GPU9iamVjdCcpKTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgcmV0dXJuIGlmcmFtZURvY3VtZW50LkY7XG59O1xuXG4vLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4vLyBObyBuZWVkIHRvIHVzZSBhY3RpdmUgeCBhcHByb2FjaCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyBub3Qgc2V0XG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbi8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4vLyBhdm9pZCBJRSBHQyBidWdcbnZhciBhY3RpdmVYRG9jdW1lbnQ7XG52YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIGFjdGl2ZVhEb2N1bWVudCA9IG5ldyBBY3RpdmVYT2JqZWN0KCdodG1sZmlsZScpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBpZ25vcmUgKi8gfVxuICBOdWxsUHJvdG9PYmplY3QgPSB0eXBlb2YgZG9jdW1lbnQgIT0gJ3VuZGVmaW5lZCdcbiAgICA/IGRvY3VtZW50LmRvbWFpbiAmJiBhY3RpdmVYRG9jdW1lbnRcbiAgICAgID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIC8vIG9sZCBJRVxuICAgICAgOiBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUoKVxuICAgIDogTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpOyAvLyBXU0hcbiAgdmFyIGxlbmd0aCA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSBkZWxldGUgTnVsbFByb3RvT2JqZWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbbGVuZ3RoXV07XG4gIHJldHVybiBOdWxsUHJvdG9PYmplY3QoKTtcbn07XG5cbmhpZGRlbktleXNbSUVfUFJPVE9dID0gdHJ1ZTtcblxuLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHlDb25zdHJ1Y3RvcigpO1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gTnVsbFByb3RvT2JqZWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlLmYocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy92OC1wcm90b3R5cGUtZGVmaW5lLWJ1ZycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnRpZXMgLS0gc2FmZVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgJiYgIVY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBwcm9wcyA9IHRvSW5kZXhlZE9iamVjdChQcm9wZXJ0aWVzKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihPLCBrZXkgPSBrZXlzW2luZGV4KytdLCBwcm9wc1trZXldKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG52YXIgVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBFTlVNRVJBQkxFID0gJ2VudW1lcmFibGUnO1xudmFyIENPTkZJR1VSQUJMRSA9ICdjb25maWd1cmFibGUnO1xudmFyIFdSSVRBQkxFID0gJ3dyaXRhYmxlJztcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA/IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKHR5cGVvZiBPID09PSAnZnVuY3Rpb24nICYmIFAgPT09ICdwcm90b3R5cGUnICYmICd2YWx1ZScgaW4gQXR0cmlidXRlcyAmJiBXUklUQUJMRSBpbiBBdHRyaWJ1dGVzICYmICFBdHRyaWJ1dGVzW1dSSVRBQkxFXSkge1xuICAgIHZhciBjdXJyZW50ID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgICBpZiAoY3VycmVudCAmJiBjdXJyZW50W1dSSVRBQkxFXSkge1xuICAgICAgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gICAgICBBdHRyaWJ1dGVzID0ge1xuICAgICAgICBjb25maWd1cmFibGU6IENPTkZJR1VSQUJMRSBpbiBBdHRyaWJ1dGVzID8gQXR0cmlidXRlc1tDT05GSUdVUkFCTEVdIDogY3VycmVudFtDT05GSUdVUkFCTEVdLFxuICAgICAgICBlbnVtZXJhYmxlOiBFTlVNRVJBQkxFIGluIEF0dHJpYnV0ZXMgPyBBdHRyaWJ1dGVzW0VOVU1FUkFCTEVdIDogY3VycmVudFtFTlVNRVJBQkxFXSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgfSByZXR1cm4gJGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xufSA6ICRkZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiAkZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIFAgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhc093bihPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighY2FsbChwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mLCBPLCBQKSwgT1tQXSk7XG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gc2FmZSAqL1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUnKTtcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlOYW1lcyhpdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGFycmF5U2xpY2Uod2luZG93TmFtZXMpO1xuICB9XG59O1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgY2xhc3NvZihpdCkgPT0gJ1dpbmRvdydcbiAgICA/IGdldFdpbmRvd05hbWVzKGl0KVxuICAgIDogJGdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KGl0KSk7XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxudmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHluYW1lcyAtLSBzYWZlXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5c3ltYm9scyAtLSBzYWZlXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xudmFyIE9iamVjdCA9IGdsb2JhbC5PYmplY3Q7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLy8gYE9iamVjdC5nZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICB2YXIgb2JqZWN0ID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXNPd24ob2JqZWN0LCBJRV9QUk9UTykpIHJldHVybiBvYmplY3RbSUVfUFJPVE9dO1xuICB2YXIgY29uc3RydWN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gIGlmIChpc0NhbGxhYmxlKGNvbnN0cnVjdG9yKSAmJiBvYmplY3QgaW5zdGFuY2VvZiBjb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBjb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvdHlwZSA6IG51bGw7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIEFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItbm9uLWV4dGVuc2libGUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pc2V4dGVuc2libGUgLS0gc2FmZVxudmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7ICRpc0V4dGVuc2libGUoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmlzRXh0ZW5zaWJsZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5pc2V4dGVuc2libGVcbm1vZHVsZS5leHBvcnRzID0gKEZBSUxTX09OX1BSSU1JVElWRVMgfHwgQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFKSA/IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFICYmIGNsYXNzb2YoaXQpID09ICdBcnJheUJ1ZmZlcicpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKGl0KSA6IHRydWU7XG59IDogJGlzRXh0ZW5zaWJsZTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpcyh7fS5pc1Byb3RvdHlwZU9mKTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgIWhhc093bihoaWRkZW5LZXlzLCBrZXkpICYmIGhhc093bihPLCBrZXkpICYmIHB1c2gocmVzdWx0LCBrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzT3duKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHB1c2gocmVzdWx0LCBrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qta2V5cyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gTmFzaG9ybiB+IEpESzggYnVnXG52YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgISRwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBXRUJLSVQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXdlYmtpdC12ZXJzaW9uJyk7XG5cbi8vIEZvcmNlZCByZXBsYWNlbWVudCBvYmplY3QgcHJvdG90eXBlIGFjY2Vzc29ycyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IElTX1BVUkUgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhpcyBmZWF0dXJlIGRldGVjdGlvbiBjcmFzaGVzIG9sZCBXZWJLaXRcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzIzMlxuICBpZiAoV0VCS0lUICYmIFdFQktJVCA8IDUzNSkgcmV0dXJuO1xuICB2YXIga2V5ID0gTWF0aC5yYW5kb20oKTtcbiAgLy8gSW4gRkYgdGhyb3dzIG9ubHkgZGVmaW5lIG1ldGhvZHNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmLCBuby11c2VsZXNzLWNhbGwgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgX19kZWZpbmVTZXR0ZXJfXy5jYWxsKG51bGwsIGtleSwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbiAgZGVsZXRlIGdsb2JhbFtrZXldO1xufSk7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAtLSBzYWZlICovXG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2Zcbi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1zZXRwcm90b3R5cGVvZiAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyBmdW5jdGlvbiAoKSB7XG4gIHZhciBDT1JSRUNUX1NFVFRFUiA9IGZhbHNlO1xuICB2YXIgdGVzdCA9IHt9O1xuICB2YXIgc2V0dGVyO1xuICB0cnkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbiAgICBzZXR0ZXIgPSB1bmN1cnJ5VGhpcyhPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQpO1xuICAgIHNldHRlcih0ZXN0LCBbXSk7XG4gICAgQ09SUkVDVF9TRVRURVIgPSB0ZXN0IGluc3RhbmNlb2YgQXJyYXk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgYW5PYmplY3QoTyk7XG4gICAgYVBvc3NpYmxlUHJvdG90eXBlKHByb3RvKTtcbiAgICBpZiAoQ09SUkVDVF9TRVRURVIpIHNldHRlcihPLCBwcm90byk7XG4gICAgZWxzZSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgIHJldHVybiBPO1xuICB9O1xufSgpIDogdW5kZWZpbmVkKTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKS5mO1xuXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSB1bmN1cnJ5VGhpcygkcHJvcGVydHlJc0VudW1lcmFibGUpO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxuLy8gYE9iamVjdC57IGVudHJpZXMsIHZhbHVlcyB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRPX0VOVFJJRVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IG9iamVjdEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAga2V5ID0ga2V5c1tpKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBwcm9wZXJ0eUlzRW51bWVyYWJsZShPLCBrZXkpKSB7XG4gICAgICAgIHB1c2gocmVzdWx0LCBUT19FTlRSSUVTID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYE9iamVjdC5lbnRyaWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZW50cmllc1xuICBlbnRyaWVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBPYmplY3QudmFsdWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QudmFsdWVzXG4gIHZhbHVlczogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyB7fS50b1N0cmluZyA6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgT3JkaW5hcnlUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9yZGluYXJ5dG9wcmltaXRpdmVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBwcmVmKSB7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAocHJlZiA9PT0gJ3N0cmluZycgJiYgaXNDYWxsYWJsZShmbiA9IGlucHV0LnRvU3RyaW5nKSAmJiAhaXNPYmplY3QodmFsID0gY2FsbChmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKGlzQ2FsbGFibGUoZm4gPSBpbnB1dC52YWx1ZU9mKSAmJiAhaXNPYmplY3QodmFsID0gY2FsbChmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHByZWYgIT09ICdzdHJpbmcnICYmIGlzQ2FsbGFibGUoZm4gPSBpbnB1dC50b1N0cmluZykgJiYgIWlzT2JqZWN0KHZhbCA9IGNhbGwoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxudmFyIGNvbmNhdCA9IHVuY3VycnlUaGlzKFtdLmNvbmNhdCk7XG5cbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBjb25jYXQoa2V5cywgZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGVycm9yOiBmYWxzZSwgdmFsdWU6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7IGVycm9yOiB0cnVlLCB2YWx1ZTogZXJyb3IgfTtcbiAgfVxufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCJ2YXIgUXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuaGVhZCA9IG51bGw7XG4gIHRoaXMudGFpbCA9IG51bGw7XG59O1xuXG5RdWV1ZS5wcm90b3R5cGUgPSB7XG4gIGFkZDogZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB2YXIgZW50cnkgPSB7IGl0ZW06IGl0ZW0sIG5leHQ6IG51bGwgfTtcbiAgICBpZiAodGhpcy5oZWFkKSB0aGlzLnRhaWwubmV4dCA9IGVudHJ5O1xuICAgIGVsc2UgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgdGhpcy50YWlsID0gZW50cnk7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuaGVhZDtcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIHRoaXMuaGVhZCA9IGVudHJ5Lm5leHQ7XG4gICAgICBpZiAodGhpcy50YWlsID09PSBlbnRyeSkgdGhpcy50YWlsID0gbnVsbDtcbiAgICAgIHJldHVybiBlbnRyeS5pdGVtO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBRdWV1ZTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgb3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIG9wdGlvbnMpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJykuQ09ORklHVVJBQkxFO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5lbmZvcmNlO1xudmFyIFRFTVBMQVRFID0gU3RyaW5nKFN0cmluZykuc3BsaXQoJ1N0cmluZycpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICB2YXIgdW5zYWZlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy51bnNhZmUgOiBmYWxzZTtcbiAgdmFyIHNpbXBsZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMuZW51bWVyYWJsZSA6IGZhbHNlO1xuICB2YXIgbm9UYXJnZXRHZXQgPSBvcHRpb25zID8gISFvcHRpb25zLm5vVGFyZ2V0R2V0IDogZmFsc2U7XG4gIHZhciBuYW1lID0gb3B0aW9ucyAmJiBvcHRpb25zLm5hbWUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubmFtZSA6IGtleTtcbiAgdmFyIHN0YXRlO1xuICBpZiAoaXNDYWxsYWJsZSh2YWx1ZSkpIHtcbiAgICBpZiAoU3RyaW5nKG5hbWUpLnNsaWNlKDAsIDcpID09PSAnU3ltYm9sKCcpIHtcbiAgICAgIG5hbWUgPSAnWycgKyBTdHJpbmcobmFtZSkucmVwbGFjZSgvXlN5bWJvbFxcKChbXildKilcXCkvLCAnJDEnKSArICddJztcbiAgICB9XG4gICAgaWYgKCFoYXNPd24odmFsdWUsICduYW1lJykgfHwgKENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FICYmIHZhbHVlLm5hbWUgIT09IG5hbWUpKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodmFsdWUsICduYW1lJywgbmFtZSk7XG4gICAgfVxuICAgIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpO1xuICAgIGlmICghc3RhdGUuc291cmNlKSB7XG4gICAgICBzdGF0ZS5zb3VyY2UgPSBURU1QTEFURS5qb2luKHR5cGVvZiBuYW1lID09ICdzdHJpbmcnID8gbmFtZSA6ICcnKTtcbiAgICB9XG4gIH1cbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2Ugc2V0R2xvYmFsKGtleSwgdmFsdWUpO1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmICghdW5zYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgfSBlbHNlIGlmICghbm9UYXJnZXRHZXQgJiYgT1trZXldKSB7XG4gICAgc2ltcGxlID0gdHJ1ZTtcbiAgfVxuICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgZWxzZSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoTywga2V5LCB2YWx1ZSk7XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiBpc0NhbGxhYmxlKHRoaXMpICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IGluc3BlY3RTb3VyY2UodGhpcyk7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cGV4ZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFIsIFMpIHtcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gIGlmIChpc0NhbGxhYmxlKGV4ZWMpKSB7XG4gICAgdmFyIHJlc3VsdCA9IGNhbGwoZXhlYywgUiwgUyk7XG4gICAgaWYgKHJlc3VsdCAhPT0gbnVsbCkgYW5PYmplY3QocmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmIChjbGFzc29mKFIpID09PSAnUmVnRXhwJykgcmV0dXJuIGNhbGwocmVnZXhwRXhlYywgUiwgUyk7XG4gIHRocm93IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIHJlZ2V4cC9uby1lbXB0eS1jYXB0dXJpbmctZ3JvdXAsIHJlZ2V4cC9uby1lbXB0eS1ncm91cCwgcmVnZXhwL25vLWxhenktZW5kcyAtLSB0ZXN0aW5nICovXG4vKiBlc2xpbnQtZGlzYWJsZSByZWdleHAvbm8tdXNlbGVzcy1xdWFudGlmaWVyIC0tIHRlc3RpbmcgKi9cbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZWdleHBGbGFncyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZmxhZ3MnKTtcbnZhciBzdGlja3lIZWxwZXJzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdldEludGVybmFsU3RhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKS5nZXQ7XG52YXIgVU5TVVBQT1JURURfRE9UX0FMTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtZG90LWFsbCcpO1xudmFyIFVOU1VQUE9SVEVEX05DRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtbmNnJyk7XG5cbnZhciBuYXRpdmVSZXBsYWNlID0gc2hhcmVkKCduYXRpdmUtc3RyaW5nLXJlcGxhY2UnLCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2UpO1xudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgaW5kZXhPZiA9IHVuY3VycnlUaGlzKCcnLmluZGV4T2YpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS87XG4gIHZhciByZTIgPSAvYiovZztcbiAgY2FsbChuYXRpdmVFeGVjLCByZTEsICdhJyk7XG4gIGNhbGwobmF0aXZlRXhlYywgcmUyLCAnYScpO1xuICByZXR1cm4gcmUxLmxhc3RJbmRleCAhPT0gMCB8fCByZTIubGFzdEluZGV4ICE9PSAwO1xufSkoKTtcblxudmFyIFVOU1VQUE9SVEVEX1kgPSBzdGlja3lIZWxwZXJzLkJST0tFTl9DQVJFVDtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQgfHwgVU5TVVBQT1JURURfWSB8fCBVTlNVUFBPUlRFRF9ET1RfQUxMIHx8IFVOU1VQUE9SVEVEX05DRztcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHJpbmcpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUocmUpO1xuICAgIHZhciBzdHIgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgIHZhciByYXcgPSBzdGF0ZS5yYXc7XG4gICAgdmFyIHJlc3VsdCwgcmVDb3B5LCBsYXN0SW5kZXgsIG1hdGNoLCBpLCBvYmplY3QsIGdyb3VwO1xuXG4gICAgaWYgKHJhdykge1xuICAgICAgcmF3Lmxhc3RJbmRleCA9IHJlLmxhc3RJbmRleDtcbiAgICAgIHJlc3VsdCA9IGNhbGwocGF0Y2hlZEV4ZWMsIHJhdywgc3RyKTtcbiAgICAgIHJlLmxhc3RJbmRleCA9IHJhdy5sYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHZhciBncm91cHMgPSBzdGF0ZS5ncm91cHM7XG4gICAgdmFyIHN0aWNreSA9IFVOU1VQUE9SVEVEX1kgJiYgcmUuc3RpY2t5O1xuICAgIHZhciBmbGFncyA9IGNhbGwocmVnZXhwRmxhZ3MsIHJlKTtcbiAgICB2YXIgc291cmNlID0gcmUuc291cmNlO1xuICAgIHZhciBjaGFyc0FkZGVkID0gMDtcbiAgICB2YXIgc3RyQ29weSA9IHN0cjtcblxuICAgIGlmIChzdGlja3kpIHtcbiAgICAgIGZsYWdzID0gcmVwbGFjZShmbGFncywgJ3knLCAnJyk7XG4gICAgICBpZiAoaW5kZXhPZihmbGFncywgJ2cnKSA9PT0gLTEpIHtcbiAgICAgICAgZmxhZ3MgKz0gJ2cnO1xuICAgICAgfVxuXG4gICAgICBzdHJDb3B5ID0gc3RyaW5nU2xpY2Uoc3RyLCByZS5sYXN0SW5kZXgpO1xuICAgICAgLy8gU3VwcG9ydCBhbmNob3JlZCBzdGlja3kgYmVoYXZpb3IuXG4gICAgICBpZiAocmUubGFzdEluZGV4ID4gMCAmJiAoIXJlLm11bHRpbGluZSB8fCByZS5tdWx0aWxpbmUgJiYgY2hhckF0KHN0ciwgcmUubGFzdEluZGV4IC0gMSkgIT09ICdcXG4nKSkge1xuICAgICAgICBzb3VyY2UgPSAnKD86ICcgKyBzb3VyY2UgKyAnKSc7XG4gICAgICAgIHN0ckNvcHkgPSAnICcgKyBzdHJDb3B5O1xuICAgICAgICBjaGFyc0FkZGVkKys7XG4gICAgICB9XG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgc3RyIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeKD86JyArIHNvdXJjZSArICcpJywgZmxhZ3MpO1xuICAgIH1cblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZS5sYXN0SW5kZXg7XG5cbiAgICBtYXRjaCA9IGNhbGwobmF0aXZlRXhlYywgc3RpY2t5ID8gcmVDb3B5IDogcmUsIHN0ckNvcHkpO1xuXG4gICAgaWYgKHN0aWNreSkge1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIG1hdGNoLmlucHV0ID0gc3RyaW5nU2xpY2UobWF0Y2guaW5wdXQsIGNoYXJzQWRkZWQpO1xuICAgICAgICBtYXRjaFswXSA9IHN0cmluZ1NsaWNlKG1hdGNoWzBdLCBjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2guaW5kZXggPSByZS5sYXN0SW5kZXg7XG4gICAgICAgIHJlLmxhc3RJbmRleCArPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICB9IGVsc2UgcmUubGFzdEluZGV4ID0gMDtcbiAgICB9IGVsc2UgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmUubGFzdEluZGV4ID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIGNhbGwobmF0aXZlUmVwbGFjZSwgbWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChtYXRjaCAmJiBncm91cHMpIHtcbiAgICAgIG1hdGNoLmdyb3VwcyA9IG9iamVjdCA9IGNyZWF0ZShudWxsKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbaV07XG4gICAgICAgIG9iamVjdFtncm91cFswXV0gPSBtYXRjaFtncm91cFsxXV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5mbGFnc2AgZ2V0dGVyIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQuZG90QWxsKSByZXN1bHQgKz0gJ3MnO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBiYWJlbC1taW5pZnkgYW5kIENsb3N1cmUgQ29tcGlsZXIgdHJhbnNwaWxlcyBSZWdFeHAoJ2EnLCAneScpIC0+IC9hL3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlID0gJFJlZ0V4cCgnYScsICd5Jyk7XG4gIHJlLmxhc3RJbmRleCA9IDI7XG4gIHJldHVybiByZS5leGVjKCdhYmNkJykgIT0gbnVsbDtcbn0pO1xuXG4vLyBVQyBCcm93c2VyIGJ1Z1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzEwMDhcbnZhciBNSVNTRURfU1RJQ0tZID0gVU5TVVBQT1JURURfWSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhJFJlZ0V4cCgnYScsICd5Jykuc3RpY2t5O1xufSk7XG5cbnZhciBCUk9LRU5fQ0FSRVQgPSBVTlNVUFBPUlRFRF9ZIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NzczNjg3XG4gIHZhciByZSA9ICRSZWdFeHAoJ15yJywgJ2d5Jyk7XG4gIHJlLmxhc3RJbmRleCA9IDI7XG4gIHJldHVybiByZS5leGVjKCdzdHInKSAhPSBudWxsO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBCUk9LRU5fQ0FSRVQ6IEJST0tFTl9DQVJFVCxcbiAgTUlTU0VEX1NUSUNLWTogTUlTU0VEX1NUSUNLWSxcbiAgVU5TVVBQT1JURURfWTogVU5TVVBQT1JURURfWVxufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gYmFiZWwtbWluaWZ5IGFuZCBDbG9zdXJlIENvbXBpbGVyIHRyYW5zcGlsZXMgUmVnRXhwKCcuJywgJ3MnKSAtPiAvLi9zIGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9ICRSZWdFeHAoJy4nLCAncycpO1xuICByZXR1cm4gIShyZS5kb3RBbGwgJiYgcmUuZXhlYygnXFxuJykgJiYgcmUuZmxhZ3MgPT09ICdzJyk7XG59KTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gYmFiZWwtbWluaWZ5IGFuZCBDbG9zdXJlIENvbXBpbGVyIHRyYW5zcGlsZXMgUmVnRXhwKCcoPzxhPmIpJywgJ2cnKSAtPiAvKD88YT5iKS9nIGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9ICRSZWdFeHAoJyg/PGE+YiknLCAnZycpO1xuICByZXR1cm4gcmUuZXhlYygnYicpLmdyb3Vwcy5hICE9PSAnYicgfHxcbiAgICAnYicucmVwbGFjZShyZSwgJyQ8YT5jJykgIT09ICdiYyc7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gYFNhbWVWYWx1ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNhbWV2YWx1ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pcyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgZGVmaW5lUHJvcGVydHkoZ2xvYmFsLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGdsb2JhbFtrZXldID0gdmFsdWU7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IGdldEJ1aWx0SW4oQ09OU1RSVUNUT1JfTkFNRSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmIENvbnN0cnVjdG9yICYmICFDb25zdHJ1Y3RvcltTUEVDSUVTXSkge1xuICAgIGRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBTUEVDSUVTLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgICB9KTtcbiAgfVxufTtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBUQUcsIFNUQVRJQykge1xuICBpZiAodGFyZ2V0ICYmICFTVEFUSUMpIHRhcmdldCA9IHRhcmdldC5wcm90b3R5cGU7XG4gIGlmICh0YXJnZXQgJiYgIWhhc093bih0YXJnZXQsIFRPX1NUUklOR19UQUcpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBUT19TVFJJTkdfVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IFRBRyB9KTtcbiAgfVxufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcblxudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgc2V0R2xvYmFsKFNIQVJFRCwge30pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlO1xuIiwidmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuMjAuMicsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAyMiBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNvbnN0cnVjdG9yJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBTcGVjaWVzQ29uc3RydWN0b3JgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zcGVjaWVzY29uc3RydWN0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGRlZmF1bHRDb25zdHJ1Y3Rvcikge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBkZWZhdWx0Q29uc3RydWN0b3IgOiBhQ29uc3RydWN0b3IoUyk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIGNoZWNrIHRoZSBleGlzdGVuY2Ugb2YgYSBtZXRob2QsIGxvd2VyY2FzZVxuLy8gb2YgYSB0YWcgYW5kIGVzY2FwaW5nIHF1b3RlcyBpbiBhcmd1bWVudHNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIHJldHVybiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlc3QgPSAnJ1tNRVRIT0RfTkFNRV0oJ1wiJyk7XG4gICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCdcIicpLmxlbmd0aCA+IDM7XG4gIH0pO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBjaGFyQ29kZUF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckNvZGVBdCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoQ09OVkVSVF9UT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgcG9zKSB7XG4gICAgdmFyIFMgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIHBvc2l0aW9uID0gdG9JbnRlZ2VyT3JJbmZpbml0eShwb3MpO1xuICAgIHZhciBzaXplID0gUy5sZW5ndGg7XG4gICAgdmFyIGZpcnN0LCBzZWNvbmQ7XG4gICAgaWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+PSBzaXplKSByZXR1cm4gQ09OVkVSVF9UT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBmaXJzdCA9IGNoYXJDb2RlQXQoUywgcG9zaXRpb24pO1xuICAgIHJldHVybiBmaXJzdCA8IDB4RDgwMCB8fCBmaXJzdCA+IDB4REJGRiB8fCBwb3NpdGlvbiArIDEgPT09IHNpemVcbiAgICAgIHx8IChzZWNvbmQgPSBjaGFyQ29kZUF0KFMsIHBvc2l0aW9uICsgMSkpIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRlxuICAgICAgICA/IENPTlZFUlRfVE9fU1RSSU5HXG4gICAgICAgICAgPyBjaGFyQXQoUywgcG9zaXRpb24pXG4gICAgICAgICAgOiBmaXJzdFxuICAgICAgICA6IENPTlZFUlRfVE9fU1RSSU5HXG4gICAgICAgICAgPyBzdHJpbmdTbGljZShTLCBwb3NpdGlvbiwgcG9zaXRpb24gKyAyKVxuICAgICAgICAgIDogKGZpcnN0IC0gMHhEODAwIDw8IDEwKSArIChzZWNvbmQgLSAweERDMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5jb2RlcG9pbnRhdFxuICBjb2RlQXQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuICBjaGFyQXQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvVmVyc2lvblxcLzEwKD86XFwuXFxkKyl7MSwyfSg/OiBbXFx3Li9dKyk/KD86IE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgJHJlcGVhdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcmVwZWF0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyIHJlcGVhdCA9IHVuY3VycnlUaGlzKCRyZXBlYXQpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgcGFkU3RhcnQsIHBhZEVuZCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0VORCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcpIHtcbiAgICB2YXIgUyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgICB2YXIgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGg7XG4gICAgdmFyIGZpbGxTdHIgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiB0b1N0cmluZyhmaWxsU3RyaW5nKTtcbiAgICB2YXIgZmlsbExlbiwgc3RyaW5nRmlsbGVyO1xuICAgIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICAgIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGg7XG4gICAgc3RyaW5nRmlsbGVyID0gcmVwZWF0KGZpbGxTdHIsIGNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7XG4gICAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdTbGljZShzdHJpbmdGaWxsZXIsIDAsIGZpbGxMZW4pO1xuICAgIHJldHVybiBJU19FTkQgPyBTICsgc3RyaW5nRmlsbGVyIDogc3RyaW5nRmlsbGVyICsgUztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5wYWRzdGFydFxuICBzdGFydDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUucGFkRW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZGVuZFxuICBlbmQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXN0aWVqcy9wdW55Y29kZS5qcy9ibG9iL21hc3Rlci9wdW55Y29kZS5qc1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxudmFyIG1heEludCA9IDIxNDc0ODM2NDc7IC8vIGFrYS4gMHg3RkZGRkZGRiBvciAyXjMxLTFcbnZhciBiYXNlID0gMzY7XG52YXIgdE1pbiA9IDE7XG52YXIgdE1heCA9IDI2O1xudmFyIHNrZXcgPSAzODtcbnZhciBkYW1wID0gNzAwO1xudmFyIGluaXRpYWxCaWFzID0gNzI7XG52YXIgaW5pdGlhbE4gPSAxMjg7IC8vIDB4ODBcbnZhciBkZWxpbWl0ZXIgPSAnLSc7IC8vICdcXHgyRCdcbnZhciByZWdleE5vbkFTQ0lJID0gL1teXFwwLVxcdTAwN0VdLzsgLy8gbm9uLUFTQ0lJIGNoYXJzXG52YXIgcmVnZXhTZXBhcmF0b3JzID0gL1suXFx1MzAwMlxcdUZGMEVcXHVGRjYxXS9nOyAvLyBSRkMgMzQ5MCBzZXBhcmF0b3JzXG52YXIgT1ZFUkZMT1dfRVJST1IgPSAnT3ZlcmZsb3c6IGlucHV0IG5lZWRzIHdpZGVyIGludGVnZXJzIHRvIHByb2Nlc3MnO1xudmFyIGJhc2VNaW51c1RNaW4gPSBiYXNlIC0gdE1pbjtcblxudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMocmVnZXhTZXBhcmF0b3JzLmV4ZWMpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyIGNoYXJDb2RlQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQ29kZUF0KTtcbnZhciBqb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzcGxpdCA9IHVuY3VycnlUaGlzKCcnLnNwbGl0KTtcbnZhciB0b0xvd2VyQ2FzZSA9IHVuY3VycnlUaGlzKCcnLnRvTG93ZXJDYXNlKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG51bWVyaWMgY29kZSBwb2ludHMgb2YgZWFjaCBVbmljb2RlXG4gKiBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZy4gV2hpbGUgSmF2YVNjcmlwdCB1c2VzIFVDUy0yIGludGVybmFsbHksXG4gKiB0aGlzIGZ1bmN0aW9uIHdpbGwgY29udmVydCBhIHBhaXIgb2Ygc3Vycm9nYXRlIGhhbHZlcyAoZWFjaCBvZiB3aGljaFxuICogVUNTLTIgZXhwb3NlcyBhcyBzZXBhcmF0ZSBjaGFyYWN0ZXJzKSBpbnRvIGEgc2luZ2xlIGNvZGUgcG9pbnQsXG4gKiBtYXRjaGluZyBVVEYtMTYuXG4gKi9cbnZhciB1Y3MyZGVjb2RlID0gZnVuY3Rpb24gKHN0cmluZykge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIHZhciBjb3VudGVyID0gMDtcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gY2hhckNvZGVBdChzdHJpbmcsIGNvdW50ZXIrKyk7XG4gICAgaWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuICAgICAgLy8gSXQncyBhIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3Rlci5cbiAgICAgIHZhciBleHRyYSA9IGNoYXJDb2RlQXQoc3RyaW5nLCBjb3VudGVyKyspO1xuICAgICAgaWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIExvdyBzdXJyb2dhdGUuXG4gICAgICAgIHB1c2gob3V0cHV0LCAoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSXQncyBhbiB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGVcbiAgICAgICAgLy8gbmV4dCBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXIuXG4gICAgICAgIHB1c2gob3V0cHV0LCB2YWx1ZSk7XG4gICAgICAgIGNvdW50ZXItLTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaChvdXRwdXQsIHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBkaWdpdC9pbnRlZ2VyIGludG8gYSBiYXNpYyBjb2RlIHBvaW50LlxuICovXG52YXIgZGlnaXRUb0Jhc2ljID0gZnVuY3Rpb24gKGRpZ2l0KSB7XG4gIC8vICAwLi4yNSBtYXAgdG8gQVNDSUkgYS4ueiBvciBBLi5aXG4gIC8vIDI2Li4zNSBtYXAgdG8gQVNDSUkgMC4uOVxuICByZXR1cm4gZGlnaXQgKyAyMiArIDc1ICogKGRpZ2l0IDwgMjYpO1xufTtcblxuLyoqXG4gKiBCaWFzIGFkYXB0YXRpb24gZnVuY3Rpb24gYXMgcGVyIHNlY3Rpb24gMy40IG9mIFJGQyAzNDkyLlxuICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0OTIjc2VjdGlvbi0zLjRcbiAqL1xudmFyIGFkYXB0ID0gZnVuY3Rpb24gKGRlbHRhLCBudW1Qb2ludHMsIGZpcnN0VGltZSkge1xuICB2YXIgayA9IDA7XG4gIGRlbHRhID0gZmlyc3RUaW1lID8gZmxvb3IoZGVsdGEgLyBkYW1wKSA6IGRlbHRhID4+IDE7XG4gIGRlbHRhICs9IGZsb29yKGRlbHRhIC8gbnVtUG9pbnRzKTtcbiAgd2hpbGUgKGRlbHRhID4gYmFzZU1pbnVzVE1pbiAqIHRNYXggPj4gMSkge1xuICAgIGRlbHRhID0gZmxvb3IoZGVsdGEgLyBiYXNlTWludXNUTWluKTtcbiAgICBrICs9IGJhc2U7XG4gIH1cbiAgcmV0dXJuIGZsb29yKGsgKyAoYmFzZU1pbnVzVE1pbiArIDEpICogZGVsdGEgLyAoZGVsdGEgKyBza2V3KSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scyAoZS5nLiBhIGRvbWFpbiBuYW1lIGxhYmVsKSB0byBhXG4gKiBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuICovXG52YXIgZW5jb2RlID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcblxuICAvLyBDb252ZXJ0IHRoZSBpbnB1dCBpbiBVQ1MtMiB0byBhbiBhcnJheSBvZiBVbmljb2RlIGNvZGUgcG9pbnRzLlxuICBpbnB1dCA9IHVjczJkZWNvZGUoaW5wdXQpO1xuXG4gIC8vIENhY2hlIHRoZSBsZW5ndGguXG4gIHZhciBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aDtcblxuICAvLyBJbml0aWFsaXplIHRoZSBzdGF0ZS5cbiAgdmFyIG4gPSBpbml0aWFsTjtcbiAgdmFyIGRlbHRhID0gMDtcbiAgdmFyIGJpYXMgPSBpbml0aWFsQmlhcztcbiAgdmFyIGksIGN1cnJlbnRWYWx1ZTtcblxuICAvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzLlxuICBmb3IgKGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICBjdXJyZW50VmFsdWUgPSBpbnB1dFtpXTtcbiAgICBpZiAoY3VycmVudFZhbHVlIDwgMHg4MCkge1xuICAgICAgcHVzaChvdXRwdXQsIGZyb21DaGFyQ29kZShjdXJyZW50VmFsdWUpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzaWNMZW5ndGggPSBvdXRwdXQubGVuZ3RoOyAvLyBudW1iZXIgb2YgYmFzaWMgY29kZSBwb2ludHMuXG4gIHZhciBoYW5kbGVkQ1BDb3VudCA9IGJhc2ljTGVuZ3RoOyAvLyBudW1iZXIgb2YgY29kZSBwb2ludHMgdGhhdCBoYXZlIGJlZW4gaGFuZGxlZDtcblxuICAvLyBGaW5pc2ggdGhlIGJhc2ljIHN0cmluZyB3aXRoIGEgZGVsaW1pdGVyIHVubGVzcyBpdCdzIGVtcHR5LlxuICBpZiAoYmFzaWNMZW5ndGgpIHtcbiAgICBwdXNoKG91dHB1dCwgZGVsaW1pdGVyKTtcbiAgfVxuXG4gIC8vIE1haW4gZW5jb2RpbmcgbG9vcDpcbiAgd2hpbGUgKGhhbmRsZWRDUENvdW50IDwgaW5wdXRMZW5ndGgpIHtcbiAgICAvLyBBbGwgbm9uLWJhc2ljIGNvZGUgcG9pbnRzIDwgbiBoYXZlIGJlZW4gaGFuZGxlZCBhbHJlYWR5LiBGaW5kIHRoZSBuZXh0IGxhcmdlciBvbmU6XG4gICAgdmFyIG0gPSBtYXhJbnQ7XG4gICAgZm9yIChpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjdXJyZW50VmFsdWUgPSBpbnB1dFtpXTtcbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPj0gbiAmJiBjdXJyZW50VmFsdWUgPCBtKSB7XG4gICAgICAgIG0gPSBjdXJyZW50VmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSW5jcmVhc2UgYGRlbHRhYCBlbm91Z2ggdG8gYWR2YW5jZSB0aGUgZGVjb2RlcidzIDxuLGk+IHN0YXRlIHRvIDxtLDA+LCBidXQgZ3VhcmQgYWdhaW5zdCBvdmVyZmxvdy5cbiAgICB2YXIgaGFuZGxlZENQQ291bnRQbHVzT25lID0gaGFuZGxlZENQQ291bnQgKyAxO1xuICAgIGlmIChtIC0gbiA+IGZsb29yKChtYXhJbnQgLSBkZWx0YSkgLyBoYW5kbGVkQ1BDb3VudFBsdXNPbmUpKSB7XG4gICAgICB0aHJvdyBSYW5nZUVycm9yKE9WRVJGTE9XX0VSUk9SKTtcbiAgICB9XG5cbiAgICBkZWx0YSArPSAobSAtIG4pICogaGFuZGxlZENQQ291bnRQbHVzT25lO1xuICAgIG4gPSBtO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjdXJyZW50VmFsdWUgPSBpbnB1dFtpXTtcbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHtcbiAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihPVkVSRkxPV19FUlJPUik7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFZhbHVlID09IG4pIHtcbiAgICAgICAgLy8gUmVwcmVzZW50IGRlbHRhIGFzIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuXG4gICAgICAgIHZhciBxID0gZGVsdGE7XG4gICAgICAgIHZhciBrID0gYmFzZTtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICB2YXIgdCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG4gICAgICAgICAgaWYgKHEgPCB0KSBicmVhaztcbiAgICAgICAgICB2YXIgcU1pbnVzVCA9IHEgLSB0O1xuICAgICAgICAgIHZhciBiYXNlTWludXNUID0gYmFzZSAtIHQ7XG4gICAgICAgICAgcHVzaChvdXRwdXQsIGZyb21DaGFyQ29kZShkaWdpdFRvQmFzaWModCArIHFNaW51c1QgJSBiYXNlTWludXNUKSkpO1xuICAgICAgICAgIHEgPSBmbG9vcihxTWludXNUIC8gYmFzZU1pbnVzVCk7XG4gICAgICAgICAgayArPSBiYXNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVzaChvdXRwdXQsIGZyb21DaGFyQ29kZShkaWdpdFRvQmFzaWMocSkpKTtcbiAgICAgICAgYmlhcyA9IGFkYXB0KGRlbHRhLCBoYW5kbGVkQ1BDb3VudFBsdXNPbmUsIGhhbmRsZWRDUENvdW50ID09IGJhc2ljTGVuZ3RoKTtcbiAgICAgICAgZGVsdGEgPSAwO1xuICAgICAgICBoYW5kbGVkQ1BDb3VudCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGRlbHRhKys7XG4gICAgbisrO1xuICB9XG4gIHJldHVybiBqb2luKG91dHB1dCwgJycpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIGVuY29kZWQgPSBbXTtcbiAgdmFyIGxhYmVscyA9IHNwbGl0KHJlcGxhY2UodG9Mb3dlckNhc2UoaW5wdXQpLCByZWdleFNlcGFyYXRvcnMsICdcXHUwMDJFJyksICcuJyk7XG4gIHZhciBpLCBsYWJlbDtcbiAgZm9yIChpID0gMDsgaSA8IGxhYmVscy5sZW5ndGg7IGkrKykge1xuICAgIGxhYmVsID0gbGFiZWxzW2ldO1xuICAgIHB1c2goZW5jb2RlZCwgZXhlYyhyZWdleE5vbkFTQ0lJLCBsYWJlbCkgPyAneG4tLScgKyBlbmNvZGUobGFiZWwpIDogbGFiZWwpO1xuICB9XG4gIHJldHVybiBqb2luKGVuY29kZWQsICcuJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGVhdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHZhciBuID0gdG9JbnRlZ2VyT3JJbmZpbml0eShjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBudW1iZXIgb2YgcmVwZXRpdGlvbnMnKTtcbiAgZm9yICg7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHJlc3VsdCArPSBzdHI7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIFBST1BFUl9GVU5DVElPTl9OQU1FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUnKS5QUk9QRVI7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgbm9uID0gJ1xcdTIwMEJcXHUwMDg1XFx1MTgwRSc7XG5cbi8vIGNoZWNrIHRoYXQgYSBtZXRob2Qgd29ya3Mgd2l0aCB0aGUgY29ycmVjdCBsaXN0XG4vLyBvZiB3aGl0ZXNwYWNlcyBhbmQgaGFzIGEgY29ycmVjdCBuYW1lXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICByZXR1cm4gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXdoaXRlc3BhY2VzW01FVEhPRF9OQU1FXSgpXG4gICAgICB8fCBub25bTUVUSE9EX05BTUVdKCkgIT09IG5vblxuICAgICAgfHwgKFBST1BFUl9GVU5DVElPTl9OQU1FICYmIHdoaXRlc3BhY2VzW01FVEhPRF9OQU1FXS5uYW1lICE9PSBNRVRIT0RfTkFNRSk7XG4gIH0pO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgd2hpdGVzcGFjZSA9ICdbJyArIHdoaXRlc3BhY2VzICsgJ10nO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHdoaXRlc3BhY2UgKyB3aGl0ZXNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cCh3aGl0ZXNwYWNlICsgd2hpdGVzcGFjZSArICcqJCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW0sIHRyaW1TdGFydCwgdHJpbUVuZCwgdHJpbUxlZnQsIHRyaW1SaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcykge1xuICAgIHZhciBzdHJpbmcgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSByZXBsYWNlKHN0cmluZywgbHRyaW0sICcnKTtcbiAgICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHJlcGxhY2Uoc3RyaW5nLCBydHJpbSwgJycpO1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltTGVmdCwgdHJpbVN0YXJ0IH1gIG1ldGhvZHNcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1zdGFydFxuICBzdGFydDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1SaWdodCwgdHJpbUVuZCB9YCBtZXRob2RzXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltZW5kXG4gIGVuZDogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1cbiAgdHJpbTogY3JlYXRlTWV0aG9kKDMpXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xudmFyIElTX0lPUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zJyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG52YXIgc2V0ID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhciA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgRnVuY3Rpb24gPSBnbG9iYWwuRnVuY3Rpb247XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgU3RyaW5nID0gZ2xvYmFsLlN0cmluZztcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGxvY2F0aW9uLCBkZWZlciwgY2hhbm5lbCwgcG9ydDtcblxudHJ5IHtcbiAgLy8gRGVubyB0aHJvd3MgYSBSZWZlcmVuY2VFcnJvciBvbiBgbG9jYXRpb25gIGFjY2VzcyB3aXRob3V0IGAtLWxvY2F0aW9uYCBmbGFnXG4gIGxvY2F0aW9uID0gZ2xvYmFsLmxvY2F0aW9uO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG52YXIgcnVuID0gZnVuY3Rpb24gKGlkKSB7XG4gIGlmIChoYXNPd24ocXVldWUsIGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG5cbnZhciBydW5uZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBydW4oaWQpO1xuICB9O1xufTtcblxudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bihldmVudC5kYXRhKTtcbn07XG5cbnZhciBwb3N0ID0gZnVuY3Rpb24gKGlkKSB7XG4gIC8vIG9sZCBlbmdpbmVzIGhhdmUgbm90IGxvY2F0aW9uLm9yaWdpblxuICBnbG9iYWwucG9zdE1lc3NhZ2UoU3RyaW5nKGlkKSwgbG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgbG9jYXRpb24uaG9zdCk7XG59O1xuXG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldCB8fCAhY2xlYXIpIHtcbiAgc2V0ID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cywgMSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwcGx5KGlzQ2FsbGFibGUoZm4pID8gZm4gOiBGdW5jdGlvbihmbiksIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXIgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAoSVNfTk9ERSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3cocnVubmVyKGlkKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICAvLyBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzYyNFxuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsICYmICFJU19JT1MpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGJpbmQocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKFxuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmXG4gICAgaXNDYWxsYWJsZShnbG9iYWwucG9zdE1lc3NhZ2UpICYmXG4gICAgIWdsb2JhbC5pbXBvcnRTY3JpcHRzICYmXG4gICAgbG9jYXRpb24gJiYgbG9jYXRpb24ucHJvdG9jb2wgIT09ICdmaWxlOicgJiZcbiAgICAhZmFpbHMocG9zdClcbiAgKSB7XG4gICAgZGVmZXIgPSBwb3N0O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4oaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KHJ1bm5lcihpZCksIDApO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBjbGVhcjogY2xlYXJcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbi8vIGB0aGlzTnVtYmVyVmFsdWVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10aGlzbnVtYmVydmFsdWVcbm1vZHVsZS5leHBvcnRzID0gdW5jdXJyeVRoaXMoMS4wLnZhbHVlT2YpO1xuIiwidmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIEhlbHBlciBmb3IgYSBwb3B1bGFyIHJlcGVhdGluZyBjYXNlIG9mIHRoZSBzcGVjOlxuLy8gTGV0IGludGVnZXIgYmUgPyBUb0ludGVnZXIoaW5kZXgpLlxuLy8gSWYgaW50ZWdlciA8IDAsIGxldCByZXN1bHQgYmUgbWF4KChsZW5ndGggKyBpbnRlZ2VyKSwgMCk7IGVsc2UgbGV0IHJlc3VsdCBiZSBtaW4oaW50ZWdlciwgbGVuZ3RoKS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgdmFyIGludGVnZXIgPSB0b0ludGVnZXJPckluZmluaXR5KGluZGV4KTtcbiAgcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluKGludGVnZXIsIGxlbmd0aCk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcblxudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcblxuLy8gYFRvSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gIHZhciBudW1iZXIgPSB0b0ludGVnZXJPckluZmluaXR5KGl0KTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKG51bWJlcik7XG4gIGlmIChudW1iZXIgIT09IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbGVuZ3RoIG9yIGluZGV4Jyk7XG4gIHJldHVybiBsZW5ndGg7XG59O1xuIiwiLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsInZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYFRvSW50ZWdlck9ySW5maW5pdHlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2ludGVnZXJvcmluZmluaXR5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgbnVtYmVyID0gK2FyZ3VtZW50O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIHNhZmVcbiAgcmV0dXJuIG51bWJlciAhPT0gbnVtYmVyIHx8IG51bWJlciA9PT0gMCA/IDAgOiAobnVtYmVyID4gMCA/IGZsb29yIDogY2VpbCkobnVtYmVyKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9sZW5ndGhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyT3JJbmZpbml0eShhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyIE9iamVjdCA9IGdsb2JhbC5PYmplY3Q7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHRvUG9zaXRpdmVJbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXBvc2l0aXZlLWludGVnZXInKTtcblxudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIEJZVEVTKSB7XG4gIHZhciBvZmZzZXQgPSB0b1Bvc2l0aXZlSW50ZWdlcihpdCk7XG4gIGlmIChvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0Jyk7XG4gIHJldHVybiBvZmZzZXQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcblxudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IHRvSW50ZWdlck9ySW5maW5pdHkoaXQpO1xuICBpZiAocmVzdWx0IDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihcIlRoZSBhcmd1bWVudCBjYW4ndCBiZSBsZXNzIHRoYW4gMFwiKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgb3JkaW5hcnlUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vcmRpbmFyeS10by1wcmltaXRpdmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkgfHwgaXNTeW1ib2woaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBleG90aWNUb1ByaW0gPSBnZXRNZXRob2QoaW5wdXQsIFRPX1BSSU1JVElWRSk7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChleG90aWNUb1ByaW0pIHtcbiAgICBpZiAocHJlZiA9PT0gdW5kZWZpbmVkKSBwcmVmID0gJ2RlZmF1bHQnO1xuICAgIHJlc3VsdCA9IGNhbGwoZXhvdGljVG9QcmltLCBpbnB1dCwgcHJlZik7XG4gICAgaWYgKCFpc09iamVjdChyZXN1bHQpIHx8IGlzU3ltYm9sKHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xuICB9XG4gIGlmIChwcmVmID09PSB1bmRlZmluZWQpIHByZWYgPSAnbnVtYmVyJztcbiAgcmV0dXJuIG9yZGluYXJ5VG9QcmltaXRpdmUoaW5wdXQsIHByZWYpO1xufTtcbiIsInZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcblxuLy8gYFRvUHJvcGVydHlLZXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3Byb3BlcnR5a2V5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsICdzdHJpbmcnKTtcbiAgcmV0dXJuIGlzU3ltYm9sKGtleSkgPyBrZXkgOiBrZXkgKyAnJztcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIHRlc3QgPSB7fTtcblxudGVzdFtUT19TVFJJTkdfVEFHXSA9ICd6JztcblxubW9kdWxlLmV4cG9ydHMgPSBTdHJpbmcodGVzdCkgPT09ICdbb2JqZWN0IHpdJztcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoY2xhc3NvZihhcmd1bWVudCkgPT09ICdTeW1ib2wnKSB0aHJvdyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgc3RyaW5nJyk7XG4gIHJldHVybiBTdHJpbmcoYXJndW1lbnQpO1xufTtcbiIsInZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmMgLS0gc2FmZVxuICAgIGlmIChJU19OT0RFKSByZXR1cm4gRnVuY3Rpb24oJ3JldHVybiByZXF1aXJlKFwiJyArIG5hbWUgKyAnXCIpJykoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB0cnkge1xuICAgIHJldHVybiBTdHJpbmcoYXJndW1lbnQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiAnT2JqZWN0JztcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIFRZUEVEX0FSUkFZU19DT05TVFJVQ1RPUlNfUkVRVUlSRVNfV1JBUFBFUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3JzLXJlcXVpcmUtd3JhcHBlcnMnKTtcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBBcnJheUJ1ZmZlck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXInKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGlzSW50ZWdyYWxOdW1iZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtaW50ZWdyYWwtbnVtYmVyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleCcpO1xudmFyIHRvT2Zmc2V0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9mZnNldCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgdHlwZWRBcnJheUZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktZnJvbScpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xudmFyIHJvdW5kID0gTWF0aC5yb3VuZDtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG52YXIgQXJyYXlCdWZmZXIgPSBBcnJheUJ1ZmZlck1vZHVsZS5BcnJheUJ1ZmZlcjtcbnZhciBBcnJheUJ1ZmZlclByb3RvdHlwZSA9IEFycmF5QnVmZmVyLnByb3RvdHlwZTtcbnZhciBEYXRhVmlldyA9IEFycmF5QnVmZmVyTW9kdWxlLkRhdGFWaWV3O1xudmFyIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLk5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1M7XG52YXIgVFlQRURfQVJSQVlfQ09OU1RSVUNUT1IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLlRZUEVEX0FSUkFZX0NPTlNUUlVDVE9SO1xudmFyIFRZUEVEX0FSUkFZX1RBRyA9IEFycmF5QnVmZmVyVmlld0NvcmUuVFlQRURfQVJSQVlfVEFHO1xudmFyIFR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLlR5cGVkQXJyYXk7XG52YXIgVHlwZWRBcnJheVByb3RvdHlwZSA9IEFycmF5QnVmZmVyVmlld0NvcmUuVHlwZWRBcnJheVByb3RvdHlwZTtcbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xudmFyIGlzVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuaXNUeXBlZEFycmF5O1xudmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoJztcblxudmFyIGZyb21MaXN0ID0gZnVuY3Rpb24gKEMsIGxpc3QpIHtcbiAgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihDKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICB2YXIgcmVzdWx0ID0gbmV3IEMobGVuZ3RoKTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShpdCwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpW2tleV07XG4gIH0gfSk7XG59O1xuXG52YXIgaXNBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIga2xhc3M7XG4gIHJldHVybiBpc1Byb3RvdHlwZU9mKEFycmF5QnVmZmVyUHJvdG90eXBlLCBpdCkgfHwgKGtsYXNzID0gY2xhc3NvZihpdCkpID09ICdBcnJheUJ1ZmZlcicgfHwga2xhc3MgPT0gJ1NoYXJlZEFycmF5QnVmZmVyJztcbn07XG5cbnZhciBpc1R5cGVkQXJyYXlJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICByZXR1cm4gaXNUeXBlZEFycmF5KHRhcmdldClcbiAgICAmJiAhaXNTeW1ib2woa2V5KVxuICAgICYmIGtleSBpbiB0YXJnZXRcbiAgICAmJiBpc0ludGVncmFsTnVtYmVyKCtrZXkpXG4gICAgJiYga2V5ID49IDA7XG59O1xuXG52YXIgd3JhcHBlZEdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICBrZXkgPSB0b1Byb3BlcnR5S2V5KGtleSk7XG4gIHJldHVybiBpc1R5cGVkQXJyYXlJbmRleCh0YXJnZXQsIGtleSlcbiAgICA/IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigyLCB0YXJnZXRba2V5XSlcbiAgICA6IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG59O1xuXG52YXIgd3JhcHBlZERlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpIHtcbiAga2V5ID0gdG9Qcm9wZXJ0eUtleShrZXkpO1xuICBpZiAoaXNUeXBlZEFycmF5SW5kZXgodGFyZ2V0LCBrZXkpXG4gICAgJiYgaXNPYmplY3QoZGVzY3JpcHRvcilcbiAgICAmJiBoYXNPd24oZGVzY3JpcHRvciwgJ3ZhbHVlJylcbiAgICAmJiAhaGFzT3duKGRlc2NyaXB0b3IsICdnZXQnKVxuICAgICYmICFoYXNPd24oZGVzY3JpcHRvciwgJ3NldCcpXG4gICAgLy8gVE9ETzogYWRkIHZhbGlkYXRpb24gZGVzY3JpcHRvciB3L28gY2FsbGluZyBhY2Nlc3NvcnNcbiAgICAmJiAhZGVzY3JpcHRvci5jb25maWd1cmFibGVcbiAgICAmJiAoIWhhc093bihkZXNjcmlwdG9yLCAnd3JpdGFibGUnKSB8fCBkZXNjcmlwdG9yLndyaXRhYmxlKVxuICAgICYmICghaGFzT3duKGRlc2NyaXB0b3IsICdlbnVtZXJhYmxlJykgfHwgZGVzY3JpcHRvci5lbnVtZXJhYmxlKVxuICApIHtcbiAgICB0YXJnZXRba2V5XSA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfSByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpO1xufTtcblxuaWYgKERFU0NSSVBUT1JTKSB7XG4gIGlmICghTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUykge1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mID0gd3JhcHBlZEdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mID0gd3JhcHBlZERlZmluZVByb3BlcnR5O1xuICAgIGFkZEdldHRlcihUeXBlZEFycmF5UHJvdG90eXBlLCAnYnVmZmVyJyk7XG4gICAgYWRkR2V0dGVyKFR5cGVkQXJyYXlQcm90b3R5cGUsICdieXRlT2Zmc2V0Jyk7XG4gICAgYWRkR2V0dGVyKFR5cGVkQXJyYXlQcm90b3R5cGUsICdieXRlTGVuZ3RoJyk7XG4gICAgYWRkR2V0dGVyKFR5cGVkQXJyYXlQcm90b3R5cGUsICdsZW5ndGgnKTtcbiAgfVxuXG4gICQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIH0sIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IHdyYXBwZWRHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgZGVmaW5lUHJvcGVydHk6IHdyYXBwZWREZWZpbmVQcm9wZXJ0eVxuICB9KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUWVBFLCB3cmFwcGVyLCBDTEFNUEVEKSB7XG4gICAgdmFyIEJZVEVTID0gVFlQRS5tYXRjaCgvXFxkKyQvKVswXSAvIDg7XG4gICAgdmFyIENPTlNUUlVDVE9SX05BTUUgPSBUWVBFICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIFRZUEU7XG4gICAgdmFyIFNFVFRFUiA9ICdzZXQnICsgVFlQRTtcbiAgICB2YXIgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gZ2xvYmFsW0NPTlNUUlVDVE9SX05BTUVdO1xuICAgIHZhciBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3I7XG4gICAgdmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSA9IFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAmJiBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlO1xuICAgIHZhciBleHBvcnRlZCA9IHt9O1xuXG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgcmV0dXJuIGRhdGEudmlld1tHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLmJ5dGVPZmZzZXQsIHRydWUpO1xuICAgIH07XG5cbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgaWYgKENMQU1QRUQpIHZhbHVlID0gKHZhbHVlID0gcm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweEZGID8gMHhGRiA6IHZhbHVlICYgMHhGRjtcbiAgICAgIGRhdGEudmlld1tTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLmJ5dGVPZmZzZXQsIHZhbHVlLCB0cnVlKTtcbiAgICB9O1xuXG4gICAgdmFyIGFkZEVsZW1lbnQgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KHRoYXQsIGluZGV4LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBzZXR0ZXIodGhpcywgaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGlmICghTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUykge1xuICAgICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgb2Zmc2V0LCAkbGVuZ3RoKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIGJ5dGVPZmZzZXQgPSAwO1xuICAgICAgICB2YXIgYnVmZmVyLCBieXRlTGVuZ3RoLCBsZW5ndGg7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnl0ZUxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheUJ1ZmZlcihkYXRhKSkge1xuICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7XG4gICAgICAgICAgYnl0ZU9mZnNldCA9IHRvT2Zmc2V0KG9mZnNldCwgQllURVMpO1xuICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGlmICgkbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICgkbGVuICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSAkbGVuIC0gYnl0ZU9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgYnl0ZU9mZnNldCA+ICRsZW4pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuZ3RoID0gYnl0ZUxlbmd0aCAvIEJZVEVTO1xuICAgICAgICB9IGVsc2UgaWYgKGlzVHlwZWRBcnJheShkYXRhKSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5Q29uc3RydWN0b3IsIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBjYWxsKHR5cGVkQXJyYXlGcm9tLCBUeXBlZEFycmF5Q29uc3RydWN0b3IsIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHNldEludGVybmFsU3RhdGUodGhhdCwge1xuICAgICAgICAgIGJ1ZmZlcjogYnVmZmVyLFxuICAgICAgICAgIGJ5dGVPZmZzZXQ6IGJ5dGVPZmZzZXQsXG4gICAgICAgICAgYnl0ZUxlbmd0aDogYnl0ZUxlbmd0aCxcbiAgICAgICAgICBsZW5ndGg6IGxlbmd0aCxcbiAgICAgICAgICB2aWV3OiBuZXcgRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChzZXRQcm90b3R5cGVPZikgc2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBUeXBlZEFycmF5KTtcbiAgICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSA9IFR5cGVkQXJyYXlDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoVHlwZWRBcnJheVByb3RvdHlwZSk7XG4gICAgfSBlbHNlIGlmIChUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTKSB7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSB3cmFwcGVyKGZ1bmN0aW9uIChkdW1teSwgZGF0YSwgdHlwZWRBcnJheU9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKGR1bW15LCBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUpO1xuICAgICAgICByZXR1cm4gaW5oZXJpdElmUmVxdWlyZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHJldHVybiBuZXcgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKHRvSW5kZXgoZGF0YSkpO1xuICAgICAgICAgIGlmIChpc0FycmF5QnVmZmVyKGRhdGEpKSByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG5ldyBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IoZGF0YSwgdG9PZmZzZXQodHlwZWRBcnJheU9mZnNldCwgQllURVMpLCAkbGVuZ3RoKVxuICAgICAgICAgICAgOiB0eXBlZEFycmF5T2Zmc2V0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyBuZXcgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKGRhdGEsIHRvT2Zmc2V0KHR5cGVkQXJyYXlPZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKGRhdGEpO1xuICAgICAgICAgIGlmIChpc1R5cGVkQXJyYXkoZGF0YSkpIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5Q29uc3RydWN0b3IsIGRhdGEpO1xuICAgICAgICAgIHJldHVybiBjYWxsKHR5cGVkQXJyYXlGcm9tLCBUeXBlZEFycmF5Q29uc3RydWN0b3IsIGRhdGEpO1xuICAgICAgICB9KCksIGR1bW15LCBUeXBlZEFycmF5Q29uc3RydWN0b3IpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChzZXRQcm90b3R5cGVPZikgc2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBUeXBlZEFycmF5KTtcbiAgICAgIGZvckVhY2goZ2V0T3duUHJvcGVydHlOYW1lcyhOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghKGtleSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3IpKSB7XG4gICAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3Rvciwga2V5LCBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3Jba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZTtcbiAgICB9XG5cbiAgICBpZiAoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlLmNvbnN0cnVjdG9yICE9PSBUeXBlZEFycmF5Q29uc3RydWN0b3IpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXlDb25zdHJ1Y3Rvcik7XG4gICAgfVxuXG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSwgVFlQRURfQVJSQVlfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXlDb25zdHJ1Y3Rvcik7XG5cbiAgICBpZiAoVFlQRURfQVJSQVlfVEFHKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlLCBUWVBFRF9BUlJBWV9UQUcsIENPTlNUUlVDVE9SX05BTUUpO1xuICAgIH1cblxuICAgIGV4cG9ydGVkW0NPTlNUUlVDVE9SX05BTUVdID0gVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xuXG4gICAgJCh7XG4gICAgICBnbG9iYWw6IHRydWUsIGZvcmNlZDogVHlwZWRBcnJheUNvbnN0cnVjdG9yICE9IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3Rvciwgc2hhbTogIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1NcbiAgICB9LCBleHBvcnRlZCk7XG5cbiAgICBpZiAoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3IpKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpO1xuICAgIH1cblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG4gICAgfVxuXG4gICAgc2V0U3BlY2llcyhDT05TVFJVQ1RPUl9OQU1FKTtcbiAgfTtcbn0gZWxzZSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLW5ldyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKS5OQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTO1xuXG52YXIgQXJyYXlCdWZmZXIgPSBnbG9iYWwuQXJyYXlCdWZmZXI7XG52YXIgSW50OEFycmF5ID0gZ2xvYmFsLkludDhBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSAhTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBJbnQ4QXJyYXkoMSk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBuZXcgSW50OEFycmF5KC0xKTtcbn0pIHx8ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIG5ldyBJbnQ4QXJyYXkoKTtcbiAgbmV3IEludDhBcnJheShudWxsKTtcbiAgbmV3IEludDhBcnJheSgxLjUpO1xuICBuZXcgSW50OEFycmF5KGl0ZXJhYmxlKTtcbn0sIHRydWUpIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gU2FmYXJpICgxMSspIGJ1ZyAtIGEgcmVhc29uIHdoeSBldmVuIFNhZmFyaSAxMyBzaG91bGQgbG9hZCBhIHR5cGVkIGFycmF5IHBvbHlmaWxsXG4gIHJldHVybiBuZXcgSW50OEFycmF5KG5ldyBBcnJheUJ1ZmZlcigyKSwgMSwgdW5kZWZpbmVkKS5sZW5ndGggIT09IDE7XG59KTtcbiIsInZhciBhcnJheUZyb21Db25zdHJ1Y3RvckFuZExpc3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZnJvbS1jb25zdHJ1Y3Rvci1hbmQtbGlzdCcpO1xudmFyIHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgbGlzdCkge1xuICByZXR1cm4gYXJyYXlGcm9tQ29uc3RydWN0b3JBbmRMaXN0KHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IoaW5zdGFuY2UpLCBsaXN0KTtcbn07XG4iLCJ2YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jb25zdHJ1Y3RvcicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKS5hVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgdmFyIEMgPSBhQ29uc3RydWN0b3IodGhpcyk7XG4gIHZhciBPID0gdG9PYmplY3Qoc291cmNlKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoTyk7XG4gIHZhciBpLCBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3IsIG5leHQ7XG4gIGlmIChpdGVyYXRvck1ldGhvZCAmJiAhaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJhdG9yTWV0aG9kKSkge1xuICAgIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoTywgaXRlcmF0b3JNZXRob2QpO1xuICAgIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICAgIE8gPSBbXTtcbiAgICB3aGlsZSAoIShzdGVwID0gY2FsbChuZXh0LCBpdGVyYXRvcikpLmRvbmUpIHtcbiAgICAgIE8ucHVzaChzdGVwLnZhbHVlKTtcbiAgICB9XG4gIH1cbiAgaWYgKG1hcHBpbmcgJiYgYXJndW1lbnRzTGVuZ3RoID4gMikge1xuICAgIG1hcGZuID0gYmluZChtYXBmbiwgYXJndW1lbnRzWzJdKTtcbiAgfVxuICBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgcmVzdWx0ID0gbmV3IChhVHlwZWRBcnJheUNvbnN0cnVjdG9yKEMpKShsZW5ndGgpO1xuICBmb3IgKGkgPSAwOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICByZXN1bHRbaV0gPSBtYXBwaW5nID8gbWFwZm4oT1tpXSwgaSkgOiBPW2ldO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbnZhciBUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUiA9IEFycmF5QnVmZmVyVmlld0NvcmUuVFlQRURfQVJSQVlfQ09OU1RSVUNUT1I7XG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcblxuLy8gYSBwYXJ0IG9mIGBUeXBlZEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jdHlwZWRhcnJheS1zcGVjaWVzLWNyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSkge1xuICByZXR1cm4gYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWxBcnJheSwgb3JpZ2luYWxBcnJheVtUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUl0pKTtcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG52YXIgdG9TdHJpbmcgPSB1bmN1cnJ5VGhpcygxLjAudG9TdHJpbmcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJyArIChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5KSArICcpXycgKyB0b1N0cmluZygrK2lkICsgcG9zdGZpeCwgMzYpO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0xcbiAgJiYgIVN5bWJvbC5zaGFtXG4gICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCc7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBWOCB+IENocm9tZSAzNi1cbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMzMzRcbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAncHJvdG90eXBlJywge1xuICAgIHZhbHVlOiA0MixcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSkucHJvdG90eXBlICE9IDQyO1xufSk7XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbmV4cG9ydHMuZiA9IHdlbGxLbm93blN5bWJvbDtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgc3ltYm9sRm9yID0gU3ltYm9sICYmIFN5bWJvbFsnZm9yJ107XG52YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2wgOiBTeW1ib2wgJiYgU3ltYm9sLndpdGhvdXRTZXR0ZXIgfHwgdWlkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGlmICghaGFzT3duKFdlbGxLbm93blN5bWJvbHNTdG9yZSwgbmFtZSkgfHwgIShOQVRJVkVfU1lNQk9MIHx8IHR5cGVvZiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPT0gJ3N0cmluZycpKSB7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gJ1N5bWJvbC4nICsgbmFtZTtcbiAgICBpZiAoTkFUSVZFX1NZTUJPTCAmJiBoYXNPd24oU3ltYm9sLCBuYW1lKSkge1xuICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gU3ltYm9sW25hbWVdO1xuICAgIH0gZWxzZSBpZiAoVVNFX1NZTUJPTF9BU19VSUQgJiYgc3ltYm9sRm9yKSB7XG4gICAgICBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBzeW1ib2xGb3IoZGVzY3JpcHRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBjcmVhdGVXZWxsS25vd25TeW1ib2woZGVzY3JpcHRpb24pO1xuICAgIH1cbiAgfSByZXR1cm4gV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdO1xufTtcbiIsIi8vIGEgc3RyaW5nIG9mIGFsbCB2YWxpZCB1bmljb2RlIHdoaXRlc3BhY2VzXG5tb2R1bGUuZXhwb3J0cyA9ICdcXHUwMDA5XFx1MDAwQVxcdTAwMEJcXHUwMDBDXFx1MDAwRFxcdTAwMjBcXHUwMEEwXFx1MTY4MFxcdTIwMDBcXHUyMDAxXFx1MjAwMicgK1xuICAnXFx1MjAwM1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciBub3JtYWxpemVTdHJpbmdBcmd1bWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3JtYWxpemUtc3RyaW5nLWFyZ3VtZW50Jyk7XG52YXIgaW5zdGFsbEVycm9yQ2F1c2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zdGFsbC1lcnJvci1jYXVzZScpO1xudmFyIGNsZWFyRXJyb3JTdGFjayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGVhci1lcnJvci1zdGFjaycpO1xudmFyIEVSUk9SX1NUQUNLX0lOU1RBTExBQkxFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Vycm9yLXN0YWNrLWluc3RhbGxhYmxlJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEZVTExfTkFNRSwgd3JhcHBlciwgRk9SQ0VELCBJU19BR0dSRUdBVEVfRVJST1IpIHtcbiAgdmFyIE9QVElPTlNfUE9TSVRJT04gPSBJU19BR0dSRUdBVEVfRVJST1IgPyAyIDogMTtcbiAgdmFyIHBhdGggPSBGVUxMX05BTUUuc3BsaXQoJy4nKTtcbiAgdmFyIEVSUk9SX05BTUUgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gIHZhciBPcmlnaW5hbEVycm9yID0gZ2V0QnVpbHRJbi5hcHBseShudWxsLCBwYXRoKTtcblxuICBpZiAoIU9yaWdpbmFsRXJyb3IpIHJldHVybjtcblxuICB2YXIgT3JpZ2luYWxFcnJvclByb3RvdHlwZSA9IE9yaWdpbmFsRXJyb3IucHJvdG90eXBlO1xuXG4gIC8vIFY4IDkuMy0gYnVnIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTEyMDA2XG4gIGlmICghSVNfUFVSRSAmJiBoYXNPd24oT3JpZ2luYWxFcnJvclByb3RvdHlwZSwgJ2NhdXNlJykpIGRlbGV0ZSBPcmlnaW5hbEVycm9yUHJvdG90eXBlLmNhdXNlO1xuXG4gIGlmICghRk9SQ0VEKSByZXR1cm4gT3JpZ2luYWxFcnJvcjtcblxuICB2YXIgQmFzZUVycm9yID0gZ2V0QnVpbHRJbignRXJyb3InKTtcblxuICB2YXIgV3JhcHBlZEVycm9yID0gd3JhcHBlcihmdW5jdGlvbiAoYSwgYikge1xuICAgIHZhciBtZXNzYWdlID0gbm9ybWFsaXplU3RyaW5nQXJndW1lbnQoSVNfQUdHUkVHQVRFX0VSUk9SID8gYiA6IGEsIHVuZGVmaW5lZCk7XG4gICAgdmFyIHJlc3VsdCA9IElTX0FHR1JFR0FURV9FUlJPUiA/IG5ldyBPcmlnaW5hbEVycm9yKGEpIDogbmV3IE9yaWdpbmFsRXJyb3IoKTtcbiAgICBpZiAobWVzc2FnZSAhPT0gdW5kZWZpbmVkKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkocmVzdWx0LCAnbWVzc2FnZScsIG1lc3NhZ2UpO1xuICAgIGlmIChFUlJPUl9TVEFDS19JTlNUQUxMQUJMRSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHJlc3VsdCwgJ3N0YWNrJywgY2xlYXJFcnJvclN0YWNrKHJlc3VsdC5zdGFjaywgMikpO1xuICAgIGlmICh0aGlzICYmIGlzUHJvdG90eXBlT2YoT3JpZ2luYWxFcnJvclByb3RvdHlwZSwgdGhpcykpIGluaGVyaXRJZlJlcXVpcmVkKHJlc3VsdCwgdGhpcywgV3JhcHBlZEVycm9yKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IE9QVElPTlNfUE9TSVRJT04pIGluc3RhbGxFcnJvckNhdXNlKHJlc3VsdCwgYXJndW1lbnRzW09QVElPTlNfUE9TSVRJT05dKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9KTtcblxuICBXcmFwcGVkRXJyb3IucHJvdG90eXBlID0gT3JpZ2luYWxFcnJvclByb3RvdHlwZTtcblxuICBpZiAoRVJST1JfTkFNRSAhPT0gJ0Vycm9yJykge1xuICAgIGlmIChzZXRQcm90b3R5cGVPZikgc2V0UHJvdG90eXBlT2YoV3JhcHBlZEVycm9yLCBCYXNlRXJyb3IpO1xuICAgIGVsc2UgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhXcmFwcGVkRXJyb3IsIEJhc2VFcnJvciwgeyBuYW1lOiB0cnVlIH0pO1xuICB9XG5cbiAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhXcmFwcGVkRXJyb3IsIE9yaWdpbmFsRXJyb3IpO1xuXG4gIGlmICghSVNfUFVSRSkgdHJ5IHtcbiAgICAvLyBTYWZhcmkgMTMtIGJ1ZzogV2ViQXNzZW1ibHkgZXJyb3JzIGRvZXMgbm90IGhhdmUgYSBwcm9wZXIgYC5uYW1lYFxuICAgIGlmIChPcmlnaW5hbEVycm9yUHJvdG90eXBlLm5hbWUgIT09IEVSUk9SX05BTUUpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShPcmlnaW5hbEVycm9yUHJvdG90eXBlLCAnbmFtZScsIEVSUk9SX05BTUUpO1xuICAgIH1cbiAgICBPcmlnaW5hbEVycm9yUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gV3JhcHBlZEVycm9yO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbiAgcmV0dXJuIFdyYXBwZWRFcnJvcjtcbn07XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3cmFwRXJyb3JDb25zdHJ1Y3RvcldpdGhDYXVzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93cmFwLWVycm9yLWNvbnN0cnVjdG9yLXdpdGgtY2F1c2UnKTtcblxudmFyIEFHR1JFR0FURV9FUlJPUiA9ICdBZ2dyZWdhdGVFcnJvcic7XG52YXIgJEFnZ3JlZ2F0ZUVycm9yID0gZ2V0QnVpbHRJbihBR0dSRUdBVEVfRVJST1IpO1xudmFyIEZPUkNFRCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkQWdncmVnYXRlRXJyb3IoWzFdKS5lcnJvcnNbMF0gIT09IDE7XG59KSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkQWdncmVnYXRlRXJyb3IoWzFdLCBBR0dSRUdBVEVfRVJST1IsIHsgY2F1c2U6IDcgfSkuY2F1c2UgIT09IDc7XG59KTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZXJyb3ItY2F1c2VcbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgQWdncmVnYXRlRXJyb3I6IHdyYXBFcnJvckNvbnN0cnVjdG9yV2l0aENhdXNlKEFHR1JFR0FURV9FUlJPUiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGZ1bmN0aW9ucyBgLmxlbmd0aGBcbiAgICByZXR1cm4gZnVuY3Rpb24gQWdncmVnYXRlRXJyb3IoZXJyb3JzLCBtZXNzYWdlKSB7IHJldHVybiBhcHBseShpbml0LCB0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB9LCBGT1JDRUQsIHRydWUpXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBjbGVhckVycm9yU3RhY2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xlYXItZXJyb3Itc3RhY2snKTtcbnZhciBpbnN0YWxsRXJyb3JDYXVzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnN0YWxsLWVycm9yLWNhdXNlJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgbm9ybWFsaXplU3RyaW5nQXJndW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm9ybWFsaXplLXN0cmluZy1hcmd1bWVudCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEVSUk9SX1NUQUNLX0lOU1RBTExBQkxFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Vycm9yLXN0YWNrLWluc3RhbGxhYmxlJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIEVycm9yID0gZ2xvYmFsLkVycm9yO1xudmFyIHB1c2ggPSBbXS5wdXNoO1xuXG52YXIgJEFnZ3JlZ2F0ZUVycm9yID0gZnVuY3Rpb24gQWdncmVnYXRlRXJyb3IoZXJyb3JzLCBtZXNzYWdlIC8qICwgb3B0aW9ucyAqLykge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgaXNJbnN0YW5jZSA9IGlzUHJvdG90eXBlT2YoQWdncmVnYXRlRXJyb3JQcm90b3R5cGUsIHRoaXMpO1xuICB2YXIgdGhhdDtcbiAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgdGhhdCA9IHNldFByb3RvdHlwZU9mKG5ldyBFcnJvcigpLCBpc0luc3RhbmNlID8gZ2V0UHJvdG90eXBlT2YodGhpcykgOiBBZ2dyZWdhdGVFcnJvclByb3RvdHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhhdCA9IGlzSW5zdGFuY2UgPyB0aGlzIDogY3JlYXRlKEFnZ3JlZ2F0ZUVycm9yUHJvdG90eXBlKTtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodGhhdCwgVE9fU1RSSU5HX1RBRywgJ0Vycm9yJyk7XG4gIH1cbiAgaWYgKG1lc3NhZ2UgIT09IHVuZGVmaW5lZCkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHRoYXQsICdtZXNzYWdlJywgbm9ybWFsaXplU3RyaW5nQXJndW1lbnQobWVzc2FnZSkpO1xuICBpZiAoRVJST1JfU1RBQ0tfSU5TVEFMTEFCTEUpIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh0aGF0LCAnc3RhY2snLCBjbGVhckVycm9yU3RhY2sodGhhdC5zdGFjaywgMSkpO1xuICBpbnN0YWxsRXJyb3JDYXVzZSh0aGF0LCBvcHRpb25zKTtcbiAgdmFyIGVycm9yc0FycmF5ID0gW107XG4gIGl0ZXJhdGUoZXJyb3JzLCBwdXNoLCB7IHRoYXQ6IGVycm9yc0FycmF5IH0pO1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodGhhdCwgJ2Vycm9ycycsIGVycm9yc0FycmF5KTtcbiAgcmV0dXJuIHRoYXQ7XG59O1xuXG5pZiAoc2V0UHJvdG90eXBlT2YpIHNldFByb3RvdHlwZU9mKCRBZ2dyZWdhdGVFcnJvciwgRXJyb3IpO1xuZWxzZSBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKCRBZ2dyZWdhdGVFcnJvciwgRXJyb3IsIHsgbmFtZTogdHJ1ZSB9KTtcblxudmFyIEFnZ3JlZ2F0ZUVycm9yUHJvdG90eXBlID0gJEFnZ3JlZ2F0ZUVycm9yLnByb3RvdHlwZSA9IGNyZWF0ZShFcnJvci5wcm90b3R5cGUsIHtcbiAgY29uc3RydWN0b3I6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCAkQWdncmVnYXRlRXJyb3IpLFxuICBtZXNzYWdlOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgJycpLFxuICBuYW1lOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgJ0FnZ3JlZ2F0ZUVycm9yJylcbn0pO1xuXG4vLyBgQWdncmVnYXRlRXJyb3JgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFnZ3JlZ2F0ZS1lcnJvci1jb25zdHJ1Y3RvclxuJCh7IGdsb2JhbDogdHJ1ZSB9LCB7XG4gIEFnZ3JlZ2F0ZUVycm9yOiAkQWdncmVnYXRlRXJyb3Jcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGFycmF5QnVmZmVyTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlcicpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcblxudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgQXJyYXlCdWZmZXIgPSBhcnJheUJ1ZmZlck1vZHVsZVtBUlJBWV9CVUZGRVJdO1xudmFyIE5hdGl2ZUFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG5cbi8vIGBBcnJheUJ1ZmZlcmAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlidWZmZXItY29uc3RydWN0b3JcbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogTmF0aXZlQXJyYXlCdWZmZXIgIT09IEFycmF5QnVmZmVyIH0sIHtcbiAgQXJyYXlCdWZmZXI6IEFycmF5QnVmZmVyXG59KTtcblxuc2V0U3BlY2llcyhBUlJBWV9CVUZGRVIpO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG5cbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5OQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTO1xuXG4vLyBgQXJyYXlCdWZmZXIuaXNWaWV3YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlidWZmZXIuaXN2aWV3XG4kKHsgdGFyZ2V0OiAnQXJyYXlCdWZmZXInLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIH0sIHtcbiAgaXNWaWV3OiBBcnJheUJ1ZmZlclZpZXdDb3JlLmlzVmlld1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIEFycmF5QnVmZmVyTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbnZhciBBcnJheUJ1ZmZlciA9IEFycmF5QnVmZmVyTW9kdWxlLkFycmF5QnVmZmVyO1xudmFyIERhdGFWaWV3ID0gQXJyYXlCdWZmZXJNb2R1bGUuRGF0YVZpZXc7XG52YXIgRGF0YVZpZXdQcm90b3R5cGUgPSBEYXRhVmlldy5wcm90b3R5cGU7XG52YXIgdW4kQXJyYXlCdWZmZXJTbGljZSA9IHVuY3VycnlUaGlzKEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZSk7XG52YXIgZ2V0VWludDggPSB1bmN1cnJ5VGhpcyhEYXRhVmlld1Byb3RvdHlwZS5nZXRVaW50OCk7XG52YXIgc2V0VWludDggPSB1bmN1cnJ5VGhpcyhEYXRhVmlld1Byb3RvdHlwZS5zZXRVaW50OCk7XG5cbnZhciBJTkNPUlJFQ1RfU0xJQ0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3IEFycmF5QnVmZmVyKDIpLnNsaWNlKDEsIHVuZGVmaW5lZCkuYnl0ZUxlbmd0aDtcbn0pO1xuXG4vLyBgQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlidWZmZXIucHJvdG90eXBlLnNsaWNlXG4kKHsgdGFyZ2V0OiAnQXJyYXlCdWZmZXInLCBwcm90bzogdHJ1ZSwgdW5zYWZlOiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9TTElDRSB9LCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgaWYgKHVuJEFycmF5QnVmZmVyU2xpY2UgJiYgZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB1biRBcnJheUJ1ZmZlclNsaWNlKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIH1cbiAgICB2YXIgbGVuZ3RoID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aDtcbiAgICB2YXIgZmlyc3QgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbmd0aCk7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZCwgbGVuZ3RoKTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW4gLSBmaXJzdCkpO1xuICAgIHZhciB2aWV3U291cmNlID0gbmV3IERhdGFWaWV3KHRoaXMpO1xuICAgIHZhciB2aWV3VGFyZ2V0ID0gbmV3IERhdGFWaWV3KHJlc3VsdCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoZmlyc3QgPCBmaW4pIHtcbiAgICAgIHNldFVpbnQ4KHZpZXdUYXJnZXQsIGluZGV4KyssIGdldFVpbnQ4KHZpZXdTb3VyY2UsIGZpcnN0KyspKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmF0YCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXJlbGF0aXZlLWluZGV4aW5nLW1ldGhvZFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwge1xuICBhdDogZnVuY3Rpb24gYXQoaW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW4gPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICB2YXIgcmVsYXRpdmVJbmRleCA9IHRvSW50ZWdlck9ySW5maW5pdHkoaW5kZXgpO1xuICAgIHZhciBrID0gcmVsYXRpdmVJbmRleCA+PSAwID8gcmVsYXRpdmVJbmRleCA6IGxlbiArIHJlbGF0aXZlSW5kZXg7XG4gICAgcmV0dXJuIChrIDwgMCB8fCBrID49IGxlbikgPyB1bmRlZmluZWQgOiBPW2tdO1xuICB9XG59KTtcblxuYWRkVG9VbnNjb3BhYmxlcygnYXQnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHdlbGxLbm93blN5bWJvbCgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDB4MUZGRkZGRkZGRkZGRkY7XG52YXIgTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEID0gJ01heGltdW0gYWxsb3dlZCBpbmRleCBleGNlZWRlZCc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxuLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4vLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgPSBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnJheSA9IFtdO1xuICBhcnJheVtJU19DT05DQVRfU1BSRUFEQUJMRV0gPSBmYWxzZTtcbiAgcmV0dXJuIGFycmF5LmNvbmNhdCgpWzBdICE9PSBhcnJheTtcbn0pO1xuXG52YXIgU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnY29uY2F0Jyk7XG5cbnZhciBpc0NvbmNhdFNwcmVhZGFibGUgPSBmdW5jdGlvbiAoTykge1xuICBpZiAoIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzcHJlYWRhYmxlID0gT1tJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gIHJldHVybiBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KE8pO1xufTtcblxudmFyIEZPUkNFRCA9ICFJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUIHx8ICFTUEVDSUVTX1NVUFBPUlQ7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29uY2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmNvbmNhdFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQGlzQ29uY2F0U3ByZWFkYWJsZSBhbmQgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBjb25jYXQ6IGZ1bmN0aW9uIGNvbmNhdChhcmcpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIHZhciBuID0gMDtcbiAgICB2YXIgaSwgaywgbGVuZ3RoLCBsZW4sIEU7XG4gICAgZm9yIChpID0gLTEsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgRSA9IGkgPT09IC0xID8gTyA6IGFyZ3VtZW50c1tpXTtcbiAgICAgIGlmIChpc0NvbmNhdFNwcmVhZGFibGUoRSkpIHtcbiAgICAgICAgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoRSk7XG4gICAgICAgIGlmIChuICsgbGVuID4gTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCk7XG4gICAgICAgIGZvciAoayA9IDA7IGsgPCBsZW47IGsrKywgbisrKSBpZiAoayBpbiBFKSBjcmVhdGVQcm9wZXJ0eShBLCBuLCBFW2tdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChuID49IE1BWF9TQUZFX0lOVEVHRVIpIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQpO1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShBLCBuKyssIEUpO1xuICAgICAgfVxuICAgIH1cbiAgICBBLmxlbmd0aCA9IG47XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY29weVdpdGhpbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1jb3B5LXdpdGhpbicpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb3B5d2l0aGluXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGNvcHlXaXRoaW46IGNvcHlXaXRoaW5cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdjb3B5V2l0aGluJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZXZlcnk7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnZXZlcnknKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5ldmVyeVxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIVNUUklDVF9NRVRIT0QgfSwge1xuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmaWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZpbGwnKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsbFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwge1xuICBmaWxsOiBmaWxsXG59KTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygnZmlsbCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maWx0ZXI7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ2ZpbHRlcicpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaW5kSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmluZEluZGV4O1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbnZhciBGSU5EX0lOREVYID0gJ2ZpbmRJbmRleCc7XG52YXIgU0tJUFNfSE9MRVMgPSB0cnVlO1xuXG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEZJTkRfSU5ERVggaW4gW10pIEFycmF5KDEpW0ZJTkRfSU5ERVhdKGZ1bmN0aW9uICgpIHsgU0tJUFNfSE9MRVMgPSBmYWxzZTsgfSk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRpbmRleFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogU0tJUFNfSE9MRVMgfSwge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZEluZGV4KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoRklORF9JTkRFWCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maW5kO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbnZhciBGSU5EID0gJ2ZpbmQnO1xudmFyIFNLSVBTX0hPTEVTID0gdHJ1ZTtcblxuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChGSU5EIGluIFtdKSBBcnJheSgxKVtGSU5EXShmdW5jdGlvbiAoKSB7IFNLSVBTX0hPTEVTID0gZmFsc2U7IH0pO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbmRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogU0tJUFNfSE9MRVMgfSwge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoRklORCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5mbGF0TWFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZsYXRtYXBcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgZmxhdE1hcDogZnVuY3Rpb24gZmxhdE1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHZhciBBO1xuICAgIGFDYWxsYWJsZShjYWxsYmFja2ZuKTtcbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIEEubGVuZ3RoID0gZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIDEsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmxhdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mbGF0XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGZsYXQ6IGZ1bmN0aW9uIGZsYXQoLyogZGVwdGhBcmcgPSAxICovKSB7XG4gICAgdmFyIGRlcHRoQXJnID0gYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4gPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBBLmxlbmd0aCA9IGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCBkZXB0aEFyZyA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlck9ySW5maW5pdHkoZGVwdGhBcmcpKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWZvcmVhY2ggLS0gc2FmZVxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogW10uZm9yRWFjaCAhPSBmb3JFYWNoIH0sIHtcbiAgZm9yRWFjaDogZm9yRWFjaFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZyb20nKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LWZyb20gLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgQXJyYXkuZnJvbShpdGVyYWJsZSk7XG59KTtcblxuLy8gYEFycmF5LmZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5mcm9tXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICBmcm9tOiBmcm9tXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluY2x1ZGVzO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2luY2x1ZGVzJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1hcnJheS1wcm90b3R5cGUtaW5kZXhvZiAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgJEluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgdW4kSW5kZXhPZiA9IHVuY3VycnlUaGlzKFtdLmluZGV4T2YpO1xuXG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhdW4kSW5kZXhPZiAmJiAxIC8gdW4kSW5kZXhPZihbMV0sIDEsIC0wKSA8IDA7XG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2luZGV4T2YnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IE5FR0FUSVZFX1pFUk8gfHwgIVNUUklDVF9NRVRIT0QgfSwge1xuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgdmFyIGZyb21JbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/IHVuJEluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgZnJvbUluZGV4KSB8fCAwXG4gICAgICA6ICRJbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xuXG4vLyBgQXJyYXkuaXNBcnJheWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LmlzYXJyYXlcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHN0YXQ6IHRydWUgfSwge1xuICBpc0FycmF5OiBpc0FycmF5XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmVudHJpZXNcbi8vIGBBcnJheS5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5rZXlzXG4vLyBgQXJyYXkucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEBpdGVyYXRvclxuLy8gYENyZWF0ZUFycmF5SXRlcmF0b3JgIGludGVybmFsIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVhcnJheWl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZUl0ZXJhdG9yKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogQVJSQVlfSVRFUkFUT1IsXG4gICAgdGFyZ2V0OiB0b0luZGV4ZWRPYmplY3QoaXRlcmF0ZWQpLCAvLyB0YXJnZXRcbiAgICBpbmRleDogMCwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgICBraW5kOiBraW5kICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgfSk7XG4vLyBgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGluZGV4LCBkb25lOiBmYWxzZSB9O1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IHRhcmdldFtpbmRleF0sIGRvbmU6IGZhbHNlIH07XG4gIHJldHVybiB7IHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBkb25lOiBmYWxzZSB9O1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRldW5tYXBwZWRhcmd1bWVudHNvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlbWFwcGVkYXJndW1lbnRzb2JqZWN0XG52YXIgdmFsdWVzID0gSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG5cbi8vIFY4IH4gQ2hyb21lIDQ1LSBidWdcbmlmICghSVNfUFVSRSAmJiBERVNDUklQVE9SUyAmJiB2YWx1ZXMubmFtZSAhPT0gJ3ZhbHVlcycpIHRyeSB7XG4gIGRlZmluZVByb3BlcnR5KHZhbHVlcywgJ25hbWUnLCB7IHZhbHVlOiAndmFsdWVzJyB9KTtcbn0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIHVuJEpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcblxudmFyIEVTM19TVFJJTkdTID0gSW5kZXhlZE9iamVjdCAhPSBPYmplY3Q7XG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2pvaW4nLCAnLCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmpvaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuam9pblxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRVMzX1NUUklOR1MgfHwgIVNUUklDVF9NRVRIT0QgfSwge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHJldHVybiB1biRKb2luKHRvSW5kZXhlZE9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGxhc3RJbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWxhc3QtaW5kZXgtb2YnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5sYXN0aW5kZXhvZlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LXByb3RvdHlwZS1sYXN0aW5kZXhvZiAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogbGFzdEluZGV4T2YgIT09IFtdLmxhc3RJbmRleE9mIH0sIHtcbiAgbGFzdEluZGV4T2Y6IGxhc3RJbmRleE9mXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykubWFwO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdtYXAnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG5cbnZhciBBcnJheSA9IGdsb2JhbC5BcnJheTtcblxudmFyIElTTlRfR0VORVJJQyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7XG59KTtcblxuLy8gYEFycmF5Lm9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkub2Zcbi8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElTTlRfR0VORVJJQyB9LCB7XG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IChpc0NvbnN0cnVjdG9yKHRoaXMpID8gdGhpcyA6IEFycmF5KShhcmd1bWVudHNMZW5ndGgpO1xuICAgIHdoaWxlIChhcmd1bWVudHNMZW5ndGggPiBpbmRleCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gYXJndW1lbnRzTGVuZ3RoO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHJlZHVjZVJpZ2h0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXJlZHVjZScpLnJpZ2h0O1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xudmFyIENIUk9NRV9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ3JlZHVjZVJpZ2h0Jyk7XG4vLyBDaHJvbWUgODAtODIgaGFzIGEgY3JpdGljYWwgYnVnXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0xMDQ5OTgyXG52YXIgQ0hST01FX0JVRyA9ICFJU19OT0RFICYmIENIUk9NRV9WRVJTSU9OID4gNzkgJiYgQ0hST01FX1ZFUlNJT04gPCA4MztcblxuLy8gYEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZWR1Y2VyaWdodFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIVNUUklDVF9NRVRIT0QgfHwgQ0hST01FX0JVRyB9LCB7XG4gIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2VSaWdodCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1yZWR1Y2UnKS5sZWZ0O1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xudmFyIENIUk9NRV9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ3JlZHVjZScpO1xuLy8gQ2hyb21lIDgwLTgyIGhhcyBhIGNyaXRpY2FsIGJ1Z1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MTA0OTk4MlxudmFyIENIUk9NRV9CVUcgPSAhSVNfTk9ERSAmJiBDSFJPTUVfVkVSU0lPTiA+IDc5ICYmIENIUk9NRV9WRVJTSU9OIDwgODM7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJlZHVjZVxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIVNUUklDVF9NRVRIT0QgfHwgQ0hST01FX0JVRyB9LCB7XG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBsZW5ndGgsIGxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcblxudmFyIHVuJFJldmVyc2UgPSB1bmN1cnJ5VGhpcyhbXS5yZXZlcnNlKTtcbnZhciB0ZXN0ID0gWzEsIDJdO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnJldmVyc2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmV2ZXJzZVxuLy8gZml4IGZvciBTYWZhcmkgMTIuMCBidWdcbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xODg3OTRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFN0cmluZyh0ZXN0KSA9PT0gU3RyaW5nKHRlc3QucmV2ZXJzZSgpKSB9LCB7XG4gIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtYXNzaWduIC0tIGRpcnR5IGhhY2tcbiAgICBpZiAoaXNBcnJheSh0aGlzKSkgdGhpcy5sZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICByZXR1cm4gdW4kUmV2ZXJzZSh0aGlzKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcbnZhciB1biRTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ3NsaWNlJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgQXJyYXkgPSBnbG9iYWwuQXJyYXk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc2xpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc2xpY2Vcbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGsgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbmd0aCk7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZCwgbGVuZ3RoKTtcbiAgICAvLyBpbmxpbmUgYEFycmF5U3BlY2llc0NyZWF0ZWAgZm9yIHVzYWdlIG5hdGl2ZSBgQXJyYXkjc2xpY2VgIHdoZXJlIGl0J3MgcG9zc2libGVcbiAgICB2YXIgQ29uc3RydWN0b3IsIHJlc3VsdCwgbjtcbiAgICBpZiAoaXNBcnJheShPKSkge1xuICAgICAgQ29uc3RydWN0b3IgPSBPLmNvbnN0cnVjdG9yO1xuICAgICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICAgIGlmIChpc0NvbnN0cnVjdG9yKENvbnN0cnVjdG9yKSAmJiAoQ29uc3RydWN0b3IgPT09IEFycmF5IHx8IGlzQXJyYXkoQ29uc3RydWN0b3IucHJvdG90eXBlKSkpIHtcbiAgICAgICAgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KENvbnN0cnVjdG9yKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yW1NQRUNJRVNdO1xuICAgICAgICBpZiAoQ29uc3RydWN0b3IgPT09IG51bGwpIENvbnN0cnVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKENvbnN0cnVjdG9yID09PSBBcnJheSB8fCBDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1biRTbGljZShPLCBrLCBmaW4pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQgPSBuZXcgKENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQgPyBBcnJheSA6IENvbnN0cnVjdG9yKShtYXgoZmluIC0gaywgMCkpO1xuICAgIGZvciAobiA9IDA7IGsgPCBmaW47IGsrKywgbisrKSBpZiAoayBpbiBPKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIG4sIE9ba10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHNvbWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuc29tZTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdzb21lJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhU1RSSUNUX01FVEhPRCB9LCB7XG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGludGVybmFsU29ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zb3J0Jyk7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG52YXIgRkYgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWZmLXZlcnNpb24nKTtcbnZhciBJRV9PUl9FREdFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pZS1vci1lZGdlJyk7XG52YXIgVjggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcbnZhciBXRUJLSVQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXdlYmtpdC12ZXJzaW9uJyk7XG5cbnZhciB0ZXN0ID0gW107XG52YXIgdW4kU29ydCA9IHVuY3VycnlUaGlzKHRlc3Quc29ydCk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKHRlc3QucHVzaCk7XG5cbi8vIElFOC1cbnZhciBGQUlMU19PTl9VTkRFRklORUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSk7XG4vLyBWOCBidWdcbnZhciBGQUlMU19PTl9OVUxMID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB0ZXN0LnNvcnQobnVsbCk7XG59KTtcbi8vIE9sZCBXZWJLaXRcbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnc29ydCcpO1xuXG52YXIgU1RBQkxFX1NPUlQgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBmZWF0dXJlIGRldGVjdGlvbiBjYW4gYmUgdG9vIHNsb3csIHNvIGNoZWNrIGVuZ2luZXMgdmVyc2lvbnNcbiAgaWYgKFY4KSByZXR1cm4gVjggPCA3MDtcbiAgaWYgKEZGICYmIEZGID4gMykgcmV0dXJuO1xuICBpZiAoSUVfT1JfRURHRSkgcmV0dXJuIHRydWU7XG4gIGlmIChXRUJLSVQpIHJldHVybiBXRUJLSVQgPCA2MDM7XG5cbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgY29kZSwgY2hyLCB2YWx1ZSwgaW5kZXg7XG5cbiAgLy8gZ2VuZXJhdGUgYW4gYXJyYXkgd2l0aCBtb3JlIDUxMiBlbGVtZW50cyAoQ2hha3JhIGFuZCBvbGQgVjggZmFpbHMgb25seSBpbiB0aGlzIGNhc2UpXG4gIGZvciAoY29kZSA9IDY1OyBjb2RlIDwgNzY7IGNvZGUrKykge1xuICAgIGNociA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG5cbiAgICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAgIGNhc2UgNjY6IGNhc2UgNjk6IGNhc2UgNzA6IGNhc2UgNzI6IHZhbHVlID0gMzsgYnJlYWs7XG4gICAgICBjYXNlIDY4OiBjYXNlIDcxOiB2YWx1ZSA9IDQ7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogdmFsdWUgPSAyO1xuICAgIH1cblxuICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IDQ3OyBpbmRleCsrKSB7XG4gICAgICB0ZXN0LnB1c2goeyBrOiBjaHIgKyBpbmRleCwgdjogdmFsdWUgfSk7XG4gICAgfVxuICB9XG5cbiAgdGVzdC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBiLnYgLSBhLnY7IH0pO1xuXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHRlc3QubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY2hyID0gdGVzdFtpbmRleF0uay5jaGFyQXQoMCk7XG4gICAgaWYgKHJlc3VsdC5jaGFyQXQocmVzdWx0Lmxlbmd0aCAtIDEpICE9PSBjaHIpIHJlc3VsdCArPSBjaHI7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0ICE9PSAnREdCRUZIQUNJSksnO1xufSk7XG5cbnZhciBGT1JDRUQgPSBGQUlMU19PTl9VTkRFRklORUQgfHwgIUZBSUxTX09OX05VTEwgfHwgIVNUUklDVF9NRVRIT0QgfHwgIVNUQUJMRV9TT1JUO1xuXG52YXIgZ2V0U29ydENvbXBhcmUgPSBmdW5jdGlvbiAoY29tcGFyZWZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoeCwgeSkge1xuICAgIGlmICh5ID09PSB1bmRlZmluZWQpIHJldHVybiAtMTtcbiAgICBpZiAoeCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMTtcbiAgICBpZiAoY29tcGFyZWZuICE9PSB1bmRlZmluZWQpIHJldHVybiArY29tcGFyZWZuKHgsIHkpIHx8IDA7XG4gICAgcmV0dXJuIHRvU3RyaW5nKHgpID4gdG9TdHJpbmcoeSkgPyAxIDogLTE7XG4gIH07XG59O1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNvcnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29ydFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICBpZiAoY29tcGFyZWZuICE9PSB1bmRlZmluZWQpIGFDYWxsYWJsZShjb21wYXJlZm4pO1xuXG4gICAgdmFyIGFycmF5ID0gdG9PYmplY3QodGhpcyk7XG5cbiAgICBpZiAoU1RBQkxFX1NPUlQpIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZCA/IHVuJFNvcnQoYXJyYXkpIDogdW4kU29ydChhcnJheSwgY29tcGFyZWZuKTtcblxuICAgIHZhciBpdGVtcyA9IFtdO1xuICAgIHZhciBhcnJheUxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKGFycmF5KTtcbiAgICB2YXIgaXRlbXNMZW5ndGgsIGluZGV4O1xuXG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgYXJyYXlMZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGlmIChpbmRleCBpbiBhcnJheSkgcHVzaChpdGVtcywgYXJyYXlbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpbnRlcm5hbFNvcnQoaXRlbXMsIGdldFNvcnRDb21wYXJlKGNvbXBhcmVmbikpO1xuXG4gICAgaXRlbXNMZW5ndGggPSBpdGVtcy5sZW5ndGg7XG4gICAgaW5kZXggPSAwO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgaXRlbXNMZW5ndGgpIGFycmF5W2luZGV4XSA9IGl0ZW1zW2luZGV4KytdO1xuICAgIHdoaWxlIChpbmRleCA8IGFycmF5TGVuZ3RoKSBkZWxldGUgYXJyYXlbaW5kZXgrK107XG5cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cbn0pO1xuIiwidmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcblxuLy8gYEFycmF5W0BAc3BlY2llc11gIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtYXJyYXktQEBzcGVjaWVzXG5zZXRTcGVjaWVzKCdBcnJheScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ3NwbGljZScpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gMHgxRkZGRkZGRkZGRkZGRjtcbnZhciBNQVhJTVVNX0FMTE9XRURfTEVOR1RIX0VYQ0VFREVEID0gJ01heGltdW0gYWxsb3dlZCBsZW5ndGggZXhjZWVkZWQnO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNwbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zcGxpY2Vcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIHNwbGljZTogZnVuY3Rpb24gc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCAvKiAsIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGFjdHVhbFN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICAgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpbnNlcnRDb3VudCwgYWN0dWFsRGVsZXRlQ291bnQsIEEsIGssIGZyb20sIHRvO1xuICAgIGlmIChhcmd1bWVudHNMZW5ndGggPT09IDApIHtcbiAgICAgIGluc2VydENvdW50ID0gYWN0dWFsRGVsZXRlQ291bnQgPSAwO1xuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzTGVuZ3RoID09PSAxKSB7XG4gICAgICBpbnNlcnRDb3VudCA9IDA7XG4gICAgICBhY3R1YWxEZWxldGVDb3VudCA9IGxlbiAtIGFjdHVhbFN0YXJ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnNlcnRDb3VudCA9IGFyZ3VtZW50c0xlbmd0aCAtIDI7XG4gICAgICBhY3R1YWxEZWxldGVDb3VudCA9IG1pbihtYXgodG9JbnRlZ2VyT3JJbmZpbml0eShkZWxldGVDb3VudCksIDApLCBsZW4gLSBhY3R1YWxTdGFydCk7XG4gICAgfVxuICAgIGlmIChsZW4gKyBpbnNlcnRDb3VudCAtIGFjdHVhbERlbGV0ZUNvdW50ID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9MRU5HVEhfRVhDRUVERUQpO1xuICAgIH1cbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIGFjdHVhbERlbGV0ZUNvdW50KTtcbiAgICBmb3IgKGsgPSAwOyBrIDwgYWN0dWFsRGVsZXRlQ291bnQ7IGsrKykge1xuICAgICAgZnJvbSA9IGFjdHVhbFN0YXJ0ICsgaztcbiAgICAgIGlmIChmcm9tIGluIE8pIGNyZWF0ZVByb3BlcnR5KEEsIGssIE9bZnJvbV0pO1xuICAgIH1cbiAgICBBLmxlbmd0aCA9IGFjdHVhbERlbGV0ZUNvdW50O1xuICAgIGlmIChpbnNlcnRDb3VudCA8IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICBmb3IgKGsgPSBhY3R1YWxTdGFydDsgayA8IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50OyBrKyspIHtcbiAgICAgICAgZnJvbSA9IGsgKyBhY3R1YWxEZWxldGVDb3VudDtcbiAgICAgICAgdG8gPSBrICsgaW5zZXJ0Q291bnQ7XG4gICAgICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICAgICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgICB9XG4gICAgICBmb3IgKGsgPSBsZW47IGsgPiBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGluc2VydENvdW50OyBrLS0pIGRlbGV0ZSBPW2sgLSAxXTtcbiAgICB9IGVsc2UgaWYgKGluc2VydENvdW50ID4gYWN0dWFsRGVsZXRlQ291bnQpIHtcbiAgICAgIGZvciAoayA9IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50OyBrID4gYWN0dWFsU3RhcnQ7IGstLSkge1xuICAgICAgICBmcm9tID0gayArIGFjdHVhbERlbGV0ZUNvdW50IC0gMTtcbiAgICAgICAgdG8gPSBrICsgaW5zZXJ0Q291bnQgLSAxO1xuICAgICAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGsgPSAwOyBrIDwgaW5zZXJ0Q291bnQ7IGsrKykge1xuICAgICAgT1trICsgYWN0dWFsU3RhcnRdID0gYXJndW1lbnRzW2sgKyAyXTtcbiAgICB9XG4gICAgTy5sZW5ndGggPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGluc2VydENvdW50O1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsIi8vIHRoaXMgbWV0aG9kIHdhcyBhZGRlZCB0byB1bnNjb3BhYmxlcyBhZnRlciBpbXBsZW1lbnRhdGlvblxuLy8gaW4gcG9wdWxhciBlbmdpbmVzLCBzbyBpdCdzIG1vdmVkIHRvIGEgc2VwYXJhdGUgbW9kdWxlXG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygnZmxhdE1hcCcpO1xuIiwiLy8gdGhpcyBtZXRob2Qgd2FzIGFkZGVkIHRvIHVuc2NvcGFibGVzIGFmdGVyIGltcGxlbWVudGF0aW9uXG4vLyBpbiBwb3B1bGFyIGVuZ2luZXMsIHNvIGl0J3MgbW92ZWQgdG8gYSBzZXBhcmF0ZSBtb2R1bGVcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdmbGF0Jyk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBBcnJheUJ1ZmZlck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXInKTtcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci1uYXRpdmUnKTtcblxuLy8gYERhdGFWaWV3YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRhdmlldy1jb25zdHJ1Y3RvclxuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX0FSUkFZX0JVRkZFUiB9LCB7XG4gIERhdGFWaWV3OiBBcnJheUJ1ZmZlck1vZHVsZS5EYXRhVmlld1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoMTZlMTEpLmdldFllYXIoKSAhPT0gMTIwO1xufSk7XG5cbnZhciBnZXRGdWxsWWVhciA9IHVuY3VycnlUaGlzKERhdGUucHJvdG90eXBlLmdldEZ1bGxZZWFyKTtcblxuLy8gYERhdGUucHJvdG90eXBlLmdldFllYXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS5nZXR5ZWFyXG4kKHsgdGFyZ2V0OiAnRGF0ZScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIGdldFllYXI6IGZ1bmN0aW9uIGdldFllYXIoKSB7XG4gICAgcmV0dXJuIGdldEZ1bGxZZWFyKHRoaXMpIC0gMTkwMDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciBEYXRlID0gZ2xvYmFsLkRhdGU7XG52YXIgZ2V0VGltZSA9IHVuY3VycnlUaGlzKERhdGUucHJvdG90eXBlLmdldFRpbWUpO1xuXG4vLyBgRGF0ZS5ub3dgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLm5vd1xuJCh7IHRhcmdldDogJ0RhdGUnLCBzdGF0OiB0cnVlIH0sIHtcbiAgbm93OiBmdW5jdGlvbiBub3coKSB7XG4gICAgcmV0dXJuIGdldFRpbWUobmV3IERhdGUoKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG5cbnZhciBEYXRlUHJvdG90eXBlID0gRGF0ZS5wcm90b3R5cGU7XG52YXIgZ2V0VGltZSA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VGltZSk7XG52YXIgc2V0RnVsbFllYXIgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLnNldEZ1bGxZZWFyKTtcblxuLy8gYERhdGUucHJvdG90eXBlLnNldFllYXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS5zZXR5ZWFyXG4kKHsgdGFyZ2V0OiAnRGF0ZScsIHByb3RvOiB0cnVlIH0sIHtcbiAgc2V0WWVhcjogZnVuY3Rpb24gc2V0WWVhcih5ZWFyKSB7XG4gICAgLy8gdmFsaWRhdGVcbiAgICBnZXRUaW1lKHRoaXMpO1xuICAgIHZhciB5aSA9IHRvSW50ZWdlck9ySW5maW5pdHkoeWVhcik7XG4gICAgdmFyIHl5eXkgPSAwIDw9IHlpICYmIHlpIDw9IDk5ID8geWkgKyAxOTAwIDogeWk7XG4gICAgcmV0dXJuIHNldEZ1bGxZZWFyKHRoaXMsIHl5eXkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGUudG9HTVRTdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b2dtdHN0cmluZ1xuJCh7IHRhcmdldDogJ0RhdGUnLCBwcm90bzogdHJ1ZSB9LCB7XG4gIHRvR01UU3RyaW5nOiBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZ1xufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b0lTT1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gYERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUudG9pc29zdHJpbmdcbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xuJCh7IHRhcmdldDogJ0RhdGUnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcgfSwge1xuICB0b0lTT1N0cmluZzogdG9JU09TdHJpbmdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGxcbiAgICB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7IHRvSVNPU3RyaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9IH0pICE9PSAxO1xufSk7XG5cbi8vIGBEYXRlLnByb3RvdHlwZS50b0pTT05gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b2pzb25cbiQoeyB0YXJnZXQ6ICdEYXRlJywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oa2V5KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgcHYgPSB0b1ByaW1pdGl2ZShPLCAnbnVtYmVyJyk7XG4gICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTtcbiAgfVxufSk7XG4iLCJ2YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGRhdGVUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kYXRlLXRvLXByaW1pdGl2ZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xudmFyIERhdGVQcm90b3R5cGUgPSBEYXRlLnByb3RvdHlwZTtcblxuLy8gYERhdGUucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuaWYgKCFoYXNPd24oRGF0ZVByb3RvdHlwZSwgVE9fUFJJTUlUSVZFKSkge1xuICByZWRlZmluZShEYXRlUHJvdG90eXBlLCBUT19QUklNSVRJVkUsIGRhdGVUb1ByaW1pdGl2ZSk7XG59XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcblxudmFyIERhdGVQcm90b3R5cGUgPSBEYXRlLnByb3RvdHlwZTtcbnZhciBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJztcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIHVuJERhdGVUb1N0cmluZyA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGVbVE9fU1RSSU5HXSk7XG52YXIgZ2V0VGltZSA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VGltZSk7XG5cbi8vIGBEYXRlLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWRhdGUucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoU3RyaW5nKG5ldyBEYXRlKE5hTikpICE9IElOVkFMSURfREFURSkge1xuICByZWRlZmluZShEYXRlUHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciB2YWx1ZSA9IGdldFRpbWUodGhpcyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gdW4kRGF0ZVRvU3RyaW5nKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBmdW5jdGlvbnMgYC5sZW5ndGhgICovXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciB3cmFwRXJyb3JDb25zdHJ1Y3RvcldpdGhDYXVzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93cmFwLWVycm9yLWNvbnN0cnVjdG9yLXdpdGgtY2F1c2UnKTtcblxudmFyIFdFQl9BU1NFTUJMWSA9ICdXZWJBc3NlbWJseSc7XG52YXIgV2ViQXNzZW1ibHkgPSBnbG9iYWxbV0VCX0FTU0VNQkxZXTtcblxudmFyIEZPUkNFRCA9IEVycm9yKCdlJywgeyBjYXVzZTogNyB9KS5jYXVzZSAhPT0gNztcblxudmFyIGV4cG9ydEdsb2JhbEVycm9yQ2F1c2VXcmFwcGVyID0gZnVuY3Rpb24gKEVSUk9SX05BTUUsIHdyYXBwZXIpIHtcbiAgdmFyIE8gPSB7fTtcbiAgT1tFUlJPUl9OQU1FXSA9IHdyYXBFcnJvckNvbnN0cnVjdG9yV2l0aENhdXNlKEVSUk9SX05BTUUsIHdyYXBwZXIsIEZPUkNFRCk7XG4gICQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIE8pO1xufTtcblxudmFyIGV4cG9ydFdlYkFzc2VtYmx5RXJyb3JDYXVzZVdyYXBwZXIgPSBmdW5jdGlvbiAoRVJST1JfTkFNRSwgd3JhcHBlcikge1xuICBpZiAoV2ViQXNzZW1ibHkgJiYgV2ViQXNzZW1ibHlbRVJST1JfTkFNRV0pIHtcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bRVJST1JfTkFNRV0gPSB3cmFwRXJyb3JDb25zdHJ1Y3RvcldpdGhDYXVzZShXRUJfQVNTRU1CTFkgKyAnLicgKyBFUlJPUl9OQU1FLCB3cmFwcGVyLCBGT1JDRUQpO1xuICAgICQoeyB0YXJnZXQ6IFdFQl9BU1NFTUJMWSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwgTyk7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWVycm9yLWNhdXNlXG5leHBvcnRHbG9iYWxFcnJvckNhdXNlV3JhcHBlcignRXJyb3InLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRXJyb3IobWVzc2FnZSkgeyByZXR1cm4gYXBwbHkoaW5pdCwgdGhpcywgYXJndW1lbnRzKTsgfTtcbn0pO1xuZXhwb3J0R2xvYmFsRXJyb3JDYXVzZVdyYXBwZXIoJ0V2YWxFcnJvcicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBFdmFsRXJyb3IobWVzc2FnZSkgeyByZXR1cm4gYXBwbHkoaW5pdCwgdGhpcywgYXJndW1lbnRzKTsgfTtcbn0pO1xuZXhwb3J0R2xvYmFsRXJyb3JDYXVzZVdyYXBwZXIoJ1JhbmdlRXJyb3InLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gUmFuZ2VFcnJvcihtZXNzYWdlKSB7IHJldHVybiBhcHBseShpbml0LCB0aGlzLCBhcmd1bWVudHMpOyB9O1xufSk7XG5leHBvcnRHbG9iYWxFcnJvckNhdXNlV3JhcHBlcignUmVmZXJlbmNlRXJyb3InLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gUmVmZXJlbmNlRXJyb3IobWVzc2FnZSkgeyByZXR1cm4gYXBwbHkoaW5pdCwgdGhpcywgYXJndW1lbnRzKTsgfTtcbn0pO1xuZXhwb3J0R2xvYmFsRXJyb3JDYXVzZVdyYXBwZXIoJ1N5bnRheEVycm9yJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFN5bnRheEVycm9yKG1lc3NhZ2UpIHsgcmV0dXJuIGFwcGx5KGluaXQsIHRoaXMsIGFyZ3VtZW50cyk7IH07XG59KTtcbmV4cG9ydEdsb2JhbEVycm9yQ2F1c2VXcmFwcGVyKCdUeXBlRXJyb3InLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVHlwZUVycm9yKG1lc3NhZ2UpIHsgcmV0dXJuIGFwcGx5KGluaXQsIHRoaXMsIGFyZ3VtZW50cyk7IH07XG59KTtcbmV4cG9ydEdsb2JhbEVycm9yQ2F1c2VXcmFwcGVyKCdVUklFcnJvcicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVUklFcnJvcihtZXNzYWdlKSB7IHJldHVybiBhcHBseShpbml0LCB0aGlzLCBhcmd1bWVudHMpOyB9O1xufSk7XG5leHBvcnRXZWJBc3NlbWJseUVycm9yQ2F1c2VXcmFwcGVyKCdDb21waWxlRXJyb3InLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gQ29tcGlsZUVycm9yKG1lc3NhZ2UpIHsgcmV0dXJuIGFwcGx5KGluaXQsIHRoaXMsIGFyZ3VtZW50cyk7IH07XG59KTtcbmV4cG9ydFdlYkFzc2VtYmx5RXJyb3JDYXVzZVdyYXBwZXIoJ0xpbmtFcnJvcicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBMaW5rRXJyb3IobWVzc2FnZSkgeyByZXR1cm4gYXBwbHkoaW5pdCwgdGhpcywgYXJndW1lbnRzKTsgfTtcbn0pO1xuZXhwb3J0V2ViQXNzZW1ibHlFcnJvckNhdXNlV3JhcHBlcignUnVudGltZUVycm9yJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFJ1bnRpbWVFcnJvcihtZXNzYWdlKSB7IHJldHVybiBhcHBseShpbml0LCB0aGlzLCBhcmd1bWVudHMpOyB9O1xufSk7XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBlcnJvclRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Vycm9yLXRvLXN0cmluZycpO1xuXG52YXIgRXJyb3JQcm90b3R5cGUgPSBFcnJvci5wcm90b3R5cGU7XG5cbi8vIGBFcnJvci5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZCBmaXhcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZXJyb3IucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoRXJyb3JQcm90b3R5cGUudG9TdHJpbmcgIT09IGVycm9yVG9TdHJpbmcpIHtcbiAgcmVkZWZpbmUoRXJyb3JQcm90b3R5cGUsICd0b1N0cmluZycsIGVycm9yVG9TdHJpbmcpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG5cbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGNoYXJDb2RlQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQ29kZUF0KTtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoLy4vLmV4ZWMpO1xudmFyIG51bWJlclRvU3RyaW5nID0gdW5jdXJyeVRoaXMoMS4wLnRvU3RyaW5nKTtcbnZhciB0b1VwcGVyQ2FzZSA9IHVuY3VycnlUaGlzKCcnLnRvVXBwZXJDYXNlKTtcblxudmFyIHJhdyA9IC9bXFx3KitcXC0uL0BdLztcblxudmFyIGhleCA9IGZ1bmN0aW9uIChjb2RlLCBsZW5ndGgpIHtcbiAgdmFyIHJlc3VsdCA9IG51bWJlclRvU3RyaW5nKGNvZGUsIDE2KTtcbiAgd2hpbGUgKHJlc3VsdC5sZW5ndGggPCBsZW5ndGgpIHJlc3VsdCA9ICcwJyArIHJlc3VsdDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIGBlc2NhcGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1lc2NhcGUtc3RyaW5nXG4kKHsgZ2xvYmFsOiB0cnVlIH0sIHtcbiAgZXNjYXBlOiBmdW5jdGlvbiBlc2NhcGUoc3RyaW5nKSB7XG4gICAgdmFyIHN0ciA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIHZhciBsZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNociwgY29kZTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNociA9IGNoYXJBdChzdHIsIGluZGV4KyspO1xuICAgICAgaWYgKGV4ZWMocmF3LCBjaHIpKSB7XG4gICAgICAgIHJlc3VsdCArPSBjaHI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb2RlID0gY2hhckNvZGVBdChjaHIsIDApO1xuICAgICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICAgIHJlc3VsdCArPSAnJScgKyBoZXgoY29kZSwgMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ICs9ICcldScgKyB0b1VwcGVyQ2FzZShoZXgoY29kZSwgNCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZCcpO1xuXG4vLyBgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYmluZFxuJCh7IHRhcmdldDogJ0Z1bmN0aW9uJywgcHJvdG86IHRydWUgfSwge1xuICBiaW5kOiBiaW5kXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBIQVNfSU5TVEFOQ0UgPSB3ZWxsS25vd25TeW1ib2woJ2hhc0luc3RhbmNlJyk7XG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8vIGBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUtQEBoYXNpbnN0YW5jZVxuaWYgKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG90eXBlKSkge1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKEZ1bmN0aW9uUHJvdG90eXBlLCBIQVNfSU5TVEFOQ0UsIHsgdmFsdWU6IGZ1bmN0aW9uIChPKSB7XG4gICAgaWYgKCFpc0NhbGxhYmxlKHRoaXMpIHx8ICFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICAgIHZhciBQID0gdGhpcy5wcm90b3R5cGU7XG4gICAgaWYgKCFpc09iamVjdChQKSkgcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzO1xuICAgIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gICAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkgaWYgKFAgPT09IE8pIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSB9KTtcbn1cbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZVTkNUSU9OX05BTUVfRVhJU1RTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUnKS5FWElTVFM7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBmdW5jdGlvblRvU3RyaW5nID0gdW5jdXJyeVRoaXMoRnVuY3Rpb25Qcm90b3R5cGUudG9TdHJpbmcpO1xudmFyIG5hbWVSRSA9IC9mdW5jdGlvblxcYig/Olxcc3xcXC9cXCpbXFxTXFxzXSo/XFwqXFwvfFxcL1xcL1teXFxuXFxyXSpbXFxuXFxyXSspKihbXlxccygvXSopLztcbnZhciByZWdFeHBFeGVjID0gdW5jdXJyeVRoaXMobmFtZVJFLmV4ZWMpO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIEZ1bmN0aW9uIGluc3RhbmNlcyBgLm5hbWVgIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLWluc3RhbmNlcy1uYW1lXG5pZiAoREVTQ1JJUFRPUlMgJiYgIUZVTkNUSU9OX05BTUVfRVhJU1RTKSB7XG4gIGRlZmluZVByb3BlcnR5KEZ1bmN0aW9uUHJvdG90eXBlLCBOQU1FLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHJlZ0V4cEV4ZWMobmFtZVJFLCBmdW5jdGlvblRvU3RyaW5nKHRoaXMpKVsxXTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBgZ2xvYmFsVGhpc2Agb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdsb2JhbHRoaXNcbiQoeyBnbG9iYWw6IHRydWUgfSwge1xuICBnbG9iYWxUaGlzOiBnbG9iYWxcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgQXJyYXkgPSBnbG9iYWwuQXJyYXk7XG52YXIgJHN0cmluZ2lmeSA9IGdldEJ1aWx0SW4oJ0pTT04nLCAnc3RyaW5naWZ5Jyk7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKC8uLy5leGVjKTtcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGNoYXJDb2RlQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQ29kZUF0KTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgbnVtYmVyVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcygxLjAudG9TdHJpbmcpO1xuXG52YXIgdGVzdGVyID0gL1tcXHVEODAwLVxcdURGRkZdL2c7XG52YXIgbG93ID0gL15bXFx1RDgwMC1cXHVEQkZGXSQvO1xudmFyIGhpID0gL15bXFx1REMwMC1cXHVERkZGXSQvO1xuXG52YXIgZml4ID0gZnVuY3Rpb24gKG1hdGNoLCBvZmZzZXQsIHN0cmluZykge1xuICB2YXIgcHJldiA9IGNoYXJBdChzdHJpbmcsIG9mZnNldCAtIDEpO1xuICB2YXIgbmV4dCA9IGNoYXJBdChzdHJpbmcsIG9mZnNldCArIDEpO1xuICBpZiAoKGV4ZWMobG93LCBtYXRjaCkgJiYgIWV4ZWMoaGksIG5leHQpKSB8fCAoZXhlYyhoaSwgbWF0Y2gpICYmICFleGVjKGxvdywgcHJldikpKSB7XG4gICAgcmV0dXJuICdcXFxcdScgKyBudW1iZXJUb1N0cmluZyhjaGFyQ29kZUF0KG1hdGNoLCAwKSwgMTYpO1xuICB9IHJldHVybiBtYXRjaDtcbn07XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkc3RyaW5naWZ5KCdcXHVERjA2XFx1RDgzNCcpICE9PSAnXCJcXFxcdWRmMDZcXFxcdWQ4MzRcIidcbiAgICB8fCAkc3RyaW5naWZ5KCdcXHVERUFEJykgIT09ICdcIlxcXFx1ZGVhZFwiJztcbn0pO1xuXG5pZiAoJHN0cmluZ2lmeSkge1xuICAvLyBgSlNPTi5zdHJpbmdpZnlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWpzb24uc3RyaW5naWZ5XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXdlbGwtZm9ybWVkLXN0cmluZ2lmeVxuICAkKHsgdGFyZ2V0OiAnSlNPTicsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0LCByZXBsYWNlciwgc3BhY2UpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KGwpOyBpIDwgbDsgaSsrKSBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgICAgdmFyIHJlc3VsdCA9IGFwcGx5KCRzdHJpbmdpZnksIG51bGwsIGFyZ3MpO1xuICAgICAgcmV0dXJuIHR5cGVvZiByZXN1bHQgPT0gJ3N0cmluZycgPyByZXBsYWNlKHJlc3VsdCwgdGVzdGVyLCBmaXgpIDogcmVzdWx0O1xuICAgIH1cbiAgfSk7XG59XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG5cbi8vIEpTT05bQEB0b1N0cmluZ1RhZ10gcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtanNvbi1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24nKTtcbnZhciBjb2xsZWN0aW9uU3Ryb25nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24tc3Ryb25nJyk7XG5cbi8vIGBNYXBgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC1vYmplY3RzXG5jb2xsZWN0aW9uKCdNYXAnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gaW5pdCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIGNvbGxlY3Rpb25TdHJvbmcpO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgbG9nMXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1sb2cxcCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1hY29zaCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyICRhY29zaCA9IE1hdGguYWNvc2g7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgc3FydCA9IE1hdGguc3FydDtcbnZhciBMTjIgPSBNYXRoLkxOMjtcblxudmFyIEZPUkNFRCA9ICEkYWNvc2hcbiAgLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuICB8fCBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgIT0gNzEwXG4gIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOXG4gIHx8ICRhY29zaChJbmZpbml0eSkgIT0gSW5maW5pdHk7XG5cbi8vIGBNYXRoLmFjb3NoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5hY29zaFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IHggPiA5NDkwNjI2NS42MjQyNTE1NlxuICAgICAgPyBsb2coeCkgKyBMTjJcbiAgICAgIDogbG9nMXAoeCAtIDEgKyBzcXJ0KHggLSAxKSAqIHNxcnQoeCArIDEpKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtYXNpbmggLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciAkYXNpbmggPSBNYXRoLmFzaW5oO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpIHtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBsb2coeCArIHNxcnQoeCAqIHggKyAxKSk7XG59XG5cbi8vIGBNYXRoLmFzaW5oYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5hc2luaFxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApIH0sIHtcbiAgYXNpbmg6IGFzaW5oXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1hdGFuaCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyICRhdGFuaCA9IE1hdGguYXRhbmg7XG52YXIgbG9nID0gTWF0aC5sb2c7XG5cbi8vIGBNYXRoLmF0YW5oYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5hdGFuaFxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSB9LCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogbG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgc2lnbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLXNpZ24nKTtcblxudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xuXG4vLyBgTWF0aC5jYnJ0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5jYnJ0XG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpIHtcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogcG93KGFicyh4KSwgMSAvIDMpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExPRzJFID0gTWF0aC5MT0cyRTtcblxuLy8gYE1hdGguY2x6MzJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmNsejMyXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkge1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBmbG9vcihsb2coeCArIDAuNSkgKiBMT0cyRSkgOiAzMjtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWV4cG0xJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLWNvc2ggLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciAkY29zaCA9IE1hdGguY29zaDtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBFID0gTWF0aC5FO1xuXG4vLyBgTWF0aC5jb3NoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5jb3NoXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogISRjb3NoIHx8ICRjb3NoKDcxMCkgPT09IEluZmluaXR5IH0sIHtcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KSB7XG4gICAgdmFyIHQgPSBleHBtMShhYnMoeCkgLSAxKSArIDE7XG4gICAgcmV0dXJuICh0ICsgMSAvICh0ICogRSAqIEUpKSAqIChFIC8gMik7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1leHBtMScpO1xuXG4vLyBgTWF0aC5leHBtMWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguZXhwbTFcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLWV4cG0xIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogZXhwbTEgIT0gTWF0aC5leHBtMSB9LCB7IGV4cG0xOiBleHBtMSB9KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZyb3VuZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWZyb3VuZCcpO1xuXG4vLyBgTWF0aC5mcm91bmRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmZyb3VuZFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHsgZnJvdW5kOiBmcm91bmQgfSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtaHlwb3QgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciAkaHlwb3QgPSBNYXRoLmh5cG90O1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG5cbi8vIENocm9tZSA3NyBidWdcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTk1NDZcbnZhciBCVUdHWSA9ICEhJGh5cG90ICYmICRoeXBvdChJbmZpbml0eSwgTmFOKSAhPT0gSW5maW5pdHk7XG5cbi8vIGBNYXRoLmh5cG90YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5oeXBvdFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEJVR0dZIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgaHlwb3Q6IGZ1bmN0aW9uIGh5cG90KHZhbHVlMSwgdmFsdWUyKSB7XG4gICAgdmFyIHN1bSA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbGFyZyA9IDA7XG4gICAgdmFyIGFyZywgZGl2O1xuICAgIHdoaWxlIChpIDwgYUxlbikge1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmIChsYXJnIDwgYXJnKSB7XG4gICAgICAgIGRpdiA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA+IDApIHtcbiAgICAgICAgZGl2ID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBzcXJ0KHN1bSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtaW11bCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyICRpbXVsID0gTWF0aC5pbXVsO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJGltdWwoMHhGRkZGRkZGRiwgNSkgIT0gLTUgfHwgJGltdWwubGVuZ3RoICE9IDI7XG59KTtcblxuLy8gYE1hdGguaW11bGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguaW11bFxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBpbXVsOiBmdW5jdGlvbiBpbXVsKHgsIHkpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhGRkZGO1xuICAgIHZhciB4biA9ICt4O1xuICAgIHZhciB5biA9ICt5O1xuICAgIHZhciB4bCA9IFVJTlQxNiAmIHhuO1xuICAgIHZhciB5bCA9IFVJTlQxNiAmIHluO1xuICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgbG9nMTAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1sb2cxMCcpO1xuXG4vLyBgTWF0aC5sb2cxMGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGgubG9nMTBcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGxvZzEwOiBsb2cxMFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBsb2cxcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWxvZzFwJyk7XG5cbi8vIGBNYXRoLmxvZzFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5sb2cxcFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHsgbG9nMXA6IGxvZzFwIH0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcblxuLy8gYE1hdGgubG9nMmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGgubG9nMlxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KSB7XG4gICAgcmV0dXJuIGxvZyh4KSAvIExOMjtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtc2lnbicpO1xuXG4vLyBgTWF0aC5zaWduYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5zaWduXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICBzaWduOiBzaWduXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1leHBtMScpO1xuXG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgZXhwID0gTWF0aC5leHA7XG52YXIgRSA9IE1hdGguRTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtc2luaCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xufSk7XG5cbi8vIGBNYXRoLnNpbmhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLnNpbmhcbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCkge1xuICAgIHJldHVybiBhYnMoeCA9ICt4KSA8IDEgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMiA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKEUgLyAyKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWV4cG0xJyk7XG5cbnZhciBleHAgPSBNYXRoLmV4cDtcblxuLy8gYE1hdGgudGFuaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGgudGFuaFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgdGFuaDogZnVuY3Rpb24gdGFuaCh4KSB7XG4gICAgdmFyIGEgPSBleHBtMSh4ID0gK3gpO1xuICAgIHZhciBiID0gZXhwbTEoLXgpO1xuICAgIHJldHVybiBhID09IEluZmluaXR5ID8gMSA6IGIgPT0gSW5maW5pdHkgPyAtMSA6IChhIC0gYikgLyAoZXhwKHgpICsgZXhwKC14KSk7XG4gIH1cbn0pO1xuIiwidmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG5cbi8vIE1hdGhbQEB0b1N0cmluZ1RhZ10gcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYE1hdGgudHJ1bmNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLnRydW5jXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpIHtcbiAgICByZXR1cm4gKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIHRoaXNOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90aGlzLW51bWJlci12YWx1ZScpO1xudmFyIHRyaW0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS50cmltO1xuXG52YXIgTlVNQkVSID0gJ051bWJlcic7XG52YXIgTmF0aXZlTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgTnVtYmVyUHJvdG90eXBlID0gTmF0aXZlTnVtYmVyLnByb3RvdHlwZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGFycmF5U2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgY2hhckNvZGVBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJDb2RlQXQpO1xuXG4vLyBgVG9OdW1lcmljYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9udW1lcmljXG52YXIgdG9OdW1lcmljID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcmltVmFsdWUgPSB0b1ByaW1pdGl2ZSh2YWx1ZSwgJ251bWJlcicpO1xuICByZXR1cm4gdHlwZW9mIHByaW1WYWx1ZSA9PSAnYmlnaW50JyA/IHByaW1WYWx1ZSA6IHRvTnVtYmVyKHByaW1WYWx1ZSk7XG59O1xuXG4vLyBgVG9OdW1iZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b251bWJlclxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCAnbnVtYmVyJyk7XG4gIHZhciBmaXJzdCwgdGhpcmQsIHJhZGl4LCBtYXhDb2RlLCBkaWdpdHMsIGxlbmd0aCwgaW5kZXgsIGNvZGU7XG4gIGlmIChpc1N5bWJvbChpdCkpIHRocm93IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBudW1iZXInKTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSB0cmltKGl0KTtcbiAgICBmaXJzdCA9IGNoYXJDb2RlQXQoaXQsIDApO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGNoYXJDb2RlQXQoaXQsIDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoY2hhckNvZGVBdChpdCwgMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIG9mIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIG9mIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGRpZ2l0cyA9IGFycmF5U2xpY2UoaXQsIDIpO1xuICAgICAgbGVuZ3RoID0gZGlnaXRzLmxlbmd0aDtcbiAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBjb2RlID0gY2hhckNvZGVBdChkaWdpdHMsIGluZGV4KTtcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXG4gICAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpIHJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbi8vIGBOdW1iZXJgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci1jb25zdHJ1Y3RvclxuaWYgKGlzRm9yY2VkKE5VTUJFUiwgIU5hdGl2ZU51bWJlcignIDBvMScpIHx8ICFOYXRpdmVOdW1iZXIoJzBiMScpIHx8IE5hdGl2ZU51bWJlcignKzB4MScpKSkge1xuICB2YXIgTnVtYmVyV3JhcHBlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xuICAgIHZhciBuID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogTmF0aXZlTnVtYmVyKHRvTnVtZXJpYyh2YWx1ZSkpO1xuICAgIHZhciBkdW1teSA9IHRoaXM7XG4gICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgcmV0dXJuIGlzUHJvdG90eXBlT2YoTnVtYmVyUHJvdG90eXBlLCBkdW1teSkgJiYgZmFpbHMoZnVuY3Rpb24gKCkgeyB0aGlzTnVtYmVyVmFsdWUoZHVtbXkpOyB9KVxuICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChPYmplY3QobiksIGR1bW15LCBOdW1iZXJXcmFwcGVyKSA6IG47XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBERVNDUklQVE9SUyA/IGdldE93blByb3BlcnR5TmFtZXMoTmF0aXZlTnVtYmVyKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTMjAxNSAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTMjAxNSBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLE1BWF9TQUZFX0lOVEVHRVIsTUlOX1NBRkVfSU5URUdFUixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixwYXJzZUZsb2F0LHBhcnNlSW50LCcgK1xuICAgIC8vIEVTTmV4dFxuICAgICdmcm9tU3RyaW5nLHJhbmdlJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhc093bihOYXRpdmVOdW1iZXIsIGtleSA9IGtleXNbal0pICYmICFoYXNPd24oTnVtYmVyV3JhcHBlciwga2V5KSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkoTnVtYmVyV3JhcHBlciwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTmF0aXZlTnVtYmVyLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgTnVtYmVyV3JhcHBlci5wcm90b3R5cGUgPSBOdW1iZXJQcm90b3R5cGU7XG4gIE51bWJlclByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE51bWJlcldyYXBwZXI7XG4gIHJlZGVmaW5lKGdsb2JhbCwgTlVNQkVSLCBOdW1iZXJXcmFwcGVyKTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgTnVtYmVyLkVQU0lMT05gIGNvbnN0YW50XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5lcHNpbG9uXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7XG4gIEVQU0lMT046IE1hdGgucG93KDIsIC01Milcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgbnVtYmVySXNGaW5pdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLWlzLWZpbml0ZScpO1xuXG4vLyBgTnVtYmVyLmlzRmluaXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLmlzZmluaXRlXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7IGlzRmluaXRlOiBudW1iZXJJc0Zpbml0ZSB9KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzSW50ZWdyYWxOdW1iZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtaW50ZWdyYWwtbnVtYmVyJyk7XG5cbi8vIGBOdW1iZXIuaXNJbnRlZ2VyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLmlzaW50ZWdlclxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBpc0ludGVnZXI6IGlzSW50ZWdyYWxOdW1iZXJcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBOdW1iZXIuaXNOYU5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIuaXNuYW5cbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlIH0sIHtcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNJbnRlZ3JhbE51bWJlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1pbnRlZ3JhbC1udW1iZXInKTtcblxudmFyIGFicyA9IE1hdGguYWJzO1xuXG4vLyBgTnVtYmVyLmlzU2FmZUludGVnZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIuaXNzYWZlaW50ZWdlclxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcikge1xuICAgIHJldHVybiBpc0ludGVncmFsTnVtYmVyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxRkZGRkZGRkZGRkZGRjtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYCBjb25zdGFudFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIubWF4X3NhZmVfaW50ZWdlclxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBNQVhfU0FGRV9JTlRFR0VSOiAweDFGRkZGRkZGRkZGRkZGXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJgIGNvbnN0YW50XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5taW5fc2FmZV9pbnRlZ2VyXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7XG4gIE1JTl9TQUZFX0lOVEVHRVI6IC0weDFGRkZGRkZGRkZGRkZGXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLXBhcnNlLWZsb2F0Jyk7XG5cbi8vIGBOdW1iZXIucGFyc2VGbG9hdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5wYXJzZUZsb2F0XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbnVtYmVyLXBhcnNlZmxvYXQgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE51bWJlci5wYXJzZUZsb2F0ICE9IHBhcnNlRmxvYXQgfSwge1xuICBwYXJzZUZsb2F0OiBwYXJzZUZsb2F0XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHBhcnNlSW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL251bWJlci1wYXJzZS1pbnQnKTtcblxuLy8gYE51bWJlci5wYXJzZUludGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5wYXJzZWludFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW51bWJlci1wYXJzZWludCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUsIGZvcmNlZDogTnVtYmVyLnBhcnNlSW50ICE9IHBhcnNlSW50IH0sIHtcbiAgcGFyc2VJbnQ6IHBhcnNlSW50XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0aGlzTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGhpcy1udW1iZXItdmFsdWUnKTtcbnZhciAkcmVwZWF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1yZXBlYXQnKTtcbnZhciBsb2cxMCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWxvZzEwJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xudmFyIGlzRmluaXRlID0gZ2xvYmFsLmlzRmluaXRlO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciByb3VuZCA9IE1hdGgucm91bmQ7XG52YXIgdW4kVG9FeHBvbmVudGlhbCA9IHVuY3VycnlUaGlzKDEuMC50b0V4cG9uZW50aWFsKTtcbnZhciByZXBlYXQgPSB1bmN1cnJ5VGhpcygkcmVwZWF0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxuLy8gRWRnZSAxNy1cbnZhciBST1VORFNfUFJPUEVSTFkgPSB1biRUb0V4cG9uZW50aWFsKC02LjllLTExLCA0KSA9PT0gJy02LjkwMDBlLTExJ1xuICAvLyBJRTExLSAmJiBFZGdlIDE0LVxuICAmJiB1biRUb0V4cG9uZW50aWFsKDEuMjU1LCAyKSA9PT0gJzEuMjVlKzAnXG4gIC8vIEZGODYtLCBWOCB+IENocm9tZSA0OS01MFxuICAmJiB1biRUb0V4cG9uZW50aWFsKDEyMzQ1LCAzKSA9PT0gJzEuMjM1ZSs0J1xuICAvLyBGRjg2LSwgVjggfiBDaHJvbWUgNDktNTBcbiAgJiYgdW4kVG9FeHBvbmVudGlhbCgyNSwgMCkgPT09ICczZSsxJztcblxuLy8gSUU4LVxudmFyIFRIUk9XU19PTl9JTkZJTklUWV9GUkFDVElPTiA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdW4kVG9FeHBvbmVudGlhbCgxLCBJbmZpbml0eSk7XG59KSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHVuJFRvRXhwb25lbnRpYWwoMSwgLUluZmluaXR5KTtcbn0pO1xuXG4vLyBTYWZhcmkgPDExICYmIEZGIDw1MFxudmFyIFBST1BFUl9OT05fRklOSVRFX1RISVNfQ0hFQ0sgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB1biRUb0V4cG9uZW50aWFsKEluZmluaXR5LCBJbmZpbml0eSk7XG59KSAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB1biRUb0V4cG9uZW50aWFsKE5hTiwgSW5maW5pdHkpO1xufSk7XG5cbnZhciBGT1JDRUQgPSAhUk9VTkRTX1BST1BFUkxZIHx8ICFUSFJPV1NfT05fSU5GSU5JVFlfRlJBQ1RJT04gfHwgIVBST1BFUl9OT05fRklOSVRFX1RISVNfQ0hFQ0s7XG5cbi8vIGBOdW1iZXIucHJvdG90eXBlLnRvRXhwb25lbnRpYWxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIucHJvdG90eXBlLnRvZXhwb25lbnRpYWxcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICB0b0V4cG9uZW50aWFsOiBmdW5jdGlvbiB0b0V4cG9uZW50aWFsKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIHggPSB0aGlzTnVtYmVyVmFsdWUodGhpcyk7XG4gICAgaWYgKGZyYWN0aW9uRGlnaXRzID09PSB1bmRlZmluZWQpIHJldHVybiB1biRUb0V4cG9uZW50aWFsKHgpO1xuICAgIHZhciBmID0gdG9JbnRlZ2VyT3JJbmZpbml0eShmcmFjdGlvbkRpZ2l0cyk7XG4gICAgaWYgKCFpc0Zpbml0ZSh4KSkgcmV0dXJuIFN0cmluZyh4KTtcbiAgICAvLyBUT0RPOiBFUzIwMTggaW5jcmVhc2VkIHRoZSBtYXhpbXVtIG51bWJlciBvZiBmcmFjdGlvbiBkaWdpdHMgdG8gMTAwLCBuZWVkIHRvIGltcHJvdmUgdGhlIGltcGxlbWVudGF0aW9uXG4gICAgaWYgKGYgPCAwIHx8IGYgPiAyMCkgdGhyb3cgUmFuZ2VFcnJvcignSW5jb3JyZWN0IGZyYWN0aW9uIGRpZ2l0cycpO1xuICAgIGlmIChST1VORFNfUFJPUEVSTFkpIHJldHVybiB1biRUb0V4cG9uZW50aWFsKHgsIGYpO1xuICAgIHZhciBzID0gJyc7XG4gICAgdmFyIG0gPSAnJztcbiAgICB2YXIgZSA9IDA7XG4gICAgdmFyIGMgPSAnJztcbiAgICB2YXIgZCA9ICcnO1xuICAgIGlmICh4IDwgMCkge1xuICAgICAgcyA9ICctJztcbiAgICAgIHggPSAteDtcbiAgICB9XG4gICAgaWYgKHggPT09IDApIHtcbiAgICAgIGUgPSAwO1xuICAgICAgbSA9IHJlcGVhdCgnMCcsIGYgKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGhpcyBibG9jayBpcyBiYXNlZCBvbiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9TaGVldEpTRGV2LzExMDBhZDU2YjlmODU2Yzk1Mjk5ZWQwZTA2OGVlYTA4XG4gICAgICAvLyBUT0RPOiBpbXByb3ZlIGFjY3VyYWN5IHdpdGggYmlnIGZyYWN0aW9uIGRpZ2l0c1xuICAgICAgdmFyIGwgPSBsb2cxMCh4KTtcbiAgICAgIGUgPSBmbG9vcihsKTtcbiAgICAgIHZhciBuID0gMDtcbiAgICAgIHZhciB3ID0gcG93KDEwLCBlIC0gZik7XG4gICAgICBuID0gcm91bmQoeCAvIHcpO1xuICAgICAgaWYgKDIgKiB4ID49ICgyICogbiArIDEpICogdykge1xuICAgICAgICBuICs9IDE7XG4gICAgICB9XG4gICAgICBpZiAobiA+PSBwb3coMTAsIGYgKyAxKSkge1xuICAgICAgICBuIC89IDEwO1xuICAgICAgICBlICs9IDE7XG4gICAgICB9XG4gICAgICBtID0gU3RyaW5nKG4pO1xuICAgIH1cbiAgICBpZiAoZiAhPT0gMCkge1xuICAgICAgbSA9IHN0cmluZ1NsaWNlKG0sIDAsIDEpICsgJy4nICsgc3RyaW5nU2xpY2UobSwgMSk7XG4gICAgfVxuICAgIGlmIChlID09PSAwKSB7XG4gICAgICBjID0gJysnO1xuICAgICAgZCA9ICcwJztcbiAgICB9IGVsc2Uge1xuICAgICAgYyA9IGUgPiAwID8gJysnIDogJy0nO1xuICAgICAgZCA9IFN0cmluZyhhYnMoZSkpO1xuICAgIH1cbiAgICBtICs9ICdlJyArIGMgKyBkO1xuICAgIHJldHVybiBzICsgbTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdGhpc051bWJlclZhbHVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RoaXMtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHJlcGVhdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcmVwZWF0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciByZXBlYXQgPSB1bmN1cnJ5VGhpcygkcmVwZWF0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciB1biRUb0ZpeGVkID0gdW5jdXJyeVRoaXMoMS4wLnRvRml4ZWQpO1xuXG52YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykge1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xuXG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKGRhdGEsIG4sIGMpIHtcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2luZGV4IDwgNikge1xuICAgIGMyICs9IG4gKiBkYXRhW2luZGV4XTtcbiAgICBkYXRhW2luZGV4XSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xuXG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKGRhdGEsIG4pIHtcbiAgdmFyIGluZGV4ID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pbmRleCA+PSAwKSB7XG4gICAgYyArPSBkYXRhW2luZGV4XTtcbiAgICBkYXRhW2luZGV4XSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcblxudmFyIGRhdGFUb1N0cmluZyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHZhciBpbmRleCA9IDY7XG4gIHZhciBzID0gJyc7XG4gIHdoaWxlICgtLWluZGV4ID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaW5kZXggPT09IDAgfHwgZGF0YVtpbmRleF0gIT09IDApIHtcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaW5kZXhdKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0KCcwJywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHVuJFRvRml4ZWQoMC4wMDAwOCwgMykgIT09ICcwLjAwMCcgfHxcbiAgICB1biRUb0ZpeGVkKDAuOSwgMCkgIT09ICcxJyB8fFxuICAgIHVuJFRvRml4ZWQoMS4yNTUsIDIpICE9PSAnMS4yNScgfHxcbiAgICB1biRUb0ZpeGVkKDEwMDAwMDAwMDAwMDAwMDAxMjguMCwgMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4Jztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gIHVuJFRvRml4ZWQoe30pO1xufSk7XG5cbi8vIGBOdW1iZXIucHJvdG90eXBlLnRvRml4ZWRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIucHJvdG90eXBlLnRvZml4ZWRcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIG51bWJlciA9IHRoaXNOdW1iZXJWYWx1ZSh0aGlzKTtcbiAgICB2YXIgZnJhY3REaWdpdHMgPSB0b0ludGVnZXJPckluZmluaXR5KGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgZGF0YSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcbiAgICB2YXIgc2lnbiA9ICcnO1xuICAgIHZhciByZXN1bHQgPSAnMCc7XG4gICAgdmFyIGUsIHosIGosIGs7XG5cbiAgICAvLyBUT0RPOiBFUzIwMTggaW5jcmVhc2VkIHRoZSBtYXhpbXVtIG51bWJlciBvZiBmcmFjdGlvbiBkaWdpdHMgdG8gMTAwLCBuZWVkIHRvIGltcHJvdmUgdGhlIGltcGxlbWVudGF0aW9uXG4gICAgaWYgKGZyYWN0RGlnaXRzIDwgMCB8fCBmcmFjdERpZ2l0cyA+IDIwKSB0aHJvdyBSYW5nZUVycm9yKCdJbmNvcnJlY3QgZnJhY3Rpb24gZGlnaXRzJyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICBpZiAobnVtYmVyICE9IG51bWJlcikgcmV0dXJuICdOYU4nO1xuICAgIGlmIChudW1iZXIgPD0gLTFlMjEgfHwgbnVtYmVyID49IDFlMjEpIHJldHVybiBTdHJpbmcobnVtYmVyKTtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgc2lnbiA9ICctJztcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyhudW1iZXIgKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8gbnVtYmVyICogcG93KDIsIC1lLCAxKSA6IG51bWJlciAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoZGF0YSwgMCwgeik7XG4gICAgICAgIGogPSBmcmFjdERpZ2l0cztcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KGRhdGEsIDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKGRhdGEsIDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKGRhdGEsIDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIDEsIDEpO1xuICAgICAgICBkaXZpZGUoZGF0YSwgMik7XG4gICAgICAgIHJlc3VsdCA9IGRhdGFUb1N0cmluZyhkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIDAsIHopO1xuICAgICAgICBtdWx0aXBseShkYXRhLCAxIDw8IC1lLCAwKTtcbiAgICAgICAgcmVzdWx0ID0gZGF0YVRvU3RyaW5nKGRhdGEpICsgcmVwZWF0KCcwJywgZnJhY3REaWdpdHMpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZnJhY3REaWdpdHMgPiAwKSB7XG4gICAgICBrID0gcmVzdWx0Lmxlbmd0aDtcbiAgICAgIHJlc3VsdCA9IHNpZ24gKyAoayA8PSBmcmFjdERpZ2l0c1xuICAgICAgICA/ICcwLicgKyByZXBlYXQoJzAnLCBmcmFjdERpZ2l0cyAtIGspICsgcmVzdWx0XG4gICAgICAgIDogc3RyaW5nU2xpY2UocmVzdWx0LCAwLCBrIC0gZnJhY3REaWdpdHMpICsgJy4nICsgc3RyaW5nU2xpY2UocmVzdWx0LCBrIC0gZnJhY3REaWdpdHMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gc2lnbiArIHJlc3VsdDtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0aGlzTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGhpcy1udW1iZXItdmFsdWUnKTtcblxudmFyIHVuJFRvUHJlY2lzaW9uID0gdW5jdXJyeVRoaXMoMS4wLnRvUHJlY2lzaW9uKTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU3LVxuICByZXR1cm4gdW4kVG9QcmVjaXNpb24oMSwgdW5kZWZpbmVkKSAhPT0gJzEnO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgdW4kVG9QcmVjaXNpb24oe30pO1xufSk7XG5cbi8vIGBOdW1iZXIucHJvdG90eXBlLnRvUHJlY2lzaW9uYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLnByb3RvdHlwZS50b3ByZWNpc2lvblxuJCh7IHRhcmdldDogJ051bWJlcicsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWRcbiAgICAgID8gdW4kVG9QcmVjaXNpb24odGhpc051bWJlclZhbHVlKHRoaXMpKVxuICAgICAgOiB1biRUb1ByZWNpc2lvbih0aGlzTnVtYmVyVmFsdWUodGhpcyksIHByZWNpc2lvbik7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1hc3NpZ24nKTtcblxuLy8gYE9iamVjdC5hc3NpZ25gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWFzc2lnbiAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogT2JqZWN0LmFzc2lnbiAhPT0gYXNzaWduIH0sIHtcbiAgYXNzaWduOiBhc3NpZ25cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xuXG4vLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBjcmVhdGU6IGNyZWF0ZVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZPUkNFRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29ycy1mb3JjZWQnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfX2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfX1xuaWYgKERFU0NSSVBUT1JTKSB7XG4gICQoeyB0YXJnZXQ6ICdPYmplY3QnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAgIF9fZGVmaW5lR2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IGdldDogYUNhbGxhYmxlKGdldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpLmY7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnRpZXMgLS0gc2FmZVxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgIT09IGRlZmluZVByb3BlcnRpZXMsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGRlZmluZVByb3BlcnRpZXM6IGRlZmluZVByb3BlcnRpZXNcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBPYmplY3QuZGVmaW5lUHJvcGVydHkgIT09IGRlZmluZVByb3BlcnR5LCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBkZWZpbmVQcm9wZXJ0eTogZGVmaW5lUHJvcGVydHlcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBGT1JDRUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3RvdHlwZS1hY2Nlc3NvcnMtZm9yY2VkJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX19gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX19cbmlmIChERVNDUklQVE9SUykge1xuICAkKHsgdGFyZ2V0OiAnT2JqZWN0JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgICBfX2RlZmluZVNldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcikge1xuICAgICAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZih0b09iamVjdCh0aGlzKSwgUCwgeyBzZXQ6IGFDYWxsYWJsZShzZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gICAgfVxuICB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRlbnRyaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1hcnJheScpLmVudHJpZXM7XG5cbi8vIGBPYmplY3QuZW50cmllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5lbnRyaWVzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoTykge1xuICAgIHJldHVybiAkZW50cmllcyhPKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgb25GcmVlemUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5vbkZyZWV6ZTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1mcmVlemUgLS0gc2FmZVxudmFyICRmcmVlemUgPSBPYmplY3QuZnJlZXplO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7ICRmcmVlemUoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmZyZWV6ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5mcmVlemVcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMsIHNoYW06ICFGUkVFWklORyB9LCB7XG4gIGZyZWV6ZTogZnVuY3Rpb24gZnJlZXplKGl0KSB7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShvbkZyZWV6ZShpdCkpIDogaXQ7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIGBPYmplY3QuZnJvbUVudHJpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LWZyb20tZW50cmllc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBmcm9tRW50cmllczogZnVuY3Rpb24gZnJvbUVudHJpZXMoaXRlcmFibGUpIHtcbiAgICB2YXIgb2JqID0ge307XG4gICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KG9iaiwgaywgdik7XG4gICAgfSwgeyBBU19FTlRSSUVTOiB0cnVlIH0pO1xuICAgIHJldHVybiBvYmo7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcigxKTsgfSk7XG52YXIgRk9SQ0VEID0gIURFU0NSSVBUT1JTIHx8IEZBSUxTX09OX1BSSU1JVElWRVM7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VELCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0luZGV4ZWRPYmplY3QoaXQpLCBrZXkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGtleSwgZGVzY3JpcHRvcjtcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpbmRleCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBrZXkgPSBrZXlzW2luZGV4KytdKTtcbiAgICAgIGlmIChkZXNjcmlwdG9yICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwnKS5mO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gIU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiBnZXRPd25Qcm9wZXJ0eU5hbWVzXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbmF0aXZlR2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVHZXRQcm90b3R5cGVPZigxKTsgfSk7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2ZcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMsIHNoYW06ICFDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgfSwge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gbmF0aXZlR2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG5cbi8vIGBPYmplY3QuaGFzT3duYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWFjY2Vzc2libGUtb2JqZWN0LWhhc293bnByb3BlcnR5XG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGhhc093bjogaGFzT3duXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRpc0V4dGVuc2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLWV4dGVuc2libGUnKTtcblxuLy8gYE9iamVjdC5pc0V4dGVuc2libGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuaXNleHRlbnNpYmxlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzZXh0ZW5zaWJsZSAtLSBzYWZlXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBPYmplY3QuaXNFeHRlbnNpYmxlICE9PSAkaXNFeHRlbnNpYmxlIH0sIHtcbiAgaXNFeHRlbnNpYmxlOiAkaXNFeHRlbnNpYmxlXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIEFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItbm9uLWV4dGVuc2libGUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pc2Zyb3plbiAtLSBzYWZlXG52YXIgJGlzRnJvemVuID0gT2JqZWN0LmlzRnJvemVuO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7ICRpc0Zyb3plbigxKTsgfSk7XG5cbi8vIGBPYmplY3QuaXNGcm96ZW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuaXNmcm96ZW5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfHwgQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFIH0sIHtcbiAgaXNGcm96ZW46IGZ1bmN0aW9uIGlzRnJvemVuKGl0KSB7XG4gICAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0cnVlO1xuICAgIGlmIChBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUgJiYgY2xhc3NvZihpdCkgPT0gJ0FycmF5QnVmZmVyJykgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5vbi1leHRlbnNpYmxlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtaXNzZWFsZWQgLS0gc2FmZVxudmFyICRpc1NlYWxlZCA9IE9iamVjdC5pc1NlYWxlZDtcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyAkaXNTZWFsZWQoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmlzU2VhbGVkYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0Lmlzc2VhbGVkXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTIHx8IEFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSB9LCB7XG4gIGlzU2VhbGVkOiBmdW5jdGlvbiBpc1NlYWxlZChpdCkge1xuICAgIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFICYmIGNsYXNzb2YoaXQpID09ICdBcnJheUJ1ZmZlcicpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2U7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2FtZS12YWx1ZScpO1xuXG4vLyBgT2JqZWN0LmlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmlzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzOiBpc1xufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBuYXRpdmVLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUtleXMoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUyB9LCB7XG4gIGtleXM6IGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyh0b09iamVjdChpdCkpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgRk9SQ0VEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm90b3R5cGUtYWNjZXNzb3JzLWZvcmNlZCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwR2V0dGVyX19gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLl9fbG9va3VwR2V0dGVyX19cbmlmIChERVNDUklQVE9SUykge1xuICAkKHsgdGFyZ2V0OiAnT2JqZWN0JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgICBfX2xvb2t1cEdldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cEdldHRlcl9fKFApIHtcbiAgICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgICB2YXIga2V5ID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgICAgIHZhciBkZXNjO1xuICAgICAgZG8ge1xuICAgICAgICBpZiAoZGVzYyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBrZXkpKSByZXR1cm4gZGVzYy5nZXQ7XG4gICAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICAgIH1cbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZPUkNFRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29ycy1mb3JjZWQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cFNldHRlcl9fYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cFNldHRlcl9fXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgJCh7IHRhcmdldDogJ09iamVjdCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gICAgX19sb29rdXBTZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBTZXR0ZXJfXyhQKSB7XG4gICAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIGtleSA9IHRvUHJvcGVydHlLZXkoUCk7XG4gICAgICB2YXIgZGVzYztcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKGRlc2MgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywga2V5KSkgcmV0dXJuIGRlc2Muc2V0O1xuICAgICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgICB9XG4gIH0pO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgb25GcmVlemUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5vbkZyZWV6ZTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtcHJldmVudGV4dGVuc2lvbnMgLS0gc2FmZVxudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyAkcHJldmVudEV4dGVuc2lvbnMoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByZXZlbnRleHRlbnNpb25zXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTLCBzaGFtOiAhRlJFRVpJTkcgfSwge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhvbkZyZWV6ZShpdCkpIDogaXQ7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgb25GcmVlemUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5vbkZyZWV6ZTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qtc2VhbCAtLSBzYWZlXG52YXIgJHNlYWwgPSBPYmplY3Quc2VhbDtcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyAkc2VhbCgxKTsgfSk7XG5cbi8vIGBPYmplY3Quc2VhbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5zZWFsXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTLCBzaGFtOiAhRlJFRVpJTkcgfSwge1xuICBzZWFsOiBmdW5jdGlvbiBzZWFsKGl0KSB7XG4gICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG9uRnJlZXplKGl0KSkgOiBpdDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnNldHByb3RvdHlwZW9mXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIHNldFByb3RvdHlwZU9mOiBzZXRQcm90b3R5cGVPZlxufSk7XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZycpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbmlmICghVE9fU1RSSU5HX1RBR19TVVBQT1JUKSB7XG4gIHJlZGVmaW5lKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIHRvU3RyaW5nLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLWFycmF5JykudmFsdWVzO1xuXG4vLyBgT2JqZWN0LnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC52YWx1ZXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoTykge1xuICAgIHJldHVybiAkdmFsdWVzKE8pO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL251bWJlci1wYXJzZS1mbG9hdCcpO1xuXG4vLyBgcGFyc2VGbG9hdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXBhcnNlZmxvYXQtc3RyaW5nXG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQgfSwge1xuICBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLXBhcnNlLWludCcpO1xuXG4vLyBgcGFyc2VJbnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wYXJzZWludC1zdHJpbmctcmFkaXhcbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogcGFyc2VJbnQgIT0gJHBhcnNlSW50IH0sIHtcbiAgcGFyc2VJbnQ6ICRwYXJzZUludFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BlcmZvcm0nKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYFByb21pc2UuYWxsU2V0dGxlZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UuYWxsc2V0dGxlZFxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBzdGF0OiB0cnVlIH0sIHtcbiAgYWxsU2V0dGxlZDogZnVuY3Rpb24gYWxsU2V0dGxlZChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwcm9taXNlUmVzb2x2ZSA9IGFDYWxsYWJsZShDLnJlc29sdmUpO1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBjYWxsKHByb21pc2VSZXNvbHZlLCBDLCBwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzW2luZGV4XSA9IHsgc3RhdHVzOiAnZnVsZmlsbGVkJywgdmFsdWU6IHZhbHVlIH07XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB7IHN0YXR1czogJ3JlamVjdGVkJywgcmVhc29uOiBlcnJvciB9O1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbnZhciBQUk9NSVNFX0FOWV9FUlJPUiA9ICdObyBvbmUgcHJvbWlzZSByZXNvbHZlZCc7XG5cbi8vIGBQcm9taXNlLmFueWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UuYW55XG4kKHsgdGFyZ2V0OiAnUHJvbWlzZScsIHN0YXQ6IHRydWUgfSwge1xuICBhbnk6IGZ1bmN0aW9uIGFueShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgQWdncmVnYXRlRXJyb3IgPSBnZXRCdWlsdEluKCdBZ2dyZWdhdGVFcnJvcicpO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZihDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHByb21pc2VSZXNvbHZlID0gYUNhbGxhYmxlKEMucmVzb2x2ZSk7XG4gICAgICB2YXIgZXJyb3JzID0gW107XG4gICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIHZhciBhbHJlYWR5UmVzb2x2ZWQgPSBmYWxzZTtcbiAgICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGNvdW50ZXIrKztcbiAgICAgICAgdmFyIGFscmVhZHlSZWplY3RlZCA9IGZhbHNlO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgY2FsbChwcm9taXNlUmVzb2x2ZSwgQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeVJlamVjdGVkIHx8IGFscmVhZHlSZXNvbHZlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlSZXNvbHZlZCA9IHRydWU7XG4gICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIGlmIChhbHJlYWR5UmVqZWN0ZWQgfHwgYWxyZWFkeVJlc29sdmVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeVJlamVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICBlcnJvcnNbaW5kZXhdID0gZXJyb3I7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVqZWN0KG5ldyBBZ2dyZWdhdGVFcnJvcihlcnJvcnMsIFBST01JU0VfQU5ZX0VSUk9SKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZWplY3QobmV3IEFnZ3JlZ2F0ZUVycm9yKGVycm9ycywgUFJPTUlTRV9BTllfRVJST1IpKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIE5hdGl2ZVByb21pc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3InKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcblxuLy8gU2FmYXJpIGJ1ZyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjAwODI5XG52YXIgTk9OX0dFTkVSSUMgPSAhIU5hdGl2ZVByb21pc2UgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9uby10aGVuYWJsZSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICBOYXRpdmVQcm9taXNlLnByb3RvdHlwZVsnZmluYWxseSddLmNhbGwoeyB0aGVuOiBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0gfSwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBgUHJvbWlzZS5wcm90b3R5cGUuZmluYWxseWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLmZpbmFsbHlcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogTk9OX0dFTkVSSUMgfSwge1xuICAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBnZXRCdWlsdEluKCdQcm9taXNlJykpO1xuICAgIHZhciBpc0Z1bmN0aW9uID0gaXNDYWxsYWJsZShvbkZpbmFsbHkpO1xuICAgIHJldHVybiB0aGlzLnRoZW4oXG4gICAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgICAgfSA6IG9uRmluYWxseSxcbiAgICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICAgIH0gOiBvbkZpbmFsbHlcbiAgICApO1xuICB9XG59KTtcblxuLy8gbWFrZXMgc3VyZSB0aGF0IG5hdGl2ZSBwcm9taXNlLWJhc2VkIEFQSXMgYFByb21pc2UjZmluYWxseWAgcHJvcGVybHkgd29ya3Mgd2l0aCBwYXRjaGVkIGBQcm9taXNlI3RoZW5gXG5pZiAoIUlTX1BVUkUgJiYgaXNDYWxsYWJsZShOYXRpdmVQcm9taXNlKSkge1xuICB2YXIgbWV0aG9kID0gZ2V0QnVpbHRJbignUHJvbWlzZScpLnByb3RvdHlwZVsnZmluYWxseSddO1xuICBpZiAoTmF0aXZlUHJvbWlzZS5wcm90b3R5cGVbJ2ZpbmFsbHknXSAhPT0gbWV0aG9kKSB7XG4gICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZS5wcm90b3R5cGUsICdmaW5hbGx5JywgbWV0aG9kLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgTmF0aXZlUHJvbWlzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3RvcicpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWljcm90YXNrJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgaG9zdFJlcG9ydEVycm9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ob3N0LXJlcG9ydC1lcnJvcnMnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgUXVldWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcXVldWUnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfQlJPV1NFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtYnJvd3NlcicpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihQUk9NSVNFKTtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihQUk9NSVNFKTtcbnZhciBOYXRpdmVQcm9taXNlUHJvdG90eXBlID0gTmF0aXZlUHJvbWlzZSAmJiBOYXRpdmVQcm9taXNlLnByb3RvdHlwZTtcbnZhciBQcm9taXNlQ29uc3RydWN0b3IgPSBOYXRpdmVQcm9taXNlO1xudmFyIFByb21pc2VQcm90b3R5cGUgPSBOYXRpdmVQcm9taXNlUHJvdG90eXBlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcbnZhciBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eTtcblxudmFyIERJU1BBVENIX0VWRU5UID0gISEoZG9jdW1lbnQgJiYgZG9jdW1lbnQuY3JlYXRlRXZlbnQgJiYgZ2xvYmFsLmRpc3BhdGNoRXZlbnQpO1xudmFyIE5BVElWRV9SRUpFQ1RJT05fRVZFTlQgPSBpc0NhbGxhYmxlKGdsb2JhbC5Qcm9taXNlUmVqZWN0aW9uRXZlbnQpO1xudmFyIFVOSEFORExFRF9SRUpFQ1RJT04gPSAndW5oYW5kbGVkcmVqZWN0aW9uJztcbnZhciBSRUpFQ1RJT05fSEFORExFRCA9ICdyZWplY3Rpb25oYW5kbGVkJztcbnZhciBQRU5ESU5HID0gMDtcbnZhciBGVUxGSUxMRUQgPSAxO1xudmFyIFJFSkVDVEVEID0gMjtcbnZhciBIQU5ETEVEID0gMTtcbnZhciBVTkhBTkRMRUQgPSAyO1xudmFyIFNVQkNMQVNTSU5HID0gZmFsc2U7XG5cbnZhciBJbnRlcm5hbCwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFByb21pc2VXcmFwcGVyLCBuYXRpdmVUaGVuO1xuXG52YXIgRk9SQ0VEID0gaXNGb3JjZWQoUFJPTUlTRSwgZnVuY3Rpb24gKCkge1xuICB2YXIgUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UgPSBpbnNwZWN0U291cmNlKFByb21pc2VDb25zdHJ1Y3Rvcik7XG4gIHZhciBHTE9CQUxfQ09SRV9KU19QUk9NSVNFID0gUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UgIT09IFN0cmluZyhQcm9taXNlQ29uc3RydWN0b3IpO1xuICAvLyBWOCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAvLyBXZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICBpZiAoIUdMT0JBTF9DT1JFX0pTX1BST01JU0UgJiYgVjhfVkVSU0lPTiA9PT0gNjYpIHJldHVybiB0cnVlO1xuICAvLyBXZSBuZWVkIFByb21pc2UjZmluYWxseSBpbiB0aGUgcHVyZSB2ZXJzaW9uIGZvciBwcmV2ZW50aW5nIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgaWYgKElTX1BVUkUgJiYgIVByb21pc2VQcm90b3R5cGVbJ2ZpbmFsbHknXSkgcmV0dXJuIHRydWU7XG4gIC8vIFdlIGNhbid0IHVzZSBAQHNwZWNpZXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG4gIGlmIChWOF9WRVJTSU9OID49IDUxICYmIC9uYXRpdmUgY29kZS8udGVzdChQUk9NSVNFX0NPTlNUUlVDVE9SX1NPVVJDRSkpIHJldHVybiBmYWxzZTtcbiAgLy8gRGV0ZWN0IGNvcnJlY3RuZXNzIG9mIHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZUNvbnN0cnVjdG9yKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUoMSk7IH0pO1xuICB2YXIgRmFrZVByb21pc2UgPSBmdW5jdGlvbiAoZXhlYykge1xuICAgIGV4ZWMoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICB9O1xuICB2YXIgY29uc3RydWN0b3IgPSBwcm9taXNlLmNvbnN0cnVjdG9yID0ge307XG4gIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gRmFrZVByb21pc2U7XG4gIFNVQkNMQVNTSU5HID0gcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZTtcbiAgaWYgKCFTVUJDTEFTU0lORykgcmV0dXJuIHRydWU7XG4gIC8vIFVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgcmV0dXJuICFHTE9CQUxfQ09SRV9KU19QUk9NSVNFICYmIElTX0JST1dTRVIgJiYgIU5BVElWRV9SRUpFQ1RJT05fRVZFTlQ7XG59KTtcblxudmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSBGT1JDRUQgfHwgIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgUHJvbWlzZUNvbnN0cnVjdG9yLmFsbChpdGVyYWJsZSlbJ2NhdGNoJ10oZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiBpc0NhbGxhYmxlKHRoZW4gPSBpdC50aGVuKSA/IHRoZW4gOiBmYWxzZTtcbn07XG5cbnZhciBjYWxsUmVhY3Rpb24gPSBmdW5jdGlvbiAocmVhY3Rpb24sIHN0YXRlKSB7XG4gIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICB2YXIgb2sgPSBzdGF0ZS5zdGF0ZSA9PSBGVUxGSUxMRUQ7XG4gIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgdmFyIHJlc3VsdCwgdGhlbiwgZXhpdGVkO1xuICB0cnkge1xuICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICBpZiAoIW9rKSB7XG4gICAgICAgIGlmIChzdGF0ZS5yZWplY3Rpb24gPT09IFVOSEFORExFRCkgb25IYW5kbGVVbmhhbmRsZWQoc3RhdGUpO1xuICAgICAgICBzdGF0ZS5yZWplY3Rpb24gPSBIQU5ETEVEO1xuICAgICAgfVxuICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gY2FuIHRocm93XG4gICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICBjYWxsKHRoZW4sIHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgIHJlamVjdChlcnJvcik7XG4gIH1cbn07XG5cbnZhciBub3RpZnkgPSBmdW5jdGlvbiAoc3RhdGUsIGlzUmVqZWN0KSB7XG4gIGlmIChzdGF0ZS5ub3RpZmllZCkgcmV0dXJuO1xuICBzdGF0ZS5ub3RpZmllZCA9IHRydWU7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlYWN0aW9ucyA9IHN0YXRlLnJlYWN0aW9ucztcbiAgICB2YXIgcmVhY3Rpb247XG4gICAgd2hpbGUgKHJlYWN0aW9uID0gcmVhY3Rpb25zLmdldCgpKSB7XG4gICAgICBjYWxsUmVhY3Rpb24ocmVhY3Rpb24sIHN0YXRlKTtcbiAgICB9XG4gICAgc3RhdGUubm90aWZpZWQgPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXN0YXRlLnJlamVjdGlvbikgb25VbmhhbmRsZWQoc3RhdGUpO1xuICB9KTtcbn07XG5cbnZhciBkaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24gKG5hbWUsIHByb21pc2UsIHJlYXNvbikge1xuICB2YXIgZXZlbnQsIGhhbmRsZXI7XG4gIGlmIChESVNQQVRDSF9FVkVOVCkge1xuICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgZXZlbnQucHJvbWlzZSA9IHByb21pc2U7XG4gICAgZXZlbnQucmVhc29uID0gcmVhc29uO1xuICAgIGV2ZW50LmluaXRFdmVudChuYW1lLCBmYWxzZSwgdHJ1ZSk7XG4gICAgZ2xvYmFsLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICB9IGVsc2UgZXZlbnQgPSB7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcmVhc29uIH07XG4gIGlmICghTkFUSVZFX1JFSkVDVElPTl9FVkVOVCAmJiAoaGFuZGxlciA9IGdsb2JhbFsnb24nICsgbmFtZV0pKSBoYW5kbGVyKGV2ZW50KTtcbiAgZWxzZSBpZiAobmFtZSA9PT0gVU5IQU5ETEVEX1JFSkVDVElPTikgaG9zdFJlcG9ydEVycm9ycygnVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgcmVhc29uKTtcbn07XG5cbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICBjYWxsKHRhc2ssIGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gc3RhdGUuZmFjYWRlO1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBJU19VTkhBTkRMRUQgPSBpc1VuaGFuZGxlZChzdGF0ZSk7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoSVNfVU5IQU5ETEVEKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKElTX05PREUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGRpc3BhdGNoRXZlbnQoVU5IQU5ETEVEX1JFSkVDVElPTiwgcHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgc3RhdGUucmVqZWN0aW9uID0gSVNfTk9ERSB8fCBpc1VuaGFuZGxlZChzdGF0ZSkgPyBVTkhBTkRMRUQgOiBIQU5ETEVEO1xuICAgICAgaWYgKHJlc3VsdC5lcnJvcikgdGhyb3cgcmVzdWx0LnZhbHVlO1xuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLnJlamVjdGlvbiAhPT0gSEFORExFRCAmJiAhc3RhdGUucGFyZW50O1xufTtcblxudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIGNhbGwodGFzaywgZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBzdGF0ZS5mYWNhZGU7XG4gICAgaWYgKElTX05PREUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFJFSkVDVElPTl9IQU5ETEVELCBwcm9taXNlLCBzdGF0ZS52YWx1ZSk7XG4gIH0pO1xufTtcblxudmFyIGJpbmQgPSBmdW5jdGlvbiAoZm4sIHN0YXRlLCB1bndyYXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGZuKHN0YXRlLCB2YWx1ZSwgdW53cmFwKTtcbiAgfTtcbn07XG5cbnZhciBpbnRlcm5hbFJlamVjdCA9IGZ1bmN0aW9uIChzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gIHN0YXRlLnN0YXRlID0gUkVKRUNURUQ7XG4gIG5vdGlmeShzdGF0ZSwgdHJ1ZSk7XG59O1xuXG52YXIgaW50ZXJuYWxSZXNvbHZlID0gZnVuY3Rpb24gKHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgdHJ5IHtcbiAgICBpZiAoc3RhdGUuZmFjYWRlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgdmFyIHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKTtcbiAgICBpZiAodGhlbikge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IGRvbmU6IGZhbHNlIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2FsbCh0aGVuLCB2YWx1ZSxcbiAgICAgICAgICAgIGJpbmQoaW50ZXJuYWxSZXNvbHZlLCB3cmFwcGVyLCBzdGF0ZSksXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVqZWN0LCB3cmFwcGVyLCBzdGF0ZSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGludGVybmFsUmVqZWN0KHdyYXBwZXIsIGVycm9yLCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgc3RhdGUuc3RhdGUgPSBGVUxGSUxMRUQ7XG4gICAgICBub3RpZnkoc3RhdGUsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW50ZXJuYWxSZWplY3QoeyBkb25lOiBmYWxzZSB9LCBlcnJvciwgc3RhdGUpO1xuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKEZPUkNFRCkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICBQcm9taXNlQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCBQcm9taXNlUHJvdG90eXBlKTtcbiAgICBhQ2FsbGFibGUoZXhlY3V0b3IpO1xuICAgIGNhbGwoSW50ZXJuYWwsIHRoaXMpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBzdGF0ZSksIGJpbmQoaW50ZXJuYWxSZWplY3QsIHN0YXRlKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGludGVybmFsUmVqZWN0KHN0YXRlLCBlcnJvcik7XG4gICAgfVxuICB9O1xuICBQcm9taXNlUHJvdG90eXBlID0gUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICB0eXBlOiBQUk9NSVNFLFxuICAgICAgZG9uZTogZmFsc2UsXG4gICAgICBub3RpZmllZDogZmFsc2UsXG4gICAgICBwYXJlbnQ6IGZhbHNlLFxuICAgICAgcmVhY3Rpb25zOiBuZXcgUXVldWUoKSxcbiAgICAgIHJlamVjdGlvbjogZmFsc2UsXG4gICAgICBzdGF0ZTogUEVORElORyxcbiAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoUHJvbWlzZVByb3RvdHlwZSwge1xuICAgIC8vIGBQcm9taXNlLnByb3RvdHlwZS50aGVuYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLnRoZW5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9uby10aGVuYWJsZSAtLSBzYWZlXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUodGhpcyk7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgUHJvbWlzZUNvbnN0cnVjdG9yKSk7XG4gICAgICBzdGF0ZS5wYXJlbnQgPSB0cnVlO1xuICAgICAgcmVhY3Rpb24ub2sgPSBpc0NhbGxhYmxlKG9uRnVsZmlsbGVkKSA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSBpc0NhbGxhYmxlKG9uUmVqZWN0ZWQpICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBJU19OT0RFID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoc3RhdGUuc3RhdGUgPT0gUEVORElORykgc3RhdGUucmVhY3Rpb25zLmFkZChyZWFjdGlvbik7XG4gICAgICBlbHNlIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNhbGxSZWFjdGlvbihyZWFjdGlvbiwgc3RhdGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIGBQcm9taXNlLnByb3RvdHlwZS5jYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS5jYXRjaFxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHByb21pc2UpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gYmluZChpbnRlcm5hbFJlc29sdmUsIHN0YXRlKTtcbiAgICB0aGlzLnJlamVjdCA9IGJpbmQoaW50ZXJuYWxSZWplY3QsIHN0YXRlKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gUHJvbWlzZUNvbnN0cnVjdG9yIHx8IEMgPT09IFByb21pc2VXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG5cbiAgaWYgKCFJU19QVVJFICYmIGlzQ2FsbGFibGUoTmF0aXZlUHJvbWlzZSkgJiYgTmF0aXZlUHJvbWlzZVByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkge1xuICAgIG5hdGl2ZVRoZW4gPSBOYXRpdmVQcm9taXNlUHJvdG90eXBlLnRoZW47XG5cbiAgICBpZiAoIVNVQkNMQVNTSU5HKSB7XG4gICAgICAvLyBtYWtlIGBQcm9taXNlI3RoZW5gIHJldHVybiBhIHBvbHlmaWxsZWQgYFByb21pc2VgIGZvciBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzXG4gICAgICByZWRlZmluZShOYXRpdmVQcm9taXNlUHJvdG90eXBlLCAndGhlbicsIGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VDb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgY2FsbChuYXRpdmVUaGVuLCB0aGF0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKTtcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NDBcbiAgICAgIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xuXG4gICAgICAvLyBtYWtlcyBzdXJlIHRoYXQgbmF0aXZlIHByb21pc2UtYmFzZWQgQVBJcyBgUHJvbWlzZSNjYXRjaGAgcHJvcGVybHkgd29ya3Mgd2l0aCBwYXRjaGVkIGBQcm9taXNlI3RoZW5gXG4gICAgICByZWRlZmluZShOYXRpdmVQcm9taXNlUHJvdG90eXBlLCAnY2F0Y2gnLCBQcm9taXNlUHJvdG90eXBlWydjYXRjaCddLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICAvLyBtYWtlIGAuY29uc3RydWN0b3IgPT09IFByb21pc2VgIHdvcmsgZm9yIG5hdGl2ZSBwcm9taXNlLWJhc2VkIEFQSXNcbiAgICB0cnkge1xuICAgICAgZGVsZXRlIE5hdGl2ZVByb21pc2VQcm90b3R5cGUuY29uc3RydWN0b3I7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG4gICAgLy8gbWFrZSBgaW5zdGFuY2VvZiBQcm9taXNlYCB3b3JrIGZvciBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzXG4gICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICBzZXRQcm90b3R5cGVPZihOYXRpdmVQcm9taXNlUHJvdG90eXBlLCBQcm9taXNlUHJvdG90eXBlKTtcbiAgICB9XG4gIH1cbn1cblxuJCh7IGdsb2JhbDogdHJ1ZSwgd3JhcDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBQcm9taXNlOiBQcm9taXNlQ29uc3RydWN0b3Jcbn0pO1xuXG5zZXRUb1N0cmluZ1RhZyhQcm9taXNlQ29uc3RydWN0b3IsIFBST01JU0UsIGZhbHNlLCB0cnVlKTtcbnNldFNwZWNpZXMoUFJPTUlTRSk7XG5cblByb21pc2VXcmFwcGVyID0gZ2V0QnVpbHRJbihQUk9NSVNFKTtcblxuLy8gc3RhdGljc1xuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBgUHJvbWlzZS5yZWplY3RgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucmVqZWN0XG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIGNhbGwoY2FwYWJpbGl0eS5yZWplY3QsIHVuZGVmaW5lZCwgcik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG5cbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB8fCBGT1JDRUQgfSwge1xuICAvLyBgUHJvbWlzZS5yZXNvbHZlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJlc29sdmVcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKElTX1BVUkUgJiYgdGhpcyA9PT0gUHJvbWlzZVdyYXBwZXIgPyBQcm9taXNlQ29uc3RydWN0b3IgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG5cbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogSU5DT1JSRUNUX0lURVJBVElPTiB9LCB7XG4gIC8vIGBQcm9taXNlLmFsbGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5hbGxcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFDYWxsYWJsZShDLnJlc29sdmUpO1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBjYWxsKCRwcm9taXNlUmVzb2x2ZSwgQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyBgUHJvbWlzZS5yYWNlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJhY2VcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUNhbGxhYmxlKEMucmVzb2x2ZSk7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBjYWxsKCRwcm9taXNlUmVzb2x2ZSwgQywgcHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZ1bmN0aW9uQXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxudmFyIE9QVElPTkFMX0FSR1VNRU5UU19MSVNUID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXJlZmxlY3QgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgUmVmbGVjdC5hcHBseShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbi8vIGBSZWZsZWN0LmFwcGx5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5hcHBseVxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE9QVElPTkFMX0FSR1VNRU5UU19MSVNUIH0sIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uQXBwbHkoYUNhbGxhYmxlKHRhcmdldCksIHRoaXNBcmd1bWVudCwgYW5PYmplY3QoYXJndW1lbnRzTGlzdCkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQnKTtcbnZhciBhQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jb25zdHJ1Y3RvcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIG5hdGl2ZUNvbnN0cnVjdCA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnY29uc3RydWN0Jyk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbnZhciBwdXNoID0gW10ucHVzaDtcblxuLy8gYFJlZmxlY3QuY29uc3RydWN0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5jb25zdHJ1Y3Rcbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKG5hdGl2ZUNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG5cbnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIG5hdGl2ZUNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbnZhciBGT1JDRUQgPSBORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRztcblxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCwgc2hhbTogRk9SQ0VEIH0sIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7XG4gICAgYUNvbnN0cnVjdG9yKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUNvbnN0cnVjdG9yKGFyZ3VtZW50c1syXSk7XG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIG5hdGl2ZUNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYgKFRhcmdldCA9PSBuZXdUYXJnZXQpIHtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICBhcHBseShwdXNoLCAkYXJncywgYXJncyk7XG4gICAgICByZXR1cm4gbmV3IChhcHBseShiaW5kLCBUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3RQcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBhcHBseShUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxudmFyIEVSUk9SX0lOU1RFQURfT0ZfRkFMU0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1yZWZsZWN0IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZGVmaW5lUHJvcGVydHlNb2R1bGUuZih7fSwgMSwgeyB2YWx1ZTogMSB9KSwgMSwgeyB2YWx1ZTogMiB9KTtcbn0pO1xuXG4vLyBgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuZGVmaW5lcHJvcGVydHlcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBFUlJPUl9JTlNURUFEX09GX0ZBTFNFLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdmFyIGtleSA9IHRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgIGFuT2JqZWN0KGF0dHJpYnV0ZXMpO1xuICAgIHRyeSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKHRhcmdldCwga2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcblxuLy8gYFJlZmxlY3QuZGVsZXRlUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmRlbGV0ZXByb3BlcnR5XG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgICByZXR1cm4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci5jb25maWd1cmFibGUgPyBmYWxzZSA6IGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlLZXldO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxuLy8gYFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb2JqZWN0R2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbi8vIGBSZWZsZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5nZXRwcm90b3R5cGVvZlxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIH0sIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBvYmplY3RHZXRQcm90b3R5cGVPZihhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc0RhdGFEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWRhdGEtZGVzY3JpcHRvcicpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gYFJlZmxlY3QuZ2V0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5nZXRcbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5IC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl07XG4gIHZhciBkZXNjcmlwdG9yLCBwcm90b3R5cGU7XG4gIGlmIChhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcikgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZih0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgaWYgKGRlc2NyaXB0b3IpIHJldHVybiBpc0RhdGFEZXNjcmlwdG9yKGRlc2NyaXB0b3IpXG4gICAgPyBkZXNjcmlwdG9yLnZhbHVlXG4gICAgOiBkZXNjcmlwdG9yLmdldCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogY2FsbChkZXNjcmlwdG9yLmdldCwgcmVjZWl2ZXIpO1xuICBpZiAoaXNPYmplY3QocHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHJldHVybiBnZXQocHJvdG90eXBlLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBnZXQ6IGdldFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYFJlZmxlY3QuaGFzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5oYXNcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGhhczogZnVuY3Rpb24gaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyICRpc0V4dGVuc2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLWV4dGVuc2libGUnKTtcblxuLy8gYFJlZmxlY3QuaXNFeHRlbnNpYmxlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5pc2V4dGVuc2libGVcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUodGFyZ2V0KTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG5cbi8vIGBSZWZsZWN0Lm93bktleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0Lm93bmtleXNcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIG93bktleXM6IG93bktleXNcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xuXG4vLyBgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9uc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QucHJldmVudGV4dGVuc2lvbnNcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIUZSRUVaSU5HIH0sIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBvYmplY3RQcmV2ZW50RXh0ZW5zaW9ucyA9IGdldEJ1aWx0SW4oJ09iamVjdCcsICdwcmV2ZW50RXh0ZW5zaW9ucycpO1xuICAgICAgaWYgKG9iamVjdFByZXZlbnRFeHRlbnNpb25zKSBvYmplY3RQcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlJyk7XG52YXIgb2JqZWN0U2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gYFJlZmxlY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LnNldHByb3RvdHlwZW9mXG5pZiAob2JqZWN0U2V0UHJvdG90eXBlT2YpICQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBvYmplY3RTZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzRGF0YURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZGF0YS1kZXNjcmlwdG9yJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG4vLyBgUmVmbGVjdC5zZXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LnNldFxuZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXTtcbiAgdmFyIG93bkRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIHZhciBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvdHlwZSwgc2V0dGVyO1xuICBpZiAoIW93bkRlc2NyaXB0b3IpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHtcbiAgICAgIHJldHVybiBzZXQocHJvdG90eXBlLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjcmlwdG9yID0gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDApO1xuICB9XG4gIGlmIChpc0RhdGFEZXNjcmlwdG9yKG93bkRlc2NyaXB0b3IpKSB7XG4gICAgaWYgKG93bkRlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5KSkge1xuICAgICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvci5nZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLnNldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICBleGlzdGluZ0Rlc2NyaXB0b3IudmFsdWUgPSBWO1xuICAgICAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7XG4gICAgfSBlbHNlIGRlZmluZVByb3BlcnR5TW9kdWxlLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgVikpO1xuICB9IGVsc2Uge1xuICAgIHNldHRlciA9IG93bkRlc2NyaXB0b3Iuc2V0O1xuICAgIGlmIChzZXR0ZXIgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlO1xuICAgIGNhbGwoc2V0dGVyLCByZWNlaXZlciwgVik7XG4gIH0gcmV0dXJuIHRydWU7XG59XG5cbi8vIE1TIEVkZ2UgMTctMTggUmVmbGVjdC5zZXQgYWxsb3dzIHNldHRpbmcgdGhlIHByb3BlcnR5IHRvIG9iamVjdFxuLy8gd2l0aCBub24td3JpdGFibGUgcHJvcGVydHkgb24gdGhlIHByb3RvdHlwZVxudmFyIE1TX0VER0VfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgQ29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4gIHZhciBvYmplY3QgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG5ldyBDb25zdHJ1Y3RvcigpLCAnYScsIHsgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tcmVmbGVjdCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gUmVmbGVjdC5zZXQoQ29uc3RydWN0b3IucHJvdG90eXBlLCAnYScsIDEsIG9iamVjdCkgIT09IGZhbHNlO1xufSk7XG5cbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBNU19FREdFX0JVRyB9LCB7XG4gIHNldDogc2V0XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xuXG4kKHsgZ2xvYmFsOiB0cnVlIH0sIHsgUmVmbGVjdDoge30gfSk7XG5cbi8vIFJlZmxlY3RbQEB0b1N0cmluZ1RhZ10gcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuUmVmbGVjdCwgJ1JlZmxlY3QnLCB0cnVlKTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKS5lbmZvcmNlO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBVTlNVUFBPUlRFRF9ET1RfQUxMID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1kb3QtYWxsJyk7XG52YXIgVU5TVVBQT1JURURfTkNHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1uY2cnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xudmFyIE5hdGl2ZVJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gTmF0aXZlUmVnRXhwLnByb3RvdHlwZTtcbnZhciBTeW50YXhFcnJvciA9IGdsb2JhbC5TeW50YXhFcnJvcjtcbnZhciBnZXRGbGFncyA9IHVuY3VycnlUaGlzKHJlZ0V4cEZsYWdzKTtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoUmVnRXhwUHJvdG90eXBlLmV4ZWMpO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHN0cmluZ0luZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbi8vIFRPRE86IFVzZSBvbmx5IHByb3BwZXIgUmVnRXhwSWRlbnRpZmllck5hbWVcbnZhciBJU19OQ0cgPSAvXlxcPzxbXlxcc1xcZCEjJSYqKzw9PkBeXVteXFxzISMlJiorPD0+QF5dKj4vO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcblxuLy8gXCJuZXdcIiBzaG91bGQgY3JlYXRlIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdcbnZhciBDT1JSRUNUX05FVyA9IG5ldyBOYXRpdmVSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG52YXIgTUlTU0VEX1NUSUNLWSA9IHN0aWNreUhlbHBlcnMuTUlTU0VEX1NUSUNLWTtcbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5VTlNVUFBPUlRFRF9ZO1xuXG52YXIgQkFTRV9GT1JDRUQgPSBERVNDUklQVE9SUyAmJlxuICAoIUNPUlJFQ1RfTkVXIHx8IE1JU1NFRF9TVElDS1kgfHwgVU5TVVBQT1JURURfRE9UX0FMTCB8fCBVTlNVUFBPUlRFRF9OQ0cgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJlMltNQVRDSF0gPSBmYWxzZTtcbiAgICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICAgIHJldHVybiBOYXRpdmVSZWdFeHAocmUxKSAhPSByZTEgfHwgTmF0aXZlUmVnRXhwKHJlMikgPT0gcmUyIHx8IE5hdGl2ZVJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xuICB9KSk7XG5cbnZhciBoYW5kbGVEb3RBbGwgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHZhciBicmFja2V0cyA9IGZhbHNlO1xuICB2YXIgY2hyO1xuICBmb3IgKDsgaW5kZXggPD0gbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY2hyID0gY2hhckF0KHN0cmluZywgaW5kZXgpO1xuICAgIGlmIChjaHIgPT09ICdcXFxcJykge1xuICAgICAgcmVzdWx0ICs9IGNociArIGNoYXJBdChzdHJpbmcsICsraW5kZXgpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICghYnJhY2tldHMgJiYgY2hyID09PSAnLicpIHtcbiAgICAgIHJlc3VsdCArPSAnW1xcXFxzXFxcXFNdJztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNociA9PT0gJ1snKSB7XG4gICAgICAgIGJyYWNrZXRzID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoY2hyID09PSAnXScpIHtcbiAgICAgICAgYnJhY2tldHMgPSBmYWxzZTtcbiAgICAgIH0gcmVzdWx0ICs9IGNocjtcbiAgICB9XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciBoYW5kbGVOQ0cgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHZhciBuYW1lZCA9IFtdO1xuICB2YXIgbmFtZXMgPSB7fTtcbiAgdmFyIGJyYWNrZXRzID0gZmFsc2U7XG4gIHZhciBuY2cgPSBmYWxzZTtcbiAgdmFyIGdyb3VwaWQgPSAwO1xuICB2YXIgZ3JvdXBuYW1lID0gJyc7XG4gIHZhciBjaHI7XG4gIGZvciAoOyBpbmRleCA8PSBsZW5ndGg7IGluZGV4KyspIHtcbiAgICBjaHIgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCk7XG4gICAgaWYgKGNociA9PT0gJ1xcXFwnKSB7XG4gICAgICBjaHIgPSBjaHIgKyBjaGFyQXQoc3RyaW5nLCArK2luZGV4KTtcbiAgICB9IGVsc2UgaWYgKGNociA9PT0gJ10nKSB7XG4gICAgICBicmFja2V0cyA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoIWJyYWNrZXRzKSBzd2l0Y2ggKHRydWUpIHtcbiAgICAgIGNhc2UgY2hyID09PSAnWyc6XG4gICAgICAgIGJyYWNrZXRzID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGNociA9PT0gJygnOlxuICAgICAgICBpZiAoZXhlYyhJU19OQ0csIHN0cmluZ1NsaWNlKHN0cmluZywgaW5kZXggKyAxKSkpIHtcbiAgICAgICAgICBpbmRleCArPSAyO1xuICAgICAgICAgIG5jZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ICs9IGNocjtcbiAgICAgICAgZ3JvdXBpZCsrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIGNhc2UgY2hyID09PSAnPicgJiYgbmNnOlxuICAgICAgICBpZiAoZ3JvdXBuYW1lID09PSAnJyB8fCBoYXNPd24obmFtZXMsIGdyb3VwbmFtZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0ludmFsaWQgY2FwdHVyZSBncm91cCBuYW1lJyk7XG4gICAgICAgIH1cbiAgICAgICAgbmFtZXNbZ3JvdXBuYW1lXSA9IHRydWU7XG4gICAgICAgIG5hbWVkW25hbWVkLmxlbmd0aF0gPSBbZ3JvdXBuYW1lLCBncm91cGlkXTtcbiAgICAgICAgbmNnID0gZmFsc2U7XG4gICAgICAgIGdyb3VwbmFtZSA9ICcnO1xuICAgICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKG5jZykgZ3JvdXBuYW1lICs9IGNocjtcbiAgICBlbHNlIHJlc3VsdCArPSBjaHI7XG4gIH0gcmV0dXJuIFtyZXN1bHQsIG5hbWVkXTtcbn07XG5cbi8vIGBSZWdFeHBgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC1jb25zdHJ1Y3RvclxuaWYgKGlzRm9yY2VkKCdSZWdFeHAnLCBCQVNFX0ZPUkNFRCkpIHtcbiAgdmFyIFJlZ0V4cFdyYXBwZXIgPSBmdW5jdGlvbiBSZWdFeHAocGF0dGVybiwgZmxhZ3MpIHtcbiAgICB2YXIgdGhpc0lzUmVnRXhwID0gaXNQcm90b3R5cGVPZihSZWdFeHBQcm90b3R5cGUsIHRoaXMpO1xuICAgIHZhciBwYXR0ZXJuSXNSZWdFeHAgPSBpc1JlZ0V4cChwYXR0ZXJuKTtcbiAgICB2YXIgZmxhZ3NBcmVVbmRlZmluZWQgPSBmbGFncyA9PT0gdW5kZWZpbmVkO1xuICAgIHZhciBncm91cHMgPSBbXTtcbiAgICB2YXIgcmF3UGF0dGVybiA9IHBhdHRlcm47XG4gICAgdmFyIHJhd0ZsYWdzLCBkb3RBbGwsIHN0aWNreSwgaGFuZGxlZCwgcmVzdWx0LCBzdGF0ZTtcblxuICAgIGlmICghdGhpc0lzUmVnRXhwICYmIHBhdHRlcm5Jc1JlZ0V4cCAmJiBmbGFnc0FyZVVuZGVmaW5lZCAmJiBwYXR0ZXJuLmNvbnN0cnVjdG9yID09PSBSZWdFeHBXcmFwcGVyKSB7XG4gICAgICByZXR1cm4gcGF0dGVybjtcbiAgICB9XG5cbiAgICBpZiAocGF0dGVybklzUmVnRXhwIHx8IGlzUHJvdG90eXBlT2YoUmVnRXhwUHJvdG90eXBlLCBwYXR0ZXJuKSkge1xuICAgICAgcGF0dGVybiA9IHBhdHRlcm4uc291cmNlO1xuICAgICAgaWYgKGZsYWdzQXJlVW5kZWZpbmVkKSBmbGFncyA9ICdmbGFncycgaW4gcmF3UGF0dGVybiA/IHJhd1BhdHRlcm4uZmxhZ3MgOiBnZXRGbGFncyhyYXdQYXR0ZXJuKTtcbiAgICB9XG5cbiAgICBwYXR0ZXJuID0gcGF0dGVybiA9PT0gdW5kZWZpbmVkID8gJycgOiB0b1N0cmluZyhwYXR0ZXJuKTtcbiAgICBmbGFncyA9IGZsYWdzID09PSB1bmRlZmluZWQgPyAnJyA6IHRvU3RyaW5nKGZsYWdzKTtcbiAgICByYXdQYXR0ZXJuID0gcGF0dGVybjtcblxuICAgIGlmIChVTlNVUFBPUlRFRF9ET1RfQUxMICYmICdkb3RBbGwnIGluIHJlMSkge1xuICAgICAgZG90QWxsID0gISFmbGFncyAmJiBzdHJpbmdJbmRleE9mKGZsYWdzLCAncycpID4gLTE7XG4gICAgICBpZiAoZG90QWxsKSBmbGFncyA9IHJlcGxhY2UoZmxhZ3MsIC9zL2csICcnKTtcbiAgICB9XG5cbiAgICByYXdGbGFncyA9IGZsYWdzO1xuXG4gICAgaWYgKE1JU1NFRF9TVElDS1kgJiYgJ3N0aWNreScgaW4gcmUxKSB7XG4gICAgICBzdGlja3kgPSAhIWZsYWdzICYmIHN0cmluZ0luZGV4T2YoZmxhZ3MsICd5JykgPiAtMTtcbiAgICAgIGlmIChzdGlja3kgJiYgVU5TVVBQT1JURURfWSkgZmxhZ3MgPSByZXBsYWNlKGZsYWdzLCAveS9nLCAnJyk7XG4gICAgfVxuXG4gICAgaWYgKFVOU1VQUE9SVEVEX05DRykge1xuICAgICAgaGFuZGxlZCA9IGhhbmRsZU5DRyhwYXR0ZXJuKTtcbiAgICAgIHBhdHRlcm4gPSBoYW5kbGVkWzBdO1xuICAgICAgZ3JvdXBzID0gaGFuZGxlZFsxXTtcbiAgICB9XG5cbiAgICByZXN1bHQgPSBpbmhlcml0SWZSZXF1aXJlZChOYXRpdmVSZWdFeHAocGF0dGVybiwgZmxhZ3MpLCB0aGlzSXNSZWdFeHAgPyB0aGlzIDogUmVnRXhwUHJvdG90eXBlLCBSZWdFeHBXcmFwcGVyKTtcblxuICAgIGlmIChkb3RBbGwgfHwgc3RpY2t5IHx8IGdyb3Vwcy5sZW5ndGgpIHtcbiAgICAgIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUocmVzdWx0KTtcbiAgICAgIGlmIChkb3RBbGwpIHtcbiAgICAgICAgc3RhdGUuZG90QWxsID0gdHJ1ZTtcbiAgICAgICAgc3RhdGUucmF3ID0gUmVnRXhwV3JhcHBlcihoYW5kbGVEb3RBbGwocGF0dGVybiksIHJhd0ZsYWdzKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGlja3kpIHN0YXRlLnN0aWNreSA9IHRydWU7XG4gICAgICBpZiAoZ3JvdXBzLmxlbmd0aCkgc3RhdGUuZ3JvdXBzID0gZ3JvdXBzO1xuICAgIH1cblxuICAgIGlmIChwYXR0ZXJuICE9PSByYXdQYXR0ZXJuKSB0cnkge1xuICAgICAgLy8gZmFpbHMgaW4gb2xkIGVuZ2luZXMsIGJ1dCB3ZSBoYXZlIG5vIGFsdGVybmF0aXZlcyBmb3IgdW5zdXBwb3J0ZWQgcmVnZXggc3ludGF4XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkocmVzdWx0LCAnc291cmNlJywgcmF3UGF0dGVybiA9PT0gJycgPyAnKD86KScgOiByYXdQYXR0ZXJuKTtcbiAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgaW4gUmVnRXhwV3JhcHBlciB8fCBkZWZpbmVQcm9wZXJ0eShSZWdFeHBXcmFwcGVyLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTmF0aXZlUmVnRXhwW2tleV07IH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChpdCkgeyBOYXRpdmVSZWdFeHBba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG5cbiAgZm9yICh2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoTmF0aXZlUmVnRXhwKSwgaW5kZXggPSAwOyBrZXlzLmxlbmd0aCA+IGluZGV4Oykge1xuICAgIHByb3h5KGtleXNbaW5kZXgrK10pO1xuICB9XG5cbiAgUmVnRXhwUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmVnRXhwV3JhcHBlcjtcbiAgUmVnRXhwV3JhcHBlci5wcm90b3R5cGUgPSBSZWdFeHBQcm90b3R5cGU7XG4gIHJlZGVmaW5lKGdsb2JhbCwgJ1JlZ0V4cCcsIFJlZ0V4cFdyYXBwZXIpO1xufVxuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAtQEBzcGVjaWVzXG5zZXRTcGVjaWVzKCdSZWdFeHAnKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBVTlNVUFBPUlRFRF9ET1RfQUxMID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1kb3QtYWxsJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGdldEludGVybmFsU3RhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKS5nZXQ7XG5cbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmRvdEFsbGAgZ2V0dGVyXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmRvdGFsbFxuaWYgKERFU0NSSVBUT1JTICYmIFVOU1VQUE9SVEVEX0RPVF9BTEwpIHtcbiAgZGVmaW5lUHJvcGVydHkoUmVnRXhwUHJvdG90eXBlLCAnZG90QWxsJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzID09PSBSZWdFeHBQcm90b3R5cGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAvLyBXZSBjYW4ndCB1c2UgSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IgYmVjYXVzZVxuICAgICAgLy8gd2UgZG9uJ3QgYWRkIG1ldGFkYXRhIGZvciByZWdleHBzIGNyZWF0ZWQgYnkgYSBsaXRlcmFsLlxuICAgICAgaWYgKGNsYXNzb2YodGhpcykgPT09ICdSZWdFeHAnKSB7XG4gICAgICAgIHJldHVybiAhIWdldEludGVybmFsU3RhdGUodGhpcykuZG90QWxsO1xuICAgICAgfVxuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsIFJlZ0V4cCByZXF1aXJlZCcpO1xuICAgIH1cbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBleGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmV4ZWNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLmV4ZWNcbiQoeyB0YXJnZXQ6ICdSZWdFeHAnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAvLi8uZXhlYyAhPT0gZXhlYyB9LCB7XG4gIGV4ZWM6IGV4ZWNcbn0pO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgb2JqZWN0RGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIHJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xuXG52YXIgRk9SQ0VEID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG4gIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFJlZ0V4cFByb3RvdHlwZSwgJ2ZsYWdzJykuZ2V0LmNhbGwoeyBkb3RBbGw6IHRydWUsIHN0aWNreTogdHJ1ZSB9KSAhPT0gJ3N5Jztcbn0pO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5mbGFnc2AgZ2V0dGVyXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzXG5pZiAoRk9SQ0VEKSBvYmplY3REZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKFJlZ0V4cFByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVnRXhwRmxhZ3Ncbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIE1JU1NFRF9TVElDS1kgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzJykuTUlTU0VEX1NUSUNLWTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpLmdldDtcblxudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuc3RpY2t5YCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC5wcm90b3R5cGUuc3RpY2t5XG5pZiAoREVTQ1JJUFRPUlMgJiYgTUlTU0VEX1NUSUNLWSkge1xuICBkZWZpbmVQcm9wZXJ0eShSZWdFeHBQcm90b3R5cGUsICdzdGlja3knLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMgPT09IFJlZ0V4cFByb3RvdHlwZSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIC8vIFdlIGNhbid0IHVzZSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvciBiZWNhdXNlXG4gICAgICAvLyB3ZSBkb24ndCBhZGQgbWV0YWRhdGEgZm9yIHJlZ2V4cHMgY3JlYXRlZCBieSBhIGxpdGVyYWwuXG4gICAgICBpZiAoY2xhc3NvZih0aGlzKSA9PT0gJ1JlZ0V4cCcpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zdGlja3k7XG4gICAgICB9XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgUmVnRXhwIHJlcXVpcmVkJyk7XG4gICAgfVxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgbW92ZWQgdG8gZW50cnkgcG9pbnRzXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjJyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gIHZhciByZSA9IC9bYWNdLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBleGVjQ2FsbGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gLy4vLmV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbiAgcmV0dXJuIHJlLnRlc3QoJ2FiYycpID09PSB0cnVlICYmIGV4ZWNDYWxsZWQ7XG59KCk7XG5cbnZhciBFcnJvciA9IGdsb2JhbC5FcnJvcjtcbnZhciB1biRUZXN0ID0gdW5jdXJyeVRoaXMoLy4vLnRlc3QpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS50ZXN0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50ZXN0XG4kKHsgdGFyZ2V0OiAnUmVnRXhwJywgcHJvdG86IHRydWUsIGZvcmNlZDogIURFTEVHQVRFU19UT19FWEVDIH0sIHtcbiAgdGVzdDogZnVuY3Rpb24gKHN0cikge1xuICAgIHZhciBleGVjID0gdGhpcy5leGVjO1xuICAgIGlmICghaXNDYWxsYWJsZShleGVjKSkgcmV0dXJuIHVuJFRlc3QodGhpcywgc3RyKTtcbiAgICB2YXIgcmVzdWx0ID0gY2FsbChleGVjLCB0aGlzLCBzdHIpO1xuICAgIGlmIChyZXN1bHQgIT09IG51bGwgJiYgIWlzT2JqZWN0KHJlc3VsdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiAhIXJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgUFJPUEVSX0ZVTkNUSU9OX05BTUUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLlBST1BFUjtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xuXG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyIG4kVG9TdHJpbmcgPSBSZWdFeHBQcm90b3R5cGVbVE9fU1RSSU5HXTtcbnZhciBnZXRGbGFncyA9IHVuY3VycnlUaGlzKHJlZ0V4cEZsYWdzKTtcblxudmFyIE5PVF9HRU5FUklDID0gZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gbiRUb1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG52YXIgSU5DT1JSRUNUX05BTUUgPSBQUk9QRVJfRlVOQ1RJT05fTkFNRSAmJiBuJFRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbmlmIChOT1RfR0VORVJJQyB8fCBJTkNPUlJFQ1RfTkFNRSkge1xuICByZWRlZmluZShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIHAgPSAkdG9TdHJpbmcoUi5zb3VyY2UpO1xuICAgIHZhciByZiA9IFIuZmxhZ3M7XG4gICAgdmFyIGYgPSAkdG9TdHJpbmcocmYgPT09IHVuZGVmaW5lZCAmJiBpc1Byb3RvdHlwZU9mKFJlZ0V4cFByb3RvdHlwZSwgUikgJiYgISgnZmxhZ3MnIGluIFJlZ0V4cFByb3RvdHlwZSkgPyBnZXRGbGFncyhSKSA6IHJmKTtcbiAgICByZXR1cm4gJy8nICsgcCArICcvJyArIGY7XG4gIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25TdHJvbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1zdHJvbmcnKTtcblxuLy8gYFNldGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LW9iamVjdHNcbmNvbGxlY3Rpb24oJ1NldCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBpbml0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwgY29sbGVjdGlvblN0cm9uZyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuYW5jaG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5hbmNob3JcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdhbmNob3InKSB9LCB7XG4gIGFuY2hvcjogZnVuY3Rpb24gYW5jaG9yKG5hbWUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICduYW1lJywgbmFtZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICfwoK63Jy5hdCgtMikgIT09ICdcXHVEODQyJztcbn0pO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5hdGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1yZWxhdGl2ZS1pbmRleGluZy1tZXRob2RcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBhdDogZnVuY3Rpb24gYXQoaW5kZXgpIHtcbiAgICB2YXIgUyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIHZhciBsZW4gPSBTLmxlbmd0aDtcbiAgICB2YXIgcmVsYXRpdmVJbmRleCA9IHRvSW50ZWdlck9ySW5maW5pdHkoaW5kZXgpO1xuICAgIHZhciBrID0gcmVsYXRpdmVJbmRleCA+PSAwID8gcmVsYXRpdmVJbmRleCA6IGxlbiArIHJlbGF0aXZlSW5kZXg7XG4gICAgcmV0dXJuIChrIDwgMCB8fCBrID49IGxlbikgPyB1bmRlZmluZWQgOiBjaGFyQXQoUywgayk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmJpZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuYmlnXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnYmlnJykgfSwge1xuICBiaWc6IGZ1bmN0aW9uIGJpZygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuYmxpbmtgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmJsaW5rXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnYmxpbmsnKSB9LCB7XG4gIGJsaW5rOiBmdW5jdGlvbiBibGluaygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmxpbmsnLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5ib2xkYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5ib2xkXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnYm9sZCcpIH0sIHtcbiAgYm9sZDogZnVuY3Rpb24gYm9sZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY29kZUF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jb2RlQXQ7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5jb2RlcG9pbnRhdFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlIH0sIHtcbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcykge1xuICAgIHJldHVybiBjb2RlQXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgbm90QVJlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3QtYS1yZWdleHAnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGNvcnJlY3RJc1JlZ0V4cExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zdHJpbmctcHJvdG90eXBlLWVuZHN3aXRoIC0tIHNhZmVcbnZhciB1biRFbmRzV2l0aCA9IHVuY3VycnlUaGlzKCcnLmVuZHNXaXRoKTtcbnZhciBzbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxudmFyIENPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDID0gY29ycmVjdElzUmVnRXhwTG9naWMoJ2VuZHNXaXRoJyk7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9wdWxsLzcwMlxudmFyIE1ETl9QT0xZRklMTF9CVUcgPSAhSVNfUFVSRSAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgJiYgISFmdW5jdGlvbiAoKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFN0cmluZy5wcm90b3R5cGUsICdlbmRzV2l0aCcpO1xuICByZXR1cm4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci53cml0YWJsZTtcbn0oKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmVuZHN3aXRoXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIU1ETl9QT0xZRklMTF9CVUcgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDIH0sIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG4gICAgbm90QVJlZ0V4cChzZWFyY2hTdHJpbmcpO1xuICAgIHZhciBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBsZW4gPSB0aGF0Lmxlbmd0aDtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IG1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7XG4gICAgdmFyIHNlYXJjaCA9IHRvU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuIHVuJEVuZHNXaXRoXG4gICAgICA/IHVuJEVuZHNXaXRoKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiBzbGljZSh0aGF0LCBlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmZpeGVkYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5maXhlZFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2ZpeGVkJykgfSwge1xuICBmaXhlZDogZnVuY3Rpb24gZml4ZWQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3R0JywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3JcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdmb250Y29sb3InKSB9LCB7XG4gIGZvbnRjb2xvcjogZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmZvbnRzaXplYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZVxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2ZvbnRzaXplJykgfSwge1xuICBmb250c2l6ZTogZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG5cbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zdHJpbmctZnJvbWNvZGVwb2ludCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG52YXIgam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xuXG4vLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXG52YXIgSU5DT1JSRUNUX0xFTkdUSCA9ICEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDE7XG5cbi8vIGBTdHJpbmcuZnJvbUNvZGVQb2ludGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5mcm9tY29kZXBvaW50XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfTEVOR1RIIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KSB7XG4gICAgdmFyIGVsZW1lbnRzID0gW107XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBjb2RlO1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSB7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwRkZGRikgIT09IGNvZGUpIHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgZWxlbWVudHNbaV0gPSBjb2RlIDwgMHgxMDAwMFxuICAgICAgICA/IGZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhEODAwLCBjb2RlICUgMHg0MDAgKyAweERDMDApO1xuICAgIH0gcmV0dXJuIGpvaW4oZWxlbWVudHMsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBub3RBUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vdC1hLXJlZ2V4cCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgY29ycmVjdElzUmVnRXhwTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMnKTtcblxudmFyIHN0cmluZ0luZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIWNvcnJlY3RJc1JlZ0V4cExvZ2ljKCdpbmNsdWRlcycpIH0sIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5zdHJpbmdJbmRleE9mKFxuICAgICAgdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSksXG4gICAgICB0b1N0cmluZyhub3RBUmVnRXhwKHNlYXJjaFN0cmluZykpLFxuICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWRcbiAgICApO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnaXRhbGljcycpIH0sIHtcbiAgaXRhbGljczogZnVuY3Rpb24gaXRhbGljcygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIFNUUklOR19JVEVSQVRPUiA9ICdTdHJpbmcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1RSSU5HX0lURVJBVE9SKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLUBAaXRlcmF0b3JcbmRlZmluZUl0ZXJhdG9yKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBTVFJJTkdfSVRFUkFUT1IsXG4gICAgc3RyaW5nOiB0b1N0cmluZyhpdGVyYXRlZCksXG4gICAgaW5kZXg6IDBcbiAgfSk7XG4vLyBgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXN0cmluZ2l0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9IGNoYXJBdChzdHJpbmcsIGluZGV4KTtcbiAgc3RhdGUuaW5kZXggKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5saW5rYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5saW5rXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnbGluaycpIH0sIHtcbiAgbGluazogZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zdHJpbmctcHJvdG90eXBlLW1hdGNoYWxsIC0tIHNhZmUgKi9cbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIHJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIE1BVENIX0FMTCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2hBbGwnKTtcbnZhciBSRUdFWFBfU1RSSU5HID0gJ1JlZ0V4cCBTdHJpbmcnO1xudmFyIFJFR0VYUF9TVFJJTkdfSVRFUkFUT1IgPSBSRUdFWFBfU1RSSU5HICsgJyBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihSRUdFWFBfU1RSSU5HX0lURVJBVE9SKTtcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgZ2V0RmxhZ3MgPSB1bmN1cnJ5VGhpcyhyZWdFeHBGbGFncyk7XG52YXIgc3RyaW5nSW5kZXhPZiA9IHVuY3VycnlUaGlzKCcnLmluZGV4T2YpO1xudmFyIHVuJE1hdGNoQWxsID0gdW5jdXJyeVRoaXMoJycubWF0Y2hBbGwpO1xuXG52YXIgV09SS1NfV0lUSF9OT05fR0xPQkFMX1JFR0VYID0gISF1biRNYXRjaEFsbCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB1biRNYXRjaEFsbCgnYScsIC8uLyk7XG59KTtcblxudmFyICRSZWdFeHBTdHJpbmdJdGVyYXRvciA9IGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoZnVuY3Rpb24gUmVnRXhwU3RyaW5nSXRlcmF0b3IocmVnZXhwLCBzdHJpbmcsICRnbG9iYWwsIGZ1bGxVbmljb2RlKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFJFR0VYUF9TVFJJTkdfSVRFUkFUT1IsXG4gICAgcmVnZXhwOiByZWdleHAsXG4gICAgc3RyaW5nOiBzdHJpbmcsXG4gICAgZ2xvYmFsOiAkZ2xvYmFsLFxuICAgIHVuaWNvZGU6IGZ1bGxVbmljb2RlLFxuICAgIGRvbmU6IGZhbHNlXG4gIH0pO1xufSwgUkVHRVhQX1NUUklORywgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgaWYgKHN0YXRlLmRvbmUpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgdmFyIFIgPSBzdGF0ZS5yZWdleHA7XG4gIHZhciBTID0gc3RhdGUuc3RyaW5nO1xuICB2YXIgbWF0Y2ggPSByZWdFeHBFeGVjKFIsIFMpO1xuICBpZiAobWF0Y2ggPT09IG51bGwpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHN0YXRlLmRvbmUgPSB0cnVlIH07XG4gIGlmIChzdGF0ZS5nbG9iYWwpIHtcbiAgICBpZiAodG9TdHJpbmcobWF0Y2hbMF0pID09PSAnJykgUi5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgoUi5sYXN0SW5kZXgpLCBzdGF0ZS51bmljb2RlKTtcbiAgICByZXR1cm4geyB2YWx1ZTogbWF0Y2gsIGRvbmU6IGZhbHNlIH07XG4gIH1cbiAgc3RhdGUuZG9uZSA9IHRydWU7XG4gIHJldHVybiB7IHZhbHVlOiBtYXRjaCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG52YXIgJG1hdGNoQWxsID0gZnVuY3Rpb24gKHN0cmluZykge1xuICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgUyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gIHZhciBDLCBmbGFnc1ZhbHVlLCBmbGFncywgbWF0Y2hlciwgJGdsb2JhbCwgZnVsbFVuaWNvZGU7XG4gIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IoUiwgUmVnRXhwKTtcbiAgZmxhZ3NWYWx1ZSA9IFIuZmxhZ3M7XG4gIGlmIChmbGFnc1ZhbHVlID09PSB1bmRlZmluZWQgJiYgaXNQcm90b3R5cGVPZihSZWdFeHBQcm90b3R5cGUsIFIpICYmICEoJ2ZsYWdzJyBpbiBSZWdFeHBQcm90b3R5cGUpKSB7XG4gICAgZmxhZ3NWYWx1ZSA9IGdldEZsYWdzKFIpO1xuICB9XG4gIGZsYWdzID0gZmxhZ3NWYWx1ZSA9PT0gdW5kZWZpbmVkID8gJycgOiB0b1N0cmluZyhmbGFnc1ZhbHVlKTtcbiAgbWF0Y2hlciA9IG5ldyBDKEMgPT09IFJlZ0V4cCA/IFIuc291cmNlIDogUiwgZmxhZ3MpO1xuICAkZ2xvYmFsID0gISF+c3RyaW5nSW5kZXhPZihmbGFncywgJ2cnKTtcbiAgZnVsbFVuaWNvZGUgPSAhIX5zdHJpbmdJbmRleE9mKGZsYWdzLCAndScpO1xuICBtYXRjaGVyLmxhc3RJbmRleCA9IHRvTGVuZ3RoKFIubGFzdEluZGV4KTtcbiAgcmV0dXJuIG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IobWF0Y2hlciwgUywgJGdsb2JhbCwgZnVsbFVuaWNvZGUpO1xufTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUubWF0Y2hBbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLm1hdGNoYWxsXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogV09SS1NfV0lUSF9OT05fR0xPQkFMX1JFR0VYIH0sIHtcbiAgbWF0Y2hBbGw6IGZ1bmN0aW9uIG1hdGNoQWxsKHJlZ2V4cCkge1xuICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICB2YXIgZmxhZ3MsIFMsIG1hdGNoZXIsIHJ4O1xuICAgIGlmIChyZWdleHAgIT0gbnVsbCkge1xuICAgICAgaWYgKGlzUmVnRXhwKHJlZ2V4cCkpIHtcbiAgICAgICAgZmxhZ3MgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCdmbGFncycgaW4gUmVnRXhwUHJvdG90eXBlXG4gICAgICAgICAgPyByZWdleHAuZmxhZ3NcbiAgICAgICAgICA6IGdldEZsYWdzKHJlZ2V4cClcbiAgICAgICAgKSk7XG4gICAgICAgIGlmICghfnN0cmluZ0luZGV4T2YoZmxhZ3MsICdnJykpIHRocm93IFR5cGVFcnJvcignYC5tYXRjaEFsbGAgZG9lcyBub3QgYWxsb3cgbm9uLWdsb2JhbCByZWdleGVzJyk7XG4gICAgICB9XG4gICAgICBpZiAoV09SS1NfV0lUSF9OT05fR0xPQkFMX1JFR0VYKSByZXR1cm4gdW4kTWF0Y2hBbGwoTywgcmVnZXhwKTtcbiAgICAgIG1hdGNoZXIgPSBnZXRNZXRob2QocmVnZXhwLCBNQVRDSF9BTEwpO1xuICAgICAgaWYgKG1hdGNoZXIgPT09IHVuZGVmaW5lZCAmJiBJU19QVVJFICYmIGNsYXNzb2YocmVnZXhwKSA9PSAnUmVnRXhwJykgbWF0Y2hlciA9ICRtYXRjaEFsbDtcbiAgICAgIGlmIChtYXRjaGVyKSByZXR1cm4gY2FsbChtYXRjaGVyLCByZWdleHAsIE8pO1xuICAgIH0gZWxzZSBpZiAoV09SS1NfV0lUSF9OT05fR0xPQkFMX1JFR0VYKSByZXR1cm4gdW4kTWF0Y2hBbGwoTywgcmVnZXhwKTtcbiAgICBTID0gdG9TdHJpbmcoTyk7XG4gICAgcnggPSBuZXcgUmVnRXhwKHJlZ2V4cCwgJ2cnKTtcbiAgICByZXR1cm4gSVNfUFVSRSA/IGNhbGwoJG1hdGNoQWxsLCByeCwgUykgOiByeFtNQVRDSF9BTExdKFMpO1xuICB9XG59KTtcblxuSVNfUFVSRSB8fCBNQVRDSF9BTEwgaW4gUmVnRXhwUHJvdG90eXBlIHx8IHJlZGVmaW5lKFJlZ0V4cFByb3RvdHlwZSwgTUFUQ0hfQUxMLCAkbWF0Y2hBbGwpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQG1hdGNoIGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygnbWF0Y2gnLCBmdW5jdGlvbiAoTUFUQ0gsIG5hdGl2ZU1hdGNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLm1hdGNoXG4gICAgZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICB2YXIgbWF0Y2hlciA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBnZXRNZXRob2QocmVnZXhwLCBNQVRDSCk7XG4gICAgICByZXR1cm4gbWF0Y2hlciA/IGNhbGwobWF0Y2hlciwgcmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0odG9TdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQG1hdGNoXG4gICAgZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QodGhpcyk7XG4gICAgICB2YXIgUyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1hdGNoLCByeCwgUyk7XG5cbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgaWYgKCFyeC5nbG9iYWwpIHJldHVybiByZWdFeHBFeGVjKHJ4LCBTKTtcblxuICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUykpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IHRvU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIEFbbl0gPSBtYXRjaFN0cjtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgICAgbisrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG4gPT09IDAgPyBudWxsIDogQTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRwYWRFbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXBhZCcpLmVuZDtcbnZhciBXRUJLSVRfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQtd2Via2l0LWJ1ZycpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRFbmRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZGVuZFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFdFQktJVF9CVUcgfSwge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWRFbmQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHBhZFN0YXJ0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQnKS5zdGFydDtcbnZhciBXRUJLSVRfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQtd2Via2l0LWJ1ZycpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucGFkc3RhcnRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBXRUJLSVRfQlVHIH0sIHtcbiAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZFN0YXJ0KHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG5cbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG52YXIgam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xuXG4vLyBgU3RyaW5nLnJhd2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5yYXdcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBzdGF0OiB0cnVlIH0sIHtcbiAgcmF3OiBmdW5jdGlvbiByYXcodGVtcGxhdGUpIHtcbiAgICB2YXIgcmF3VGVtcGxhdGUgPSB0b0luZGV4ZWRPYmplY3QodG9PYmplY3QodGVtcGxhdGUpLnJhdyk7XG4gICAgdmFyIGxpdGVyYWxTZWdtZW50cyA9IGxlbmd0aE9mQXJyYXlMaWtlKHJhd1RlbXBsYXRlKTtcbiAgICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgZWxlbWVudHMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGxpdGVyYWxTZWdtZW50cyA+IGkpIHtcbiAgICAgIHB1c2goZWxlbWVudHMsIHRvU3RyaW5nKHJhd1RlbXBsYXRlW2krK10pKTtcbiAgICAgIGlmIChpID09PSBsaXRlcmFsU2VnbWVudHMpIHJldHVybiBqb2luKGVsZW1lbnRzLCAnJyk7XG4gICAgICBpZiAoaSA8IGFyZ3VtZW50c0xlbmd0aCkgcHVzaChlbGVtZW50cywgdG9TdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfVxuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcmVwZWF0Jyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGVhdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwZWF0XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUgfSwge1xuICByZXBlYXQ6IHJlcGVhdFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciByZWdFeHBGbGFncyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZmxhZ3MnKTtcbnZhciBnZXRTdWJzdGl0dXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LXN1YnN0aXR1dGlvbicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgUkVQTEFDRSA9IHdlbGxLbm93blN5bWJvbCgncmVwbGFjZScpO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBnZXRGbGFncyA9IHVuY3VycnlUaGlzKHJlZ0V4cEZsYWdzKTtcbnZhciBpbmRleE9mID0gdW5jdXJyeVRoaXMoJycuaW5kZXhPZik7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG52YXIgc3RyaW5nSW5kZXhPZiA9IGZ1bmN0aW9uIChzdHJpbmcsIHNlYXJjaFZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgaWYgKGZyb21JbmRleCA+IHN0cmluZy5sZW5ndGgpIHJldHVybiAtMTtcbiAgaWYgKHNlYXJjaFZhbHVlID09PSAnJykgcmV0dXJuIGZyb21JbmRleDtcbiAgcmV0dXJuIGluZGV4T2Yoc3RyaW5nLCBzZWFyY2hWYWx1ZSwgZnJvbUluZGV4KTtcbn07XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VBbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VhbGxcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSB9LCB7XG4gIHJlcGxhY2VBbGw6IGZ1bmN0aW9uIHJlcGxhY2VBbGwoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICB2YXIgSVNfUkVHX0VYUCwgZmxhZ3MsIHJlcGxhY2VyLCBzdHJpbmcsIHNlYXJjaFN0cmluZywgZnVuY3Rpb25hbFJlcGxhY2UsIHNlYXJjaExlbmd0aCwgYWR2YW5jZUJ5LCByZXBsYWNlbWVudDtcbiAgICB2YXIgcG9zaXRpb24gPSAwO1xuICAgIHZhciBlbmRPZkxhc3RNYXRjaCA9IDA7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIGlmIChzZWFyY2hWYWx1ZSAhPSBudWxsKSB7XG4gICAgICBJU19SRUdfRVhQID0gaXNSZWdFeHAoc2VhcmNoVmFsdWUpO1xuICAgICAgaWYgKElTX1JFR19FWFApIHtcbiAgICAgICAgZmxhZ3MgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCdmbGFncycgaW4gUmVnRXhwUHJvdG90eXBlXG4gICAgICAgICAgPyBzZWFyY2hWYWx1ZS5mbGFnc1xuICAgICAgICAgIDogZ2V0RmxhZ3Moc2VhcmNoVmFsdWUpXG4gICAgICAgICkpO1xuICAgICAgICBpZiAoIX5pbmRleE9mKGZsYWdzLCAnZycpKSB0aHJvdyBUeXBlRXJyb3IoJ2AucmVwbGFjZUFsbGAgZG9lcyBub3QgYWxsb3cgbm9uLWdsb2JhbCByZWdleGVzJyk7XG4gICAgICB9XG4gICAgICByZXBsYWNlciA9IGdldE1ldGhvZChzZWFyY2hWYWx1ZSwgUkVQTEFDRSk7XG4gICAgICBpZiAocmVwbGFjZXIpIHtcbiAgICAgICAgcmV0dXJuIGNhbGwocmVwbGFjZXIsIHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChJU19QVVJFICYmIElTX1JFR19FWFApIHtcbiAgICAgICAgcmV0dXJuIHJlcGxhY2UodG9TdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBzdHJpbmcgPSB0b1N0cmluZyhPKTtcbiAgICBzZWFyY2hTdHJpbmcgPSB0b1N0cmluZyhzZWFyY2hWYWx1ZSk7XG4gICAgZnVuY3Rpb25hbFJlcGxhY2UgPSBpc0NhbGxhYmxlKHJlcGxhY2VWYWx1ZSk7XG4gICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gdG9TdHJpbmcocmVwbGFjZVZhbHVlKTtcbiAgICBzZWFyY2hMZW5ndGggPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuICAgIGFkdmFuY2VCeSA9IG1heCgxLCBzZWFyY2hMZW5ndGgpO1xuICAgIHBvc2l0aW9uID0gc3RyaW5nSW5kZXhPZihzdHJpbmcsIHNlYXJjaFN0cmluZywgMCk7XG4gICAgd2hpbGUgKHBvc2l0aW9uICE9PSAtMSkge1xuICAgICAgcmVwbGFjZW1lbnQgPSBmdW5jdGlvbmFsUmVwbGFjZVxuICAgICAgICA/IHRvU3RyaW5nKHJlcGxhY2VWYWx1ZShzZWFyY2hTdHJpbmcsIHBvc2l0aW9uLCBzdHJpbmcpKVxuICAgICAgICA6IGdldFN1YnN0aXR1dGlvbihzZWFyY2hTdHJpbmcsIHN0cmluZywgcG9zaXRpb24sIFtdLCB1bmRlZmluZWQsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICByZXN1bHQgKz0gc3RyaW5nU2xpY2Uoc3RyaW5nLCBlbmRPZkxhc3RNYXRjaCwgcG9zaXRpb24pICsgcmVwbGFjZW1lbnQ7XG4gICAgICBlbmRPZkxhc3RNYXRjaCA9IHBvc2l0aW9uICsgc2VhcmNoTGVuZ3RoO1xuICAgICAgcG9zaXRpb24gPSBzdHJpbmdJbmRleE9mKHN0cmluZywgc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiArIGFkdmFuY2VCeSk7XG4gICAgfVxuICAgIGlmIChlbmRPZkxhc3RNYXRjaCA8IHN0cmluZy5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdCArPSBzdHJpbmdTbGljZShzdHJpbmcsIGVuZE9mTGFzdE1hdGNoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIGdldFN1YnN0aXR1dGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtc3Vic3RpdHV0aW9uJyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgUkVQTEFDRSA9IHdlbGxLbm93blN5bWJvbCgncmVwbGFjZScpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIGNvbmNhdCA9IHVuY3VycnlUaGlzKFtdLmNvbmNhdCk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xudmFyIHN0cmluZ0luZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBJRSA8PSAxMSByZXBsYWNlcyAkMCB3aXRoIHRoZSB3aG9sZSBtYXRjaCwgYXMgaWYgaXQgd2FzICQmXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82MDI0NjY2L2dldHRpbmctaWUtdG8tcmVwbGFjZS1hLXJlZ2V4LXdpdGgtdGhlLWxpdGVyYWwtc3RyaW5nLTBcbnZhciBSRVBMQUNFX0tFRVBTXyQwID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9wcmVmZXItZXNjYXBlLXJlcGxhY2VtZW50LWRvbGxhci1jaGFyIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiAnYScucmVwbGFjZSgvLi8sICckMCcpID09PSAnJDAnO1xufSkoKTtcblxuLy8gU2FmYXJpIDw9IDEzLjAuMyg/KSBzdWJzdGl0dXRlcyBudGggY2FwdHVyZSB3aGVyZSBuPm0gd2l0aCBhbiBlbXB0eSBzdHJpbmdcbnZhciBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA9IChmdW5jdGlvbiAoKSB7XG4gIGlmICgvLi9bUkVQTEFDRV0pIHtcbiAgICByZXR1cm4gLy4vW1JFUExBQ0VdKCdhJywgJyQwJykgPT09ICcnO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn0pKCk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby11c2VsZXNzLWRvbGxhci1yZXBsYWNlbWVudHMgLS0gZmFsc2UgcG9zaXRpdmVcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdyZXBsYWNlJywgZnVuY3Rpb24gKF8sIG5hdGl2ZVJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICB2YXIgVU5TQUZFX1NVQlNUSVRVVEUgPSBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA/ICckJyA6ICckMCc7XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIHJlcGxhY2VyID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogZ2V0TWV0aG9kKHNlYXJjaFZhbHVlLCBSRVBMQUNFKTtcbiAgICAgIHJldHVybiByZXBsYWNlclxuICAgICAgICA/IGNhbGwocmVwbGFjZXIsIHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogY2FsbChuYXRpdmVSZXBsYWNlLCB0b1N0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHN0cmluZywgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdCh0aGlzKTtcbiAgICAgIHZhciBTID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgcmVwbGFjZVZhbHVlID09ICdzdHJpbmcnICYmXG4gICAgICAgIHN0cmluZ0luZGV4T2YocmVwbGFjZVZhbHVlLCBVTlNBRkVfU1VCU1RJVFVURSkgPT09IC0xICYmXG4gICAgICAgIHN0cmluZ0luZGV4T2YocmVwbGFjZVZhbHVlLCAnJDwnKSA9PT0gLTFcbiAgICAgICkge1xuICAgICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZVJlcGxhY2UsIHJ4LCBTLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IGlzQ2FsbGFibGUocmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IHRvU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG5cbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcblxuICAgICAgICBwdXNoKHJlc3VsdHMsIHJlc3VsdCk7XG4gICAgICAgIGlmICghZ2xvYmFsKSBicmVhaztcblxuICAgICAgICB2YXIgbWF0Y2hTdHIgPSB0b1N0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG5cbiAgICAgICAgdmFyIG1hdGNoZWQgPSB0b1N0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBtYXgobWluKHRvSW50ZWdlck9ySW5maW5pdHkocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgcHVzaChjYXB0dXJlcywgbWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xuICAgICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gY29uY2F0KFttYXRjaGVkXSwgY2FwdHVyZXMsIHBvc2l0aW9uLCBTKTtcbiAgICAgICAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSBwdXNoKHJlcGxhY2VyQXJncywgbmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gdG9TdHJpbmcoYXBwbHkocmVwbGFjZVZhbHVlLCB1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gc3RyaW5nU2xpY2UoUywgbmV4dFNvdXJjZVBvc2l0aW9uLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgICAgICBuZXh0U291cmNlUG9zaXRpb24gPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0ZWRSZXN1bHQgKyBzdHJpbmdTbGljZShTLCBuZXh0U291cmNlUG9zaXRpb24pO1xuICAgIH1cbiAgXTtcbn0sICFSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyB8fCAhUkVQTEFDRV9LRUVQU18kMCB8fCBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgc2FtZVZhbHVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NhbWUtdmFsdWUnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBzZWFyY2ggbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdzZWFyY2gnLCBmdW5jdGlvbiAoU0VBUkNILCBuYXRpdmVTZWFyY2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNlYXJjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNlYXJjaFxuICAgIGZ1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciBzZWFyY2hlciA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBnZXRNZXRob2QocmVnZXhwLCBTRUFSQ0gpO1xuICAgICAgcmV0dXJuIHNlYXJjaGVyID8gY2FsbChzZWFyY2hlciwgcmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKHRvU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc2VhcmNoXG4gICAgZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QodGhpcyk7XG4gICAgICB2YXIgUyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZVNlYXJjaCwgcngsIFMpO1xuXG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciBwcmV2aW91c0xhc3RJbmRleCA9IHJ4Lmxhc3RJbmRleDtcbiAgICAgIGlmICghc2FtZVZhbHVlKHByZXZpb3VzTGFzdEluZGV4LCAwKSkgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgIGlmICghc2FtZVZhbHVlKHJ4Lmxhc3RJbmRleCwgcHJldmlvdXNMYXN0SW5kZXgpKSByeC5sYXN0SW5kZXggPSBwcmV2aW91c0xhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IG51bGwgPyAtMSA6IHJlc3VsdC5pbmRleDtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zbWFsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc21hbGxcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdzbWFsbCcpIH0sIHtcbiAgc21hbGw6IGZ1bmN0aW9uIHNtYWxsKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2Utc2ltcGxlJyk7XG52YXIgY2FsbFJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG52YXIgc3RpY2t5SGVscGVycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IHN0aWNreUhlbHBlcnMuVU5TVVBQT1JURURfWTtcbnZhciBNQVhfVUlOVDMyID0gMHhGRkZGRkZGRjtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciAkcHVzaCA9IFtdLnB1c2g7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKC8uLy5leGVjKTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoJHB1c2gpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG4vLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbi8vIFdlZXggSlMgaGFzIGZyb3plbiBidWlsdC1pbiBwcm90b3R5cGVzLCBzbyB1c2UgdHJ5IC8gY2F0Y2ggd3JhcHBlclxudmFyIFNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tZW1wdHktZ3JvdXAgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoICE9PSAyIHx8IHJlc3VsdFswXSAhPT0gJ2EnIHx8IHJlc3VsdFsxXSAhPT0gJ2InO1xufSk7XG5cbi8vIEBAc3BsaXQgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdzcGxpdCcsIGZ1bmN0aW9uIChTUExJVCwgbmF0aXZlU3BsaXQsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICB2YXIgaW50ZXJuYWxTcGxpdDtcbiAgaWYgKFxuICAgICdhYmJjJy5zcGxpdCgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tZW1wdHktZ3JvdXAgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICAndGVzdCcuc3BsaXQoLyg/OikvLCAtMSkubGVuZ3RoICE9IDQgfHxcbiAgICAnYWInLnNwbGl0KC8oPzphYikqLykubGVuZ3RoICE9IDIgfHxcbiAgICAnLicuc3BsaXQoLyguPykoLj8pLykubGVuZ3RoICE9IDQgfHxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL25vLWVtcHR5LWNhcHR1cmluZy1ncm91cCwgcmVnZXhwL25vLWVtcHR5LWdyb3VwIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgJy4nLnNwbGl0KC8oKSgpLykubGVuZ3RoID4gMSB8fFxuICAgICcnLnNwbGl0KC8uPy8pLmxlbmd0aFxuICApIHtcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBzdHJpbmcgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSByZXR1cm4gW3N0cmluZ107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIHJldHVybiBjYWxsKG5hdGl2ZVNwbGl0LCBzdHJpbmcsIHNlcGFyYXRvciwgbGltKTtcbiAgICAgIH1cbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgd2hpbGUgKG1hdGNoID0gY2FsbChyZWdleHBFeGVjLCBzZXBhcmF0b3JDb3B5LCBzdHJpbmcpKSB7XG4gICAgICAgIGxhc3RJbmRleCA9IHNlcGFyYXRvckNvcHkubGFzdEluZGV4O1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIHB1c2gob3V0cHV0LCBzdHJpbmdTbGljZShzdHJpbmcsIGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgaWYgKG1hdGNoLmxlbmd0aCA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmcubGVuZ3RoKSBhcHBseSgkcHVzaCwgb3V0cHV0LCBhcnJheVNsaWNlKG1hdGNoLCAxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmIChvdXRwdXQubGVuZ3RoID49IGxpbSkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHkubGFzdEluZGV4ID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weS5sYXN0SW5kZXgrKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIWV4ZWMoc2VwYXJhdG9yQ29weSwgJycpKSBwdXNoKG91dHB1dCwgJycpO1xuICAgICAgfSBlbHNlIHB1c2gob3V0cHV0LCBzdHJpbmdTbGljZShzdHJpbmcsIGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXQubGVuZ3RoID4gbGltID8gYXJyYXlTbGljZShvdXRwdXQsIDAsIGxpbSkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYgKCcwJy5zcGxpdCh1bmRlZmluZWQsIDApLmxlbmd0aCkge1xuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBjYWxsKG5hdGl2ZVNwbGl0LCB0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9IGVsc2UgaW50ZXJuYWxTcGxpdCA9IG5hdGl2ZVNwbGl0O1xuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc3BsaXRgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zcGxpdFxuICAgIGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciBzcGxpdHRlciA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBnZXRNZXRob2Qoc2VwYXJhdG9yLCBTUExJVCk7XG4gICAgICByZXR1cm4gc3BsaXR0ZXJcbiAgICAgICAgPyBjYWxsKHNwbGl0dGVyLCBzZXBhcmF0b3IsIE8sIGxpbWl0KVxuICAgICAgICA6IGNhbGwoaW50ZXJuYWxTcGxpdCwgdG9TdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNwbGl0XG4gICAgLy9cbiAgICAvLyBOT1RFOiBUaGlzIGNhbm5vdCBiZSBwcm9wZXJseSBwb2x5ZmlsbGVkIGluIGVuZ2luZXMgdGhhdCBkb24ndCBzdXBwb3J0XG4gICAgLy8gdGhlICd5JyBmbGFnLlxuICAgIGZ1bmN0aW9uIChzdHJpbmcsIGxpbWl0KSB7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdCh0aGlzKTtcbiAgICAgIHZhciBTID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoaW50ZXJuYWxTcGxpdCwgcngsIFMsIGxpbWl0LCBpbnRlcm5hbFNwbGl0ICE9PSBuYXRpdmVTcGxpdCk7XG5cbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IocngsIFJlZ0V4cCk7XG5cbiAgICAgIHZhciB1bmljb2RlTWF0Y2hpbmcgPSByeC51bmljb2RlO1xuICAgICAgdmFyIGZsYWdzID0gKHJ4Lmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4Lm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoVU5TVVBQT1JURURfWSA/ICdnJyA6ICd5Jyk7XG5cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBTIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICB2YXIgc3BsaXR0ZXIgPSBuZXcgQyhVTlNVUFBPUlRFRF9ZID8gJ14oPzonICsgcnguc291cmNlICsgJyknIDogcngsIGZsYWdzKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKFMubGVuZ3RoID09PSAwKSByZXR1cm4gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFMpID09PSBudWxsID8gW1NdIDogW107XG4gICAgICB2YXIgcCA9IDA7XG4gICAgICB2YXIgcSA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgd2hpbGUgKHEgPCBTLmxlbmd0aCkge1xuICAgICAgICBzcGxpdHRlci5sYXN0SW5kZXggPSBVTlNVUFBPUlRFRF9ZID8gMCA6IHE7XG4gICAgICAgIHZhciB6ID0gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFVOU1VQUE9SVEVEX1kgPyBzdHJpbmdTbGljZShTLCBxKSA6IFMpO1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHogPT09IG51bGwgfHxcbiAgICAgICAgICAoZSA9IG1pbih0b0xlbmd0aChzcGxpdHRlci5sYXN0SW5kZXggKyAoVU5TVVBQT1JURURfWSA/IHEgOiAwKSksIFMubGVuZ3RoKSkgPT09IHBcbiAgICAgICAgKSB7XG4gICAgICAgICAgcSA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCBxLCB1bmljb2RlTWF0Y2hpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHB1c2goQSwgc3RyaW5nU2xpY2UoUywgcCwgcSkpO1xuICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSB6Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgcHVzaChBLCB6W2ldKTtcbiAgICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcSA9IHAgPSBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwdXNoKEEsIHN0cmluZ1NsaWNlKFMsIHApKTtcbiAgICAgIHJldHVybiBBO1xuICAgIH1cbiAgXTtcbn0sICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMsIFVOU1VQUE9SVEVEX1kpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIG5vdEFSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm90LWEtcmVnZXhwJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBjb3JyZWN0SXNSZWdFeHBMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3RyaW5nLXByb3RvdHlwZS1zdGFydHN3aXRoIC0tIHNhZmVcbnZhciB1biRTdGFydHNXaXRoID0gdW5jdXJyeVRoaXMoJycuc3RhcnRzV2l0aCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgbWluID0gTWF0aC5taW47XG5cbnZhciBDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyA9IGNvcnJlY3RJc1JlZ0V4cExvZ2ljKCdzdGFydHNXaXRoJyk7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9wdWxsLzcwMlxudmFyIE1ETl9QT0xZRklMTF9CVUcgPSAhSVNfUFVSRSAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgJiYgISFmdW5jdGlvbiAoKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFN0cmluZy5wcm90b3R5cGUsICdzdGFydHNXaXRoJyk7XG4gIHJldHVybiBkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLndyaXRhYmxlO1xufSgpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdGFydHN3aXRoXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIU1ETl9QT0xZRklMTF9CVUcgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDIH0sIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChtaW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IHRvU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuIHVuJFN0YXJ0c1dpdGhcbiAgICAgID8gdW4kU3RhcnRzV2l0aCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiBzdHJpbmdTbGljZSh0aGF0LCBpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdHJpa2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnN0cmlrZVxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ3N0cmlrZScpIH0sIHtcbiAgc3RyaWtlOiBmdW5jdGlvbiBzdHJpa2UoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnN1YmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3ViXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnc3ViJykgfSwge1xuICBzdWI6IGZ1bmN0aW9uIHN1YigpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xuXG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL3ByZWZlci1zdHJpbmctc2xpY2UgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciBGT1JDRUQgPSAhJycuc3Vic3RyIHx8ICdhYicuc3Vic3RyKC0xKSAhPT0gJ2InO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdWJzdHJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnN1YnN0clxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHN1YnN0cjogZnVuY3Rpb24gc3Vic3RyKHN0YXJ0LCBsZW5ndGgpIHtcbiAgICB2YXIgdGhhdCA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIHZhciBzaXplID0gdGhhdC5sZW5ndGg7XG4gICAgdmFyIGludFN0YXJ0ID0gdG9JbnRlZ2VyT3JJbmZpbml0eShzdGFydCk7XG4gICAgdmFyIGludExlbmd0aCwgaW50RW5kO1xuICAgIGlmIChpbnRTdGFydCA9PT0gSW5maW5pdHkpIGludFN0YXJ0ID0gMDtcbiAgICBpZiAoaW50U3RhcnQgPCAwKSBpbnRTdGFydCA9IG1heChzaXplICsgaW50U3RhcnQsIDApO1xuICAgIGludExlbmd0aCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gc2l6ZSA6IHRvSW50ZWdlck9ySW5maW5pdHkobGVuZ3RoKTtcbiAgICBpZiAoaW50TGVuZ3RoIDw9IDAgfHwgaW50TGVuZ3RoID09PSBJbmZpbml0eSkgcmV0dXJuICcnO1xuICAgIGludEVuZCA9IG1pbihpbnRTdGFydCArIGludExlbmd0aCwgc2l6ZSk7XG4gICAgcmV0dXJuIGludFN0YXJ0ID49IGludEVuZCA/ICcnIDogc3RyaW5nU2xpY2UodGhhdCwgaW50U3RhcnQsIGludEVuZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnN1cGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3VwXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnc3VwJykgfSwge1xuICBzdXA6IGZ1bmN0aW9uIHN1cCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkdHJpbUVuZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLmVuZDtcbnZhciBmb3JjZWRTdHJpbmdUcmltTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltLWZvcmNlZCcpO1xuXG52YXIgRk9SQ0VEID0gZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCgndHJpbUVuZCcpO1xuXG52YXIgdHJpbUVuZCA9IEZPUkNFRCA/IGZ1bmN0aW9uIHRyaW1FbmQoKSB7XG4gIHJldHVybiAkdHJpbUVuZCh0aGlzKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zdHJpbmctcHJvdG90eXBlLXRyaW1zdGFydC10cmltZW5kIC0tIHNhZmVcbn0gOiAnJy50cmltRW5kO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1FbmQsIHRyaW1SaWdodCB9YCBtZXRob2RzXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbWVuZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI1N0cmluZy5wcm90b3R5cGUudHJpbXJpZ2h0XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIG5hbWU6ICd0cmltRW5kJywgZm9yY2VkOiBGT1JDRUQgfSwge1xuICB0cmltRW5kOiB0cmltRW5kLFxuICB0cmltUmlnaHQ6IHRyaW1FbmRcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHRyaW1TdGFydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLnN0YXJ0O1xudmFyIGZvcmNlZFN0cmluZ1RyaW1NZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0tZm9yY2VkJyk7XG5cbnZhciBGT1JDRUQgPSBmb3JjZWRTdHJpbmdUcmltTWV0aG9kKCd0cmltU3RhcnQnKTtcblxudmFyIHRyaW1TdGFydCA9IEZPUkNFRCA/IGZ1bmN0aW9uIHRyaW1TdGFydCgpIHtcbiAgcmV0dXJuICR0cmltU3RhcnQodGhpcyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3RyaW5nLXByb3RvdHlwZS10cmltc3RhcnQtdHJpbWVuZCAtLSBzYWZlXG59IDogJycudHJpbVN0YXJ0O1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1TdGFydCwgdHJpbUxlZnQgfWAgbWV0aG9kc1xuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1zdGFydFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI1N0cmluZy5wcm90b3R5cGUudHJpbWxlZnRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgbmFtZTogJ3RyaW1TdGFydCcsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgdHJpbVN0YXJ0OiB0cmltU3RhcnQsXG4gIHRyaW1MZWZ0OiB0cmltU3RhcnRcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIGZvcmNlZFN0cmluZ1RyaW1NZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0tZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnRyaW1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1cbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdUcmltTWV0aG9kKCd0cmltJykgfSwge1xuICB0cmltOiBmdW5jdGlvbiB0cmltKCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzKTtcbiAgfVxufSk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLmFzeW5jSXRlcmF0b3JgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5hc3luY2l0ZXJhdG9yXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2FzeW5jSXRlcmF0b3InKTtcbiIsIi8vIGBTeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uYCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS5kZXNjcmlwdGlvblxuJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcblxudmFyIE5hdGl2ZVN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgU3ltYm9sUHJvdG90eXBlID0gTmF0aXZlU3ltYm9sICYmIE5hdGl2ZVN5bWJvbC5wcm90b3R5cGU7XG5cbmlmIChERVNDUklQVE9SUyAmJiBpc0NhbGxhYmxlKE5hdGl2ZVN5bWJvbCkgJiYgKCEoJ2Rlc2NyaXB0aW9uJyBpbiBTeW1ib2xQcm90b3R5cGUpIHx8XG4gIC8vIFNhZmFyaSAxMiBidWdcbiAgTmF0aXZlU3ltYm9sKCkuZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZFxuKSkge1xuICB2YXIgRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlID0ge307XG4gIC8vIHdyYXAgU3ltYm9sIGNvbnN0cnVjdG9yIGZvciBjb3JyZWN0IHdvcmsgd2l0aCB1bmRlZmluZWQgZGVzY3JpcHRpb25cbiAgdmFyIFN5bWJvbFdyYXBwZXIgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiB0b1N0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciByZXN1bHQgPSBpc1Byb3RvdHlwZU9mKFN5bWJvbFByb3RvdHlwZSwgdGhpcylcbiAgICAgID8gbmV3IE5hdGl2ZVN5bWJvbChkZXNjcmlwdGlvbilcbiAgICAgIC8vIGluIEVkZ2UgMTMsIFN0cmluZyhTeW1ib2wodW5kZWZpbmVkKSkgPT09ICdTeW1ib2wodW5kZWZpbmVkKSdcbiAgICAgIDogZGVzY3JpcHRpb24gPT09IHVuZGVmaW5lZCA/IE5hdGl2ZVN5bWJvbCgpIDogTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKTtcbiAgICBpZiAoZGVzY3JpcHRpb24gPT09ICcnKSBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmVbcmVzdWx0XSA9IHRydWU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKFN5bWJvbFdyYXBwZXIsIE5hdGl2ZVN5bWJvbCk7XG4gIFN5bWJvbFdyYXBwZXIucHJvdG90eXBlID0gU3ltYm9sUHJvdG90eXBlO1xuICBTeW1ib2xQcm90b3R5cGUuY29uc3RydWN0b3IgPSBTeW1ib2xXcmFwcGVyO1xuXG4gIHZhciBOQVRJVkVfU1lNQk9MID0gU3RyaW5nKE5hdGl2ZVN5bWJvbCgndGVzdCcpKSA9PSAnU3ltYm9sKHRlc3QpJztcbiAgdmFyIHN5bWJvbFRvU3RyaW5nID0gdW5jdXJyeVRoaXMoU3ltYm9sUHJvdG90eXBlLnRvU3RyaW5nKTtcbiAgdmFyIHN5bWJvbFZhbHVlT2YgPSB1bmN1cnJ5VGhpcyhTeW1ib2xQcm90b3R5cGUudmFsdWVPZik7XG4gIHZhciByZWdleHAgPSAvXlN5bWJvbFxcKCguKilcXClbXildKyQvO1xuICB2YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xuICB2YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbiAgZGVmaW5lUHJvcGVydHkoU3ltYm9sUHJvdG90eXBlLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICB2YXIgc3ltYm9sID0gc3ltYm9sVmFsdWVPZih0aGlzKTtcbiAgICAgIHZhciBzdHJpbmcgPSBzeW1ib2xUb1N0cmluZyhzeW1ib2wpO1xuICAgICAgaWYgKGhhc093bihFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUsIHN5bWJvbCkpIHJldHVybiAnJztcbiAgICAgIHZhciBkZXNjID0gTkFUSVZFX1NZTUJPTCA/IHN0cmluZ1NsaWNlKHN0cmluZywgNywgLTEpIDogcmVwbGFjZShzdHJpbmcsIHJlZ2V4cCwgJyQxJyk7XG4gICAgICByZXR1cm4gZGVzYyA9PT0gJycgPyB1bmRlZmluZWQgOiBkZXNjO1xuICAgIH1cbiAgfSk7XG5cbiAgJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICBTeW1ib2w6IFN5bWJvbFdyYXBwZXJcbiAgfSk7XG59XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLmhhc0luc3RhbmNlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuaGFzaW5zdGFuY2VcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnaGFzSW5zdGFuY2UnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuaXNjb25jYXRzcHJlYWRhYmxlXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5pdGVyYXRvcmAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLml0ZXJhdG9yXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgbmF0aXZlT2JqZWN0Q3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZGVmaW5lUHJvcGVydGllc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG5cbnZhciBISURERU4gPSBzaGFyZWRLZXkoJ2hpZGRlbicpO1xudmFyIFNZTUJPTCA9ICdTeW1ib2wnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcblxudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1lNQk9MKTtcblxudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIFN5bWJvbFByb3RvdHlwZSA9ICRTeW1ib2wgJiYgJFN5bWJvbFtQUk9UT1RZUEVdO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xudmFyICRzdHJpbmdpZnkgPSBnZXRCdWlsdEluKCdKU09OJywgJ3N0cmluZ2lmeScpO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmY7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90b3R5cGVTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3RyaW5nLXRvLXN5bWJvbC1yZWdpc3RyeScpO1xudmFyIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC10by1zdHJpbmctcmVnaXN0cnknKTtcbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xuXG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBVU0VfU0VUVEVSID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzY3JpcHRvciA9IERFU0NSSVBUT1JTICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdENyZWF0ZShuYXRpdmVEZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoTywgUCwgQXR0cmlidXRlcykge1xuICB2YXIgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIFApO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcikgZGVsZXRlIE9iamVjdFByb3RvdHlwZVtQXTtcbiAgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yICYmIE8gIT09IE9iamVjdFByb3RvdHlwZSkge1xuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KE9iamVjdFByb3RvdHlwZSwgUCwgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcik7XG4gIH1cbn0gOiBuYXRpdmVEZWZpbmVQcm9wZXJ0eTtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnLCBkZXNjcmlwdGlvbikge1xuICB2YXIgc3ltYm9sID0gQWxsU3ltYm9sc1t0YWddID0gbmF0aXZlT2JqZWN0Q3JlYXRlKFN5bWJvbFByb3RvdHlwZSk7XG4gIHNldEludGVybmFsU3RhdGUoc3ltYm9sLCB7XG4gICAgdHlwZTogU1lNQk9MLFxuICAgIHRhZzogdGFnLFxuICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvblxuICB9KTtcbiAgaWYgKCFERVNDUklQVE9SUykgc3ltYm9sLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gIHJldHVybiBzeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBpZiAoTyA9PT0gT2JqZWN0UHJvdG90eXBlKSAkZGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCwgQXR0cmlidXRlcyk7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChoYXNPd24oQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghQXR0cmlidXRlcy5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhc093bihPLCBISURERU4pKSBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBISURERU4sIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB7fSkpO1xuICAgICAgT1tISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzT3duKE8sIEhJRERFTikgJiYgT1tISURERU5dW2tleV0pIE9bSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBBdHRyaWJ1dGVzID0gbmF0aXZlT2JqZWN0Q3JlYXRlKEF0dHJpYnV0ZXMsIHsgZW51bWVyYWJsZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjcmlwdG9yKE8sIGtleSwgQXR0cmlidXRlcyk7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIGtleSwgQXR0cmlidXRlcyk7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBwcm9wZXJ0aWVzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMocHJvcGVydGllcykuY29uY2F0KCRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcGVydGllcykpO1xuICAkZm9yRWFjaChrZXlzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFERVNDUklQVE9SUyB8fCBjYWxsKCRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgcHJvcGVydGllcywga2V5KSkgJGRlZmluZVByb3BlcnR5KE8sIGtleSwgcHJvcGVydGllc1trZXldKTtcbiAgfSk7XG4gIHJldHVybiBPO1xufTtcblxudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gbmF0aXZlT2JqZWN0Q3JlYXRlKE8pIDogJGRlZmluZVByb3BlcnRpZXMobmF0aXZlT2JqZWN0Q3JlYXRlKE8pLCBQcm9wZXJ0aWVzKTtcbn07XG5cbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBQID0gdG9Qcm9wZXJ0eUtleShWKTtcbiAgdmFyIGVudW1lcmFibGUgPSBjYWxsKG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLCB0aGlzLCBQKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXNPd24oQWxsU3ltYm9scywgUCkgJiYgIWhhc093bihPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQKSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gZW51bWVyYWJsZSB8fCAhaGFzT3duKHRoaXMsIFApIHx8ICFoYXNPd24oQWxsU3ltYm9scywgUCkgfHwgaGFzT3duKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW1BdXG4gICAgPyBlbnVtZXJhYmxlIDogdHJ1ZTtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgdmFyIGl0ID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhc093bihPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBkZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpO1xuICBpZiAoZGVzY3JpcHRvciAmJiBoYXNPd24oQWxsU3ltYm9scywga2V5KSAmJiAhKGhhc093bihpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSB7XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZGVzY3JpcHRvcjtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIWhhc093bihBbGxTeW1ib2xzLCBrZXkpICYmICFoYXNPd24oaGlkZGVuS2V5cywga2V5KSkgcHVzaChyZXN1bHQsIGtleSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTykge1xuICB2YXIgSVNfT0JKRUNUX1BST1RPVFlQRSA9IE8gPT09IE9iamVjdFByb3RvdHlwZTtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhJU19PQkpFQ1RfUFJPVE9UWVBFID8gT2JqZWN0UHJvdG90eXBlU3ltYm9scyA6IHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgKCFJU19PQkpFQ1RfUFJPVE9UWVBFIHx8IGhhc093bihPYmplY3RQcm90b3R5cGUsIGtleSkpKSB7XG4gICAgICBwdXNoKHJlc3VsdCwgQWxsU3ltYm9sc1trZXldKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gYFN5bWJvbGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLWNvbnN0cnVjdG9yXG5pZiAoIU5BVElWRV9TWU1CT0wpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAoaXNQcm90b3R5cGVPZihTeW1ib2xQcm90b3R5cGUsIHRoaXMpKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9ICFhcmd1bWVudHMubGVuZ3RoIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogJHRvU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHRhZyA9IHVpZChkZXNjcmlwdGlvbik7XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSkgY2FsbChzZXR0ZXIsIE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXNPd24odGhpcywgSElEREVOKSAmJiBoYXNPd24odGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzY3JpcHRvcih0aGlzLCB0YWcsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIFVTRV9TRVRURVIpIHNldFN5bWJvbERlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6IHNldHRlciB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcsIGRlc2NyaXB0aW9uKTtcbiAgfTtcblxuICBTeW1ib2xQcm90b3R5cGUgPSAkU3ltYm9sW1BST1RPVFlQRV07XG5cbiAgcmVkZWZpbmUoU3ltYm9sUHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS50YWc7XG4gIH0pO1xuXG4gIHJlZGVmaW5lKCRTeW1ib2wsICd3aXRob3V0U2V0dGVyJywgZnVuY3Rpb24gKGRlc2NyaXB0aW9uKSB7XG4gICAgcmV0dXJuIHdyYXAodWlkKGRlc2NyaXB0aW9uKSwgZGVzY3JpcHRpb24pO1xuICB9KTtcblxuICBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mID0gJGRlZmluZVByb3BlcnR5O1xuICBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlLmYgPSAkZGVmaW5lUHJvcGVydGllcztcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3ZWxsS25vd25TeW1ib2wobmFtZSksIG5hbWUpO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLVN5bWJvbC1kZXNjcmlwdGlvblxuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KFN5bWJvbFByb3RvdHlwZSwgJ2Rlc2NyaXB0aW9uJywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykuZGVzY3JpcHRpb247XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFJU19QVVJFKSB7XG4gICAgICByZWRlZmluZShPYmplY3RQcm90b3R5cGUsICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgeyB1bnNhZmU6IHRydWUgfSk7XG4gICAgfVxuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgU3ltYm9sOiAkU3ltYm9sXG59KTtcblxuJGZvckVhY2gob2JqZWN0S2V5cyhXZWxsS25vd25TeW1ib2xzU3RvcmUpLCBmdW5jdGlvbiAobmFtZSkge1xuICBkZWZpbmVXZWxsS25vd25TeW1ib2wobmFtZSk7XG59KTtcblxuJCh7IHRhcmdldDogU1lNQk9MLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgLy8gYFN5bWJvbC5mb3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5mb3JcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgc3RyaW5nID0gJHRvU3RyaW5nKGtleSk7XG4gICAgaWYgKGhhc093bihTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5LCBzdHJpbmcpKSByZXR1cm4gU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddO1xuICAgIHZhciBzeW1ib2wgPSAkU3ltYm9sKHN0cmluZyk7XG4gICAgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddID0gc3ltYm9sO1xuICAgIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltYm9sXSA9IHN0cmluZztcbiAgICByZXR1cm4gc3ltYm9sO1xuICB9LFxuICAvLyBgU3ltYm9sLmtleUZvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmtleWZvclxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCcpO1xuICAgIGlmIChoYXNPd24oU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSwgc3ltKSkgcmV0dXJuIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltXTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IGZhbHNlOyB9XG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIC8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Jcbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlzeW1ib2xzXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IGZhaWxzKGZ1bmN0aW9uICgpIHsgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYoMSk7IH0pIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIGBKU09OLnN0cmluZ2lmeWAgbWV0aG9kIGJlaGF2aW9yIHdpdGggc3ltYm9sc1xuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1qc29uLnN0cmluZ2lmeVxuaWYgKCRzdHJpbmdpZnkpIHtcbiAgdmFyIEZPUkNFRF9KU09OX1NUUklOR0lGWSA9ICFOQVRJVkVfU1lNQk9MIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3ltYm9sID0gJFN5bWJvbCgpO1xuICAgIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gICAgcmV0dXJuICRzdHJpbmdpZnkoW3N5bWJvbF0pICE9ICdbbnVsbF0nXG4gICAgICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgICAgIHx8ICRzdHJpbmdpZnkoeyBhOiBzeW1ib2wgfSkgIT0gJ3t9J1xuICAgICAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgICAgIHx8ICRzdHJpbmdpZnkoT2JqZWN0KHN5bWJvbCkpICE9ICd7fSc7XG4gIH0pO1xuXG4gICQoeyB0YXJnZXQ6ICdKU09OJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRURfSlNPTl9TVFJJTkdJRlkgfSwge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gICAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQsIHJlcGxhY2VyLCBzcGFjZSkge1xuICAgICAgdmFyIGFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cyk7XG4gICAgICB2YXIgJHJlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0NhbGxhYmxlKCRyZXBsYWNlcikpIHZhbHVlID0gY2FsbCgkcmVwbGFjZXIsIHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICAgIHJldHVybiBhcHBseSgkc3RyaW5naWZ5LCBudWxsLCBhcmdzKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuaWYgKCFTeW1ib2xQcm90b3R5cGVbVE9fUFJJTUlUSVZFXSkge1xuICB2YXIgdmFsdWVPZiA9IFN5bWJvbFByb3RvdHlwZS52YWx1ZU9mO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIC5sZW5ndGhcbiAgcmVkZWZpbmUoU3ltYm9sUHJvdG90eXBlLCBUT19QUklNSVRJVkUsIGZ1bmN0aW9uIChoaW50KSB7XG4gICAgLy8gVE9ETzogaW1wcm92ZSBoaW50IGxvZ2ljXG4gICAgcmV0dXJuIGNhbGwodmFsdWVPZiwgdGhpcyk7XG4gIH0pO1xufVxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11gIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3N0cmluZ3RhZ1xuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgU1lNQk9MKTtcblxuaGlkZGVuS2V5c1tISURERU5dID0gdHJ1ZTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wubWF0Y2hBbGxgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5tYXRjaGFsbFxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdtYXRjaEFsbCcpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5tYXRjaGAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLm1hdGNoXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnJlcGxhY2VgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5yZXBsYWNlXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3JlcGxhY2UnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuc2VhcmNoYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuc2VhcmNoXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3NlYXJjaCcpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5zcGVjaWVzYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuc3BlY2llc1xuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnNwbGl0YCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuc3BsaXRcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnc3BsaXQnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wudG9QcmltaXRpdmVgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC50b3ByaW1pdGl2ZVxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC50b1N0cmluZ1RhZ2Agd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnRvc3RyaW5ndGFnXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnVuc2NvcGFibGVzYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wudW5zY29wYWJsZXNcbmRlZmluZVdlbGxLbm93blN5bWJvbCgndW5zY29wYWJsZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmF0YCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXJlbGF0aXZlLWluZGV4aW5nLW1ldGhvZFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnYXQnLCBmdW5jdGlvbiBhdChpbmRleCkge1xuICB2YXIgTyA9IGFUeXBlZEFycmF5KHRoaXMpO1xuICB2YXIgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gIHZhciByZWxhdGl2ZUluZGV4ID0gdG9JbnRlZ2VyT3JJbmZpbml0eShpbmRleCk7XG4gIHZhciBrID0gcmVsYXRpdmVJbmRleCA+PSAwID8gcmVsYXRpdmVJbmRleCA6IGxlbiArIHJlbGF0aXZlSW5kZXg7XG4gIHJldHVybiAoayA8IDAgfHwgayA+PSBsZW4pID8gdW5kZWZpbmVkIDogT1trXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRBcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktY29weS13aXRoaW4nKTtcblxudmFyIHUkQXJyYXlDb3B5V2l0aGluID0gdW5jdXJyeVRoaXMoJEFycmF5Q29weVdpdGhpbik7XG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmNvcHlXaXRoaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmNvcHl3aXRoaW5cbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2NvcHlXaXRoaW4nLCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCwgc3RhcnQgLyogLCBlbmQgKi8pIHtcbiAgcmV0dXJuIHUkQXJyYXlDb3B5V2l0aGluKGFUeXBlZEFycmF5KHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZXZlcnk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmV2ZXJ5XG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdldmVyeScsIGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZXZlcnkoYVR5cGVkQXJyYXkodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyICRmaWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZpbGwnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maWxsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5maWxsXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdmaWxsJywgZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0LCBlbmQgKi8pIHtcbiAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHJldHVybiBjYWxsKFxuICAgICRmaWxsLFxuICAgIGFUeXBlZEFycmF5KHRoaXMpLFxuICAgIHZhbHVlLFxuICAgIGxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsXG4gICAgbGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZFxuICApO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maWx0ZXI7XG52YXIgZnJvbVNwZWNpZXNBbmRMaXN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWZyb20tc3BlY2llcy1hbmQtbGlzdCcpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuZmlsdGVyXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdmaWx0ZXInLCBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgdmFyIGxpc3QgPSAkZmlsdGVyKGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIHJldHVybiBmcm9tU3BlY2llc0FuZExpc3QodGhpcywgbGlzdCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkZmluZEluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbmRJbmRleDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmZpbmRpbmRleFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmluZEluZGV4JywgZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRmaW5kSW5kZXgoYVR5cGVkQXJyYXkodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmluZDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5maW5kXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdmaW5kJywgZnVuY3Rpb24gZmluZChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZmluZChhVHlwZWRBcnJheSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYEZsb2F0MzJBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ0Zsb2F0MzInLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYEZsb2F0NjRBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ0Zsb2F0NjQnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmZvcmVhY2hcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2ZvckVhY2gnLCBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICRmb3JFYWNoKGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9ycy1yZXF1aXJlLXdyYXBwZXJzJyk7XG52YXIgZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJykuZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZDtcbnZhciB0eXBlZEFycmF5RnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1mcm9tJyk7XG5cbi8vIGAlVHlwZWRBcnJheSUuZnJvbWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5mcm9tXG5leHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kKCdmcm9tJywgdHlwZWRBcnJheUZyb20sIFRZUEVEX0FSUkFZU19DT05TVFJVQ1RPUlNfUkVRVUlSRVNfV1JBUFBFUlMpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluY2x1ZGVzO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5pbmNsdWRlc1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnaW5jbHVkZXMnLCBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gIHJldHVybiAkaW5jbHVkZXMoYVR5cGVkQXJyYXkodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5pbmRleG9mXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdpbmRleE9mJywgZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gIHJldHVybiAkaW5kZXhPZihhVHlwZWRBcnJheSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBJbnQxNkFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignSW50MTYnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBJbnQzMkFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignSW50MzInLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBJbnQ4QXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdJbnQ4JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgQXJyYXlJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG52YXIgYXJyYXlWYWx1ZXMgPSB1bmN1cnJ5VGhpcyhBcnJheUl0ZXJhdG9ycy52YWx1ZXMpO1xudmFyIGFycmF5S2V5cyA9IHVuY3VycnlUaGlzKEFycmF5SXRlcmF0b3JzLmtleXMpO1xudmFyIGFycmF5RW50cmllcyA9IHVuY3VycnlUaGlzKEFycmF5SXRlcmF0b3JzLmVudHJpZXMpO1xudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBVaW50OEFycmF5ICYmIFVpbnQ4QXJyYXkucHJvdG90eXBlO1xuXG52YXIgR0VORVJJQyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdLmNhbGwoWzFdKTtcbn0pO1xuXG52YXIgSVRFUkFUT1JfSVNfVkFMVUVTID0gISFUeXBlZEFycmF5UHJvdG90eXBlXG4gICYmIFR5cGVkQXJyYXlQcm90b3R5cGUudmFsdWVzXG4gICYmIFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdID09PSBUeXBlZEFycmF5UHJvdG90eXBlLnZhbHVlc1xuICAmJiBUeXBlZEFycmF5UHJvdG90eXBlLnZhbHVlcy5uYW1lID09PSAndmFsdWVzJztcblxudmFyIHR5cGVkQXJyYXlWYWx1ZXMgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gIHJldHVybiBhcnJheVZhbHVlcyhhVHlwZWRBcnJheSh0aGlzKSk7XG59O1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5lbnRyaWVzXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdlbnRyaWVzJywgZnVuY3Rpb24gZW50cmllcygpIHtcbiAgcmV0dXJuIGFycmF5RW50cmllcyhhVHlwZWRBcnJheSh0aGlzKSk7XG59LCBHRU5FUklDKTtcbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmtleXNcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2tleXMnLCBmdW5jdGlvbiBrZXlzKCkge1xuICByZXR1cm4gYXJyYXlLZXlzKGFUeXBlZEFycmF5KHRoaXMpKTtcbn0sIEdFTkVSSUMpO1xuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS52YWx1ZXNcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3ZhbHVlcycsIHR5cGVkQXJyYXlWYWx1ZXMsIEdFTkVSSUMgfHwgIUlURVJBVE9SX0lTX1ZBTFVFUywgeyBuYW1lOiAndmFsdWVzJyB9KTtcbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKElURVJBVE9SLCB0eXBlZEFycmF5VmFsdWVzLCBHRU5FUklDIHx8ICFJVEVSQVRPUl9JU19WQUxVRVMsIHsgbmFtZTogJ3ZhbHVlcycgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciAkam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5qb2luYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5qb2luXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdqb2luJywgZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgcmV0dXJuICRqb2luKGFUeXBlZEFycmF5KHRoaXMpLCBzZXBhcmF0b3IpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciAkbGFzdEluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbGFzdC1pbmRleC1vZicpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmxhc3RJbmRleE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5sYXN0aW5kZXhvZlxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnbGFzdEluZGV4T2YnLCBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICByZXR1cm4gYXBwbHkoJGxhc3RJbmRleE9mLCBhVHlwZWRBcnJheSh0aGlzKSwgbGVuZ3RoID4gMSA/IFtzZWFyY2hFbGVtZW50LCBhcmd1bWVudHNbMV1dIDogW3NlYXJjaEVsZW1lbnRdKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykubWFwO1xudmFyIHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUubWFwXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdtYXAnLCBmdW5jdGlvbiBtYXAobWFwZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkbWFwKGFUeXBlZEFycmF5KHRoaXMpLCBtYXBmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gbmV3ICh0eXBlZEFycmF5U3BlY2llc0NvbnN0cnVjdG9yKE8pKShsZW5ndGgpO1xuICB9KTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIFRZUEVEX0FSUkFZU19DT05TVFJVQ1RPUlNfUkVRVUlSRVNfV1JBUFBFUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3JzLXJlcXVpcmUtd3JhcHBlcnMnKTtcblxudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7XG52YXIgZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5vZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5vZlxuZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCgnb2YnLCBmdW5jdGlvbiBvZigvKiAuLi5pdGVtcyAqLykge1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IG5ldyAoYVR5cGVkQXJyYXlDb25zdHJ1Y3Rvcih0aGlzKSkobGVuZ3RoKTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4KytdO1xuICByZXR1cm4gcmVzdWx0O1xufSwgVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJHJlZHVjZVJpZ2h0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXJlZHVjZScpLnJpZ2h0O1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnJlZHVjZVJpY2h0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5yZWR1Y2VyaWdodFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgncmVkdWNlUmlnaHQnLCBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICByZXR1cm4gJHJlZHVjZVJpZ2h0KGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBsZW5ndGgsIGxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1yZWR1Y2UnKS5sZWZ0O1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUucmVkdWNlXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdyZWR1Y2UnLCBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgcmV0dXJuICRyZWR1Y2UoYVR5cGVkQXJyYXkodGhpcyksIGNhbGxiYWNrZm4sIGxlbmd0aCwgbGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUucmV2ZXJzZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUucmV2ZXJzZVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgncmV2ZXJzZScsIGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgdmFyIGxlbmd0aCA9IGFUeXBlZEFycmF5KHRoYXQpLmxlbmd0aDtcbiAgdmFyIG1pZGRsZSA9IGZsb29yKGxlbmd0aCAvIDIpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgdmFsdWU7XG4gIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xuICAgIHZhbHVlID0gdGhhdFtpbmRleF07XG4gICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xuICB9IHJldHVybiB0aGF0O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgdG9PZmZzZXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2Zmc2V0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG52YXIgSW50OEFycmF5ID0gZ2xvYmFsLkludDhBcnJheTtcbnZhciBJbnQ4QXJyYXlQcm90b3R5cGUgPSBJbnQ4QXJyYXkgJiYgSW50OEFycmF5LnByb3RvdHlwZTtcbnZhciAkc2V0ID0gSW50OEFycmF5UHJvdG90eXBlICYmIEludDhBcnJheVByb3RvdHlwZS5zZXQ7XG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbnZhciBXT1JLU19XSVRIX09CSkVDVFNfQU5EX0dFRVJJQ19PTl9UWVBFRF9BUlJBWVMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tdHlwZWQtYXJyYXlzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHZhciBhcnJheSA9IG5ldyBVaW50OENsYW1wZWRBcnJheSgyKTtcbiAgY2FsbCgkc2V0LCBhcnJheSwgeyBsZW5ndGg6IDEsIDA6IDMgfSwgMSk7XG4gIHJldHVybiBhcnJheVsxXSAhPT0gMztcbn0pO1xuXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0xMTI5NCBhbmQgb3RoZXJcbnZhciBUT19PQkpFQ1RfQlVHID0gV09SS1NfV0lUSF9PQkpFQ1RTX0FORF9HRUVSSUNfT05fVFlQRURfQVJSQVlTICYmIEFycmF5QnVmZmVyVmlld0NvcmUuTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnJheSA9IG5ldyBJbnQ4QXJyYXkoMik7XG4gIGFycmF5LnNldCgxKTtcbiAgYXJyYXkuc2V0KCcyJywgMSk7XG4gIHJldHVybiBhcnJheVswXSAhPT0gMCB8fCBhcnJheVsxXSAhPT0gMjtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zZXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnNldFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc2V0JywgZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiAsIG9mZnNldCAqLykge1xuICBhVHlwZWRBcnJheSh0aGlzKTtcbiAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAxKTtcbiAgdmFyIHNyYyA9IHRvSW5kZXhlZE9iamVjdChhcnJheUxpa2UpO1xuICBpZiAoV09SS1NfV0lUSF9PQkpFQ1RTX0FORF9HRUVSSUNfT05fVFlQRURfQVJSQVlTKSByZXR1cm4gY2FsbCgkc2V0LCB0aGlzLCBzcmMsIG9mZnNldCk7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgdmFyIGxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKHNyYyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCcpO1xuICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xufSwgIVdPUktTX1dJVEhfT0JKRUNUU19BTkRfR0VFUklDX09OX1RZUEVEX0FSUkFZUyB8fCBUT19PQkpFQ1RfQlVHKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciB0eXBlZEFycmF5U3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tdHlwZWQtYXJyYXlzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIG5ldyBJbnQ4QXJyYXkoMSkuc2xpY2UoKTtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuc2xpY2VcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3NsaWNlJywgZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICB2YXIgbGlzdCA9IGFycmF5U2xpY2UoYVR5cGVkQXJyYXkodGhpcyksIHN0YXJ0LCBlbmQpO1xuICB2YXIgQyA9IHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IodGhpcyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gIHJldHVybiByZXN1bHQ7XG59LCBGT1JDRUQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRzb21lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLnNvbWU7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuc29tZVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc29tZScsIGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRzb21lKGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGludGVybmFsU29ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zb3J0Jyk7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgRkYgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWZmLXZlcnNpb24nKTtcbnZhciBJRV9PUl9FREdFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pZS1vci1lZGdlJyk7XG52YXIgVjggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcbnZhciBXRUJLSVQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXdlYmtpdC12ZXJzaW9uJyk7XG5cbnZhciBBcnJheSA9IGdsb2JhbC5BcnJheTtcbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciBVaW50MTZBcnJheSA9IGdsb2JhbC5VaW50MTZBcnJheTtcbnZhciB1biRTb3J0ID0gVWludDE2QXJyYXkgJiYgdW5jdXJyeVRoaXMoVWludDE2QXJyYXkucHJvdG90eXBlLnNvcnQpO1xuXG4vLyBXZWJLaXRcbnZhciBBQ0NFUFRfSU5DT1JSRUNUX0FSR1VNRU5UUyA9ICEhdW4kU29ydCAmJiAhKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdW4kU29ydChuZXcgVWludDE2QXJyYXkoMiksIG51bGwpO1xufSkgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB1biRTb3J0KG5ldyBVaW50MTZBcnJheSgyKSwge30pO1xufSkpO1xuXG52YXIgU1RBQkxFX1NPUlQgPSAhIXVuJFNvcnQgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZmVhdHVyZSBkZXRlY3Rpb24gY2FuIGJlIHRvbyBzbG93LCBzbyBjaGVjayBlbmdpbmVzIHZlcnNpb25zXG4gIGlmIChWOCkgcmV0dXJuIFY4IDwgNzQ7XG4gIGlmIChGRikgcmV0dXJuIEZGIDwgNjc7XG4gIGlmIChJRV9PUl9FREdFKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKFdFQktJVCkgcmV0dXJuIFdFQktJVCA8IDYwMjtcblxuICB2YXIgYXJyYXkgPSBuZXcgVWludDE2QXJyYXkoNTE2KTtcbiAgdmFyIGV4cGVjdGVkID0gQXJyYXkoNTE2KTtcbiAgdmFyIGluZGV4LCBtb2Q7XG5cbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgNTE2OyBpbmRleCsrKSB7XG4gICAgbW9kID0gaW5kZXggJSA0O1xuICAgIGFycmF5W2luZGV4XSA9IDUxNSAtIGluZGV4O1xuICAgIGV4cGVjdGVkW2luZGV4XSA9IGluZGV4IC0gMiAqIG1vZCArIDM7XG4gIH1cblxuICB1biRTb3J0KGFycmF5LCBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiAoYSAvIDQgfCAwKSAtIChiIC8gNCB8IDApO1xuICB9KTtcblxuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCA1MTY7IGluZGV4KyspIHtcbiAgICBpZiAoYXJyYXlbaW5kZXhdICE9PSBleHBlY3RlZFtpbmRleF0pIHJldHVybiB0cnVlO1xuICB9XG59KTtcblxudmFyIGdldFNvcnRDb21wYXJlID0gZnVuY3Rpb24gKGNvbXBhcmVmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICBpZiAoY29tcGFyZWZuICE9PSB1bmRlZmluZWQpIHJldHVybiArY29tcGFyZWZuKHgsIHkpIHx8IDA7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICBpZiAoeSAhPT0geSkgcmV0dXJuIC0xO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKHggIT09IHgpIHJldHVybiAxO1xuICAgIGlmICh4ID09PSAwICYmIHkgPT09IDApIHJldHVybiAxIC8geCA+IDAgJiYgMSAvIHkgPCAwID8gMSA6IC0xO1xuICAgIHJldHVybiB4ID4geTtcbiAgfTtcbn07XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnNvcnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnNvcnRcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3NvcnQnLCBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICBpZiAoY29tcGFyZWZuICE9PSB1bmRlZmluZWQpIGFDYWxsYWJsZShjb21wYXJlZm4pO1xuICBpZiAoU1RBQkxFX1NPUlQpIHJldHVybiB1biRTb3J0KHRoaXMsIGNvbXBhcmVmbik7XG5cbiAgcmV0dXJuIGludGVybmFsU29ydChhVHlwZWRBcnJheSh0aGlzKSwgZ2V0U29ydENvbXBhcmUoY29tcGFyZWZuKSk7XG59LCAhU1RBQkxFX1NPUlQgfHwgQUNDRVBUX0lOQ09SUkVDVF9BUkdVTUVOVFMpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnN1YmFycmF5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5zdWJhcnJheVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc3ViYXJyYXknLCBmdW5jdGlvbiBzdWJhcnJheShiZWdpbiwgZW5kKSB7XG4gIHZhciBPID0gYVR5cGVkQXJyYXkodGhpcyk7XG4gIHZhciBsZW5ndGggPSBPLmxlbmd0aDtcbiAgdmFyIGJlZ2luSW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gIHZhciBDID0gdHlwZWRBcnJheVNwZWNpZXNDb25zdHJ1Y3RvcihPKTtcbiAgcmV0dXJuIG5ldyBDKFxuICAgIE8uYnVmZmVyLFxuICAgIE8uYnl0ZU9mZnNldCArIGJlZ2luSW5kZXggKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxuICAgIHRvTGVuZ3RoKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCkpIC0gYmVnaW5JbmRleClcbiAgKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xuXG52YXIgSW50OEFycmF5ID0gZ2xvYmFsLkludDhBcnJheTtcbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciAkdG9Mb2NhbGVTdHJpbmcgPSBbXS50b0xvY2FsZVN0cmluZztcblxuLy8gaU9TIFNhZmFyaSA2LnggZmFpbHMgaGVyZVxudmFyIFRPX0xPQ0FMRV9TVFJJTkdfQlVHID0gISFJbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkdG9Mb2NhbGVTdHJpbmcuY2FsbChuZXcgSW50OEFycmF5KDEpKTtcbn0pO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IEludDhBcnJheShbMSwgMl0pLnRvTG9jYWxlU3RyaW5nKCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBJbnQ4QXJyYXkucHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS50b0xvY2FsZVN0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUudG9sb2NhbGVzdHJpbmdcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3RvTG9jYWxlU3RyaW5nJywgZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKSB7XG4gIHJldHVybiBhcHBseShcbiAgICAkdG9Mb2NhbGVTdHJpbmcsXG4gICAgVE9fTE9DQUxFX1NUUklOR19CVUcgPyBhcnJheVNsaWNlKGFUeXBlZEFycmF5KHRoaXMpKSA6IGFUeXBlZEFycmF5KHRoaXMpLFxuICAgIGFycmF5U2xpY2UoYXJndW1lbnRzKVxuICApO1xufSwgRk9SQ0VEKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xudmFyIFVpbnQ4QXJyYXlQcm90b3R5cGUgPSBVaW50OEFycmF5ICYmIFVpbnQ4QXJyYXkucHJvdG90eXBlIHx8IHt9O1xudmFyIGFycmF5VG9TdHJpbmcgPSBbXS50b1N0cmluZztcbnZhciBqb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG5cbmlmIChmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9TdHJpbmcuY2FsbCh7fSk7IH0pKSB7XG4gIGFycmF5VG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gam9pbih0aGlzKTtcbiAgfTtcbn1cblxudmFyIElTX05PVF9BUlJBWV9NRVRIT0QgPSBVaW50OEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmc7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS50b3N0cmluZ1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgndG9TdHJpbmcnLCBhcnJheVRvU3RyaW5nLCBJU19OT1RfQVJSQVlfTUVUSE9EKTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYFVpbnQxNkFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignVWludDE2JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYFVpbnQzMkFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignVWludDMyJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYFVpbnQ4QXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdVaW50OCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYFVpbnQ4Q2xhbXBlZEFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignVWludDgnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0sIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG5cbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKC8uLy5leGVjKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxudmFyIGhleDIgPSAvXltcXGRhLWZdezJ9JC9pO1xudmFyIGhleDQgPSAvXltcXGRhLWZdezR9JC9pO1xuXG4vLyBgdW5lc2NhcGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy11bmVzY2FwZS1zdHJpbmdcbiQoeyBnbG9iYWw6IHRydWUgfSwge1xuICB1bmVzY2FwZTogZnVuY3Rpb24gdW5lc2NhcGUoc3RyaW5nKSB7XG4gICAgdmFyIHN0ciA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIHZhciBsZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNociwgcGFydDtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNociA9IGNoYXJBdChzdHIsIGluZGV4KyspO1xuICAgICAgaWYgKGNociA9PT0gJyUnKSB7XG4gICAgICAgIGlmIChjaGFyQXQoc3RyLCBpbmRleCkgPT09ICd1Jykge1xuICAgICAgICAgIHBhcnQgPSBzdHJpbmdTbGljZShzdHIsIGluZGV4ICsgMSwgaW5kZXggKyA1KTtcbiAgICAgICAgICBpZiAoZXhlYyhoZXg0LCBwYXJ0KSkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IGZyb21DaGFyQ29kZShwYXJzZUludChwYXJ0LCAxNikpO1xuICAgICAgICAgICAgaW5kZXggKz0gNTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJ0ID0gc3RyaW5nU2xpY2Uoc3RyLCBpbmRleCwgaW5kZXggKyAyKTtcbiAgICAgICAgICBpZiAoZXhlYyhoZXgyLCBwYXJ0KSkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IGZyb21DaGFyQ29kZShwYXJzZUludChwYXJ0LCAxNikpO1xuICAgICAgICAgICAgaW5kZXggKz0gMjtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzdWx0ICs9IGNocjtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBJbnRlcm5hbE1ldGFkYXRhTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJyk7XG52YXIgY29sbGVjdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uJyk7XG52YXIgY29sbGVjdGlvbldlYWsgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNFeHRlbnNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1leHRlbnNpYmxlJyk7XG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKS5lbmZvcmNlO1xudmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcblxudmFyIElTX0lFMTEgPSAhZ2xvYmFsLkFjdGl2ZVhPYmplY3QgJiYgJ0FjdGl2ZVhPYmplY3QnIGluIGdsb2JhbDtcbnZhciBJbnRlcm5hbFdlYWtNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG4vLyBgV2Vha01hcGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha21hcC1jb25zdHJ1Y3RvclxudmFyICRXZWFrTWFwID0gY29sbGVjdGlvbignV2Vha01hcCcsIHdyYXBwZXIsIGNvbGxlY3Rpb25XZWFrKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuLy8gV2UgY2FuJ3QgdXNlIGZlYXR1cmUgZGV0ZWN0aW9uIGJlY2F1c2UgaXQgY3Jhc2ggc29tZSBvbGQgSUUgYnVpbGRzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNDg1XG5pZiAoTkFUSVZFX1dFQUtfTUFQICYmIElTX0lFMTEpIHtcbiAgSW50ZXJuYWxXZWFrTWFwID0gY29sbGVjdGlvbldlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgJ1dlYWtNYXAnLCB0cnVlKTtcbiAgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZS5lbmFibGUoKTtcbiAgdmFyIFdlYWtNYXBQcm90b3R5cGUgPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gIHZhciBuYXRpdmVEZWxldGUgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlWydkZWxldGUnXSk7XG4gIHZhciBuYXRpdmVIYXMgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlLmhhcyk7XG4gIHZhciBuYXRpdmVHZXQgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlLmdldCk7XG4gIHZhciBuYXRpdmVTZXQgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlLnNldCk7XG4gIHJlZGVmaW5lQWxsKFdlYWtNYXBQcm90b3R5cGUsIHtcbiAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGtleSkgJiYgIWlzRXh0ZW5zaWJsZShrZXkpKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICBpZiAoIXN0YXRlLmZyb3plbikgc3RhdGUuZnJvemVuID0gbmV3IEludGVybmFsV2Vha01hcCgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlRGVsZXRlKHRoaXMsIGtleSkgfHwgc3RhdGUuZnJvemVuWydkZWxldGUnXShrZXkpO1xuICAgICAgfSByZXR1cm4gbmF0aXZlRGVsZXRlKHRoaXMsIGtleSk7XG4gICAgfSxcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgIGlmIChpc09iamVjdChrZXkpICYmICFpc0V4dGVuc2libGUoa2V5KSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKCFzdGF0ZS5mcm96ZW4pIHN0YXRlLmZyb3plbiA9IG5ldyBJbnRlcm5hbFdlYWtNYXAoKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUhhcyh0aGlzLCBrZXkpIHx8IHN0YXRlLmZyb3plbi5oYXMoa2V5KTtcbiAgICAgIH0gcmV0dXJuIG5hdGl2ZUhhcyh0aGlzLCBrZXkpO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSAmJiAhaXNFeHRlbnNpYmxlKGtleSkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghc3RhdGUuZnJvemVuKSBzdGF0ZS5mcm96ZW4gPSBuZXcgSW50ZXJuYWxXZWFrTWFwKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVIYXModGhpcywga2V5KSA/IG5hdGl2ZUdldCh0aGlzLCBrZXkpIDogc3RhdGUuZnJvemVuLmdldChrZXkpO1xuICAgICAgfSByZXR1cm4gbmF0aXZlR2V0KHRoaXMsIGtleSk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSAmJiAhaXNFeHRlbnNpYmxlKGtleSkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghc3RhdGUuZnJvemVuKSBzdGF0ZS5mcm96ZW4gPSBuZXcgSW50ZXJuYWxXZWFrTWFwKCk7XG4gICAgICAgIG5hdGl2ZUhhcyh0aGlzLCBrZXkpID8gbmF0aXZlU2V0KHRoaXMsIGtleSwgdmFsdWUpIDogc3RhdGUuZnJvemVuLnNldChrZXksIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBuYXRpdmVTZXQodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25XZWFrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24td2VhaycpO1xuXG4vLyBgV2Vha1NldGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha3NldC1jb25zdHJ1Y3RvclxuY29sbGVjdGlvbignV2Vha1NldCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gaW5pdCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIGNvbGxlY3Rpb25XZWFrKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgRE9NSXRlcmFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMnKTtcbnZhciBET01Ub2tlbkxpc3RQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLXRva2VuLWxpc3QtcHJvdG90eXBlJyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mb3ItZWFjaCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxudmFyIGhhbmRsZVByb3RvdHlwZSA9IGZ1bmN0aW9uIChDb2xsZWN0aW9uUHJvdG90eXBlKSB7XG4gIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSAmJiBDb2xsZWN0aW9uUHJvdG90eXBlLmZvckVhY2ggIT09IGZvckVhY2gpIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsICdmb3JFYWNoJywgZm9yRWFjaCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoID0gZm9yRWFjaDtcbiAgfVxufTtcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICBpZiAoRE9NSXRlcmFibGVzW0NPTExFQ1RJT05fTkFNRV0pIHtcbiAgICBoYW5kbGVQcm90b3R5cGUoZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV0gJiYgZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV0ucHJvdG90eXBlKTtcbiAgfVxufVxuXG5oYW5kbGVQcm90b3R5cGUoRE9NVG9rZW5MaXN0UHJvdG90eXBlKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgRE9NSXRlcmFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMnKTtcbnZhciBET01Ub2tlbkxpc3RQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLXRva2VuLWxpc3QtcHJvdG90eXBlJyk7XG52YXIgQXJyYXlJdGVyYXRvck1ldGhvZHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JNZXRob2RzLnZhbHVlcztcblxudmFyIGhhbmRsZVByb3RvdHlwZSA9IGZ1bmN0aW9uIChDb2xsZWN0aW9uUHJvdG90eXBlLCBDT0xMRUNUSU9OX05BTUUpIHtcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUpIHtcbiAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gIT09IEFycmF5VmFsdWVzKSB0cnkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdID0gQXJyYXlWYWx1ZXM7XG4gICAgfVxuICAgIGlmICghQ29sbGVjdGlvblByb3RvdHlwZVtUT19TVFJJTkdfVEFHXSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIENPTExFQ1RJT05fTkFNRSk7XG4gICAgfVxuICAgIGlmIChET01JdGVyYWJsZXNbQ09MTEVDVElPTl9OQU1FXSkgZm9yICh2YXIgTUVUSE9EX05BTUUgaW4gQXJyYXlJdGVyYXRvck1ldGhvZHMpIHtcbiAgICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdICE9PSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pIHRyeSB7XG4gICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBNRVRIT0RfTkFNRSwgQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdID0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICBoYW5kbGVQcm90b3R5cGUoZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV0gJiYgZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV0ucHJvdG90eXBlLCBDT0xMRUNUSU9OX05BTUUpO1xufVxuXG5oYW5kbGVQcm90b3R5cGUoRE9NVG9rZW5MaXN0UHJvdG90eXBlLCAnRE9NVG9rZW5MaXN0Jyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0cnlOb2RlUmVxdWlyZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktbm9kZS1yZXF1aXJlJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgZGVmaW5lUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKS5mO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZXJyb3JUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lcnJvci10by1zdHJpbmcnKTtcbnZhciBub3JtYWxpemVTdHJpbmdBcmd1bWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3JtYWxpemUtc3RyaW5nLWFyZ3VtZW50Jyk7XG52YXIgRE9NRXhjZXB0aW9uQ29uc3RhbnRzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1leGNlcHRpb24tY29uc3RhbnRzJyk7XG52YXIgY2xlYXJFcnJvclN0YWNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsZWFyLWVycm9yLXN0YWNrJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBET01fRVhDRVBUSU9OID0gJ0RPTUV4Y2VwdGlvbic7XG52YXIgREFUQV9DTE9ORV9FUlIgPSAnREFUQV9DTE9ORV9FUlInO1xudmFyIEVycm9yID0gZ2V0QnVpbHRJbignRXJyb3InKTtcbi8vIE5vZGVKUyA8IDE3LjAgZG9lcyBub3QgZXhwb3NlIGBET01FeGNlcHRpb25gIHRvIGdsb2JhbFxudmFyIE5hdGl2ZURPTUV4Y2VwdGlvbiA9IGdldEJ1aWx0SW4oRE9NX0VYQ0VQVElPTikgfHwgKGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBOb2RlSlMgPCAxNS4wIGRvZXMgbm90IGV4cG9zZSBgTWVzc2FnZUNoYW5uZWxgIHRvIGdsb2JhbFxuICAgIHZhciBNZXNzYWdlQ2hhbm5lbCA9IGdldEJ1aWx0SW4oJ01lc3NhZ2VDaGFubmVsJykgfHwgdHJ5Tm9kZVJlcXVpcmUoJ3dvcmtlcl90aHJlYWRzJykuTWVzc2FnZUNoYW5uZWw7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXdlYWstbWFwLCB1bmljb3JuL3JlcXVpcmUtcG9zdC1tZXNzYWdlLXRhcmdldC1vcmlnaW4gLS0gc2FmZVxuICAgIG5ldyBNZXNzYWdlQ2hhbm5lbCgpLnBvcnQxLnBvc3RNZXNzYWdlKG5ldyBXZWFrTWFwKCkpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChlcnJvci5uYW1lID09IERBVEFfQ0xPTkVfRVJSICYmIGVycm9yLmNvZGUgPT0gMjUpIHJldHVybiBlcnJvci5jb25zdHJ1Y3RvcjtcbiAgfVxufSkoKTtcbnZhciBOYXRpdmVET01FeGNlcHRpb25Qcm90b3R5cGUgPSBOYXRpdmVET01FeGNlcHRpb24gJiYgTmF0aXZlRE9NRXhjZXB0aW9uLnByb3RvdHlwZTtcbnZhciBFcnJvclByb3RvdHlwZSA9IEVycm9yLnByb3RvdHlwZTtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKERPTV9FWENFUFRJT04pO1xudmFyIEhBU19TVEFDSyA9ICdzdGFjaycgaW4gRXJyb3IoRE9NX0VYQ0VQVElPTik7XG5cbnZhciBjb2RlRm9yID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIGhhc093bihET01FeGNlcHRpb25Db25zdGFudHMsIG5hbWUpICYmIERPTUV4Y2VwdGlvbkNvbnN0YW50c1tuYW1lXS5tID8gRE9NRXhjZXB0aW9uQ29uc3RhbnRzW25hbWVdLmMgOiAwO1xufTtcblxudmFyICRET01FeGNlcHRpb24gPSBmdW5jdGlvbiBET01FeGNlcHRpb24oKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgRE9NRXhjZXB0aW9uUHJvdG90eXBlKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtZXNzYWdlID0gbm9ybWFsaXplU3RyaW5nQXJndW1lbnQoYXJndW1lbnRzTGVuZ3RoIDwgMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSk7XG4gIHZhciBuYW1lID0gbm9ybWFsaXplU3RyaW5nQXJndW1lbnQoYXJndW1lbnRzTGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXSwgJ0Vycm9yJyk7XG4gIHZhciBjb2RlID0gY29kZUZvcihuYW1lKTtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogRE9NX0VYQ0VQVElPTixcbiAgICBuYW1lOiBuYW1lLFxuICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgY29kZTogY29kZVxuICB9KTtcbiAgaWYgKCFERVNDUklQVE9SUykge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICB9XG4gIGlmIChIQVNfU1RBQ0spIHtcbiAgICB2YXIgZXJyb3IgPSBFcnJvcihtZXNzYWdlKTtcbiAgICBlcnJvci5uYW1lID0gRE9NX0VYQ0VQVElPTjtcbiAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc3RhY2snLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgY2xlYXJFcnJvclN0YWNrKGVycm9yLnN0YWNrLCAxKSkpO1xuICB9XG59O1xuXG52YXIgRE9NRXhjZXB0aW9uUHJvdG90eXBlID0gJERPTUV4Y2VwdGlvbi5wcm90b3R5cGUgPSBjcmVhdGUoRXJyb3JQcm90b3R5cGUpO1xuXG52YXIgY3JlYXRlR2V0dGVyRGVzY3JpcHRvciA9IGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCBnZXQ6IGdldCB9O1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGNyZWF0ZUdldHRlckRlc2NyaXB0b3IoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpW2tleV07XG4gIH0pO1xufTtcblxuaWYgKERFU0NSSVBUT1JTKSBkZWZpbmVQcm9wZXJ0aWVzKERPTUV4Y2VwdGlvblByb3RvdHlwZSwge1xuICBuYW1lOiBnZXR0ZXJGb3IoJ25hbWUnKSxcbiAgbWVzc2FnZTogZ2V0dGVyRm9yKCdtZXNzYWdlJyksXG4gIGNvZGU6IGdldHRlckZvcignY29kZScpXG59KTtcblxuZGVmaW5lUHJvcGVydHkoRE9NRXhjZXB0aW9uUHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgJERPTUV4Y2VwdGlvbikpO1xuXG4vLyBGRjM2LSBET01FeGNlcHRpb24gaXMgYSBmdW5jdGlvbiwgYnV0IGNhbid0IGJlIGNvbnN0cnVjdGVkXG52YXIgSU5DT1JSRUNUX0NPTlNUUlVDVE9SID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIShuZXcgTmF0aXZlRE9NRXhjZXB0aW9uKCkgaW5zdGFuY2VvZiBFcnJvcik7XG59KTtcblxuLy8gU2FmYXJpIDEwLjEgLyBDaHJvbWUgMzItIC8gSUU4LSBET01FeGNlcHRpb24ucHJvdG90eXBlLnRvU3RyaW5nIGJ1Z3NcbnZhciBJTkNPUlJFQ1RfVE9fU1RSSU5HID0gSU5DT1JSRUNUX0NPTlNUUlVDVE9SIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIEVycm9yUHJvdG90eXBlLnRvU3RyaW5nICE9PSBlcnJvclRvU3RyaW5nIHx8IFN0cmluZyhuZXcgTmF0aXZlRE9NRXhjZXB0aW9uKDEsIDIpKSAhPT0gJzI6IDEnO1xufSk7XG5cbi8vIERlbm8gMS42LjMtIERPTUV4Y2VwdGlvbi5wcm90b3R5cGUuY29kZSBqdXN0IG1pc3NlZFxudmFyIElOQ09SUkVDVF9DT0RFID0gSU5DT1JSRUNUX0NPTlNUUlVDVE9SIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBOYXRpdmVET01FeGNlcHRpb24oMSwgJ0RhdGFDbG9uZUVycm9yJykuY29kZSAhPT0gMjU7XG59KTtcblxuLy8gRGVubyAxLjYuMy0gRE9NRXhjZXB0aW9uIGNvbnN0YW50cyBqdXN0IG1pc3NlZFxudmFyIE1JU1NFRF9DT05TVEFOVFMgPSBJTkNPUlJFQ1RfQ09OU1RSVUNUT1JcbiAgfHwgTmF0aXZlRE9NRXhjZXB0aW9uW0RBVEFfQ0xPTkVfRVJSXSAhPT0gMjVcbiAgfHwgTmF0aXZlRE9NRXhjZXB0aW9uUHJvdG90eXBlW0RBVEFfQ0xPTkVfRVJSXSAhPT0gMjU7XG5cbnZhciBGT1JDRURfQ09OU1RSVUNUT1IgPSBJU19QVVJFID8gSU5DT1JSRUNUX1RPX1NUUklORyB8fCBJTkNPUlJFQ1RfQ09ERSB8fCBNSVNTRURfQ09OU1RBTlRTIDogSU5DT1JSRUNUX0NPTlNUUlVDVE9SO1xuXG4vLyBgRE9NRXhjZXB0aW9uYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly93ZWJpZGwuc3BlYy53aGF0d2cub3JnLyNpZGwtRE9NRXhjZXB0aW9uXG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRF9DT05TVFJVQ1RPUiB9LCB7XG4gIERPTUV4Y2VwdGlvbjogRk9SQ0VEX0NPTlNUUlVDVE9SID8gJERPTUV4Y2VwdGlvbiA6IE5hdGl2ZURPTUV4Y2VwdGlvblxufSk7XG5cbnZhciBQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uID0gZ2V0QnVpbHRJbihET01fRVhDRVBUSU9OKTtcbnZhciBQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uUHJvdG90eXBlID0gUG9seWZpbGxlZERPTUV4Y2VwdGlvbi5wcm90b3R5cGU7XG5cbmlmIChJTkNPUlJFQ1RfVE9fU1RSSU5HICYmIChJU19QVVJFIHx8IE5hdGl2ZURPTUV4Y2VwdGlvbiA9PT0gUG9seWZpbGxlZERPTUV4Y2VwdGlvbikpIHtcbiAgcmVkZWZpbmUoUG9seWZpbGxlZERPTUV4Y2VwdGlvblByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZXJyb3JUb1N0cmluZyk7XG59XG5cbmlmIChJTkNPUlJFQ1RfQ09ERSAmJiBERVNDUklQVE9SUyAmJiBOYXRpdmVET01FeGNlcHRpb24gPT09IFBvbHlmaWxsZWRET01FeGNlcHRpb24pIHtcbiAgZGVmaW5lUHJvcGVydHkoUG9seWZpbGxlZERPTUV4Y2VwdGlvblByb3RvdHlwZSwgJ2NvZGUnLCBjcmVhdGVHZXR0ZXJEZXNjcmlwdG9yKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY29kZUZvcihhbk9iamVjdCh0aGlzKS5uYW1lKTtcbiAgfSkpO1xufVxuXG5mb3IgKHZhciBrZXkgaW4gRE9NRXhjZXB0aW9uQ29uc3RhbnRzKSBpZiAoaGFzT3duKERPTUV4Y2VwdGlvbkNvbnN0YW50cywga2V5KSkge1xuICB2YXIgY29uc3RhbnQgPSBET01FeGNlcHRpb25Db25zdGFudHNba2V5XTtcbiAgdmFyIGNvbnN0YW50TmFtZSA9IGNvbnN0YW50LnM7XG4gIHZhciBkZXNjcmlwdG9yID0gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDYsIGNvbnN0YW50LmMpO1xuICBpZiAoIWhhc093bihQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uLCBjb25zdGFudE5hbWUpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoUG9seWZpbGxlZERPTUV4Y2VwdGlvbiwgY29uc3RhbnROYW1lLCBkZXNjcmlwdG9yKTtcbiAgfVxuICBpZiAoIWhhc093bihQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uUHJvdG90eXBlLCBjb25zdGFudE5hbWUpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoUG9seWZpbGxlZERPTUV4Y2VwdGlvblByb3RvdHlwZSwgY29uc3RhbnROYW1lLCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgbm9ybWFsaXplU3RyaW5nQXJndW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm9ybWFsaXplLXN0cmluZy1hcmd1bWVudCcpO1xudmFyIERPTUV4Y2VwdGlvbkNvbnN0YW50cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20tZXhjZXB0aW9uLWNvbnN0YW50cycpO1xudmFyIGNsZWFyRXJyb3JTdGFjayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGVhci1lcnJvci1zdGFjaycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgRE9NX0VYQ0VQVElPTiA9ICdET01FeGNlcHRpb24nO1xudmFyIEVycm9yID0gZ2V0QnVpbHRJbignRXJyb3InKTtcbnZhciBOYXRpdmVET01FeGNlcHRpb24gPSBnZXRCdWlsdEluKERPTV9FWENFUFRJT04pO1xuXG52YXIgJERPTUV4Y2VwdGlvbiA9IGZ1bmN0aW9uIERPTUV4Y2VwdGlvbigpIHtcbiAgYW5JbnN0YW5jZSh0aGlzLCBET01FeGNlcHRpb25Qcm90b3R5cGUpO1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIG1lc3NhZ2UgPSBub3JtYWxpemVTdHJpbmdBcmd1bWVudChhcmd1bWVudHNMZW5ndGggPCAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKTtcbiAgdmFyIG5hbWUgPSBub3JtYWxpemVTdHJpbmdBcmd1bWVudChhcmd1bWVudHNMZW5ndGggPCAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdLCAnRXJyb3InKTtcbiAgdmFyIHRoYXQgPSBuZXcgTmF0aXZlRE9NRXhjZXB0aW9uKG1lc3NhZ2UsIG5hbWUpO1xuICB2YXIgZXJyb3IgPSBFcnJvcihtZXNzYWdlKTtcbiAgZXJyb3IubmFtZSA9IERPTV9FWENFUFRJT047XG4gIGRlZmluZVByb3BlcnR5KHRoYXQsICdzdGFjaycsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCBjbGVhckVycm9yU3RhY2soZXJyb3Iuc3RhY2ssIDEpKSk7XG4gIGluaGVyaXRJZlJlcXVpcmVkKHRoYXQsIHRoaXMsICRET01FeGNlcHRpb24pO1xuICByZXR1cm4gdGhhdDtcbn07XG5cbnZhciBET01FeGNlcHRpb25Qcm90b3R5cGUgPSAkRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IE5hdGl2ZURPTUV4Y2VwdGlvbi5wcm90b3R5cGU7XG5cbnZhciBFUlJPUl9IQVNfU1RBQ0sgPSAnc3RhY2snIGluIEVycm9yKERPTV9FWENFUFRJT04pO1xudmFyIERPTV9FWENFUFRJT05fSEFTX1NUQUNLID0gJ3N0YWNrJyBpbiBuZXcgTmF0aXZlRE9NRXhjZXB0aW9uKDEsIDIpO1xudmFyIEZPUkNFRF9DT05TVFJVQ1RPUiA9IEVSUk9SX0hBU19TVEFDSyAmJiAhRE9NX0VYQ0VQVElPTl9IQVNfU1RBQ0s7XG5cbi8vIGBET01FeGNlcHRpb25gIGNvbnN0cnVjdG9yIHBhdGNoIGZvciBgLnN0YWNrYCB3aGVyZSBpdCdzIHJlcXVpcmVkXG4vLyBodHRwczovL3dlYmlkbC5zcGVjLndoYXR3Zy5vcmcvI2VzLURPTUV4Y2VwdGlvbi1zcGVjaWFsbmVzc1xuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIHx8IEZPUkNFRF9DT05TVFJVQ1RPUiB9LCB7IC8vIFRPRE86IGZpeCBleHBvcnQgbG9naWNcbiAgRE9NRXhjZXB0aW9uOiBGT1JDRURfQ09OU1RSVUNUT1IgPyAkRE9NRXhjZXB0aW9uIDogTmF0aXZlRE9NRXhjZXB0aW9uXG59KTtcblxudmFyIFBvbHlmaWxsZWRET01FeGNlcHRpb24gPSBnZXRCdWlsdEluKERPTV9FWENFUFRJT04pO1xudmFyIFBvbHlmaWxsZWRET01FeGNlcHRpb25Qcm90b3R5cGUgPSBQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uLnByb3RvdHlwZTtcblxuaWYgKFBvbHlmaWxsZWRET01FeGNlcHRpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgIT09IFBvbHlmaWxsZWRET01FeGNlcHRpb24pIHtcbiAgaWYgKCFJU19QVVJFKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoUG9seWZpbGxlZERPTUV4Y2VwdGlvblByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIFBvbHlmaWxsZWRET01FeGNlcHRpb24pKTtcbiAgfVxuXG4gIGZvciAodmFyIGtleSBpbiBET01FeGNlcHRpb25Db25zdGFudHMpIGlmIChoYXNPd24oRE9NRXhjZXB0aW9uQ29uc3RhbnRzLCBrZXkpKSB7XG4gICAgdmFyIGNvbnN0YW50ID0gRE9NRXhjZXB0aW9uQ29uc3RhbnRzW2tleV07XG4gICAgdmFyIGNvbnN0YW50TmFtZSA9IGNvbnN0YW50LnM7XG4gICAgaWYgKCFoYXNPd24oUG9seWZpbGxlZERPTUV4Y2VwdGlvbiwgY29uc3RhbnROYW1lKSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkoUG9seWZpbGxlZERPTUV4Y2VwdGlvbiwgY29uc3RhbnROYW1lLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoNiwgY29uc3RhbnQuYykpO1xuICAgIH1cbiAgfVxufVxuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcblxudmFyIERPTV9FWENFUFRJT04gPSAnRE9NRXhjZXB0aW9uJztcblxuc2V0VG9TdHJpbmdUYWcoZ2V0QnVpbHRJbihET01fRVhDRVBUSU9OKSwgRE9NX0VYQ0VQVElPTik7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJyk7XG5cbnZhciBGT1JDRUQgPSAhZ2xvYmFsLnNldEltbWVkaWF0ZSB8fCAhZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xuXG4vLyBodHRwOi8vdzNjLmdpdGh1Yi5pby9zZXRJbW1lZGlhdGUvXG4kKHsgZ2xvYmFsOiB0cnVlLCBiaW5kOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGBzZXRJbW1lZGlhdGVgIG1ldGhvZFxuICAvLyBodHRwOi8vdzNjLmdpdGh1Yi5pby9zZXRJbW1lZGlhdGUvI3NpLXNldEltbWVkaWF0ZVxuICBzZXRJbW1lZGlhdGU6IHRhc2suc2V0LFxuICAvLyBgY2xlYXJJbW1lZGlhdGVgIG1ldGhvZFxuICAvLyBodHRwOi8vdzNjLmdpdGh1Yi5pby9zZXRJbW1lZGlhdGUvI3NpLWNsZWFySW1tZWRpYXRlXG4gIGNsZWFySW1tZWRpYXRlOiB0YXNrLmNsZWFyXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWljcm90YXNrJyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xuXG4vLyBgcXVldWVNaWNyb3Rhc2tgIG1ldGhvZFxuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvdGltZXJzLWFuZC11c2VyLXByb21wdHMuaHRtbCNkb20tcXVldWVtaWNyb3Rhc2tcbiQoeyBnbG9iYWw6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIG5vVGFyZ2V0R2V0OiB0cnVlIH0sIHtcbiAgcXVldWVNaWNyb3Rhc2s6IGZ1bmN0aW9uIHF1ZXVlTWljcm90YXNrKGZuKSB7XG4gICAgdmFyIGRvbWFpbiA9IElTX05PREUgJiYgcHJvY2Vzcy5kb21haW47XG4gICAgbWljcm90YXNrKGRvbWFpbiA/IGRvbWFpbi5iaW5kKGZuKSA6IGZuKTtcbiAgfVxufSk7XG4iLCJ2YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRpbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgcmVnRXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgRVJST1JfU1RBQ0tfSU5TVEFMTEFCTEUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXJyb3Itc3RhY2staW5zdGFsbGFibGUnKTtcblxudmFyIE9iamVjdCA9IGdsb2JhbC5PYmplY3Q7XG52YXIgRGF0ZSA9IGdsb2JhbC5EYXRlO1xudmFyIEVycm9yID0gZ2xvYmFsLkVycm9yO1xudmFyIEV2YWxFcnJvciA9IGdsb2JhbC5FdmFsRXJyb3I7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xudmFyIFJlZmVyZW5jZUVycm9yID0gZ2xvYmFsLlJlZmVyZW5jZUVycm9yO1xudmFyIFN5bnRheEVycm9yID0gZ2xvYmFsLlN5bnRheEVycm9yO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgVVJJRXJyb3IgPSBnbG9iYWwuVVJJRXJyb3I7XG52YXIgUGVyZm9ybWFuY2VNYXJrID0gZ2xvYmFsLlBlcmZvcm1hbmNlTWFyaztcbnZhciBXZWJBc3NlbWJseSA9IGdsb2JhbC5XZWJBc3NlbWJseTtcbnZhciBDb21waWxlRXJyb3IgPSBXZWJBc3NlbWJseSAmJiBXZWJBc3NlbWJseS5Db21waWxlRXJyb3IgfHwgRXJyb3I7XG52YXIgTGlua0Vycm9yID0gV2ViQXNzZW1ibHkgJiYgV2ViQXNzZW1ibHkuTGlua0Vycm9yIHx8IEVycm9yO1xudmFyIFJ1bnRpbWVFcnJvciA9IFdlYkFzc2VtYmx5ICYmIFdlYkFzc2VtYmx5LlJ1bnRpbWVFcnJvciB8fCBFcnJvcjtcbnZhciBET01FeGNlcHRpb24gPSBnZXRCdWlsdGluKCdET01FeGNlcHRpb24nKTtcbnZhciBTZXQgPSBnZXRCdWlsdGluKCdTZXQnKTtcbnZhciBNYXAgPSBnZXRCdWlsdGluKCdNYXAnKTtcbnZhciBNYXBQcm90b3R5cGUgPSBNYXAucHJvdG90eXBlO1xudmFyIG1hcEhhcyA9IHVuY3VycnlUaGlzKE1hcFByb3RvdHlwZS5oYXMpO1xudmFyIG1hcEdldCA9IHVuY3VycnlUaGlzKE1hcFByb3RvdHlwZS5nZXQpO1xudmFyIG1hcFNldCA9IHVuY3VycnlUaGlzKE1hcFByb3RvdHlwZS5zZXQpO1xudmFyIHNldEFkZCA9IHVuY3VycnlUaGlzKFNldC5wcm90b3R5cGUuYWRkKTtcbnZhciBvYmplY3RLZXlzID0gZ2V0QnVpbHRpbignT2JqZWN0JywgJ2tleXMnKTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG52YXIgYm9vbGVhblZhbHVlT2YgPSB1bmN1cnJ5VGhpcyh0cnVlLnZhbHVlT2YpO1xudmFyIG51bWJlclZhbHVlT2YgPSB1bmN1cnJ5VGhpcygxLjAudmFsdWVPZik7XG52YXIgc3RyaW5nVmFsdWVPZiA9IHVuY3VycnlUaGlzKCcnLnZhbHVlT2YpO1xudmFyIGdldEZsYWdzID0gdW5jdXJyeVRoaXMocmVnRXhwRmxhZ3MpO1xudmFyIGdldFRpbWUgPSB1bmN1cnJ5VGhpcyhEYXRlLnByb3RvdHlwZS5nZXRUaW1lKTtcbnZhciBQRVJGT1JNQU5DRV9NQVJLID0gdWlkKCdzdHJ1Y3R1cmVkQ2xvbmUnKTtcbnZhciBEQVRBX0NMT05FX0VSUk9SID0gJ0RhdGFDbG9uZUVycm9yJztcbnZhciBUUkFOU0ZFUlJJTkcgPSAnVHJhbnNmZXJyaW5nJztcblxudmFyIGNoZWNrQmFzaWNTZW1hbnRpYyA9IGZ1bmN0aW9uIChzdHJ1Y3R1cmVkQ2xvbmVJbXBsZW1lbnRhdGlvbikge1xuICByZXR1cm4gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2V0MSA9IG5ldyBnbG9iYWwuU2V0KFs3XSk7XG4gICAgdmFyIHNldDIgPSBzdHJ1Y3R1cmVkQ2xvbmVJbXBsZW1lbnRhdGlvbihzZXQxKTtcbiAgICB2YXIgbnVtYmVyID0gc3RydWN0dXJlZENsb25lSW1wbGVtZW50YXRpb24oT2JqZWN0KDcpKTtcbiAgICByZXR1cm4gc2V0MiA9PSBzZXQxIHx8ICFzZXQyLmhhcyg3KSB8fCB0eXBlb2YgbnVtYmVyICE9ICdvYmplY3QnIHx8IG51bWJlciAhPSA3O1xuICB9KSAmJiBzdHJ1Y3R1cmVkQ2xvbmVJbXBsZW1lbnRhdGlvbjtcbn07XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvaHRtbC9wdWxsLzU3NDlcbnZhciBjaGVja05ld0Vycm9yc1NlbWFudGljID0gZnVuY3Rpb24gKHN0cnVjdHVyZWRDbG9uZUltcGxlbWVudGF0aW9uKSB7XG4gIHJldHVybiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXN0ID0gc3RydWN0dXJlZENsb25lSW1wbGVtZW50YXRpb24obmV3IGdsb2JhbC5BZ2dyZWdhdGVFcnJvcihbMV0sIFBFUkZPUk1BTkNFX01BUkssIHsgY2F1c2U6IDMgfSkpO1xuICAgIHJldHVybiB0ZXN0Lm5hbWUgIT0gJ0FnZ3JlZ2F0ZUVycm9yJyB8fCB0ZXN0LmVycm9yc1swXSAhPSAxIHx8IHRlc3QubWVzc2FnZSAhPSBQRVJGT1JNQU5DRV9NQVJLIHx8IHRlc3QuY2F1c2UgIT0gMztcbiAgfSkgJiYgc3RydWN0dXJlZENsb25lSW1wbGVtZW50YXRpb247XG59O1xuXG4vLyBGRjk0KywgU2FmYXJpIFRQMTM0KywgQ2hyb21lIENhbmFyeSA5OCssIE5vZGVKUyAxNy4wKywgRGVubyAxLjEzK1xuLy8gY3VycmVudCBGRiBhbmQgU2FmYXJpIGltcGxlbWVudGF0aW9ucyBjYW4ndCBjbG9uZSBlcnJvcnNcbi8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTE1NTY2MDRcbi8vIG5vIG9uZSBvZiBjdXJyZW50IGltcGxlbWVudGF0aW9ucyBzdXBwb3J0cyBuZXcgKGh0bWwvNTc0OSkgZXJyb3IgY2xvbmluZyBzZW1hbnRpY1xudmFyIG5hdGl2ZVN0cnVjdHVyZWRDbG9uZSA9IGdsb2JhbC5zdHJ1Y3R1cmVkQ2xvbmU7XG5cbnZhciBGT1JDRURfUkVQTEFDRU1FTlQgPSBJU19QVVJFIHx8ICFjaGVja05ld0Vycm9yc1NlbWFudGljKG5hdGl2ZVN0cnVjdHVyZWRDbG9uZSk7XG5cbi8vIENocm9tZSA4MissIFNhZmFyaSAxNC4xKywgRGVubyAxLjExK1xuLy8gQ2hyb21lIDc4LTgxIGltcGxlbWVudGF0aW9uIHN3YXBzIGAubmFtZWAgYW5kIGAubWVzc2FnZWAgb2YgY2xvbmVkIGBET01FeGNlcHRpb25gXG4vLyBTYWZhcmkgMTQuMSBpbXBsZW1lbnRhdGlvbiBkb2Vzbid0IGNsb25lIHNvbWUgYFJlZ0V4cGAgZmxhZ3MsIHNvIHJlcXVpcmVzIGEgd29ya2Fyb3VuZFxuLy8gY3VycmVudCBTYWZhcmkgaW1wbGVtZW50YXRpb24gY2FuJ3QgY2xvbmUgZXJyb3JzXG4vLyBEZW5vIDEuMi0xLjEwIGltcGxlbWVudGF0aW9ucyB0b28gbmFpdmVcbi8vIE5vZGVKUyAxNi4wKyBkb2VzIG5vdCBoYXZlIGBQZXJmb3JtYW5jZU1hcmtgIGNvbnN0cnVjdG9yLCBzdHJ1Y3R1cmVkIGNsb25pbmcgaW1wbGVtZW50YXRpb25cbi8vICAgZnJvbSBgcGVyZm9ybWFuY2UubWFya2AgaXMgdG9vIG5haXZlIGFuZCBjYW4ndCBjbG9uZSwgZm9yIGV4YW1wbGUsIGBSZWdFeHBgIG9yIHNvbWUgYm94ZWQgcHJpbWl0aXZlc1xuLy8gICBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzQwODQwXG4vLyBubyBvbmUgb2YgY3VycmVudCBpbXBsZW1lbnRhdGlvbnMgc3VwcG9ydHMgbmV3IChodG1sLzU3NDkpIGVycm9yIGNsb25pbmcgc2VtYW50aWNcbnZhciBzdHJ1Y3R1cmVkQ2xvbmVGcm9tTWFyayA9ICFuYXRpdmVTdHJ1Y3R1cmVkQ2xvbmUgJiYgY2hlY2tCYXNpY1NlbWFudGljKGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gbmV3IFBlcmZvcm1hbmNlTWFyayhQRVJGT1JNQU5DRV9NQVJLLCB7IGRldGFpbDogdmFsdWUgfSkuZGV0YWlsO1xufSk7XG5cbnZhciBuYXRpdmVSZXN0cmljdGVkU3RydWN0dXJlZENsb25lID0gY2hlY2tCYXNpY1NlbWFudGljKG5hdGl2ZVN0cnVjdHVyZWRDbG9uZSkgfHwgc3RydWN0dXJlZENsb25lRnJvbU1hcms7XG5cbnZhciB0aHJvd1VuY2xvbmVhYmxlID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbignVW5jbG9uZWFibGUgdHlwZTogJyArIHR5cGUsIERBVEFfQ0xPTkVfRVJST1IpO1xufTtcblxudmFyIHRocm93VW5wb2x5ZmlsbGFibGUgPSBmdW5jdGlvbiAodHlwZSwga2luZCkge1xuICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKChraW5kIHx8ICdDbG9uaW5nJykgKyAnIG9mICcgKyB0eXBlICsgJyBjYW5ub3QgYmUgcHJvcGVybHkgcG9seWZpbGxlZCBpbiB0aGlzIGVuZ2luZScsIERBVEFfQ0xPTkVfRVJST1IpO1xufTtcblxudmFyIHN0cnVjdHVyZWRDbG9uZUludGVybmFsID0gZnVuY3Rpb24gKHZhbHVlLCBtYXApIHtcbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkgdGhyb3dVbmNsb25lYWJsZSgnU3ltYm9sJyk7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gIC8vIGVmZmVjdGl2ZWx5IHByZXNlcnZlcyBjaXJjdWxhciByZWZlcmVuY2VzXG4gIGlmIChtYXApIHtcbiAgICBpZiAobWFwSGFzKG1hcCwgdmFsdWUpKSByZXR1cm4gbWFwR2V0KG1hcCwgdmFsdWUpO1xuICB9IGVsc2UgbWFwID0gbmV3IE1hcCgpO1xuXG4gIHZhciB0eXBlID0gY2xhc3NvZih2YWx1ZSk7XG4gIHZhciBkZWVwID0gZmFsc2U7XG4gIHZhciBDLCBuYW1lLCBjbG9uZWQsIGRhdGFUcmFuc2ZlciwgaSwgbGVuZ3RoLCBrZXlzLCBrZXksIHNvdXJjZSwgdGFyZ2V0O1xuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ0FycmF5JzpcbiAgICAgIGNsb25lZCA9IFtdO1xuICAgICAgZGVlcCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdPYmplY3QnOlxuICAgICAgY2xvbmVkID0ge307XG4gICAgICBkZWVwID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ01hcCc6XG4gICAgICBjbG9uZWQgPSBuZXcgTWFwKCk7XG4gICAgICBkZWVwID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ1NldCc6XG4gICAgICBjbG9uZWQgPSBuZXcgU2V0KCk7XG4gICAgICBkZWVwID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ1JlZ0V4cCc6XG4gICAgICAvLyBpbiB0aGlzIGJsb2NrIGJlY2F1c2Ugb2YgYSBTYWZhcmkgMTQuMSBidWdcbiAgICAgIC8vIG9sZCBGRiBkb2VzIG5vdCBjbG9uZSByZWdleGVzIHBhc3NlZCB0byB0aGUgY29uc3RydWN0b3IsIHNvIGdldCB0aGUgc291cmNlIGFuZCBmbGFncyBkaXJlY3RseVxuICAgICAgY2xvbmVkID0gbmV3IFJlZ0V4cCh2YWx1ZS5zb3VyY2UsICdmbGFncycgaW4gdmFsdWUgPyB2YWx1ZS5mbGFncyA6IGdldEZsYWdzKHZhbHVlKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdFcnJvcic6XG4gICAgICBuYW1lID0gdmFsdWUubmFtZTtcbiAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICBjYXNlICdBZ2dyZWdhdGVFcnJvcic6XG4gICAgICAgICAgY2xvbmVkID0gZ2V0QnVpbHRpbignQWdncmVnYXRlRXJyb3InKShbXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0V2YWxFcnJvcic6XG4gICAgICAgICAgY2xvbmVkID0gRXZhbEVycm9yKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1JhbmdlRXJyb3InOlxuICAgICAgICAgIGNsb25lZCA9IFJhbmdlRXJyb3IoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnUmVmZXJlbmNlRXJyb3InOlxuICAgICAgICAgIGNsb25lZCA9IFJlZmVyZW5jZUVycm9yKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1N5bnRheEVycm9yJzpcbiAgICAgICAgICBjbG9uZWQgPSBTeW50YXhFcnJvcigpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdUeXBlRXJyb3InOlxuICAgICAgICAgIGNsb25lZCA9IFR5cGVFcnJvcigpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdVUklFcnJvcic6XG4gICAgICAgICAgY2xvbmVkID0gVVJJRXJyb3IoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnQ29tcGlsZUVycm9yJzpcbiAgICAgICAgICBjbG9uZWQgPSBDb21waWxlRXJyb3IoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnTGlua0Vycm9yJzpcbiAgICAgICAgICBjbG9uZWQgPSBMaW5rRXJyb3IoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnUnVudGltZUVycm9yJzpcbiAgICAgICAgICBjbG9uZWQgPSBSdW50aW1lRXJyb3IoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBjbG9uZWQgPSBFcnJvcigpO1xuICAgICAgfVxuICAgICAgZGVlcCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdET01FeGNlcHRpb24nOlxuICAgICAgY2xvbmVkID0gbmV3IERPTUV4Y2VwdGlvbih2YWx1ZS5tZXNzYWdlLCB2YWx1ZS5uYW1lKTtcbiAgICAgIGRlZXAgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnRGF0YVZpZXcnOlxuICAgIGNhc2UgJ0ludDhBcnJheSc6XG4gICAgY2FzZSAnVWludDhBcnJheSc6XG4gICAgY2FzZSAnVWludDhDbGFtcGVkQXJyYXknOlxuICAgIGNhc2UgJ0ludDE2QXJyYXknOlxuICAgIGNhc2UgJ1VpbnQxNkFycmF5JzpcbiAgICBjYXNlICdJbnQzMkFycmF5JzpcbiAgICBjYXNlICdVaW50MzJBcnJheSc6XG4gICAgY2FzZSAnRmxvYXQzMkFycmF5JzpcbiAgICBjYXNlICdGbG9hdDY0QXJyYXknOlxuICAgIGNhc2UgJ0JpZ0ludDY0QXJyYXknOlxuICAgIGNhc2UgJ0JpZ1VpbnQ2NEFycmF5JzpcbiAgICAgIEMgPSBnbG9iYWxbdHlwZV07XG4gICAgICAvLyBpbiBzb21lIG9sZCBlbmdpbmVzIGxpa2UgU2FmYXJpIDksIHR5cGVvZiBDIGlzICdvYmplY3QnXG4gICAgICAvLyBvbiBVaW50OENsYW1wZWRBcnJheSBvciBzb21lIG90aGVyIGNvbnN0cnVjdG9yc1xuICAgICAgaWYgKCFpc09iamVjdChDKSkgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlKTtcbiAgICAgIGNsb25lZCA9IG5ldyBDKFxuICAgICAgICAvLyB0aGlzIGlzIHNhZmUsIHNpbmNlIGFycmF5YnVmZmVyIGNhbm5vdCBoYXZlIGNpcmN1bGFyIHJlZmVyZW5jZXNcbiAgICAgICAgc3RydWN0dXJlZENsb25lSW50ZXJuYWwodmFsdWUuYnVmZmVyLCBtYXApLFxuICAgICAgICB2YWx1ZS5ieXRlT2Zmc2V0LFxuICAgICAgICB0eXBlID09PSAnRGF0YVZpZXcnID8gdmFsdWUuYnl0ZUxlbmd0aCA6IHZhbHVlLmxlbmd0aFxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0RPTVF1YWQnOlxuICAgICAgdHJ5IHtcbiAgICAgICAgY2xvbmVkID0gbmV3IERPTVF1YWQoXG4gICAgICAgICAgc3RydWN0dXJlZENsb25lSW50ZXJuYWwodmFsdWUucDEsIG1hcCksXG4gICAgICAgICAgc3RydWN0dXJlZENsb25lSW50ZXJuYWwodmFsdWUucDIsIG1hcCksXG4gICAgICAgICAgc3RydWN0dXJlZENsb25lSW50ZXJuYWwodmFsdWUucDMsIG1hcCksXG4gICAgICAgICAgc3RydWN0dXJlZENsb25lSW50ZXJuYWwodmFsdWUucDQsIG1hcClcbiAgICAgICAgKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChuYXRpdmVSZXN0cmljdGVkU3RydWN0dXJlZENsb25lKSB7XG4gICAgICAgICAgY2xvbmVkID0gbmF0aXZlUmVzdHJpY3RlZFN0cnVjdHVyZWRDbG9uZSh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnRmlsZUxpc3QnOlxuICAgICAgQyA9IGdsb2JhbC5EYXRhVHJhbnNmZXI7XG4gICAgICBpZiAoaXNDb25zdHJ1Y3RvcihDKSkge1xuICAgICAgICBkYXRhVHJhbnNmZXIgPSBuZXcgQygpO1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZSh2YWx1ZSk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgIGRhdGFUcmFuc2Zlci5pdGVtcy5hZGQoc3RydWN0dXJlZENsb25lSW50ZXJuYWwodmFsdWVbaV0sIG1hcCkpO1xuICAgICAgICB9XG4gICAgICAgIGNsb25lZCA9IGRhdGFUcmFuc2Zlci5maWxlcztcbiAgICAgIH0gZWxzZSBpZiAobmF0aXZlUmVzdHJpY3RlZFN0cnVjdHVyZWRDbG9uZSkge1xuICAgICAgICBjbG9uZWQgPSBuYXRpdmVSZXN0cmljdGVkU3RydWN0dXJlZENsb25lKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnSW1hZ2VEYXRhJzpcbiAgICAgIC8vIFNhZmFyaSA5IEltYWdlRGF0YSBpcyBhIGNvbnN0cnVjdG9yLCBidXQgdHlwZW9mIEltYWdlRGF0YSBpcyAnb2JqZWN0J1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2xvbmVkID0gbmV3IEltYWdlRGF0YShcbiAgICAgICAgICBzdHJ1Y3R1cmVkQ2xvbmVJbnRlcm5hbCh2YWx1ZS5kYXRhLCBtYXApLFxuICAgICAgICAgIHZhbHVlLndpZHRoLFxuICAgICAgICAgIHZhbHVlLmhlaWdodCxcbiAgICAgICAgICB7IGNvbG9yU3BhY2U6IHZhbHVlLmNvbG9yU3BhY2UgfVxuICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKG5hdGl2ZVJlc3RyaWN0ZWRTdHJ1Y3R1cmVkQ2xvbmUpIHtcbiAgICAgICAgICBjbG9uZWQgPSBuYXRpdmVSZXN0cmljdGVkU3RydWN0dXJlZENsb25lKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSk7XG4gICAgICB9IGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAobmF0aXZlUmVzdHJpY3RlZFN0cnVjdHVyZWRDbG9uZSkge1xuICAgICAgICBjbG9uZWQgPSBuYXRpdmVSZXN0cmljdGVkU3RydWN0dXJlZENsb25lKHZhbHVlKTtcbiAgICAgIH0gZWxzZSBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnQmlnSW50JzpcbiAgICAgICAgICAvLyBjYW4gYmUgYSAzcmQgcGFydHkgcG9seWZpbGxcbiAgICAgICAgICBjbG9uZWQgPSBPYmplY3QodmFsdWUudmFsdWVPZigpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnQm9vbGVhbic6XG4gICAgICAgICAgY2xvbmVkID0gT2JqZWN0KGJvb2xlYW5WYWx1ZU9mKHZhbHVlKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ051bWJlcic6XG4gICAgICAgICAgY2xvbmVkID0gT2JqZWN0KG51bWJlclZhbHVlT2YodmFsdWUpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnU3RyaW5nJzpcbiAgICAgICAgICBjbG9uZWQgPSBPYmplY3Qoc3RyaW5nVmFsdWVPZih2YWx1ZSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdEYXRlJzpcbiAgICAgICAgICBjbG9uZWQgPSBuZXcgRGF0ZShnZXRUaW1lKHZhbHVlKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0FycmF5QnVmZmVyJzpcbiAgICAgICAgICBDID0gZ2xvYmFsLkRhdGFWaWV3O1xuICAgICAgICAgIC8vIGBBcnJheUJ1ZmZlciNzbGljZWAgaXMgbm90IGF2YWlsYWJsZSBpbiBJRTEwXG4gICAgICAgICAgLy8gYEFycmF5QnVmZmVyI3NsaWNlYCBhbmQgYERhdGFWaWV3YCBhcmUgbm90IGF2YWlsYWJsZSBpbiBvbGQgRkZcbiAgICAgICAgICBpZiAoIUMgJiYgdHlwZW9mIHZhbHVlLnNsaWNlICE9ICdmdW5jdGlvbicpIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSk7XG4gICAgICAgICAgLy8gZGV0YWNoZWQgYnVmZmVycyB0aHJvd3MgaW4gYERhdGFWaWV3YCBhbmQgYC5zbGljZWBcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZS5zbGljZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIGNsb25lZCA9IHZhbHVlLnNsaWNlKDApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbGVuZ3RoID0gdmFsdWUuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgICAgY2xvbmVkID0gbmV3IEFycmF5QnVmZmVyKGxlbmd0aCk7XG4gICAgICAgICAgICAgIHNvdXJjZSA9IG5ldyBDKHZhbHVlKTtcbiAgICAgICAgICAgICAgdGFyZ2V0ID0gbmV3IEMoY2xvbmVkKTtcbiAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LnNldFVpbnQ4KGksIHNvdXJjZS5nZXRVaW50OChpKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbignQXJyYXlCdWZmZXIgaXMgZGV0YWNoZWQnLCBEQVRBX0NMT05FX0VSUk9SKTtcbiAgICAgICAgICB9IGJyZWFrO1xuICAgICAgICBjYXNlICdTaGFyZWRBcnJheUJ1ZmZlcic6XG4gICAgICAgICAgLy8gU2hhcmVkQXJyYXlCdWZmZXIgc2hvdWxkIHVzZSBzaGFyZWQgbWVtb3J5LCB3ZSBjYW4ndCBwb2x5ZmlsbCBpdCwgc28gcmV0dXJuIHRoZSBvcmlnaW5hbFxuICAgICAgICAgIGNsb25lZCA9IHZhbHVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdCbG9iJzpcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2xvbmVkID0gdmFsdWUuc2xpY2UoMCwgdmFsdWUuc2l6ZSwgdmFsdWUudHlwZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSk7XG4gICAgICAgICAgfSBicmVhaztcbiAgICAgICAgY2FzZSAnRE9NUG9pbnQnOlxuICAgICAgICBjYXNlICdET01Qb2ludFJlYWRPbmx5JzpcbiAgICAgICAgICBDID0gZ2xvYmFsW3R5cGVdO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjbG9uZWQgPSBDLmZyb21Qb2ludFxuICAgICAgICAgICAgICA/IEMuZnJvbVBvaW50KHZhbHVlKVxuICAgICAgICAgICAgICA6IG5ldyBDKHZhbHVlLngsIHZhbHVlLnksIHZhbHVlLnosIHZhbHVlLncpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUpO1xuICAgICAgICAgIH0gYnJlYWs7XG4gICAgICAgIGNhc2UgJ0RPTVJlY3QnOlxuICAgICAgICBjYXNlICdET01SZWN0UmVhZE9ubHknOlxuICAgICAgICAgIEMgPSBnbG9iYWxbdHlwZV07XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNsb25lZCA9IEMuZnJvbVJlY3RcbiAgICAgICAgICAgICAgPyBDLmZyb21SZWN0KHZhbHVlKVxuICAgICAgICAgICAgICA6IG5ldyBDKHZhbHVlLngsIHZhbHVlLnksIHZhbHVlLndpZHRoLCB2YWx1ZS5oZWlnaHQpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUpO1xuICAgICAgICAgIH0gYnJlYWs7XG4gICAgICAgIGNhc2UgJ0RPTU1hdHJpeCc6XG4gICAgICAgIGNhc2UgJ0RPTU1hdHJpeFJlYWRPbmx5JzpcbiAgICAgICAgICBDID0gZ2xvYmFsW3R5cGVdO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjbG9uZWQgPSBDLmZyb21NYXRyaXhcbiAgICAgICAgICAgICAgPyBDLmZyb21NYXRyaXgodmFsdWUpXG4gICAgICAgICAgICAgIDogbmV3IEModmFsdWUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUpO1xuICAgICAgICAgIH0gYnJlYWs7XG4gICAgICAgIGNhc2UgJ0F1ZGlvRGF0YSc6XG4gICAgICAgIGNhc2UgJ1ZpZGVvRnJhbWUnOlxuICAgICAgICAgIGlmICghaXNDYWxsYWJsZSh2YWx1ZS5jbG9uZSkpIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNsb25lZCA9IHZhbHVlLmNsb25lKCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93VW5jbG9uZWFibGUodHlwZSk7XG4gICAgICAgICAgfSBicmVhaztcbiAgICAgICAgY2FzZSAnRmlsZSc6XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNsb25lZCA9IG5ldyBGaWxlKFt2YWx1ZV0sIHZhbHVlLm5hbWUsIHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlKTtcbiAgICAgICAgICB9IGJyZWFrO1xuICAgICAgICBjYXNlICdDcnlwdG9LZXknOlxuICAgICAgICBjYXNlICdHUFVDb21waWxhdGlvbk1lc3NhZ2UnOlxuICAgICAgICBjYXNlICdHUFVDb21waWxhdGlvbkluZm8nOlxuICAgICAgICBjYXNlICdJbWFnZUJpdG1hcCc6XG4gICAgICAgIGNhc2UgJ1JUQ0NlcnRpZmljYXRlJzpcbiAgICAgICAgY2FzZSAnV2ViQXNzZW1ibHkuTW9kdWxlJzpcbiAgICAgICAgICB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUpO1xuICAgICAgICAgIC8vIGJyZWFrIG9taXR0ZWRcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvd1VuY2xvbmVhYmxlKHR5cGUpO1xuICAgICAgfVxuICB9XG5cbiAgbWFwU2V0KG1hcCwgdmFsdWUsIGNsb25lZCk7XG5cbiAgaWYgKGRlZXApIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ0FycmF5JzpcbiAgICBjYXNlICdPYmplY3QnOlxuICAgICAga2V5cyA9IG9iamVjdEtleXModmFsdWUpO1xuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2Uoa2V5cyk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShjbG9uZWQsIGtleSwgc3RydWN0dXJlZENsb25lSW50ZXJuYWwodmFsdWVba2V5XSwgbWFwKSk7XG4gICAgICB9IGJyZWFrO1xuICAgIGNhc2UgJ01hcCc6XG4gICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uICh2LCBrKSB7XG4gICAgICAgIG1hcFNldChjbG9uZWQsIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKGssIG1hcCksIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHYsIG1hcCkpO1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdTZXQnOlxuICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgICAgICBzZXRBZGQoY2xvbmVkLCBzdHJ1Y3R1cmVkQ2xvbmVJbnRlcm5hbCh2LCBtYXApKTtcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnRXJyb3InOlxuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGNsb25lZCwgJ21lc3NhZ2UnLCBzdHJ1Y3R1cmVkQ2xvbmVJbnRlcm5hbCh2YWx1ZS5tZXNzYWdlLCBtYXApKTtcbiAgICAgIGlmIChoYXNPd24odmFsdWUsICdjYXVzZScpKSB7XG4gICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShjbG9uZWQsICdjYXVzZScsIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLmNhdXNlLCBtYXApKTtcbiAgICAgIH1cbiAgICAgIGlmIChuYW1lID09ICdBZ2dyZWdhdGVFcnJvcicpIHtcbiAgICAgICAgY2xvbmVkLmVycm9ycyA9IHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLmVycm9ycywgbWFwKTtcbiAgICAgIH0gLy8gYnJlYWsgb21pdHRlZFxuICAgIGNhc2UgJ0RPTUV4Y2VwdGlvbic6XG4gICAgICBpZiAoRVJST1JfU1RBQ0tfSU5TVEFMTEFCTEUpIHtcbiAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGNsb25lZCwgJ3N0YWNrJywgc3RydWN0dXJlZENsb25lSW50ZXJuYWwodmFsdWUuc3RhY2ssIG1hcCkpO1xuICAgICAgfVxuICB9XG5cbiAgcmV0dXJuIGNsb25lZDtcbn07XG5cbnZhciBQUk9QRVJfVFJBTlNGRVIgPSBuYXRpdmVTdHJ1Y3R1cmVkQ2xvbmUgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcig4KTtcbiAgdmFyIGNsb25lID0gbmF0aXZlU3RydWN0dXJlZENsb25lKGJ1ZmZlciwgeyB0cmFuc2ZlcjogW2J1ZmZlcl0gfSk7XG4gIHJldHVybiBidWZmZXIuYnl0ZUxlbmd0aCAhPSAwIHx8IGNsb25lLmJ5dGVMZW5ndGggIT0gODtcbn0pO1xuXG52YXIgdHJ5VG9UcmFuc2ZlciA9IGZ1bmN0aW9uIChyYXdUcmFuc2ZlciwgbWFwKSB7XG4gIGlmICghaXNPYmplY3QocmF3VHJhbnNmZXIpKSB0aHJvdyBUeXBlRXJyb3IoJ1RyYW5zZmVyIG9wdGlvbiBjYW5ub3QgYmUgY29udmVydGVkIHRvIGEgc2VxdWVuY2UnKTtcblxuICB2YXIgdHJhbnNmZXIgPSBbXTtcblxuICBpdGVyYXRlKHJhd1RyYW5zZmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBwdXNoKHRyYW5zZmVyLCBhbk9iamVjdCh2YWx1ZSkpO1xuICB9KTtcblxuICB2YXIgaSA9IDA7XG4gIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZSh0cmFuc2Zlcik7XG4gIHZhciB2YWx1ZSwgdHlwZSwgQywgdHJhbnNmZXJyZWRBcnJheSwgdHJhbnNmZXJyZWQsIGNhbnZhcywgY29udGV4dDtcblxuICBpZiAoUFJPUEVSX1RSQU5TRkVSKSB7XG4gICAgdHJhbnNmZXJyZWRBcnJheSA9IG5hdGl2ZVN0cnVjdHVyZWRDbG9uZSh0cmFuc2ZlciwgeyB0cmFuc2ZlcjogdHJhbnNmZXIgfSk7XG4gICAgd2hpbGUgKGkgPCBsZW5ndGgpIG1hcFNldChtYXAsIHRyYW5zZmVyW2ldLCB0cmFuc2ZlcnJlZEFycmF5W2krK10pO1xuICB9IGVsc2Ugd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICB2YWx1ZSA9IHRyYW5zZmVyW2krK107XG4gICAgaWYgKG1hcEhhcyhtYXAsIHZhbHVlKSkgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbignRHVwbGljYXRlIHRyYW5zZmVyYWJsZScsIERBVEFfQ0xPTkVfRVJST1IpO1xuXG4gICAgdHlwZSA9IGNsYXNzb2YodmFsdWUpO1xuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdJbWFnZUJpdG1hcCc6XG4gICAgICAgIEMgPSBnbG9iYWwuT2Zmc2NyZWVuQ2FudmFzO1xuICAgICAgICBpZiAoIWlzQ29uc3RydWN0b3IoQykpIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSwgVFJBTlNGRVJSSU5HKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjYW52YXMgPSBuZXcgQyh2YWx1ZS53aWR0aCwgdmFsdWUuaGVpZ2h0KTtcbiAgICAgICAgICBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJ2JpdG1hcHJlbmRlcmVyJyk7XG4gICAgICAgICAgY29udGV4dC50cmFuc2ZlckZyb21JbWFnZUJpdG1hcCh2YWx1ZSk7XG4gICAgICAgICAgdHJhbnNmZXJyZWQgPSBjYW52YXMudHJhbnNmZXJUb0ltYWdlQml0bWFwKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdBdWRpb0RhdGEnOlxuICAgICAgY2FzZSAnVmlkZW9GcmFtZSc6XG4gICAgICAgIGlmICghaXNDYWxsYWJsZSh2YWx1ZS5jbG9uZSkgfHwgIWlzQ2FsbGFibGUodmFsdWUuY2xvc2UpKSB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUsIFRSQU5TRkVSUklORyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdHJhbnNmZXJyZWQgPSB2YWx1ZS5jbG9uZSgpO1xuICAgICAgICAgIHZhbHVlLmNsb3NlKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdBcnJheUJ1ZmZlcic6XG4gICAgICBjYXNlICdNZXNzYWdlUG9ydCc6XG4gICAgICBjYXNlICdPZmZzY3JlZW5DYW52YXMnOlxuICAgICAgY2FzZSAnUmVhZGFibGVTdHJlYW0nOlxuICAgICAgY2FzZSAnVHJhbnNmb3JtU3RyZWFtJzpcbiAgICAgIGNhc2UgJ1dyaXRhYmxlU3RyZWFtJzpcbiAgICAgICAgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlLCBUUkFOU0ZFUlJJTkcpO1xuICAgIH1cblxuICAgIGlmICh0cmFuc2ZlcnJlZCA9PT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCdUaGlzIG9iamVjdCBjYW5ub3QgYmUgdHJhbnNmZXJyZWQ6ICcgKyB0eXBlLCBEQVRBX0NMT05FX0VSUk9SKTtcbiAgICBtYXBTZXQobWFwLCB2YWx1ZSwgdHJhbnNmZXJyZWQpO1xuICB9XG59O1xuXG4kKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBzaGFtOiAhUFJPUEVSX1RSQU5TRkVSLCBmb3JjZWQ6IEZPUkNFRF9SRVBMQUNFTUVOVCB9LCB7XG4gIHN0cnVjdHVyZWRDbG9uZTogZnVuY3Rpb24gc3RydWN0dXJlZENsb25lKHZhbHVlIC8qICwgeyB0cmFuc2ZlciB9ICovKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFuT2JqZWN0KGFyZ3VtZW50c1sxXSkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHRyYW5zZmVyID0gb3B0aW9ucyA/IG9wdGlvbnMudHJhbnNmZXIgOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcDtcblxuICAgIGlmICh0cmFuc2ZlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBtYXAgPSBuZXcgTWFwKCk7XG4gICAgICB0cnlUb1RyYW5zZmVyKHRyYW5zZmVyLCBtYXApO1xuICAgIH1cblxuICAgIHJldHVybiBzdHJ1Y3R1cmVkQ2xvbmVJbnRlcm5hbCh2YWx1ZSwgbWFwKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xuXG52YXIgTVNJRSA9IC9NU0lFIC5cXC4vLnRlc3QodXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIEZ1bmN0aW9uID0gZ2xvYmFsLkZ1bmN0aW9uO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChoYW5kbGVyLCB0aW1lb3V0IC8qICwgLi4uYXJndW1lbnRzICovKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICAgIHZhciBhcmdzID0gYm91bmRBcmdzID8gYXJyYXlTbGljZShhcmd1bWVudHMsIDIpIDogdW5kZWZpbmVkO1xuICAgIHJldHVybiBzY2hlZHVsZXIoYm91bmRBcmdzID8gZnVuY3Rpb24gKCkge1xuICAgICAgYXBwbHkoaXNDYWxsYWJsZShoYW5kbGVyKSA/IGhhbmRsZXIgOiBGdW5jdGlvbihoYW5kbGVyKSwgdGhpcywgYXJncyk7XG4gICAgfSA6IGhhbmRsZXIsIHRpbWVvdXQpO1xuICB9O1xufTtcblxuLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvdGltZXJzLWFuZC11c2VyLXByb21wdHMuaHRtbCN0aW1lcnNcbiQoeyBnbG9iYWw6IHRydWUsIGJpbmQ6IHRydWUsIGZvcmNlZDogTVNJRSB9LCB7XG4gIC8vIGBzZXRUaW1lb3V0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvdGltZXJzLWFuZC11c2VyLXByb21wdHMuaHRtbCNkb20tc2V0dGltZW91dFxuICBzZXRUaW1lb3V0OiB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgLy8gYHNldEludGVydmFsYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvdGltZXJzLWFuZC11c2VyLXByb21wdHMuaHRtbCNkb20tc2V0aW50ZXJ2YWxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiBpbiBjb3JlLWpzQDQsIG1vdmUgL21vZHVsZXMvIGRlcGVuZGVuY2llcyB0byBwdWJsaWMgZW50cmllcyBmb3IgYmV0dGVyIG9wdGltaXphdGlvbiBieSB0b29scyBsaWtlIGBwcmVzZXQtZW52YFxucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgVVNFX05BVElWRV9VUkwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXVybCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgYXJyYXlTb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNvcnQnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFVSTF9TRUFSQ0hfUEFSQU1TID0gJ1VSTFNlYXJjaFBhcmFtcyc7XG52YXIgVVJMX1NFQVJDSF9QQVJBTVNfSVRFUkFUT1IgPSBVUkxfU0VBUkNIX1BBUkFNUyArICdJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsUGFyYW1zU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihVUkxfU0VBUkNIX1BBUkFNUyk7XG52YXIgZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoVVJMX1NFQVJDSF9QQVJBTVNfSVRFUkFUT1IpO1xuXG52YXIgbiRGZXRjaCA9IGdldEJ1aWx0SW4oJ2ZldGNoJyk7XG52YXIgTiRSZXF1ZXN0ID0gZ2V0QnVpbHRJbignUmVxdWVzdCcpO1xudmFyIEhlYWRlcnMgPSBnZXRCdWlsdEluKCdIZWFkZXJzJyk7XG52YXIgUmVxdWVzdFByb3RvdHlwZSA9IE4kUmVxdWVzdCAmJiBOJFJlcXVlc3QucHJvdG90eXBlO1xudmFyIEhlYWRlcnNQcm90b3R5cGUgPSBIZWFkZXJzICYmIEhlYWRlcnMucHJvdG90eXBlO1xudmFyIFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBkZWNvZGVVUklDb21wb25lbnQgPSBnbG9iYWwuZGVjb2RlVVJJQ29tcG9uZW50O1xudmFyIGVuY29kZVVSSUNvbXBvbmVudCA9IGdsb2JhbC5lbmNvZGVVUklDb21wb25lbnQ7XG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBqb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzaGlmdCA9IHVuY3VycnlUaGlzKFtdLnNoaWZ0KTtcbnZhciBzcGxpY2UgPSB1bmN1cnJ5VGhpcyhbXS5zcGxpY2UpO1xudmFyIHNwbGl0ID0gdW5jdXJyeVRoaXMoJycuc3BsaXQpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG52YXIgcGx1cyA9IC9cXCsvZztcbnZhciBzZXF1ZW5jZXMgPSBBcnJheSg0KTtcblxudmFyIHBlcmNlbnRTZXF1ZW5jZSA9IGZ1bmN0aW9uIChieXRlcykge1xuICByZXR1cm4gc2VxdWVuY2VzW2J5dGVzIC0gMV0gfHwgKHNlcXVlbmNlc1tieXRlcyAtIDFdID0gUmVnRXhwKCcoKD86JVtcXFxcZGEtZl17Mn0peycgKyBieXRlcyArICd9KScsICdnaScpKTtcbn07XG5cbnZhciBwZXJjZW50RGVjb2RlID0gZnVuY3Rpb24gKHNlcXVlbmNlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzZXF1ZW5jZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHNlcXVlbmNlO1xuICB9XG59O1xuXG52YXIgZGVzZXJpYWxpemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IHJlcGxhY2UoaXQsIHBsdXMsICcgJyk7XG4gIHZhciBieXRlcyA9IDQ7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHdoaWxlIChieXRlcykge1xuICAgICAgcmVzdWx0ID0gcmVwbGFjZShyZXN1bHQsIHBlcmNlbnRTZXF1ZW5jZShieXRlcy0tKSwgcGVyY2VudERlY29kZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5cbnZhciBmaW5kID0gL1shJygpfl18JTIwL2c7XG5cbnZhciByZXBsYWNlbWVudHMgPSB7XG4gICchJzogJyUyMScsXG4gIFwiJ1wiOiAnJTI3JyxcbiAgJygnOiAnJTI4JyxcbiAgJyknOiAnJTI5JyxcbiAgJ34nOiAnJTdFJyxcbiAgJyUyMCc6ICcrJ1xufTtcblxudmFyIHJlcGxhY2VyID0gZnVuY3Rpb24gKG1hdGNoKSB7XG4gIHJldHVybiByZXBsYWNlbWVudHNbbWF0Y2hdO1xufTtcblxudmFyIHNlcmlhbGl6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gcmVwbGFjZShlbmNvZGVVUklDb21wb25lbnQoaXQpLCBmaW5kLCByZXBsYWNlcik7XG59O1xuXG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSBmdW5jdGlvbiAocGFzc2VkLCByZXF1aXJlZCkge1xuICBpZiAocGFzc2VkIDwgcmVxdWlyZWQpIHRocm93IFR5cGVFcnJvcignTm90IGVub3VnaCBhcmd1bWVudHMnKTtcbn07XG5cbnZhciBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvciA9IGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoZnVuY3Rpb24gSXRlcmF0b3IocGFyYW1zLCBraW5kKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SLFxuICAgIGl0ZXJhdG9yOiBnZXRJdGVyYXRvcihnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHBhcmFtcykuZW50cmllcyksXG4gICAga2luZDoga2luZFxuICB9KTtcbn0sICdJdGVyYXRvcicsIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSh0aGlzKTtcbiAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICB2YXIgc3RlcCA9IHN0YXRlLml0ZXJhdG9yLm5leHQoKTtcbiAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgaWYgKCFzdGVwLmRvbmUpIHtcbiAgICBzdGVwLnZhbHVlID0ga2luZCA9PT0gJ2tleXMnID8gZW50cnkua2V5IDoga2luZCA9PT0gJ3ZhbHVlcycgPyBlbnRyeS52YWx1ZSA6IFtlbnRyeS5rZXksIGVudHJ5LnZhbHVlXTtcbiAgfSByZXR1cm4gc3RlcDtcbn0sIHRydWUpO1xuXG52YXIgVVJMU2VhcmNoUGFyYW1zU3RhdGUgPSBmdW5jdGlvbiAoaW5pdCkge1xuICB0aGlzLmVudHJpZXMgPSBbXTtcbiAgdGhpcy51cmwgPSBudWxsO1xuXG4gIGlmIChpbml0ICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoaXNPYmplY3QoaW5pdCkpIHRoaXMucGFyc2VPYmplY3QoaW5pdCk7XG4gICAgZWxzZSB0aGlzLnBhcnNlUXVlcnkodHlwZW9mIGluaXQgPT0gJ3N0cmluZycgPyBjaGFyQXQoaW5pdCwgMCkgPT09ICc/JyA/IHN0cmluZ1NsaWNlKGluaXQsIDEpIDogaW5pdCA6ICR0b1N0cmluZyhpbml0KSk7XG4gIH1cbn07XG5cblVSTFNlYXJjaFBhcmFtc1N0YXRlLnByb3RvdHlwZSA9IHtcbiAgdHlwZTogVVJMX1NFQVJDSF9QQVJBTVMsXG4gIGJpbmRVUkw6IGZ1bmN0aW9uICh1cmwpIHtcbiAgICB0aGlzLnVybCA9IHVybDtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9LFxuICBwYXJzZU9iamVjdDogZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKG9iamVjdCk7XG4gICAgdmFyIGl0ZXJhdG9yLCBuZXh0LCBzdGVwLCBlbnRyeUl0ZXJhdG9yLCBlbnRyeU5leHQsIGZpcnN0LCBzZWNvbmQ7XG5cbiAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3Iob2JqZWN0LCBpdGVyYXRvck1ldGhvZCk7XG4gICAgICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgICAgIHdoaWxlICghKHN0ZXAgPSBjYWxsKG5leHQsIGl0ZXJhdG9yKSkuZG9uZSkge1xuICAgICAgICBlbnRyeUl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoYW5PYmplY3Qoc3RlcC52YWx1ZSkpO1xuICAgICAgICBlbnRyeU5leHQgPSBlbnRyeUl0ZXJhdG9yLm5leHQ7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAoZmlyc3QgPSBjYWxsKGVudHJ5TmV4dCwgZW50cnlJdGVyYXRvcikpLmRvbmUgfHxcbiAgICAgICAgICAoc2Vjb25kID0gY2FsbChlbnRyeU5leHQsIGVudHJ5SXRlcmF0b3IpKS5kb25lIHx8XG4gICAgICAgICAgIWNhbGwoZW50cnlOZXh0LCBlbnRyeUl0ZXJhdG9yKS5kb25lXG4gICAgICAgICkgdGhyb3cgVHlwZUVycm9yKCdFeHBlY3RlZCBzZXF1ZW5jZSB3aXRoIGxlbmd0aCAyJyk7XG4gICAgICAgIHB1c2godGhpcy5lbnRyaWVzLCB7IGtleTogJHRvU3RyaW5nKGZpcnN0LnZhbHVlKSwgdmFsdWU6ICR0b1N0cmluZyhzZWNvbmQudmFsdWUpIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSBpZiAoaGFzT3duKG9iamVjdCwga2V5KSkge1xuICAgICAgcHVzaCh0aGlzLmVudHJpZXMsIHsga2V5OiBrZXksIHZhbHVlOiAkdG9TdHJpbmcob2JqZWN0W2tleV0pIH0pO1xuICAgIH1cbiAgfSxcbiAgcGFyc2VRdWVyeTogZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgaWYgKHF1ZXJ5KSB7XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IHNwbGl0KHF1ZXJ5LCAnJicpO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciBhdHRyaWJ1dGUsIGVudHJ5O1xuICAgICAgd2hpbGUgKGluZGV4IDwgYXR0cmlidXRlcy5sZW5ndGgpIHtcbiAgICAgICAgYXR0cmlidXRlID0gYXR0cmlidXRlc1tpbmRleCsrXTtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZS5sZW5ndGgpIHtcbiAgICAgICAgICBlbnRyeSA9IHNwbGl0KGF0dHJpYnV0ZSwgJz0nKTtcbiAgICAgICAgICBwdXNoKHRoaXMuZW50cmllcywge1xuICAgICAgICAgICAga2V5OiBkZXNlcmlhbGl6ZShzaGlmdChlbnRyeSkpLFxuICAgICAgICAgICAgdmFsdWU6IGRlc2VyaWFsaXplKGpvaW4oZW50cnksICc9JykpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHNlcmlhbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBlbnRyeTtcbiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgZW50cnkgPSBlbnRyaWVzW2luZGV4KytdO1xuICAgICAgcHVzaChyZXN1bHQsIHNlcmlhbGl6ZShlbnRyeS5rZXkpICsgJz0nICsgc2VyaWFsaXplKGVudHJ5LnZhbHVlKSk7XG4gICAgfSByZXR1cm4gam9pbihyZXN1bHQsICcmJyk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZW50cmllcy5sZW5ndGggPSAwO1xuICAgIHRoaXMucGFyc2VRdWVyeSh0aGlzLnVybC5xdWVyeSk7XG4gIH0sXG4gIHVwZGF0ZVVSTDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnVybCkgdGhpcy51cmwudXBkYXRlKCk7XG4gIH1cbn07XG5cbi8vIGBVUkxTZWFyY2hQYXJhbXNgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2ludGVyZmFjZS11cmxzZWFyY2hwYXJhbXNcbnZhciBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFVSTFNlYXJjaFBhcmFtcygvKiBpbml0ICovKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlKTtcbiAgdmFyIGluaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZDtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCBuZXcgVVJMU2VhcmNoUGFyYW1zU3RhdGUoaW5pdCkpO1xufTtcblxudmFyIFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSA9IFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxucmVkZWZpbmVBbGwoVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLCB7XG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmFwcGVuZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1hcHBlbmRcbiAgYXBwZW5kOiBmdW5jdGlvbiBhcHBlbmQobmFtZSwgdmFsdWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAyKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpO1xuICAgIHB1c2goc3RhdGUuZW50cmllcywgeyBrZXk6ICR0b1N0cmluZyhuYW1lKSwgdmFsdWU6ICR0b1N0cmluZyh2YWx1ZSkgfSk7XG4gICAgc3RhdGUudXBkYXRlVVJMKCk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmRlbGV0ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1kZWxldGVcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICB2YXIgZW50cmllcyA9IHN0YXRlLmVudHJpZXM7XG4gICAgdmFyIGtleSA9ICR0b1N0cmluZyhuYW1lKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChpbmRleCA8IGVudHJpZXMubGVuZ3RoKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleF0ua2V5ID09PSBrZXkpIHNwbGljZShlbnRyaWVzLCBpbmRleCwgMSk7XG4gICAgICBlbHNlIGluZGV4Kys7XG4gICAgfVxuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5nZXRgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtZ2V0XG4gIGdldDogZnVuY3Rpb24gZ2V0KG5hbWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIga2V5ID0gJHRvU3RyaW5nKG5hbWUpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgZm9yICg7IGluZGV4IDwgZW50cmllcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGlmIChlbnRyaWVzW2luZGV4XS5rZXkgPT09IGtleSkgcmV0dXJuIGVudHJpZXNbaW5kZXhdLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuZ2V0QWxsYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWdldGFsbFxuICBnZXRBbGw6IGZ1bmN0aW9uIGdldEFsbChuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGtleSA9ICR0b1N0cmluZyhuYW1lKTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBmb3IgKDsgaW5kZXggPCBlbnRyaWVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKGVudHJpZXNbaW5kZXhdLmtleSA9PT0ga2V5KSBwdXNoKHJlc3VsdCwgZW50cmllc1tpbmRleF0udmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5oYXNgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtaGFzXG4gIGhhczogZnVuY3Rpb24gaGFzKG5hbWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIga2V5ID0gJHRvU3RyaW5nKG5hbWUpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHtcbiAgICAgIGlmIChlbnRyaWVzW2luZGV4KytdLmtleSA9PT0ga2V5KSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5zZXRgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtc2V0XG4gIHNldDogZnVuY3Rpb24gc2V0KG5hbWUsIHZhbHVlKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICB2YXIgZW50cmllcyA9IHN0YXRlLmVudHJpZXM7XG4gICAgdmFyIGZvdW5kID0gZmFsc2U7XG4gICAgdmFyIGtleSA9ICR0b1N0cmluZyhuYW1lKTtcbiAgICB2YXIgdmFsID0gJHRvU3RyaW5nKHZhbHVlKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBlbnRyeTtcbiAgICBmb3IgKDsgaW5kZXggPCBlbnRyaWVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgIGlmIChlbnRyeS5rZXkgPT09IGtleSkge1xuICAgICAgICBpZiAoZm91bmQpIHNwbGljZShlbnRyaWVzLCBpbmRleC0tLCAxKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgIGVudHJ5LnZhbHVlID0gdmFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghZm91bmQpIHB1c2goZW50cmllcywgeyBrZXk6IGtleSwgdmFsdWU6IHZhbCB9KTtcbiAgICBzdGF0ZS51cGRhdGVVUkwoKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuc29ydGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1zb3J0XG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoKSB7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICBhcnJheVNvcnQoc3RhdGUuZW50cmllcywgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLmtleSA+IGIua2V5ID8gMSA6IC0xO1xuICAgIH0pO1xuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2RcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFjayAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2ssIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBlbnRyeTtcbiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgZW50cnkgPSBlbnRyaWVzW2luZGV4KytdO1xuICAgICAgYm91bmRGdW5jdGlvbihlbnRyeS52YWx1ZSwgZW50cnkua2V5LCB0aGlzKTtcbiAgICB9XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IodGhpcywgJ2tleXMnKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUudmFsdWVzYCBtZXRob2RcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvcih0aGlzLCAndmFsdWVzJyk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IodGhpcywgJ2VudHJpZXMnKTtcbiAgfVxufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG4vLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG5yZWRlZmluZShVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUsIElURVJBVE9SLCBVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUuZW50cmllcywgeyBuYW1lOiAnZW50cmllcycgfSk7XG5cbi8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsc2VhcmNocGFyYW1zLXN0cmluZ2lmaWNhdGlvbi1iZWhhdmlvclxucmVkZWZpbmUoVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuc2VyaWFsaXplKCk7XG59LCB7IGVudW1lcmFibGU6IHRydWUgfSk7XG5cbnNldFRvU3RyaW5nVGFnKFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yLCBVUkxfU0VBUkNIX1BBUkFNUyk7XG5cbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogIVVTRV9OQVRJVkVfVVJMIH0sIHtcbiAgVVJMU2VhcmNoUGFyYW1zOiBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvclxufSk7XG5cbi8vIFdyYXAgYGZldGNoYCBhbmQgYFJlcXVlc3RgIGZvciBjb3JyZWN0IHdvcmsgd2l0aCBwb2x5ZmlsbGVkIGBVUkxTZWFyY2hQYXJhbXNgXG5pZiAoIVVTRV9OQVRJVkVfVVJMICYmIGlzQ2FsbGFibGUoSGVhZGVycykpIHtcbiAgdmFyIGhlYWRlcnNIYXMgPSB1bmN1cnJ5VGhpcyhIZWFkZXJzUHJvdG90eXBlLmhhcyk7XG4gIHZhciBoZWFkZXJzU2V0ID0gdW5jdXJyeVRoaXMoSGVhZGVyc1Byb3RvdHlwZS5zZXQpO1xuXG4gIHZhciB3cmFwUmVxdWVzdE9wdGlvbnMgPSBmdW5jdGlvbiAoaW5pdCkge1xuICAgIGlmIChpc09iamVjdChpbml0KSkge1xuICAgICAgdmFyIGJvZHkgPSBpbml0LmJvZHk7XG4gICAgICB2YXIgaGVhZGVycztcbiAgICAgIGlmIChjbGFzc29mKGJvZHkpID09PSBVUkxfU0VBUkNIX1BBUkFNUykge1xuICAgICAgICBoZWFkZXJzID0gaW5pdC5oZWFkZXJzID8gbmV3IEhlYWRlcnMoaW5pdC5oZWFkZXJzKSA6IG5ldyBIZWFkZXJzKCk7XG4gICAgICAgIGlmICghaGVhZGVyc0hhcyhoZWFkZXJzLCAnY29udGVudC10eXBlJykpIHtcbiAgICAgICAgICBoZWFkZXJzU2V0KGhlYWRlcnMsICdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3JlYXRlKGluaXQsIHtcbiAgICAgICAgICBib2R5OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgJHRvU3RyaW5nKGJvZHkpKSxcbiAgICAgICAgICBoZWFkZXJzOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgaGVhZGVycylcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSByZXR1cm4gaW5pdDtcbiAgfTtcblxuICBpZiAoaXNDYWxsYWJsZShuJEZldGNoKSkge1xuICAgICQoeyBnbG9iYWw6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgICBmZXRjaDogZnVuY3Rpb24gZmV0Y2goaW5wdXQgLyogLCBpbml0ICovKSB7XG4gICAgICAgIHJldHVybiBuJEZldGNoKGlucHV0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHdyYXBSZXF1ZXN0T3B0aW9ucyhhcmd1bWVudHNbMV0pIDoge30pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGlzQ2FsbGFibGUoTiRSZXF1ZXN0KSkge1xuICAgIHZhciBSZXF1ZXN0Q29uc3RydWN0b3IgPSBmdW5jdGlvbiBSZXF1ZXN0KGlucHV0IC8qICwgaW5pdCAqLykge1xuICAgICAgYW5JbnN0YW5jZSh0aGlzLCBSZXF1ZXN0UHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBuZXcgTiRSZXF1ZXN0KGlucHV0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHdyYXBSZXF1ZXN0T3B0aW9ucyhhcmd1bWVudHNbMV0pIDoge30pO1xuICAgIH07XG5cbiAgICBSZXF1ZXN0UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmVxdWVzdENvbnN0cnVjdG9yO1xuICAgIFJlcXVlc3RDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBSZXF1ZXN0UHJvdG90eXBlO1xuXG4gICAgJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICAgIFJlcXVlc3Q6IFJlcXVlc3RDb25zdHJ1Y3RvclxuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBVUkxTZWFyY2hQYXJhbXM6IFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yLFxuICBnZXRTdGF0ZTogZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IGluIGNvcmUtanNANCwgbW92ZSAvbW9kdWxlcy8gZGVwZW5kZW5jaWVzIHRvIHB1YmxpYyBlbnRyaWVzIGZvciBiZXR0ZXIgb3B0aW1pemF0aW9uIGJ5IHRvb2xzIGxpa2UgYHByZXNldC1lbnZgXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvcicpO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBVU0VfTkFUSVZFX1VSTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtdXJsJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZGVmaW5lUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKS5mO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1hc3NpZ24nKTtcbnZhciBhcnJheUZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZnJvbScpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2Utc2ltcGxlJyk7XG52YXIgY29kZUF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jb2RlQXQ7XG52YXIgdG9BU0NJSSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcHVueWNvZGUtdG8tYXNjaWknKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBVUkxTZWFyY2hQYXJhbXNNb2R1bGUgPSByZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFVSTFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoJ1VSTCcpO1xudmFyIFVSTFNlYXJjaFBhcmFtcyA9IFVSTFNlYXJjaFBhcmFtc01vZHVsZS5VUkxTZWFyY2hQYXJhbXM7XG52YXIgZ2V0SW50ZXJuYWxTZWFyY2hQYXJhbXNTdGF0ZSA9IFVSTFNlYXJjaFBhcmFtc01vZHVsZS5nZXRTdGF0ZTtcblxudmFyIE5hdGl2ZVVSTCA9IGdsb2JhbC5VUkw7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBwYXJzZUludCA9IGdsb2JhbC5wYXJzZUludDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoLy4vLmV4ZWMpO1xudmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcbnZhciBudW1iZXJUb1N0cmluZyA9IHVuY3VycnlUaGlzKDEuMC50b1N0cmluZyk7XG52YXIgcG9wID0gdW5jdXJyeVRoaXMoW10ucG9wKTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHNoaWZ0ID0gdW5jdXJyeVRoaXMoW10uc2hpZnQpO1xudmFyIHNwbGl0ID0gdW5jdXJyeVRoaXMoJycuc3BsaXQpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xudmFyIHRvTG93ZXJDYXNlID0gdW5jdXJyeVRoaXMoJycudG9Mb3dlckNhc2UpO1xudmFyIHVuc2hpZnQgPSB1bmN1cnJ5VGhpcyhbXS51bnNoaWZ0KTtcblxudmFyIElOVkFMSURfQVVUSE9SSVRZID0gJ0ludmFsaWQgYXV0aG9yaXR5JztcbnZhciBJTlZBTElEX1NDSEVNRSA9ICdJbnZhbGlkIHNjaGVtZSc7XG52YXIgSU5WQUxJRF9IT1NUID0gJ0ludmFsaWQgaG9zdCc7XG52YXIgSU5WQUxJRF9QT1JUID0gJ0ludmFsaWQgcG9ydCc7XG5cbnZhciBBTFBIQSA9IC9bYS16XS9pO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1vYnNjdXJlLXJhbmdlIC0tIHNhZmVcbnZhciBBTFBIQU5VTUVSSUMgPSAvW1xcZCstLmEtel0vaTtcbnZhciBESUdJVCA9IC9cXGQvO1xudmFyIEhFWF9TVEFSVCA9IC9eMHgvaTtcbnZhciBPQ1QgPSAvXlswLTddKyQvO1xudmFyIERFQyA9IC9eXFxkKyQvO1xudmFyIEhFWCA9IC9eW1xcZGEtZl0rJC9pO1xuLyogZXNsaW50LWRpc2FibGUgcmVnZXhwL25vLWNvbnRyb2wtY2hhcmFjdGVyIC0tIHNhZmUgKi9cbnZhciBGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UID0gL1tcXDBcXHRcXG5cXHIgIyUvOjw+P0BbXFxcXFxcXV58XS87XG52YXIgRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVF9FWENMVURJTkdfUEVSQ0VOVCA9IC9bXFwwXFx0XFxuXFxyICMvOjw+P0BbXFxcXFxcXV58XS87XG52YXIgTEVBRElOR19BTkRfVFJBSUxJTkdfQzBfQ09OVFJPTF9PUl9TUEFDRSA9IC9eW1xcdTAwMDAtXFx1MDAyMF0rfFtcXHUwMDAwLVxcdTAwMjBdKyQvZztcbnZhciBUQUJfQU5EX05FV19MSU5FID0gL1tcXHRcXG5cXHJdL2c7XG4vKiBlc2xpbnQtZW5hYmxlIHJlZ2V4cC9uby1jb250cm9sLWNoYXJhY3RlciAtLSBzYWZlICovXG52YXIgRU9GO1xuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2lwdjQtbnVtYmVyLXBhcnNlclxudmFyIHBhcnNlSVB2NCA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICB2YXIgcGFydHMgPSBzcGxpdChpbnB1dCwgJy4nKTtcbiAgdmFyIHBhcnRzTGVuZ3RoLCBudW1iZXJzLCBpbmRleCwgcGFydCwgcmFkaXgsIG51bWJlciwgaXB2NDtcbiAgaWYgKHBhcnRzLmxlbmd0aCAmJiBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXSA9PSAnJykge1xuICAgIHBhcnRzLmxlbmd0aC0tO1xuICB9XG4gIHBhcnRzTGVuZ3RoID0gcGFydHMubGVuZ3RoO1xuICBpZiAocGFydHNMZW5ndGggPiA0KSByZXR1cm4gaW5wdXQ7XG4gIG51bWJlcnMgPSBbXTtcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcGFydHNMZW5ndGg7IGluZGV4KyspIHtcbiAgICBwYXJ0ID0gcGFydHNbaW5kZXhdO1xuICAgIGlmIChwYXJ0ID09ICcnKSByZXR1cm4gaW5wdXQ7XG4gICAgcmFkaXggPSAxMDtcbiAgICBpZiAocGFydC5sZW5ndGggPiAxICYmIGNoYXJBdChwYXJ0LCAwKSA9PSAnMCcpIHtcbiAgICAgIHJhZGl4ID0gZXhlYyhIRVhfU1RBUlQsIHBhcnQpID8gMTYgOiA4O1xuICAgICAgcGFydCA9IHN0cmluZ1NsaWNlKHBhcnQsIHJhZGl4ID09IDggPyAxIDogMik7XG4gICAgfVxuICAgIGlmIChwYXJ0ID09PSAnJykge1xuICAgICAgbnVtYmVyID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFleGVjKHJhZGl4ID09IDEwID8gREVDIDogcmFkaXggPT0gOCA/IE9DVCA6IEhFWCwgcGFydCkpIHJldHVybiBpbnB1dDtcbiAgICAgIG51bWJlciA9IHBhcnNlSW50KHBhcnQsIHJhZGl4KTtcbiAgICB9XG4gICAgcHVzaChudW1iZXJzLCBudW1iZXIpO1xuICB9XG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHBhcnRzTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgbnVtYmVyID0gbnVtYmVyc1tpbmRleF07XG4gICAgaWYgKGluZGV4ID09IHBhcnRzTGVuZ3RoIC0gMSkge1xuICAgICAgaWYgKG51bWJlciA+PSBwb3coMjU2LCA1IC0gcGFydHNMZW5ndGgpKSByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2UgaWYgKG51bWJlciA+IDI1NSkgcmV0dXJuIG51bGw7XG4gIH1cbiAgaXB2NCA9IHBvcChudW1iZXJzKTtcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgbnVtYmVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBpcHY0ICs9IG51bWJlcnNbaW5kZXhdICogcG93KDI1NiwgMyAtIGluZGV4KTtcbiAgfVxuICByZXR1cm4gaXB2NDtcbn07XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1pcHY2LXBhcnNlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzIC0tIFRPRE9cbnZhciBwYXJzZUlQdjYgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIGFkZHJlc3MgPSBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF07XG4gIHZhciBwaWVjZUluZGV4ID0gMDtcbiAgdmFyIGNvbXByZXNzID0gbnVsbDtcbiAgdmFyIHBvaW50ZXIgPSAwO1xuICB2YXIgdmFsdWUsIGxlbmd0aCwgbnVtYmVyc1NlZW4sIGlwdjRQaWVjZSwgbnVtYmVyLCBzd2Fwcywgc3dhcDtcblxuICB2YXIgY2hyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjaGFyQXQoaW5wdXQsIHBvaW50ZXIpO1xuICB9O1xuXG4gIGlmIChjaHIoKSA9PSAnOicpIHtcbiAgICBpZiAoY2hhckF0KGlucHV0LCAxKSAhPSAnOicpIHJldHVybjtcbiAgICBwb2ludGVyICs9IDI7XG4gICAgcGllY2VJbmRleCsrO1xuICAgIGNvbXByZXNzID0gcGllY2VJbmRleDtcbiAgfVxuICB3aGlsZSAoY2hyKCkpIHtcbiAgICBpZiAocGllY2VJbmRleCA9PSA4KSByZXR1cm47XG4gICAgaWYgKGNocigpID09ICc6Jykge1xuICAgICAgaWYgKGNvbXByZXNzICE9PSBudWxsKSByZXR1cm47XG4gICAgICBwb2ludGVyKys7XG4gICAgICBwaWVjZUluZGV4Kys7XG4gICAgICBjb21wcmVzcyA9IHBpZWNlSW5kZXg7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFsdWUgPSBsZW5ndGggPSAwO1xuICAgIHdoaWxlIChsZW5ndGggPCA0ICYmIGV4ZWMoSEVYLCBjaHIoKSkpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUgKiAxNiArIHBhcnNlSW50KGNocigpLCAxNik7XG4gICAgICBwb2ludGVyKys7XG4gICAgICBsZW5ndGgrKztcbiAgICB9XG4gICAgaWYgKGNocigpID09ICcuJykge1xuICAgICAgaWYgKGxlbmd0aCA9PSAwKSByZXR1cm47XG4gICAgICBwb2ludGVyIC09IGxlbmd0aDtcbiAgICAgIGlmIChwaWVjZUluZGV4ID4gNikgcmV0dXJuO1xuICAgICAgbnVtYmVyc1NlZW4gPSAwO1xuICAgICAgd2hpbGUgKGNocigpKSB7XG4gICAgICAgIGlwdjRQaWVjZSA9IG51bGw7XG4gICAgICAgIGlmIChudW1iZXJzU2VlbiA+IDApIHtcbiAgICAgICAgICBpZiAoY2hyKCkgPT0gJy4nICYmIG51bWJlcnNTZWVuIDwgNCkgcG9pbnRlcisrO1xuICAgICAgICAgIGVsc2UgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZXhlYyhESUdJVCwgY2hyKCkpKSByZXR1cm47XG4gICAgICAgIHdoaWxlIChleGVjKERJR0lULCBjaHIoKSkpIHtcbiAgICAgICAgICBudW1iZXIgPSBwYXJzZUludChjaHIoKSwgMTApO1xuICAgICAgICAgIGlmIChpcHY0UGllY2UgPT09IG51bGwpIGlwdjRQaWVjZSA9IG51bWJlcjtcbiAgICAgICAgICBlbHNlIGlmIChpcHY0UGllY2UgPT0gMCkgcmV0dXJuO1xuICAgICAgICAgIGVsc2UgaXB2NFBpZWNlID0gaXB2NFBpZWNlICogMTAgKyBudW1iZXI7XG4gICAgICAgICAgaWYgKGlwdjRQaWVjZSA+IDI1NSkgcmV0dXJuO1xuICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgfVxuICAgICAgICBhZGRyZXNzW3BpZWNlSW5kZXhdID0gYWRkcmVzc1twaWVjZUluZGV4XSAqIDI1NiArIGlwdjRQaWVjZTtcbiAgICAgICAgbnVtYmVyc1NlZW4rKztcbiAgICAgICAgaWYgKG51bWJlcnNTZWVuID09IDIgfHwgbnVtYmVyc1NlZW4gPT0gNCkgcGllY2VJbmRleCsrO1xuICAgICAgfVxuICAgICAgaWYgKG51bWJlcnNTZWVuICE9IDQpIHJldHVybjtcbiAgICAgIGJyZWFrO1xuICAgIH0gZWxzZSBpZiAoY2hyKCkgPT0gJzonKSB7XG4gICAgICBwb2ludGVyKys7XG4gICAgICBpZiAoIWNocigpKSByZXR1cm47XG4gICAgfSBlbHNlIGlmIChjaHIoKSkgcmV0dXJuO1xuICAgIGFkZHJlc3NbcGllY2VJbmRleCsrXSA9IHZhbHVlO1xuICB9XG4gIGlmIChjb21wcmVzcyAhPT0gbnVsbCkge1xuICAgIHN3YXBzID0gcGllY2VJbmRleCAtIGNvbXByZXNzO1xuICAgIHBpZWNlSW5kZXggPSA3O1xuICAgIHdoaWxlIChwaWVjZUluZGV4ICE9IDAgJiYgc3dhcHMgPiAwKSB7XG4gICAgICBzd2FwID0gYWRkcmVzc1twaWVjZUluZGV4XTtcbiAgICAgIGFkZHJlc3NbcGllY2VJbmRleC0tXSA9IGFkZHJlc3NbY29tcHJlc3MgKyBzd2FwcyAtIDFdO1xuICAgICAgYWRkcmVzc1tjb21wcmVzcyArIC0tc3dhcHNdID0gc3dhcDtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGllY2VJbmRleCAhPSA4KSByZXR1cm47XG4gIHJldHVybiBhZGRyZXNzO1xufTtcblxudmFyIGZpbmRMb25nZXN0WmVyb1NlcXVlbmNlID0gZnVuY3Rpb24gKGlwdjYpIHtcbiAgdmFyIG1heEluZGV4ID0gbnVsbDtcbiAgdmFyIG1heExlbmd0aCA9IDE7XG4gIHZhciBjdXJyU3RhcnQgPSBudWxsO1xuICB2YXIgY3Vyckxlbmd0aCA9IDA7XG4gIHZhciBpbmRleCA9IDA7XG4gIGZvciAoOyBpbmRleCA8IDg7IGluZGV4KyspIHtcbiAgICBpZiAoaXB2NltpbmRleF0gIT09IDApIHtcbiAgICAgIGlmIChjdXJyTGVuZ3RoID4gbWF4TGVuZ3RoKSB7XG4gICAgICAgIG1heEluZGV4ID0gY3VyclN0YXJ0O1xuICAgICAgICBtYXhMZW5ndGggPSBjdXJyTGVuZ3RoO1xuICAgICAgfVxuICAgICAgY3VyclN0YXJ0ID0gbnVsbDtcbiAgICAgIGN1cnJMZW5ndGggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoY3VyclN0YXJ0ID09PSBudWxsKSBjdXJyU3RhcnQgPSBpbmRleDtcbiAgICAgICsrY3Vyckxlbmd0aDtcbiAgICB9XG4gIH1cbiAgaWYgKGN1cnJMZW5ndGggPiBtYXhMZW5ndGgpIHtcbiAgICBtYXhJbmRleCA9IGN1cnJTdGFydDtcbiAgICBtYXhMZW5ndGggPSBjdXJyTGVuZ3RoO1xuICB9XG4gIHJldHVybiBtYXhJbmRleDtcbn07XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jaG9zdC1zZXJpYWxpemluZ1xudmFyIHNlcmlhbGl6ZUhvc3QgPSBmdW5jdGlvbiAoaG9zdCkge1xuICB2YXIgcmVzdWx0LCBpbmRleCwgY29tcHJlc3MsIGlnbm9yZTA7XG4gIC8vIGlwdjRcbiAgaWYgKHR5cGVvZiBob3N0ID09ICdudW1iZXInKSB7XG4gICAgcmVzdWx0ID0gW107XG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgNDsgaW5kZXgrKykge1xuICAgICAgdW5zaGlmdChyZXN1bHQsIGhvc3QgJSAyNTYpO1xuICAgICAgaG9zdCA9IGZsb29yKGhvc3QgLyAyNTYpO1xuICAgIH0gcmV0dXJuIGpvaW4ocmVzdWx0LCAnLicpO1xuICAvLyBpcHY2XG4gIH0gZWxzZSBpZiAodHlwZW9mIGhvc3QgPT0gJ29iamVjdCcpIHtcbiAgICByZXN1bHQgPSAnJztcbiAgICBjb21wcmVzcyA9IGZpbmRMb25nZXN0WmVyb1NlcXVlbmNlKGhvc3QpO1xuICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IDg7IGluZGV4KyspIHtcbiAgICAgIGlmIChpZ25vcmUwICYmIGhvc3RbaW5kZXhdID09PSAwKSBjb250aW51ZTtcbiAgICAgIGlmIChpZ25vcmUwKSBpZ25vcmUwID0gZmFsc2U7XG4gICAgICBpZiAoY29tcHJlc3MgPT09IGluZGV4KSB7XG4gICAgICAgIHJlc3VsdCArPSBpbmRleCA/ICc6JyA6ICc6Oic7XG4gICAgICAgIGlnbm9yZTAgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ICs9IG51bWJlclRvU3RyaW5nKGhvc3RbaW5kZXhdLCAxNik7XG4gICAgICAgIGlmIChpbmRleCA8IDcpIHJlc3VsdCArPSAnOic7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnWycgKyByZXN1bHQgKyAnXSc7XG4gIH0gcmV0dXJuIGhvc3Q7XG59O1xuXG52YXIgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCA9IHt9O1xudmFyIGZyYWdtZW50UGVyY2VudEVuY29kZVNldCA9IGFzc2lnbih7fSwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCwge1xuICAnICc6IDEsICdcIic6IDEsICc8JzogMSwgJz4nOiAxLCAnYCc6IDFcbn0pO1xudmFyIHBhdGhQZXJjZW50RW5jb2RlU2V0ID0gYXNzaWduKHt9LCBmcmFnbWVudFBlcmNlbnRFbmNvZGVTZXQsIHtcbiAgJyMnOiAxLCAnPyc6IDEsICd7JzogMSwgJ30nOiAxXG59KTtcbnZhciB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQgPSBhc3NpZ24oe30sIHBhdGhQZXJjZW50RW5jb2RlU2V0LCB7XG4gICcvJzogMSwgJzonOiAxLCAnOyc6IDEsICc9JzogMSwgJ0AnOiAxLCAnWyc6IDEsICdcXFxcJzogMSwgJ10nOiAxLCAnXic6IDEsICd8JzogMVxufSk7XG5cbnZhciBwZXJjZW50RW5jb2RlID0gZnVuY3Rpb24gKGNociwgc2V0KSB7XG4gIHZhciBjb2RlID0gY29kZUF0KGNociwgMCk7XG4gIHJldHVybiBjb2RlID4gMHgyMCAmJiBjb2RlIDwgMHg3RiAmJiAhaGFzT3duKHNldCwgY2hyKSA/IGNociA6IGVuY29kZVVSSUNvbXBvbmVudChjaHIpO1xufTtcblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNzcGVjaWFsLXNjaGVtZVxudmFyIHNwZWNpYWxTY2hlbWVzID0ge1xuICBmdHA6IDIxLFxuICBmaWxlOiBudWxsLFxuICBodHRwOiA4MCxcbiAgaHR0cHM6IDQ0MyxcbiAgd3M6IDgwLFxuICB3c3M6IDQ0M1xufTtcblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN3aW5kb3dzLWRyaXZlLWxldHRlclxudmFyIGlzV2luZG93c0RyaXZlTGV0dGVyID0gZnVuY3Rpb24gKHN0cmluZywgbm9ybWFsaXplZCkge1xuICB2YXIgc2Vjb25kO1xuICByZXR1cm4gc3RyaW5nLmxlbmd0aCA9PSAyICYmIGV4ZWMoQUxQSEEsIGNoYXJBdChzdHJpbmcsIDApKVxuICAgICYmICgoc2Vjb25kID0gY2hhckF0KHN0cmluZywgMSkpID09ICc6JyB8fCAoIW5vcm1hbGl6ZWQgJiYgc2Vjb25kID09ICd8JykpO1xufTtcblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNzdGFydC13aXRoLWEtd2luZG93cy1kcml2ZS1sZXR0ZXJcbnZhciBzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyID0gZnVuY3Rpb24gKHN0cmluZykge1xuICB2YXIgdGhpcmQ7XG4gIHJldHVybiBzdHJpbmcubGVuZ3RoID4gMSAmJiBpc1dpbmRvd3NEcml2ZUxldHRlcihzdHJpbmdTbGljZShzdHJpbmcsIDAsIDIpKSAmJiAoXG4gICAgc3RyaW5nLmxlbmd0aCA9PSAyIHx8XG4gICAgKCh0aGlyZCA9IGNoYXJBdChzdHJpbmcsIDIpKSA9PT0gJy8nIHx8IHRoaXJkID09PSAnXFxcXCcgfHwgdGhpcmQgPT09ICc/JyB8fCB0aGlyZCA9PT0gJyMnKVxuICApO1xufTtcblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNzaW5nbGUtZG90LXBhdGgtc2VnbWVudFxudmFyIGlzU2luZ2xlRG90ID0gZnVuY3Rpb24gKHNlZ21lbnQpIHtcbiAgcmV0dXJuIHNlZ21lbnQgPT09ICcuJyB8fCB0b0xvd2VyQ2FzZShzZWdtZW50KSA9PT0gJyUyZSc7XG59O1xuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvdWJsZS1kb3QtcGF0aC1zZWdtZW50XG52YXIgaXNEb3VibGVEb3QgPSBmdW5jdGlvbiAoc2VnbWVudCkge1xuICBzZWdtZW50ID0gdG9Mb3dlckNhc2Uoc2VnbWVudCk7XG4gIHJldHVybiBzZWdtZW50ID09PSAnLi4nIHx8IHNlZ21lbnQgPT09ICclMmUuJyB8fCBzZWdtZW50ID09PSAnLiUyZScgfHwgc2VnbWVudCA9PT0gJyUyZSUyZSc7XG59O1xuXG4vLyBTdGF0ZXM6XG52YXIgU0NIRU1FX1NUQVJUID0ge307XG52YXIgU0NIRU1FID0ge307XG52YXIgTk9fU0NIRU1FID0ge307XG52YXIgU1BFQ0lBTF9SRUxBVElWRV9PUl9BVVRIT1JJVFkgPSB7fTtcbnZhciBQQVRIX09SX0FVVEhPUklUWSA9IHt9O1xudmFyIFJFTEFUSVZFID0ge307XG52YXIgUkVMQVRJVkVfU0xBU0ggPSB7fTtcbnZhciBTUEVDSUFMX0FVVEhPUklUWV9TTEFTSEVTID0ge307XG52YXIgU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVMgPSB7fTtcbnZhciBBVVRIT1JJVFkgPSB7fTtcbnZhciBIT1NUID0ge307XG52YXIgSE9TVE5BTUUgPSB7fTtcbnZhciBQT1JUID0ge307XG52YXIgRklMRSA9IHt9O1xudmFyIEZJTEVfU0xBU0ggPSB7fTtcbnZhciBGSUxFX0hPU1QgPSB7fTtcbnZhciBQQVRIX1NUQVJUID0ge307XG52YXIgUEFUSCA9IHt9O1xudmFyIENBTk5PVF9CRV9BX0JBU0VfVVJMX1BBVEggPSB7fTtcbnZhciBRVUVSWSA9IHt9O1xudmFyIEZSQUdNRU5UID0ge307XG5cbnZhciBVUkxTdGF0ZSA9IGZ1bmN0aW9uICh1cmwsIGlzQmFzZSwgYmFzZSkge1xuICB2YXIgdXJsU3RyaW5nID0gJHRvU3RyaW5nKHVybCk7XG4gIHZhciBiYXNlU3RhdGUsIGZhaWx1cmUsIHNlYXJjaFBhcmFtcztcbiAgaWYgKGlzQmFzZSkge1xuICAgIGZhaWx1cmUgPSB0aGlzLnBhcnNlKHVybFN0cmluZyk7XG4gICAgaWYgKGZhaWx1cmUpIHRocm93IFR5cGVFcnJvcihmYWlsdXJlKTtcbiAgICB0aGlzLnNlYXJjaFBhcmFtcyA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJhc2UgIT09IHVuZGVmaW5lZCkgYmFzZVN0YXRlID0gbmV3IFVSTFN0YXRlKGJhc2UsIHRydWUpO1xuICAgIGZhaWx1cmUgPSB0aGlzLnBhcnNlKHVybFN0cmluZywgbnVsbCwgYmFzZVN0YXRlKTtcbiAgICBpZiAoZmFpbHVyZSkgdGhyb3cgVHlwZUVycm9yKGZhaWx1cmUpO1xuICAgIHNlYXJjaFBhcmFtcyA9IGdldEludGVybmFsU2VhcmNoUGFyYW1zU3RhdGUobmV3IFVSTFNlYXJjaFBhcmFtcygpKTtcbiAgICBzZWFyY2hQYXJhbXMuYmluZFVSTCh0aGlzKTtcbiAgICB0aGlzLnNlYXJjaFBhcmFtcyA9IHNlYXJjaFBhcmFtcztcbiAgfVxufTtcblxuVVJMU3RhdGUucHJvdG90eXBlID0ge1xuICB0eXBlOiAnVVJMJyxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmwtcGFyc2luZ1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHMgLS0gVE9ET1xuICBwYXJzZTogZnVuY3Rpb24gKGlucHV0LCBzdGF0ZU92ZXJyaWRlLCBiYXNlKSB7XG4gICAgdmFyIHVybCA9IHRoaXM7XG4gICAgdmFyIHN0YXRlID0gc3RhdGVPdmVycmlkZSB8fCBTQ0hFTUVfU1RBUlQ7XG4gICAgdmFyIHBvaW50ZXIgPSAwO1xuICAgIHZhciBidWZmZXIgPSAnJztcbiAgICB2YXIgc2VlbkF0ID0gZmFsc2U7XG4gICAgdmFyIHNlZW5CcmFja2V0ID0gZmFsc2U7XG4gICAgdmFyIHNlZW5QYXNzd29yZFRva2VuID0gZmFsc2U7XG4gICAgdmFyIGNvZGVQb2ludHMsIGNociwgYnVmZmVyQ29kZVBvaW50cywgZmFpbHVyZTtcblxuICAgIGlucHV0ID0gJHRvU3RyaW5nKGlucHV0KTtcblxuICAgIGlmICghc3RhdGVPdmVycmlkZSkge1xuICAgICAgdXJsLnNjaGVtZSA9ICcnO1xuICAgICAgdXJsLnVzZXJuYW1lID0gJyc7XG4gICAgICB1cmwucGFzc3dvcmQgPSAnJztcbiAgICAgIHVybC5ob3N0ID0gbnVsbDtcbiAgICAgIHVybC5wb3J0ID0gbnVsbDtcbiAgICAgIHVybC5wYXRoID0gW107XG4gICAgICB1cmwucXVlcnkgPSBudWxsO1xuICAgICAgdXJsLmZyYWdtZW50ID0gbnVsbDtcbiAgICAgIHVybC5jYW5ub3RCZUFCYXNlVVJMID0gZmFsc2U7XG4gICAgICBpbnB1dCA9IHJlcGxhY2UoaW5wdXQsIExFQURJTkdfQU5EX1RSQUlMSU5HX0MwX0NPTlRST0xfT1JfU1BBQ0UsICcnKTtcbiAgICB9XG5cbiAgICBpbnB1dCA9IHJlcGxhY2UoaW5wdXQsIFRBQl9BTkRfTkVXX0xJTkUsICcnKTtcblxuICAgIGNvZGVQb2ludHMgPSBhcnJheUZyb20oaW5wdXQpO1xuXG4gICAgd2hpbGUgKHBvaW50ZXIgPD0gY29kZVBvaW50cy5sZW5ndGgpIHtcbiAgICAgIGNociA9IGNvZGVQb2ludHNbcG9pbnRlcl07XG4gICAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICAgIGNhc2UgU0NIRU1FX1NUQVJUOlxuICAgICAgICAgIGlmIChjaHIgJiYgZXhlYyhBTFBIQSwgY2hyKSkge1xuICAgICAgICAgICAgYnVmZmVyICs9IHRvTG93ZXJDYXNlKGNocik7XG4gICAgICAgICAgICBzdGF0ZSA9IFNDSEVNRTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IE5PX1NDSEVNRTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSByZXR1cm4gSU5WQUxJRF9TQ0hFTUU7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBTQ0hFTUU6XG4gICAgICAgICAgaWYgKGNociAmJiAoZXhlYyhBTFBIQU5VTUVSSUMsIGNocikgfHwgY2hyID09ICcrJyB8fCBjaHIgPT0gJy0nIHx8IGNociA9PSAnLicpKSB7XG4gICAgICAgICAgICBidWZmZXIgKz0gdG9Mb3dlckNhc2UoY2hyKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnOicpIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlICYmIChcbiAgICAgICAgICAgICAgKHVybC5pc1NwZWNpYWwoKSAhPSBoYXNPd24oc3BlY2lhbFNjaGVtZXMsIGJ1ZmZlcikpIHx8XG4gICAgICAgICAgICAgIChidWZmZXIgPT0gJ2ZpbGUnICYmICh1cmwuaW5jbHVkZXNDcmVkZW50aWFscygpIHx8IHVybC5wb3J0ICE9PSBudWxsKSkgfHxcbiAgICAgICAgICAgICAgKHVybC5zY2hlbWUgPT0gJ2ZpbGUnICYmICF1cmwuaG9zdClcbiAgICAgICAgICAgICkpIHJldHVybjtcbiAgICAgICAgICAgIHVybC5zY2hlbWUgPSBidWZmZXI7XG4gICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkge1xuICAgICAgICAgICAgICBpZiAodXJsLmlzU3BlY2lhbCgpICYmIHNwZWNpYWxTY2hlbWVzW3VybC5zY2hlbWVdID09IHVybC5wb3J0KSB1cmwucG9ydCA9IG51bGw7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgaWYgKHVybC5zY2hlbWUgPT0gJ2ZpbGUnKSB7XG4gICAgICAgICAgICAgIHN0YXRlID0gRklMRTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodXJsLmlzU3BlY2lhbCgpICYmIGJhc2UgJiYgYmFzZS5zY2hlbWUgPT0gdXJsLnNjaGVtZSkge1xuICAgICAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh1cmwuaXNTcGVjaWFsKCkpIHtcbiAgICAgICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX0FVVEhPUklUWV9TTEFTSEVTO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb2RlUG9pbnRzW3BvaW50ZXIgKyAxXSA9PSAnLycpIHtcbiAgICAgICAgICAgICAgc3RhdGUgPSBQQVRIX09SX0FVVEhPUklUWTtcbiAgICAgICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdXJsLmNhbm5vdEJlQUJhc2VVUkwgPSB0cnVlO1xuICAgICAgICAgICAgICBwdXNoKHVybC5wYXRoLCAnJyk7XG4gICAgICAgICAgICAgIHN0YXRlID0gQ0FOTk9UX0JFX0FfQkFTRV9VUkxfUEFUSDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlKSB7XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gTk9fU0NIRU1FO1xuICAgICAgICAgICAgcG9pbnRlciA9IDA7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgcmV0dXJuIElOVkFMSURfU0NIRU1FO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTk9fU0NIRU1FOlxuICAgICAgICAgIGlmICghYmFzZSB8fCAoYmFzZS5jYW5ub3RCZUFCYXNlVVJMICYmIGNociAhPSAnIycpKSByZXR1cm4gSU5WQUxJRF9TQ0hFTUU7XG4gICAgICAgICAgaWYgKGJhc2UuY2Fubm90QmVBQmFzZVVSTCAmJiBjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgICB1cmwuc2NoZW1lID0gYmFzZS5zY2hlbWU7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgIHVybC5jYW5ub3RCZUFCYXNlVVJMID0gdHJ1ZTtcbiAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhdGUgPSBiYXNlLnNjaGVtZSA9PSAnZmlsZScgPyBGSUxFIDogUkVMQVRJVkU7XG4gICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgY2FzZSBTUEVDSUFMX1JFTEFUSVZFX09SX0FVVEhPUklUWTpcbiAgICAgICAgICBpZiAoY2hyID09ICcvJyAmJiBjb2RlUG9pbnRzW3BvaW50ZXIgKyAxXSA9PSAnLycpIHtcbiAgICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVM7XG4gICAgICAgICAgICBwb2ludGVyKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRlID0gUkVMQVRJVkU7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUEFUSF9PUl9BVVRIT1JJVFk6XG4gICAgICAgICAgaWYgKGNociA9PSAnLycpIHtcbiAgICAgICAgICAgIHN0YXRlID0gQVVUSE9SSVRZO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlIFJFTEFUSVZFOlxuICAgICAgICAgIHVybC5zY2hlbWUgPSBiYXNlLnNjaGVtZTtcbiAgICAgICAgICBpZiAoY2hyID09IEVPRikge1xuICAgICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICcvJyB8fCAoY2hyID09ICdcXFxcJyAmJiB1cmwuaXNTcGVjaWFsKCkpKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFJFTEFUSVZFX1NMQVNIO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICc/Jykge1xuICAgICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpO1xuICAgICAgICAgICAgdXJsLnBhdGgubGVuZ3RoLS07XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUkVMQVRJVkVfU0xBU0g6XG4gICAgICAgICAgaWYgKHVybC5pc1NwZWNpYWwoKSAmJiAoY2hyID09ICcvJyB8fCBjaHIgPT0gJ1xcXFwnKSkge1xuICAgICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUztcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnLycpIHtcbiAgICAgICAgICAgIHN0YXRlID0gQVVUSE9SSVRZO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUzpcbiAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTO1xuICAgICAgICAgIGlmIChjaHIgIT0gJy8nIHx8IGNoYXJBdChidWZmZXIsIHBvaW50ZXIgKyAxKSAhPSAnLycpIGNvbnRpbnVlO1xuICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTOlxuICAgICAgICAgIGlmIChjaHIgIT0gJy8nICYmIGNociAhPSAnXFxcXCcpIHtcbiAgICAgICAgICAgIHN0YXRlID0gQVVUSE9SSVRZO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIEFVVEhPUklUWTpcbiAgICAgICAgICBpZiAoY2hyID09ICdAJykge1xuICAgICAgICAgICAgaWYgKHNlZW5BdCkgYnVmZmVyID0gJyU0MCcgKyBidWZmZXI7XG4gICAgICAgICAgICBzZWVuQXQgPSB0cnVlO1xuICAgICAgICAgICAgYnVmZmVyQ29kZVBvaW50cyA9IGFycmF5RnJvbShidWZmZXIpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidWZmZXJDb2RlUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIHZhciBjb2RlUG9pbnQgPSBidWZmZXJDb2RlUG9pbnRzW2ldO1xuICAgICAgICAgICAgICBpZiAoY29kZVBvaW50ID09ICc6JyAmJiAhc2VlblBhc3N3b3JkVG9rZW4pIHtcbiAgICAgICAgICAgICAgICBzZWVuUGFzc3dvcmRUb2tlbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIGVuY29kZWRDb2RlUG9pbnRzID0gcGVyY2VudEVuY29kZShjb2RlUG9pbnQsIHVzZXJpbmZvUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgICAgICAgIGlmIChzZWVuUGFzc3dvcmRUb2tlbikgdXJsLnBhc3N3b3JkICs9IGVuY29kZWRDb2RlUG9pbnRzO1xuICAgICAgICAgICAgICBlbHNlIHVybC51c2VybmFtZSArPSBlbmNvZGVkQ29kZVBvaW50cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICBjaHIgPT0gRU9GIHx8IGNociA9PSAnLycgfHwgY2hyID09ICc/JyB8fCBjaHIgPT0gJyMnIHx8XG4gICAgICAgICAgICAoY2hyID09ICdcXFxcJyAmJiB1cmwuaXNTcGVjaWFsKCkpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoc2VlbkF0ICYmIGJ1ZmZlciA9PSAnJykgcmV0dXJuIElOVkFMSURfQVVUSE9SSVRZO1xuICAgICAgICAgICAgcG9pbnRlciAtPSBhcnJheUZyb20oYnVmZmVyKS5sZW5ndGggKyAxO1xuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IEhPU1Q7XG4gICAgICAgICAgfSBlbHNlIGJ1ZmZlciArPSBjaHI7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBIT1NUOlxuICAgICAgICBjYXNlIEhPU1ROQU1FOlxuICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlICYmIHVybC5zY2hlbWUgPT0gJ2ZpbGUnKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEZJTEVfSE9TVDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICc6JyAmJiAhc2VlbkJyYWNrZXQpIHtcbiAgICAgICAgICAgIGlmIChidWZmZXIgPT0gJycpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICAgICAgICBmYWlsdXJlID0gdXJsLnBhcnNlSG9zdChidWZmZXIpO1xuICAgICAgICAgICAgaWYgKGZhaWx1cmUpIHJldHVybiBmYWlsdXJlO1xuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IFBPUlQ7XG4gICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSA9PSBIT1NUTkFNRSkgcmV0dXJuO1xuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICBjaHIgPT0gRU9GIHx8IGNociA9PSAnLycgfHwgY2hyID09ICc/JyB8fCBjaHIgPT0gJyMnIHx8XG4gICAgICAgICAgICAoY2hyID09ICdcXFxcJyAmJiB1cmwuaXNTcGVjaWFsKCkpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAodXJsLmlzU3BlY2lhbCgpICYmIGJ1ZmZlciA9PSAnJykgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlICYmIGJ1ZmZlciA9PSAnJyAmJiAodXJsLmluY2x1ZGVzQ3JlZGVudGlhbHMoKSB8fCB1cmwucG9ydCAhPT0gbnVsbCkpIHJldHVybjtcbiAgICAgICAgICAgIGZhaWx1cmUgPSB1cmwucGFyc2VIb3N0KGJ1ZmZlcik7XG4gICAgICAgICAgICBpZiAoZmFpbHVyZSkgcmV0dXJuIGZhaWx1cmU7XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDtcbiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSByZXR1cm47XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGNociA9PSAnWycpIHNlZW5CcmFja2V0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGNociA9PSAnXScpIHNlZW5CcmFja2V0ID0gZmFsc2U7XG4gICAgICAgICAgICBidWZmZXIgKz0gY2hyO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQT1JUOlxuICAgICAgICAgIGlmIChleGVjKERJR0lULCBjaHIpKSB7XG4gICAgICAgICAgICBidWZmZXIgKz0gY2hyO1xuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICBjaHIgPT0gRU9GIHx8IGNociA9PSAnLycgfHwgY2hyID09ICc/JyB8fCBjaHIgPT0gJyMnIHx8XG4gICAgICAgICAgICAoY2hyID09ICdcXFxcJyAmJiB1cmwuaXNTcGVjaWFsKCkpIHx8XG4gICAgICAgICAgICBzdGF0ZU92ZXJyaWRlXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoYnVmZmVyICE9ICcnKSB7XG4gICAgICAgICAgICAgIHZhciBwb3J0ID0gcGFyc2VJbnQoYnVmZmVyLCAxMCk7XG4gICAgICAgICAgICAgIGlmIChwb3J0ID4gMHhGRkZGKSByZXR1cm4gSU5WQUxJRF9QT1JUO1xuICAgICAgICAgICAgICB1cmwucG9ydCA9ICh1cmwuaXNTcGVjaWFsKCkgJiYgcG9ydCA9PT0gc3BlY2lhbFNjaGVtZXNbdXJsLnNjaGVtZV0pID8gbnVsbCA6IHBvcnQ7XG4gICAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSByZXR1cm4gSU5WQUxJRF9QT1JUO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgRklMRTpcbiAgICAgICAgICB1cmwuc2NoZW1lID0gJ2ZpbGUnO1xuICAgICAgICAgIGlmIChjaHIgPT0gJy8nIHx8IGNociA9PSAnXFxcXCcpIHN0YXRlID0gRklMRV9TTEFTSDtcbiAgICAgICAgICBlbHNlIGlmIChiYXNlICYmIGJhc2Uuc2NoZW1lID09ICdmaWxlJykge1xuICAgICAgICAgICAgaWYgKGNociA9PSBFT0YpIHtcbiAgICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpO1xuICAgICAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJz8nKSB7XG4gICAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnIycpIHtcbiAgICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpO1xuICAgICAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICghc3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlcihqb2luKGFycmF5U2xpY2UoY29kZVBvaW50cywgcG9pbnRlciksICcnKSkpIHtcbiAgICAgICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgICAgICB1cmwuc2hvcnRlblBhdGgoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgRklMRV9TTEFTSDpcbiAgICAgICAgICBpZiAoY2hyID09ICcvJyB8fCBjaHIgPT0gJ1xcXFwnKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEZJTEVfSE9TVDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYmFzZSAmJiBiYXNlLnNjaGVtZSA9PSAnZmlsZScgJiYgIXN0YXJ0c1dpdGhXaW5kb3dzRHJpdmVMZXR0ZXIoam9pbihhcnJheVNsaWNlKGNvZGVQb2ludHMsIHBvaW50ZXIpLCAnJykpKSB7XG4gICAgICAgICAgICBpZiAoaXNXaW5kb3dzRHJpdmVMZXR0ZXIoYmFzZS5wYXRoWzBdLCB0cnVlKSkgcHVzaCh1cmwucGF0aCwgYmFzZS5wYXRoWzBdKTtcbiAgICAgICAgICAgIGVsc2UgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICBjYXNlIEZJTEVfSE9TVDpcbiAgICAgICAgICBpZiAoY2hyID09IEVPRiB8fCBjaHIgPT0gJy8nIHx8IGNociA9PSAnXFxcXCcgfHwgY2hyID09ICc/JyB8fCBjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgICBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgaXNXaW5kb3dzRHJpdmVMZXR0ZXIoYnVmZmVyKSkge1xuICAgICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGJ1ZmZlciA9PSAnJykge1xuICAgICAgICAgICAgICB1cmwuaG9zdCA9ICcnO1xuICAgICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkgcmV0dXJuO1xuICAgICAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmYWlsdXJlID0gdXJsLnBhcnNlSG9zdChidWZmZXIpO1xuICAgICAgICAgICAgICBpZiAoZmFpbHVyZSkgcmV0dXJuIGZhaWx1cmU7XG4gICAgICAgICAgICAgIGlmICh1cmwuaG9zdCA9PSAnbG9jYWxob3N0JykgdXJsLmhvc3QgPSAnJztcbiAgICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjtcbiAgICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDtcbiAgICAgICAgICAgIH0gY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGJ1ZmZlciArPSBjaHI7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQQVRIX1NUQVJUOlxuICAgICAgICAgIGlmICh1cmwuaXNTcGVjaWFsKCkpIHtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICAgIGlmIChjaHIgIT0gJy8nICYmIGNociAhPSAnXFxcXCcpIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgY2hyID09ICc/Jykge1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgY2hyID09ICcjJykge1xuICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyICE9IEVPRikge1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgICAgaWYgKGNociAhPSAnLycpIGNvbnRpbnVlO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQQVRIOlxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGNociA9PSBFT0YgfHwgY2hyID09ICcvJyB8fFxuICAgICAgICAgICAgKGNociA9PSAnXFxcXCcgJiYgdXJsLmlzU3BlY2lhbCgpKSB8fFxuICAgICAgICAgICAgKCFzdGF0ZU92ZXJyaWRlICYmIChjaHIgPT0gJz8nIHx8IGNociA9PSAnIycpKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKGlzRG91YmxlRG90KGJ1ZmZlcikpIHtcbiAgICAgICAgICAgICAgdXJsLnNob3J0ZW5QYXRoKCk7XG4gICAgICAgICAgICAgIGlmIChjaHIgIT0gJy8nICYmICEoY2hyID09ICdcXFxcJyAmJiB1cmwuaXNTcGVjaWFsKCkpKSB7XG4gICAgICAgICAgICAgICAgcHVzaCh1cmwucGF0aCwgJycpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzU2luZ2xlRG90KGJ1ZmZlcikpIHtcbiAgICAgICAgICAgICAgaWYgKGNociAhPSAnLycgJiYgIShjaHIgPT0gJ1xcXFwnICYmIHVybC5pc1NwZWNpYWwoKSkpIHtcbiAgICAgICAgICAgICAgICBwdXNoKHVybC5wYXRoLCAnJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICh1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAhdXJsLnBhdGgubGVuZ3RoICYmIGlzV2luZG93c0RyaXZlTGV0dGVyKGJ1ZmZlcikpIHtcbiAgICAgICAgICAgICAgICBpZiAodXJsLmhvc3QpIHVybC5ob3N0ID0gJyc7XG4gICAgICAgICAgICAgICAgYnVmZmVyID0gY2hhckF0KGJ1ZmZlciwgMCkgKyAnOic7IC8vIG5vcm1hbGl6ZSB3aW5kb3dzIGRyaXZlIGxldHRlclxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHB1c2godXJsLnBhdGgsIGJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIGlmICh1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAoY2hyID09IEVPRiB8fCBjaHIgPT0gJz8nIHx8IGNociA9PSAnIycpKSB7XG4gICAgICAgICAgICAgIHdoaWxlICh1cmwucGF0aC5sZW5ndGggPiAxICYmIHVybC5wYXRoWzBdID09PSAnJykge1xuICAgICAgICAgICAgICAgIHNoaWZ0KHVybC5wYXRoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNociA9PSAnPycpIHtcbiAgICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnIycpIHtcbiAgICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ1ZmZlciArPSBwZXJjZW50RW5jb2RlKGNociwgcGF0aFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIOlxuICAgICAgICAgIGlmIChjaHIgPT0gJz8nKSB7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgIT0gRU9GKSB7XG4gICAgICAgICAgICB1cmwucGF0aFswXSArPSBwZXJjZW50RW5jb2RlKGNociwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIFFVRVJZOlxuICAgICAgICAgIGlmICghc3RhdGVPdmVycmlkZSAmJiBjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgIT0gRU9GKSB7XG4gICAgICAgICAgICBpZiAoY2hyID09IFwiJ1wiICYmIHVybC5pc1NwZWNpYWwoKSkgdXJsLnF1ZXJ5ICs9ICclMjcnO1xuICAgICAgICAgICAgZWxzZSBpZiAoY2hyID09ICcjJykgdXJsLnF1ZXJ5ICs9ICclMjMnO1xuICAgICAgICAgICAgZWxzZSB1cmwucXVlcnkgKz0gcGVyY2VudEVuY29kZShjaHIsIEMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBGUkFHTUVOVDpcbiAgICAgICAgICBpZiAoY2hyICE9IEVPRikgdXJsLmZyYWdtZW50ICs9IHBlcmNlbnRFbmNvZGUoY2hyLCBmcmFnbWVudFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBwb2ludGVyKys7XG4gICAgfVxuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2hvc3QtcGFyc2luZ1xuICBwYXJzZUhvc3Q6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIHZhciByZXN1bHQsIGNvZGVQb2ludHMsIGluZGV4O1xuICAgIGlmIChjaGFyQXQoaW5wdXQsIDApID09ICdbJykge1xuICAgICAgaWYgKGNoYXJBdChpbnB1dCwgaW5wdXQubGVuZ3RoIC0gMSkgIT0gJ10nKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgcmVzdWx0ID0gcGFyc2VJUHY2KHN0cmluZ1NsaWNlKGlucHV0LCAxLCAtMSkpO1xuICAgICAgaWYgKCFyZXN1bHQpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICB0aGlzLmhvc3QgPSByZXN1bHQ7XG4gICAgLy8gb3BhcXVlIGhvc3RcbiAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU3BlY2lhbCgpKSB7XG4gICAgICBpZiAoZXhlYyhGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5ULCBpbnB1dCkpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICByZXN1bHQgPSAnJztcbiAgICAgIGNvZGVQb2ludHMgPSBhcnJheUZyb20oaW5wdXQpO1xuICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgY29kZVBvaW50cy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgcmVzdWx0ICs9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50c1tpbmRleF0sIEMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgfVxuICAgICAgdGhpcy5ob3N0ID0gcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dCA9IHRvQVNDSUkoaW5wdXQpO1xuICAgICAgaWYgKGV4ZWMoRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVCwgaW5wdXQpKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgcmVzdWx0ID0gcGFyc2VJUHY0KGlucHV0KTtcbiAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICB0aGlzLmhvc3QgPSByZXN1bHQ7XG4gICAgfVxuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2Nhbm5vdC1oYXZlLWEtdXNlcm5hbWUtcGFzc3dvcmQtcG9ydFxuICBjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gIXRoaXMuaG9zdCB8fCB0aGlzLmNhbm5vdEJlQUJhc2VVUkwgfHwgdGhpcy5zY2hlbWUgPT0gJ2ZpbGUnO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2luY2x1ZGUtY3JlZGVudGlhbHNcbiAgaW5jbHVkZXNDcmVkZW50aWFsczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnVzZXJuYW1lICE9ICcnIHx8IHRoaXMucGFzc3dvcmQgIT0gJyc7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jaXMtc3BlY2lhbFxuICBpc1NwZWNpYWw6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaGFzT3duKHNwZWNpYWxTY2hlbWVzLCB0aGlzLnNjaGVtZSk7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jc2hvcnRlbi1hLXVybHMtcGF0aFxuICBzaG9ydGVuUGF0aDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXRoID0gdGhpcy5wYXRoO1xuICAgIHZhciBwYXRoU2l6ZSA9IHBhdGgubGVuZ3RoO1xuICAgIGlmIChwYXRoU2l6ZSAmJiAodGhpcy5zY2hlbWUgIT0gJ2ZpbGUnIHx8IHBhdGhTaXplICE9IDEgfHwgIWlzV2luZG93c0RyaXZlTGV0dGVyKHBhdGhbMF0sIHRydWUpKSkge1xuICAgICAgcGF0aC5sZW5ndGgtLTtcbiAgICB9XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC11cmwtc2VyaWFsaXplclxuICBzZXJpYWxpemU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdXJsID0gdGhpcztcbiAgICB2YXIgc2NoZW1lID0gdXJsLnNjaGVtZTtcbiAgICB2YXIgdXNlcm5hbWUgPSB1cmwudXNlcm5hbWU7XG4gICAgdmFyIHBhc3N3b3JkID0gdXJsLnBhc3N3b3JkO1xuICAgIHZhciBob3N0ID0gdXJsLmhvc3Q7XG4gICAgdmFyIHBvcnQgPSB1cmwucG9ydDtcbiAgICB2YXIgcGF0aCA9IHVybC5wYXRoO1xuICAgIHZhciBxdWVyeSA9IHVybC5xdWVyeTtcbiAgICB2YXIgZnJhZ21lbnQgPSB1cmwuZnJhZ21lbnQ7XG4gICAgdmFyIG91dHB1dCA9IHNjaGVtZSArICc6JztcbiAgICBpZiAoaG9zdCAhPT0gbnVsbCkge1xuICAgICAgb3V0cHV0ICs9ICcvLyc7XG4gICAgICBpZiAodXJsLmluY2x1ZGVzQ3JlZGVudGlhbHMoKSkge1xuICAgICAgICBvdXRwdXQgKz0gdXNlcm5hbWUgKyAocGFzc3dvcmQgPyAnOicgKyBwYXNzd29yZCA6ICcnKSArICdAJztcbiAgICAgIH1cbiAgICAgIG91dHB1dCArPSBzZXJpYWxpemVIb3N0KGhvc3QpO1xuICAgICAgaWYgKHBvcnQgIT09IG51bGwpIG91dHB1dCArPSAnOicgKyBwb3J0O1xuICAgIH0gZWxzZSBpZiAoc2NoZW1lID09ICdmaWxlJykgb3V0cHV0ICs9ICcvLyc7XG4gICAgb3V0cHV0ICs9IHVybC5jYW5ub3RCZUFCYXNlVVJMID8gcGF0aFswXSA6IHBhdGgubGVuZ3RoID8gJy8nICsgam9pbihwYXRoLCAnLycpIDogJyc7XG4gICAgaWYgKHF1ZXJ5ICE9PSBudWxsKSBvdXRwdXQgKz0gJz8nICsgcXVlcnk7XG4gICAgaWYgKGZyYWdtZW50ICE9PSBudWxsKSBvdXRwdXQgKz0gJyMnICsgZnJhZ21lbnQ7XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhyZWZcbiAgc2V0SHJlZjogZnVuY3Rpb24gKGhyZWYpIHtcbiAgICB2YXIgZmFpbHVyZSA9IHRoaXMucGFyc2UoaHJlZik7XG4gICAgaWYgKGZhaWx1cmUpIHRocm93IFR5cGVFcnJvcihmYWlsdXJlKTtcbiAgICB0aGlzLnNlYXJjaFBhcmFtcy51cGRhdGUoKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLW9yaWdpblxuICBnZXRPcmlnaW46IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2NoZW1lID0gdGhpcy5zY2hlbWU7XG4gICAgdmFyIHBvcnQgPSB0aGlzLnBvcnQ7XG4gICAgaWYgKHNjaGVtZSA9PSAnYmxvYicpIHRyeSB7XG4gICAgICByZXR1cm4gbmV3IFVSTENvbnN0cnVjdG9yKHNjaGVtZS5wYXRoWzBdKS5vcmlnaW47XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiAnbnVsbCc7XG4gICAgfVxuICAgIGlmIChzY2hlbWUgPT0gJ2ZpbGUnIHx8ICF0aGlzLmlzU3BlY2lhbCgpKSByZXR1cm4gJ251bGwnO1xuICAgIHJldHVybiBzY2hlbWUgKyAnOi8vJyArIHNlcmlhbGl6ZUhvc3QodGhpcy5ob3N0KSArIChwb3J0ICE9PSBudWxsID8gJzonICsgcG9ydCA6ICcnKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXByb3RvY29sXG4gIGdldFByb3RvY29sOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2NoZW1lICsgJzonO1xuICB9LFxuICBzZXRQcm90b2NvbDogZnVuY3Rpb24gKHByb3RvY29sKSB7XG4gICAgdGhpcy5wYXJzZSgkdG9TdHJpbmcocHJvdG9jb2wpICsgJzonLCBTQ0hFTUVfU1RBUlQpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtdXNlcm5hbWVcbiAgZ2V0VXNlcm5hbWU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy51c2VybmFtZTtcbiAgfSxcbiAgc2V0VXNlcm5hbWU6IGZ1bmN0aW9uICh1c2VybmFtZSkge1xuICAgIHZhciBjb2RlUG9pbnRzID0gYXJyYXlGcm9tKCR0b1N0cmluZyh1c2VybmFtZSkpO1xuICAgIGlmICh0aGlzLmNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydCgpKSByZXR1cm47XG4gICAgdGhpcy51c2VybmFtZSA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZVBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy51c2VybmFtZSArPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludHNbaV0sIHVzZXJpbmZvUGVyY2VudEVuY29kZVNldCk7XG4gICAgfVxuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcGFzc3dvcmRcbiAgZ2V0UGFzc3dvcmQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXNzd29yZDtcbiAgfSxcbiAgc2V0UGFzc3dvcmQ6IGZ1bmN0aW9uIChwYXNzd29yZCkge1xuICAgIHZhciBjb2RlUG9pbnRzID0gYXJyYXlGcm9tKCR0b1N0cmluZyhwYXNzd29yZCkpO1xuICAgIGlmICh0aGlzLmNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydCgpKSByZXR1cm47XG4gICAgdGhpcy5wYXNzd29yZCA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZVBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5wYXNzd29yZCArPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludHNbaV0sIHVzZXJpbmZvUGVyY2VudEVuY29kZVNldCk7XG4gICAgfVxuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaG9zdFxuICBnZXRIb3N0OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhvc3QgPSB0aGlzLmhvc3Q7XG4gICAgdmFyIHBvcnQgPSB0aGlzLnBvcnQ7XG4gICAgcmV0dXJuIGhvc3QgPT09IG51bGwgPyAnJ1xuICAgICAgOiBwb3J0ID09PSBudWxsID8gc2VyaWFsaXplSG9zdChob3N0KVxuICAgICAgOiBzZXJpYWxpemVIb3N0KGhvc3QpICsgJzonICsgcG9ydDtcbiAgfSxcbiAgc2V0SG9zdDogZnVuY3Rpb24gKGhvc3QpIHtcbiAgICBpZiAodGhpcy5jYW5ub3RCZUFCYXNlVVJMKSByZXR1cm47XG4gICAgdGhpcy5wYXJzZShob3N0LCBIT1NUKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhvc3RuYW1lXG4gIGdldEhvc3RuYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhvc3QgPSB0aGlzLmhvc3Q7XG4gICAgcmV0dXJuIGhvc3QgPT09IG51bGwgPyAnJyA6IHNlcmlhbGl6ZUhvc3QoaG9zdCk7XG4gIH0sXG4gIHNldEhvc3RuYW1lOiBmdW5jdGlvbiAoaG9zdG5hbWUpIHtcbiAgICBpZiAodGhpcy5jYW5ub3RCZUFCYXNlVVJMKSByZXR1cm47XG4gICAgdGhpcy5wYXJzZShob3N0bmFtZSwgSE9TVE5BTUUpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcG9ydFxuICBnZXRQb3J0OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBvcnQgPSB0aGlzLnBvcnQ7XG4gICAgcmV0dXJuIHBvcnQgPT09IG51bGwgPyAnJyA6ICR0b1N0cmluZyhwb3J0KTtcbiAgfSxcbiAgc2V0UG9ydDogZnVuY3Rpb24gKHBvcnQpIHtcbiAgICBpZiAodGhpcy5jYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQoKSkgcmV0dXJuO1xuICAgIHBvcnQgPSAkdG9TdHJpbmcocG9ydCk7XG4gICAgaWYgKHBvcnQgPT0gJycpIHRoaXMucG9ydCA9IG51bGw7XG4gICAgZWxzZSB0aGlzLnBhcnNlKHBvcnQsIFBPUlQpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcGF0aG5hbWVcbiAgZ2V0UGF0aG5hbWU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGF0aCA9IHRoaXMucGF0aDtcbiAgICByZXR1cm4gdGhpcy5jYW5ub3RCZUFCYXNlVVJMID8gcGF0aFswXSA6IHBhdGgubGVuZ3RoID8gJy8nICsgam9pbihwYXRoLCAnLycpIDogJyc7XG4gIH0sXG4gIHNldFBhdGhuYW1lOiBmdW5jdGlvbiAocGF0aG5hbWUpIHtcbiAgICBpZiAodGhpcy5jYW5ub3RCZUFCYXNlVVJMKSByZXR1cm47XG4gICAgdGhpcy5wYXRoID0gW107XG4gICAgdGhpcy5wYXJzZShwYXRobmFtZSwgUEFUSF9TVEFSVCk7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1zZWFyY2hcbiAgZ2V0U2VhcmNoOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyeTtcbiAgICByZXR1cm4gcXVlcnkgPyAnPycgKyBxdWVyeSA6ICcnO1xuICB9LFxuICBzZXRTZWFyY2g6IGZ1bmN0aW9uIChzZWFyY2gpIHtcbiAgICBzZWFyY2ggPSAkdG9TdHJpbmcoc2VhcmNoKTtcbiAgICBpZiAoc2VhcmNoID09ICcnKSB7XG4gICAgICB0aGlzLnF1ZXJ5ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCc/JyA9PSBjaGFyQXQoc2VhcmNoLCAwKSkgc2VhcmNoID0gc3RyaW5nU2xpY2Uoc2VhcmNoLCAxKTtcbiAgICAgIHRoaXMucXVlcnkgPSAnJztcbiAgICAgIHRoaXMucGFyc2Uoc2VhcmNoLCBRVUVSWSk7XG4gICAgfVxuICAgIHRoaXMuc2VhcmNoUGFyYW1zLnVwZGF0ZSgpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtc2VhcmNocGFyYW1zXG4gIGdldFNlYXJjaFBhcmFtczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnNlYXJjaFBhcmFtcy5mYWNhZGU7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1oYXNoXG4gIGdldEhhc2g6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZnJhZ21lbnQgPSB0aGlzLmZyYWdtZW50O1xuICAgIHJldHVybiBmcmFnbWVudCA/ICcjJyArIGZyYWdtZW50IDogJyc7XG4gIH0sXG4gIHNldEhhc2g6IGZ1bmN0aW9uIChoYXNoKSB7XG4gICAgaGFzaCA9ICR0b1N0cmluZyhoYXNoKTtcbiAgICBpZiAoaGFzaCA9PSAnJykge1xuICAgICAgdGhpcy5mcmFnbWVudCA9IG51bGw7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICgnIycgPT0gY2hhckF0KGhhc2gsIDApKSBoYXNoID0gc3RyaW5nU2xpY2UoaGFzaCwgMSk7XG4gICAgdGhpcy5mcmFnbWVudCA9ICcnO1xuICAgIHRoaXMucGFyc2UoaGFzaCwgRlJBR01FTlQpO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnF1ZXJ5ID0gdGhpcy5zZWFyY2hQYXJhbXMuc2VyaWFsaXplKCkgfHwgbnVsbDtcbiAgfVxufTtcblxuLy8gYFVSTGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsLWNsYXNzXG52YXIgVVJMQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBVUkwodXJsIC8qICwgYmFzZSAqLykge1xuICB2YXIgdGhhdCA9IGFuSW5zdGFuY2UodGhpcywgVVJMUHJvdG90eXBlKTtcbiAgdmFyIGJhc2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgdmFyIHN0YXRlID0gc2V0SW50ZXJuYWxTdGF0ZSh0aGF0LCBuZXcgVVJMU3RhdGUodXJsLCBmYWxzZSwgYmFzZSkpO1xuICBpZiAoIURFU0NSSVBUT1JTKSB7XG4gICAgdGhhdC5ocmVmID0gc3RhdGUuc2VyaWFsaXplKCk7XG4gICAgdGhhdC5vcmlnaW4gPSBzdGF0ZS5nZXRPcmlnaW4oKTtcbiAgICB0aGF0LnByb3RvY29sID0gc3RhdGUuZ2V0UHJvdG9jb2woKTtcbiAgICB0aGF0LnVzZXJuYW1lID0gc3RhdGUuZ2V0VXNlcm5hbWUoKTtcbiAgICB0aGF0LnBhc3N3b3JkID0gc3RhdGUuZ2V0UGFzc3dvcmQoKTtcbiAgICB0aGF0Lmhvc3QgPSBzdGF0ZS5nZXRIb3N0KCk7XG4gICAgdGhhdC5ob3N0bmFtZSA9IHN0YXRlLmdldEhvc3RuYW1lKCk7XG4gICAgdGhhdC5wb3J0ID0gc3RhdGUuZ2V0UG9ydCgpO1xuICAgIHRoYXQucGF0aG5hbWUgPSBzdGF0ZS5nZXRQYXRobmFtZSgpO1xuICAgIHRoYXQuc2VhcmNoID0gc3RhdGUuZ2V0U2VhcmNoKCk7XG4gICAgdGhhdC5zZWFyY2hQYXJhbXMgPSBzdGF0ZS5nZXRTZWFyY2hQYXJhbXMoKTtcbiAgICB0aGF0Lmhhc2ggPSBzdGF0ZS5nZXRIYXNoKCk7XG4gIH1cbn07XG5cbnZhciBVUkxQcm90b3R5cGUgPSBVUkxDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbnZhciBhY2Nlc3NvckRlc2NyaXB0b3IgPSBmdW5jdGlvbiAoZ2V0dGVyLCBzZXR0ZXIpIHtcbiAgcmV0dXJuIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpW2dldHRlcl0oKTtcbiAgICB9LFxuICAgIHNldDogc2V0dGVyICYmIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcylbc2V0dGVyXSh2YWx1ZSk7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9O1xufTtcblxuaWYgKERFU0NSSVBUT1JTKSB7XG4gIGRlZmluZVByb3BlcnRpZXMoVVJMUHJvdG90eXBlLCB7XG4gICAgLy8gYFVSTC5wcm90b3R5cGUuaHJlZmAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaHJlZlxuICAgIGhyZWY6IGFjY2Vzc29yRGVzY3JpcHRvcignc2VyaWFsaXplJywgJ3NldEhyZWYnKSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5vcmlnaW5gIGdldHRlclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1vcmlnaW5cbiAgICBvcmlnaW46IGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0T3JpZ2luJyksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUucHJvdG9jb2xgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXByb3RvY29sXG4gICAgcHJvdG9jb2w6IGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0UHJvdG9jb2wnLCAnc2V0UHJvdG9jb2wnKSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS51c2VybmFtZWAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtdXNlcm5hbWVcbiAgICB1c2VybmFtZTogYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRVc2VybmFtZScsICdzZXRVc2VybmFtZScpLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnBhc3N3b3JkYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wYXNzd29yZFxuICAgIHBhc3N3b3JkOiBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldFBhc3N3b3JkJywgJ3NldFBhc3N3b3JkJyksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuaG9zdGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaG9zdFxuICAgIGhvc3Q6IGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0SG9zdCcsICdzZXRIb3N0JyksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuaG9zdG5hbWVgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhvc3RuYW1lXG4gICAgaG9zdG5hbWU6IGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0SG9zdG5hbWUnLCAnc2V0SG9zdG5hbWUnKSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5wb3J0YCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wb3J0XG4gICAgcG9ydDogYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRQb3J0JywgJ3NldFBvcnQnKSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5wYXRobmFtZWAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcGF0aG5hbWVcbiAgICBwYXRobmFtZTogYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRQYXRobmFtZScsICdzZXRQYXRobmFtZScpLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnNlYXJjaGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtc2VhcmNoXG4gICAgc2VhcmNoOiBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldFNlYXJjaCcsICdzZXRTZWFyY2gnKSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5zZWFyY2hQYXJhbXNgIGdldHRlclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1zZWFyY2hwYXJhbXNcbiAgICBzZWFyY2hQYXJhbXM6IGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0U2VhcmNoUGFyYW1zJyksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuaGFzaGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaGFzaFxuICAgIGhhc2g6IGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0SGFzaCcsICdzZXRIYXNoJylcbiAgfSk7XG59XG5cbi8vIGBVUkwucHJvdG90eXBlLnRvSlNPTmAgbWV0aG9kXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtdG9qc29uXG5yZWRlZmluZShVUkxQcm90b3R5cGUsICd0b0pTT04nLCBmdW5jdGlvbiB0b0pTT04oKSB7XG4gIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnNlcmlhbGl6ZSgpO1xufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG4vLyBgVVJMLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI1VSTC1zdHJpbmdpZmljYXRpb24tYmVoYXZpb3JcbnJlZGVmaW5lKFVSTFByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnNlcmlhbGl6ZSgpO1xufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG5pZiAoTmF0aXZlVVJMKSB7XG4gIHZhciBuYXRpdmVDcmVhdGVPYmplY3RVUkwgPSBOYXRpdmVVUkwuY3JlYXRlT2JqZWN0VVJMO1xuICB2YXIgbmF0aXZlUmV2b2tlT2JqZWN0VVJMID0gTmF0aXZlVVJMLnJldm9rZU9iamVjdFVSTDtcbiAgLy8gYFVSTC5jcmVhdGVPYmplY3RVUkxgIG1ldGhvZFxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVVJML2NyZWF0ZU9iamVjdFVSTFxuICBpZiAobmF0aXZlQ3JlYXRlT2JqZWN0VVJMKSByZWRlZmluZShVUkxDb25zdHJ1Y3RvciwgJ2NyZWF0ZU9iamVjdFVSTCcsIGJpbmQobmF0aXZlQ3JlYXRlT2JqZWN0VVJMLCBOYXRpdmVVUkwpKTtcbiAgLy8gYFVSTC5yZXZva2VPYmplY3RVUkxgIG1ldGhvZFxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVVJML3Jldm9rZU9iamVjdFVSTFxuICBpZiAobmF0aXZlUmV2b2tlT2JqZWN0VVJMKSByZWRlZmluZShVUkxDb25zdHJ1Y3RvciwgJ3Jldm9rZU9iamVjdFVSTCcsIGJpbmQobmF0aXZlUmV2b2tlT2JqZWN0VVJMLCBOYXRpdmVVUkwpKTtcbn1cblxuc2V0VG9TdHJpbmdUYWcoVVJMQ29uc3RydWN0b3IsICdVUkwnKTtcblxuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiAhVVNFX05BVElWRV9VUkwsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIFVSTDogVVJMQ29uc3RydWN0b3Jcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG5cbi8vIGBVUkwucHJvdG90eXBlLnRvSlNPTmAgbWV0aG9kXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtdG9qc29uXG4kKHsgdGFyZ2V0OiAnVVJMJywgcHJvdG86IHRydWUsIGVudW1lcmFibGU6IHRydWUgfSwge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4gY2FsbChVUkwucHJvdG90eXBlLnRvU3RyaW5nLCB0aGlzKTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuZGVzY3JpcHRpb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5oYXMtaW5zdGFuY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLmlzLWNvbmNhdC1zcHJlYWRhYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wubWF0Y2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLm1hdGNoLWFsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wucmVwbGFjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuc2VhcmNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5zcGVjaWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5zcGxpdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wudG8tcHJpbWl0aXZlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC50by1zdHJpbmctdGFnJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC51bnNjb3BhYmxlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5lcnJvci5jYXVzZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5lcnJvci50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYWdncmVnYXRlLWVycm9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFnZ3JlZ2F0ZS1lcnJvci5jYXVzZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5jb25jYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuY29weS13aXRoaW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZXZlcnknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZmlsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5maWx0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZmluZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5maW5kLWluZGV4Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmZsYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZmxhdC1tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pcy1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lm9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkucmV2ZXJzZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuc3BlY2llcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkudW5zY29wYWJsZXMuZmxhdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS51bnNjb3BhYmxlcy5mbGF0LW1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXktYnVmZmVyLmlzLXZpZXcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXktYnVmZmVyLnNsaWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmRhdGEtdmlldycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5kYXRlLmdldC15ZWFyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmRhdGUubm93Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmRhdGUuc2V0LXllYXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZGF0ZS50by1nbXQtc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmRhdGUudG8taXNvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5kYXRlLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZGF0ZS50by1wcmltaXRpdmUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZGF0ZS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZXNjYXBlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmZ1bmN0aW9uLmJpbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZ2xvYmFsLXRoaXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuanNvbi5zdHJpbmdpZnknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuanNvbi50by1zdHJpbmctdGFnJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmFjb3NoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguYXNpbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5hdGFuaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmNicnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5jbHozMicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmNvc2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5leHBtMScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmZyb3VuZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmh5cG90Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguaW11bCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmxvZzEwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGgubG9nMXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5sb2cyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguc2lnbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLnNpbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC50YW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGgudG8tc3RyaW5nLXRhZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLnRydW5jJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIuZXBzaWxvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIuaXMtZmluaXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5pcy1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5pcy1uYW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLmlzLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIubWF4LXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIubWluLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIudG8tZXhwb25lbnRpYWwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLnRvLWZpeGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci50by1wcmVjaXNpb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuY3JlYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydGllcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtc2V0dGVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5lbnRyaWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5mcmVlemUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmZyb20tZW50cmllcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5oYXMtb3duJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5pcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuaXMtZnJvemVuJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5pcy1zZWFsZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmtleXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0Lmxvb2t1cC1nZXR0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0Lmxvb2t1cC1zZXR0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3Quc2VhbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC52YWx1ZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucHJvbWlzZS5hbGwtc2V0dGxlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wcm9taXNlLmFueScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wcm9taXNlLmZpbmFsbHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5hcHBseScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmNvbnN0cnVjdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmdldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5oYXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3Qub3duLWtleXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3QudG8tc3RyaW5nLXRhZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmRvdC1hbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmZsYWdzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC5zdGlja3knKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLnRlc3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmF0LWFsdGVybmF0aXZlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmZyb20tY29kZS1wb2ludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5tYXRjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2gtYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5wYWQtZW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5wYWQtc3RhcnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnJhdycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcucmVwZWF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlLWFsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuc2VhcmNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuc3RhcnRzLXdpdGgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnN1YnN0cicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcudHJpbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcudHJpbS1lbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0tc3RhcnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmFuY2hvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuYmlnJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5ibGluaycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuYm9sZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuZml4ZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmZvbnRjb2xvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuZm9udHNpemUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLml0YWxpY3MnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmxpbmsnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnNtYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5zdHJpa2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnN1YicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuc3VwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZsb2F0MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmxvYXQ2NC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQ4LWNsYW1wZWQtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbmQtaW5kZXgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lm9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmV2ZXJzZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc2xpY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc29tZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zb3J0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnN1YmFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnRvLWxvY2FsZS1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnVuZXNjYXBlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLndlYWstbWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLndlYWstc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLWV4Y2VwdGlvbi5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLWV4Y2VwdGlvbi5zdGFjaycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLWV4Y2VwdGlvbi50by1zdHJpbmctdGFnJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnF1ZXVlLW1pY3JvdGFzaycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuc3RydWN0dXJlZC1jbG9uZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudGltZXJzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi51cmwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnVybC50by1qc29uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5NZW1vXSA9IE1FTU9fU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgLy8gUmVhY3QgdjE2LjExIGFuZCBiZWxvd1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH0gLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuXG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCJ2YXIgaXNhcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2Vcbm1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvblxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cFxuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJ1xuICB2YXIgcmVzXG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXVxuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdXG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleFxuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpXG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aFxuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF1cbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdXG4gICAgdmFyIG5hbWUgPSByZXNbM11cbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XVxuICAgIHZhciBncm91cCA9IHJlc1s1XVxuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XVxuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XVxuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aClcbiAgICAgIHBhdGggPSAnJ1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeFxuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXJcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXBcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSlcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleClcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aClcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucyksIG9wdGlvbnMpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zLCBvcHRpb25zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKVxuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcsIGZsYWdzKG9wdGlvbnMpKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKVxuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3RcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICB2YXIgcm91dGUgPSAnJ1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeClcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknXG5cbiAgICAgIGtleXMucHVzaCh0b2tlbilcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKidcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJ1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlXG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpXG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyXG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPydcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCdcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknXG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJpZ2ludDogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMlxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24geShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IoeSgyMjcpKTt2YXIgYmE9bmV3IFNldCxjYT17fTtmdW5jdGlvbiBkYShhLGIpe2VhKGEsYik7ZWEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGVhKGEsYil7Y2FbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWJhLmFkZChiW2FdKX1cbnZhciBmYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksaGE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGlhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG5qYT17fSxrYT17fTtmdW5jdGlvbiBsYShhKXtpZihpYS5jYWxsKGthLGEpKXJldHVybiEwO2lmKGlhLmNhbGwoamEsYSkpcmV0dXJuITE7aWYoaGEudGVzdChhKSlyZXR1cm4ga2FbYV09ITA7amFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gbWEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBuYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxtYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEIoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEIoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgb2E9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBwYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxcbnBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbkQueGxpbmtIcmVmPW5ldyBCKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHFhKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KG5hKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9sYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIHJhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHNhPTYwMTAzLHRhPTYwMTA2LHVhPTYwMTA3LHdhPTYwMTA4LHhhPTYwMTE0LHlhPTYwMTA5LHphPTYwMTEwLEFhPTYwMTEyLEJhPTYwMTEzLENhPTYwMTIwLERhPTYwMTE1LEVhPTYwMTE2LEZhPTYwMTIxLEdhPTYwMTI4LEhhPTYwMTI5LElhPTYwMTMwLEphPTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIEU9U3ltYm9sLmZvcjtzYT1FKFwicmVhY3QuZWxlbWVudFwiKTt0YT1FKFwicmVhY3QucG9ydGFsXCIpO3VhPUUoXCJyZWFjdC5mcmFnbWVudFwiKTt3YT1FKFwicmVhY3Quc3RyaWN0X21vZGVcIik7eGE9RShcInJlYWN0LnByb2ZpbGVyXCIpO3lhPUUoXCJyZWFjdC5wcm92aWRlclwiKTt6YT1FKFwicmVhY3QuY29udGV4dFwiKTtBYT1FKFwicmVhY3QuZm9yd2FyZF9yZWZcIik7QmE9RShcInJlYWN0LnN1c3BlbnNlXCIpO0NhPUUoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO0RhPUUoXCJyZWFjdC5tZW1vXCIpO0VhPUUoXCJyZWFjdC5sYXp5XCIpO0ZhPUUoXCJyZWFjdC5ibG9ja1wiKTtFKFwicmVhY3Quc2NvcGVcIik7R2E9RShcInJlYWN0Lm9wYXF1ZS5pZFwiKTtIYT1FKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtJYT1FKFwicmVhY3Qub2Zmc2NyZWVuXCIpO0phPUUoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpfVxudmFyIEthPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBMYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9S2EmJmFbS2FdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIE1hO2Z1bmN0aW9uIE5hKGEpe2lmKHZvaWQgMD09PU1hKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO01hPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitNYSthfXZhciBPYT0hMTtcbmZ1bmN0aW9uIFBhKGEsYil7aWYoIWF8fE9hKXJldHVyblwiXCI7T2E9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGspe3ZhciBkPWt9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChrKXtkPWt9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChrKXtkPWt9YSgpfX1jYXRjaChrKXtpZihrJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGsuc3RhY2spe2Zvcih2YXIgZT1rLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pcmV0dXJuXCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTt3aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7T2E9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9OYShhKTpcIlwifVxuZnVuY3Rpb24gUWEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE5hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTmEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE5hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTmEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPVBhKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPVBhKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAyMjpyZXR1cm4gYT1QYShhLnR5cGUuX3JlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9UGEoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBSYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHVhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSB4YTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB3YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEJhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIENhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHphOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIHlhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIEFhOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO1xucmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBEYTpyZXR1cm4gUmEoYS50eXBlKTtjYXNlIEZhOnJldHVybiBSYShhLl9yZW5kZXIpO2Nhc2UgRWE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFJhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiAkYShhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnFhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBhYihhLGIpeyRhKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/YmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmYmIoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gYmIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gZGIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZWIoYSxiKXthPW0oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1kYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih5KDkxKSk7cmV0dXJuIG0oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IoeSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHkoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBrYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBsYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIG1iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9sYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBuYixvYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1rYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtuYj1uYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtuYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1uYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBwYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHFiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHJiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhxYikuZm9yRWFjaChmdW5jdGlvbihhKXtyYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3FiW2JdPXFiW2FdfSl9KTtmdW5jdGlvbiBzYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cWIuaGFzT3duUHJvcGVydHkoYSkmJnFiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHRiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXNiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHViPW0oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB2YihhLGIpe2lmKGIpe2lmKHViW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IoeSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IoeSg2MikpO319XG5mdW5jdGlvbiB3YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcih5KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYihhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEliKCl7fXZhciBKYj1HYixLYj0hMSxMYj0hMTtmdW5jdGlvbiBNYigpe2lmKG51bGwhPT16Ynx8bnVsbCE9PUFiKUliKCksRmIoKX1cbmZ1bmN0aW9uIE5iKGEsYixjKXtpZihMYilyZXR1cm4gYShiLGMpO0xiPSEwO3RyeXtyZXR1cm4gSmIoYSxiLGMpfWZpbmFsbHl7TGI9ITEsTWIoKX19XG5mdW5jdGlvbiBPYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHkoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgUGI9ITE7aWYoZmEpdHJ5e3ZhciBRYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoUWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe1BiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYil9Y2F0Y2goYSl7UGI9ITF9ZnVuY3Rpb24gUmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG4pe3RoaXMub25FcnJvcihuKX19dmFyIFNiPSExLFRiPW51bGwsVWI9ITEsVmI9bnVsbCxXYj17b25FcnJvcjpmdW5jdGlvbihhKXtTYj0hMDtUYj1hfX07ZnVuY3Rpb24gWGIoYSxiLGMsZCxlLGYsZyxoLGspe1NiPSExO1RiPW51bGw7UmIuYXBwbHkoV2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFliKGEsYixjLGQsZSxmLGcsaCxrKXtYYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoU2Ipe2lmKFNiKXt2YXIgbD1UYjtTYj0hMTtUYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IoeSgxOTgpKTtVYnx8KFViPSEwLFZiPWwpfX1mdW5jdGlvbiBaYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gYWMoYSl7aWYoWmIoYSkhPT1hKXRocm93IEVycm9yKHkoMTg4KSk7fVxuZnVuY3Rpb24gYmMoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9WmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gYWMoZSksYTtpZihmPT09ZClyZXR1cm4gYWMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih5KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHkoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IoeSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBjYyhhKXthPWJjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gZGMoYSxiKXtmb3IodmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWI7KXtpZihiPT09YXx8Yj09PWMpcmV0dXJuITA7Yj1iLnJldHVybn1yZXR1cm4hMX12YXIgZWMsZmMsZ2MsaGMsaWM9ITEsamM9W10sa2M9bnVsbCxsYz1udWxsLG1jPW51bGwsbmM9bmV3IE1hcCxvYz1uZXcgTWFwLHBjPVtdLHFjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIHJjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLGRvbUV2ZW50TmFtZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wxNixuYXRpdmVFdmVudDplLHRhcmdldENvbnRhaW5lcnM6W2RdfX1mdW5jdGlvbiBzYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmtjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpsYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjptYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6bmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6b2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiB0YyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXJjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZmYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB1YyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBrYz10YyhrYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gbGM9dGMobGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIG1jPXRjKG1jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7bmMuc2V0KGYsdGMobmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLG9jLnNldChmLHRjKG9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIHZjKGEpe3ZhciBiPXdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9WmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9JGIoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7aGMoYS5sYW5lUHJpb3JpdHksZnVuY3Rpb24oKXtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7Z2MoYyl9KX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiB4YyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJmZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIHpjKGEsYixjKXt4YyhhKSYmYy5kZWxldGUoYil9XG5mdW5jdGlvbiBBYygpe2ZvcihpYz0hMTswPGpjLmxlbmd0aDspe3ZhciBhPWpjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1DYihhLmJsb2NrZWRPbik7bnVsbCE9PWEmJmVjKGEpO2JyZWFrfWZvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXthLmJsb2NrZWRPbj1jO2JyZWFrfWIuc2hpZnQoKX1udWxsPT09YS5ibG9ja2VkT24mJmpjLnNoaWZ0KCl9bnVsbCE9PWtjJiZ4YyhrYykmJihrYz1udWxsKTtudWxsIT09bGMmJnhjKGxjKSYmKGxjPW51bGwpO251bGwhPT1tYyYmeGMobWMpJiYobWM9bnVsbCk7bmMuZm9yRWFjaCh6Yyk7b2MuZm9yRWFjaCh6Yyl9XG5mdW5jdGlvbiBCYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsaWN8fChpYz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxBYykpKX1cbmZ1bmN0aW9uIENjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIEJjKGIsYSl9aWYoMDxqYy5sZW5ndGgpe0JjKGpjWzBdLGEpO2Zvcih2YXIgYz0xO2M8amMubGVuZ3RoO2MrKyl7dmFyIGQ9amNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1rYyYmQmMoa2MsYSk7bnVsbCE9PWxjJiZCYyhsYyxhKTtudWxsIT09bWMmJkJjKG1jLGEpO25jLmZvckVhY2goYik7b2MuZm9yRWFjaChiKTtmb3IoYz0wO2M8cGMubGVuZ3RoO2MrKylkPXBjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxwYy5sZW5ndGgmJihjPXBjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KXZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmcGMuc2hpZnQoKX1cbmZ1bmN0aW9uIERjKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIEVjPXthbmltYXRpb25lbmQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpEYyhcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LEZjPXt9LEdjPXt9O1xuZmEmJihHYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBFYy5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBFYy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIEhjKGEpe2lmKEZjW2FdKXJldHVybiBGY1thXTtpZighRWNbYV0pcmV0dXJuIGE7dmFyIGI9RWNbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gR2MpcmV0dXJuIEZjW2FdPWJbY107cmV0dXJuIGF9XG52YXIgSWM9SGMoXCJhbmltYXRpb25lbmRcIiksSmM9SGMoXCJhbmltYXRpb25pdGVyYXRpb25cIiksS2M9SGMoXCJhbmltYXRpb25zdGFydFwiKSxMYz1IYyhcInRyYW5zaXRpb25lbmRcIiksTWM9bmV3IE1hcCxOYz1uZXcgTWFwLE9jPVtcImFib3J0XCIsXCJhYm9ydFwiLEljLFwiYW5pbWF0aW9uRW5kXCIsSmMsXCJhbmltYXRpb25JdGVyYXRpb25cIixLYyxcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcblwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLExjLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBQYyhhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXTtlPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO05jLnNldChkLGIpO01jLnNldChkLGUpO2RhKGUsW2RdKX19dmFyIFFjPXIudW5zdGFibGVfbm93O1FjKCk7dmFyIEY9ODtcbmZ1bmN0aW9uIFJjKGEpe2lmKDAhPT0oMSZhKSlyZXR1cm4gRj0xNSwxO2lmKDAhPT0oMiZhKSlyZXR1cm4gRj0xNCwyO2lmKDAhPT0oNCZhKSlyZXR1cm4gRj0xMyw0O3ZhciBiPTI0JmE7aWYoMCE9PWIpcmV0dXJuIEY9MTIsYjtpZigwIT09KGEmMzIpKXJldHVybiBGPTExLDMyO2I9MTkyJmE7aWYoMCE9PWIpcmV0dXJuIEY9MTAsYjtpZigwIT09KGEmMjU2KSlyZXR1cm4gRj05LDI1NjtiPTM1ODQmYTtpZigwIT09YilyZXR1cm4gRj04LGI7aWYoMCE9PShhJjQwOTYpKXJldHVybiBGPTcsNDA5NjtiPTQxODYxMTImYTtpZigwIT09YilyZXR1cm4gRj02LGI7Yj02MjkxNDU2MCZhO2lmKDAhPT1iKXJldHVybiBGPTUsYjtpZihhJjY3MTA4ODY0KXJldHVybiBGPTQsNjcxMDg4NjQ7aWYoMCE9PShhJjEzNDIxNzcyOCkpcmV0dXJuIEY9MywxMzQyMTc3Mjg7Yj04MDUzMDYzNjgmYTtpZigwIT09YilyZXR1cm4gRj0yLGI7aWYoMCE9PSgxMDczNzQxODI0JmEpKXJldHVybiBGPTEsMTA3Mzc0MTgyNDtcbkY9ODtyZXR1cm4gYX1mdW5jdGlvbiBTYyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gMTU7Y2FzZSA5ODpyZXR1cm4gMTA7Y2FzZSA5NzpjYXNlIDk2OnJldHVybiA4O2Nhc2UgOTU6cmV0dXJuIDI7ZGVmYXVsdDpyZXR1cm4gMH19ZnVuY3Rpb24gVGMoYSl7c3dpdGNoKGEpe2Nhc2UgMTU6Y2FzZSAxNDpyZXR1cm4gOTk7Y2FzZSAxMzpjYXNlIDEyOmNhc2UgMTE6Y2FzZSAxMDpyZXR1cm4gOTg7Y2FzZSA5OmNhc2UgODpjYXNlIDc6Y2FzZSA2OmNhc2UgNDpjYXNlIDU6cmV0dXJuIDk3O2Nhc2UgMzpjYXNlIDI6Y2FzZSAxOnJldHVybiA5NTtjYXNlIDA6cmV0dXJuIDkwO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzNTgsYSkpO319XG5mdW5jdGlvbiBVYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiBGPTA7dmFyIGQ9MCxlPTAsZj1hLmV4cGlyZWRMYW5lcyxnPWEuc3VzcGVuZGVkTGFuZXMsaD1hLnBpbmdlZExhbmVzO2lmKDAhPT1mKWQ9ZixlPUY9MTU7ZWxzZSBpZihmPWMmMTM0MjE3NzI3LDAhPT1mKXt2YXIgaz1mJn5nOzAhPT1rPyhkPVJjKGspLGU9Rik6KGgmPWYsMCE9PWgmJihkPVJjKGgpLGU9RikpfWVsc2UgZj1jJn5nLDAhPT1mPyhkPVJjKGYpLGU9Rik6MCE9PWgmJihkPVJjKGgpLGU9Rik7aWYoMD09PWQpcmV0dXJuIDA7ZD0zMS1WYyhkKTtkPWMmKCgwPmQ/MDoxPDxkKTw8MSktMTtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZnKSl7UmMoYik7aWYoZTw9RilyZXR1cm4gYjtGPWV9Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1WYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIFdjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiBYYyhhLGIpe3N3aXRjaChhKXtjYXNlIDE1OnJldHVybiAxO2Nhc2UgMTQ6cmV0dXJuIDI7Y2FzZSAxMjpyZXR1cm4gYT1ZYygyNCZ+YiksMD09PWE/WGMoMTAsYik6YTtjYXNlIDEwOnJldHVybiBhPVljKDE5MiZ+YiksMD09PWE/WGMoOCxiKTphO2Nhc2UgODpyZXR1cm4gYT1ZYygzNTg0Jn5iKSwwPT09YSYmKGE9WWMoNDE4NjExMiZ+YiksMD09PWEmJihhPTUxMikpLGE7Y2FzZSAyOnJldHVybiBiPVljKDgwNTMwNjM2OCZ+YiksMD09PWImJihiPTI2ODQzNTQ1NiksYn10aHJvdyBFcnJvcih5KDM1OCxhKSk7fWZ1bmN0aW9uIFljKGEpe3JldHVybiBhJi1hfWZ1bmN0aW9uIFpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gJGMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iO3ZhciBkPWItMTthLnN1c3BlbmRlZExhbmVzJj1kO2EucGluZ2VkTGFuZXMmPWQ7YT1hLmV2ZW50VGltZXM7Yj0zMS1WYyhiKTthW2JdPWN9dmFyIFZjPU1hdGguY2x6MzI/TWF0aC5jbHozMjphZCxiZD1NYXRoLmxvZyxjZD1NYXRoLkxOMjtmdW5jdGlvbiBhZChhKXtyZXR1cm4gMD09PWE/MzI6MzEtKGJkKGEpL2NkfDApfDB9dmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7S2J8fEliKCk7dmFyIGU9aGQsZj1LYjtLYj0hMDt0cnl7SGIoZSxhLGIsYyxkKX1maW5hbGx5eyhLYj1mKXx8TWIoKX19ZnVuY3Rpb24gaWQoYSxiLGMsZCl7ZWQoZGQsaGQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQpe2lmKGZkKXt2YXIgZTtpZigoZT0wPT09KGImNCkpJiYwPGpjLmxlbmd0aCYmLTE8cWMuaW5kZXhPZihhKSlhPXJjKG51bGwsYSxiLGMsZCksamMucHVzaChhKTtlbHNle3ZhciBmPXljKGEsYixjLGQpO2lmKG51bGw9PT1mKWUmJnNjKGEsZCk7ZWxzZXtpZihlKXtpZigtMTxxYy5pbmRleE9mKGEpKXthPXJjKGYsYSxiLGMsZCk7amMucHVzaChhKTtyZXR1cm59aWYodWMoZixhLGIsYyxkKSlyZXR1cm47c2MoYSxkKX1qZChhLGIsZCxudWxsLGMpfX19fVxuZnVuY3Rpb24geWMoYSxiLGMsZCl7dmFyIGU9eGIoZCk7ZT13YyhlKTtpZihudWxsIT09ZSl7dmFyIGY9WmIoZSk7aWYobnVsbD09PWYpZT1udWxsO2Vsc2V7dmFyIGc9Zi50YWc7aWYoMTM9PT1nKXtlPSRiKGYpO2lmKG51bGwhPT1lKXJldHVybiBlO2U9bnVsbH1lbHNlIGlmKDM9PT1nKXtpZihmLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09Zi50YWc/Zi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2U9bnVsbH1lbHNlIGYhPT1lJiYoZT1udWxsKX19amQoYSxiLGQsZSxjKTtyZXR1cm4gbnVsbH12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7XG5mdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31tKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1tKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9bSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9bSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9bSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPW0oe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1tKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPW0oe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1tKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPW0oe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPW0oe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1tKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1tKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1mYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtmYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9ZmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1mYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihmYSl7dmFyIHhlO2lmKGZhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7YT1yZTtpZihLYilhKGIpO2Vsc2V7S2I9ITA7dHJ5e0diKGEsYil9ZmluYWxseXtLYj0hMSxNYigpfX19fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2UsSWU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIEplKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFJZS5jYWxsKGIsY1tkXSl8fCFIZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIEtlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIExlKGEsYil7dmFyIGM9S2UoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9S2UoYyl9fWZ1bmN0aW9uIE1lKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TWUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTmUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gT2UoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBQZT1mYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmT2UoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSmUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuUGMoXCJjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1c2luIGZvY3VzIGZvY3Vzb3V0IGJsdXIgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSxcbjApO1BjKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO1BjKE9jLDIpO2Zvcih2YXIgVmU9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLFdlPTA7V2U8VmUubGVuZ3RoO1dlKyspTmMuc2V0KFZlW1dlXSwwKTtlYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO1xuZWEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtlYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2VhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZGEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtkYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmRhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgWGU9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLFllPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KFhlKSk7XG5mdW5jdGlvbiBaZShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztZYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9fX1pZihVYil0aHJvdyBhPVZiLFViPSExLFZiPW51bGwsYTt9XG5mdW5jdGlvbiBHKGEsYil7dmFyIGM9JGUoYiksZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KGFmKGIsYSwyLCExKSxjLmFkZChkKSl9dmFyIGJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gY2YoYSl7YVtiZl18fChhW2JmXT0hMCxiYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1llLmhhcyhiKXx8ZGYoYiwhMSxhLG51bGwpO2RmKGIsITAsYSxudWxsKX0pKX1cbmZ1bmN0aW9uIGRmKGEsYixjLGQpe3ZhciBlPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTowLGY9YztcInNlbGVjdGlvbmNoYW5nZVwiPT09YSYmOSE9PWMubm9kZVR5cGUmJihmPWMub3duZXJEb2N1bWVudCk7aWYobnVsbCE9PWQmJiFiJiZZZS5oYXMoYSkpe2lmKFwic2Nyb2xsXCIhPT1hKXJldHVybjtlfD0yO2Y9ZH12YXIgZz0kZShmKSxoPWErXCJfX1wiKyhiP1wiY2FwdHVyZVwiOlwiYnViYmxlXCIpO2cuaGFzKGgpfHwoYiYmKGV8PTQpLGFmKGYsYSxlLGIpLGcuYWRkKGgpKX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQpe3ZhciBlPU5jLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZT8yOmUpe2Nhc2UgMDplPWdkO2JyZWFrO2Nhc2UgMTplPWlkO2JyZWFrO2RlZmF1bHQ6ZT1oZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshUGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gamQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz13YyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59TmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPU1jLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCx4PWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOng9XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6eD1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgSWM6Y2FzZSBKYzpjYXNlIEtjOms9SGQ7YnJlYWs7Y2FzZSBMYzprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB3PTAhPT0oYiY0KSx6PSF3JiZcInNjcm9sbFwiPT09YSx1PXc/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dz1bXTtmb3IodmFyIHQ9ZCxxO251bGwhPT1cbnQ7KXtxPXQ7dmFyIHY9cS5zdGF0ZU5vZGU7NT09PXEudGFnJiZudWxsIT09diYmKHE9dixudWxsIT09dSYmKHY9T2IodCx1KSxudWxsIT12JiZ3LnB1c2goZWYodCx2LHEpKSkpO2lmKHopYnJlYWs7dD10LnJldHVybn0wPHcubGVuZ3RoJiYoaD1uZXcgayhoLHgsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6d30pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJjA9PT0oYiYxNikmJih4PWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJih3Yyh4KXx8eFtmZl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZih4PWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLHg9eD93Yyh4KTpudWxsLG51bGwhPT1cbngmJih6PVpiKHgpLHghPT16fHw1IT09eC50YWcmJjYhPT14LnRhZykpeD1udWxsfWVsc2Ugaz1udWxsLHg9ZDtpZihrIT09eCl7dz1CZDt2PVwib25Nb3VzZUxlYXZlXCI7dT1cIm9uTW91c2VFbnRlclwiO3Q9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl3PVRkLHY9XCJvblBvaW50ZXJMZWF2ZVwiLHU9XCJvblBvaW50ZXJFbnRlclwiLHQ9XCJwb2ludGVyXCI7ej1udWxsPT1rP2g6dWUoayk7cT1udWxsPT14P2g6dWUoeCk7aD1uZXcgdyh2LHQrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD16O2gucmVsYXRlZFRhcmdldD1xO3Y9bnVsbDt3YyhlKT09PWQmJih3PW5ldyB3KHUsdCtcImVudGVyXCIseCxjLGUpLHcudGFyZ2V0PXEsdy5yZWxhdGVkVGFyZ2V0PXosdj13KTt6PXY7aWYoayYmeCliOnt3PWs7dT14O3Q9MDtmb3IocT13O3E7cT1nZihxKSl0Kys7cT0wO2Zvcih2PXU7djt2PWdmKHYpKXErKztmb3IoOzA8dC1xOyl3PWdmKHcpLHQtLTtmb3IoOzA8cS10Oyl1PVxuZ2YodSkscS0tO2Zvcig7dC0tOyl7aWYodz09PXV8fG51bGwhPT11JiZ3PT09dS5hbHRlcm5hdGUpYnJlYWsgYjt3PWdmKHcpO3U9Z2YodSl9dz1udWxsfWVsc2Ugdz1udWxsO251bGwhPT1rJiZoZihnLGgsayx3LCExKTtudWxsIT09eCYmbnVsbCE9PXomJmhmKGcseix4LHcsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIEo9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSlKPUZlO2Vsc2V7Sj1EZTt2YXIgSz1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKEo9RWUpO2lmKEomJihKPUooYSxkKSkpe25lKGcsSixjLGUpO2JyZWFrIGF9SyYmSyhhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKEs9aC5fd3JhcHBlclN0YXRlKSYmXG5LLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmJiKGgsXCJudW1iZXJcIixoLnZhbHVlKX1LPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKEspfHxcInRydWVcIj09PUsuY29udGVudEVkaXRhYmxlKVFlPUssUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciBRO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBMPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpMPVwib25Db21wb3NpdGlvbkVuZFwiO2JyZWFrIGI7XG5jYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpMPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9TD12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoTD1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihMPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO0wmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PUw/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1MJiZpZSYmKFE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSxLPW9lKGQsTCksMDxLLmxlbmd0aCYmKEw9bmV3IExkKEwsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpMLGxpc3RlbmVyczpLfSksUT9MLmRhdGE9UTooUT1oZShjKSxudWxsIT09USYmKEwuZGF0YT1RKSkpKTtpZihRPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLDA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcblwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPVEpfXNlKGcsYil9KX1mdW5jdGlvbiBlZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9T2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQoZWYoYSxmLGUpKSxmPU9iKGEsYiksbnVsbCE9ZiYmZC5wdXNoKGVmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gZ2YoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIGhmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9T2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQoZWYoYyxrLGgpKSk6ZXx8KGs9T2IoYyxmKSxudWxsIT1rJiZnLnB1c2goZWYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX1mdW5jdGlvbiBqZigpe312YXIga2Y9bnVsbCxsZj1udWxsO2Z1bmN0aW9uIG1mKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIG5mKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgb2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAscGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIHFmKGEpezE9PT1hLm5vZGVUeXBlP2EudGV4dENvbnRlbnQ9XCJcIjo5PT09YS5ub2RlVHlwZSYmKGE9YS5ib2R5LG51bGwhPWEmJihhLnRleHRDb250ZW50PVwiXCIpKX1cbmZ1bmN0aW9uIHJmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfWZ1bmN0aW9uIHNmKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciB0Zj0wO2Z1bmN0aW9uIHVmKGEpe3JldHVybnskJHR5cGVvZjpHYSx0b1N0cmluZzphLHZhbHVlT2Y6YX19dmFyIHZmPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLHdmPVwiX19yZWFjdEZpYmVyJFwiK3ZmLHhmPVwiX19yZWFjdFByb3BzJFwiK3ZmLGZmPVwiX19yZWFjdENvbnRhaW5lciRcIit2Zix5Zj1cIl9fcmVhY3RFdmVudHMkXCIrdmY7XG5mdW5jdGlvbiB3YyhhKXt2YXIgYj1hW3dmXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tmZl18fGNbd2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9c2YoYSk7bnVsbCE9PWE7KXtpZihjPWFbd2ZdKXJldHVybiBjO2E9c2YoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVt3Zl18fGFbZmZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IoeSgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVt4Zl18fG51bGx9XG5mdW5jdGlvbiAkZShhKXt2YXIgYj1hW3lmXTt2b2lkIDA9PT1iJiYoYj1hW3lmXT1uZXcgU2V0KTtyZXR1cm4gYn12YXIgemY9W10sQWY9LTE7ZnVuY3Rpb24gQmYoYSl7cmV0dXJue2N1cnJlbnQ6YX19ZnVuY3Rpb24gSChhKXswPkFmfHwoYS5jdXJyZW50PXpmW0FmXSx6ZltBZl09bnVsbCxBZi0tKX1mdW5jdGlvbiBJKGEsYil7QWYrKzt6ZltBZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBDZj17fSxNPUJmKENmKSxOPUJmKCExKSxEZj1DZjtcbmZ1bmN0aW9uIEVmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQ2Y7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gRmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBHZigpe0goTik7SChNKX1mdW5jdGlvbiBIZihhLGIsYyl7aWYoTS5jdXJyZW50IT09Q2YpdGhyb3cgRXJyb3IoeSgxNjgpKTtJKE0sYik7SShOLGMpfVxuZnVuY3Rpb24gSWYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih5KDEwOCxSYShiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBtKHt9LGMsZCl9ZnVuY3Rpb24gSmYoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fENmO0RmPU0uY3VycmVudDtJKE0sYSk7SShOLE4uY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gS2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHkoMTY5KSk7Yz8oYT1JZihhLGIsRGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKE4pLEgoTSksSShNLGEpKTpIKE4pO0koTixjKX1cbnZhciBMZj1udWxsLE1mPW51bGwsTmY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksT2Y9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLFBmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssUWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxSZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxTZj1yLnVuc3RhYmxlX25vdyxUZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFVmPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksVmY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxXZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFhmPXIudW5zdGFibGVfTG93UHJpb3JpdHksWWY9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksWmY9e30sJGY9dm9pZCAwIT09UmY/UmY6ZnVuY3Rpb24oKXt9LGFnPW51bGwsYmc9bnVsbCxjZz0hMSxkZz1TZigpLE89MUU0PmRnP1NmOmZ1bmN0aW9uKCl7cmV0dXJuIFNmKCktZGd9O1xuZnVuY3Rpb24gZWcoKXtzd2l0Y2goVGYoKSl7Y2FzZSBVZjpyZXR1cm4gOTk7Y2FzZSBWZjpyZXR1cm4gOTg7Y2FzZSBXZjpyZXR1cm4gOTc7Y2FzZSBYZjpyZXR1cm4gOTY7Y2FzZSBZZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIFVmO2Nhc2UgOTg6cmV0dXJuIFZmO2Nhc2UgOTc6cmV0dXJuIFdmO2Nhc2UgOTY6cmV0dXJuIFhmO2Nhc2UgOTU6cmV0dXJuIFlmO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGdnKGEsYil7YT1mZyhhKTtyZXR1cm4gTmYoYSxiKX1mdW5jdGlvbiBoZyhhLGIsYyl7YT1mZyhhKTtyZXR1cm4gT2YoYSxiLGMpfWZ1bmN0aW9uIGlnKCl7aWYobnVsbCE9PWJnKXt2YXIgYT1iZztiZz1udWxsO1BmKGEpfWpnKCl9XG5mdW5jdGlvbiBqZygpe2lmKCFjZyYmbnVsbCE9PWFnKXtjZz0hMDt2YXIgYT0wO3RyeXt2YXIgYj1hZztnZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7YWc9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09YWcmJihhZz1hZy5zbGljZShhKzEpKSxPZihVZixpZyksYzt9ZmluYWxseXtjZz0hMX19fXZhciBrZz1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBsZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW0oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgbWc9QmYobnVsbCksbmc9bnVsbCxvZz1udWxsLHBnPW51bGw7ZnVuY3Rpb24gcWcoKXtwZz1vZz1uZz1udWxsfVxuZnVuY3Rpb24gcmcoYSl7dmFyIGI9bWcuY3VycmVudDtIKG1nKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHNnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKChhLmNoaWxkTGFuZXMmYik9PT1iKWlmKG51bGw9PT1jfHwoYy5jaGlsZExhbmVzJmIpPT09YilicmVhaztlbHNlIGMuY2hpbGRMYW5lc3w9YjtlbHNlIGEuY2hpbGRMYW5lc3w9YixudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9Yik7YT1hLnJldHVybn19ZnVuY3Rpb24gdGcoYSxiKXtuZz1hO3BnPW9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYodWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gdmcoYSxiKXtpZihwZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpcGc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PW9nKXtpZihudWxsPT09bmcpdGhyb3cgRXJyb3IoeSgzMDgpKTtvZz1iO25nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2Ugb2c9b2cubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHdnPSExO2Z1bmN0aW9uIHhnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHlnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHpnKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fWZ1bmN0aW9uIEFnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24gQmcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIENnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7d2c9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbj1hLmFsdGVybmF0ZTtpZihudWxsIT09bil7bj1uLnVwZGF0ZVF1ZXVlO3ZhciBBPW4ubGFzdEJhc2VVcGRhdGU7QSE9PWcmJihudWxsPT09QT9uLmZpcnN0QmFzZVVwZGF0ZT1sOkEubmV4dD1sLG4ubGFzdEJhc2VVcGRhdGU9ayl9fWlmKG51bGwhPT1mKXtBPWUuYmFzZVN0YXRlO2c9MDtuPWw9az1udWxsO2Rve2g9Zi5sYW5lO3ZhciBwPWYuZXZlbnRUaW1lO2lmKChkJmgpPT09aCl7bnVsbCE9PW4mJihuPW4ubmV4dD17ZXZlbnRUaW1lOnAsbGFuZTowLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIEM9YSx4PWY7aD1iO3A9Yztzd2l0Y2goeC50YWcpe2Nhc2UgMTpDPXgucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyl7QT1DLmNhbGwocCxBLGgpO2JyZWFrIGF9QT1DO2JyZWFrIGE7Y2FzZSAzOkMuZmxhZ3M9Qy5mbGFncyYtNDA5N3w2NDtjYXNlIDA6Qz14LnBheWxvYWQ7aD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQz9DLmNhbGwocCxBLGgpOkM7aWYobnVsbD09PWh8fHZvaWQgMD09PWgpYnJlYWsgYTtBPW0oe30sQSxoKTticmVhayBhO2Nhc2UgMjp3Zz0hMH19bnVsbCE9PWYuY2FsbGJhY2smJihhLmZsYWdzfD0zMixoPWUuZWZmZWN0cyxudWxsPT09aD9lLmVmZmVjdHM9W2ZdOmgucHVzaChmKSl9ZWxzZSBwPXtldmVudFRpbWU6cCxsYW5lOmgsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bj8obD1uPXAsaz1BKTpuPW4ubmV4dD1wLGd8PWg7Zj1mLm5leHQ7aWYobnVsbD09PVxuZilpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSBmPWgubmV4dCxoLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPWgsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1uJiYoaz1BKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1uO0RnfD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9QX19ZnVuY3Rpb24gRWcoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHkoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgRmc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBHZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgS2c9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/WmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1IZygpLGQ9SWcoYSksZT16ZyhjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPVxuYik7QWcoYSxlKTtKZyhhLGQsYyl9fTtmdW5jdGlvbiBMZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFKZShjLGQpfHwhSmUoZSxmKTohMH1cbmZ1bmN0aW9uIE1nKGEsYixjKXt2YXIgZD0hMSxlPUNmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXZnKGYpOihlPUZmKGIpP0RmOk0uY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0VmKGEsZSk6Q2YpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1LZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE9nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9Rmc7eGcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD12ZyhmKTooZj1GZihiKT9EZjpNLmN1cnJlbnQsZS5jb250ZXh0PUVmKGEsZikpO0NnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihHZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxDZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00KX12YXIgUGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFFnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih5KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1GZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih5KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih5KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUmcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IoeSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIpKTt9XG5mdW5jdGlvbiBTZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmZsYWdzPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVRnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzPTIsXG5jKTpkO2IuZmxhZ3M9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3M9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVVnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVFnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1WZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1RZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbldnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1YZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIEEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVVnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjPVZnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVFnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB0YTpyZXR1cm4gYj1XZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoUGcoYil8fExhKGIpKXJldHVybiBiPVhnKGIsXG5hLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBwKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09dWE/bihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIHRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKFBnKGMpfHxMYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpuKGEsYixjLGQsbnVsbCk7UmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fFxubnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PXVhP24oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIHRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKFBnKGQpfHxMYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxuKGIsYSxkLGUsbnVsbCk7UmcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCx1PWcsej1nPTAscT1udWxsO251bGwhPT11JiZ6PGgubGVuZ3RoO3orKyl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgbj1wKGUsdSxoW3pdLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PVxubi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHopO251bGw9PT10P2w9bjp0LnNpYmxpbmc9bjt0PW47dT1xfWlmKHo9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7ejxoLmxlbmd0aDt6KyspdT1BKGUsaFt6XSxrKSxudWxsIT09dSYmKGc9Zih1LGcseiksbnVsbD09PXQ/bD11OnQuc2libGluZz11LHQ9dSk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3o8aC5sZW5ndGg7eisrKXE9Qyh1LGUseixoW3pdLGspLG51bGwhPT1xJiYoYSYmbnVsbCE9PXEuYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09cS5rZXk/ejpxLmtleSksZz1mKHEsZyx6KSxudWxsPT09dD9sPXE6dC5zaWJsaW5nPXEsdD1xKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIHcoZSxnLGgsayl7dmFyIGw9TGEoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IoeSgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1cbmgpdGhyb3cgRXJyb3IoeSgxNTEpKTtmb3IodmFyIHQ9bD1udWxsLHU9Zyx6PWc9MCxxPW51bGwsbj1oLm5leHQoKTtudWxsIT09dSYmIW4uZG9uZTt6Kyssbj1oLm5leHQoKSl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgdz1wKGUsdSxuLnZhbHVlLGspO2lmKG51bGw9PT13KXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKHcsZyx6KTtudWxsPT09dD9sPXc6dC5zaWJsaW5nPXc7dD13O3U9cX1pZihuLmRvbmUpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1BKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1DKHUsZSx6LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJlxudS5kZWxldGUobnVsbD09PW4ua2V5P3o6bi5rZXkpLGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09dWEmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2Ugc2E6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT11YSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO1xuZD1lKGssZi5wcm9wcyk7ZC5yZWY9UWcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT11YT8oZD1YZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VmcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UWcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVxuV2coZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VWcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoUGcoZikpcmV0dXJuIHgoYSxkLGYsaCk7aWYoTGEoZikpcmV0dXJuIHcoYSxkLGYsaCk7bCYmUmcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMjI6Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aHJvdyBFcnJvcih5KDE1MixSYShhLnR5cGUpfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBZZz1TZyghMCksWmc9U2coITEpLCRnPXt9LGFoPUJmKCRnKSxiaD1CZigkZyksY2g9QmYoJGcpO1xuZnVuY3Rpb24gZGgoYSl7aWYoYT09PSRnKXRocm93IEVycm9yKHkoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZWgoYSxiKXtJKGNoLGIpO0koYmgsYSk7SShhaCwkZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTptYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bWIoYixhKX1IKGFoKTtJKGFoLGIpfWZ1bmN0aW9uIGZoKCl7SChhaCk7SChiaCk7SChjaCl9ZnVuY3Rpb24gZ2goYSl7ZGgoY2guY3VycmVudCk7dmFyIGI9ZGgoYWguY3VycmVudCk7dmFyIGM9bWIoYixhLnR5cGUpO2IhPT1jJiYoSShiaCxhKSxJKGFoLGMpKX1mdW5jdGlvbiBoaChhKXtiaC5jdXJyZW50PT09YSYmKEgoYWgpLEgoYmgpKX12YXIgUD1CZigwKTtcbmZ1bmN0aW9uIGloKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIGpoPW51bGwsa2g9bnVsbCxsaD0hMTtcbmZ1bmN0aW9uIG1oKGEsYil7dmFyIGM9bmgoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZmxhZ3M9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIG9oKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBwaChhKXtpZihsaCl7dmFyIGI9a2g7aWYoYil7dmFyIGM9YjtpZighb2goYSxiKSl7Yj1yZihjLm5leHRTaWJsaW5nKTtpZighYnx8IW9oKGEsYikpe2EuZmxhZ3M9YS5mbGFncyYtMTAyNXwyO2xoPSExO2poPWE7cmV0dXJufW1oKGpoLGMpfWpoPWE7a2g9cmYoYi5maXJzdENoaWxkKX1lbHNlIGEuZmxhZ3M9YS5mbGFncyYtMTAyNXwyLGxoPSExLGpoPWF9fWZ1bmN0aW9uIHFoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtqaD1hfVxuZnVuY3Rpb24gcmgoYSl7aWYoYSE9PWpoKXJldHVybiExO2lmKCFsaClyZXR1cm4gcWgoYSksbGg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFuZihiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9a2g7YjspbWgoYSxiKSxiPXJmKGIubmV4dFNpYmxpbmcpO3FoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IoeSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7a2g9cmYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ31raD1udWxsfX1lbHNlIGtoPWpoP3JmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gc2goKXtraD1qaD1udWxsO2xoPSExfXZhciB0aD1bXTtmdW5jdGlvbiB1aCgpe2Zvcih2YXIgYT0wO2E8dGgubGVuZ3RoO2ErKyl0aFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO3RoLmxlbmd0aD0wfXZhciB2aD1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHdoPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLHhoPTAsUj1udWxsLFM9bnVsbCxUPW51bGwseWg9ITEsemg9ITE7ZnVuY3Rpb24gQWgoKXt0aHJvdyBFcnJvcih5KDMyMSkpO31mdW5jdGlvbiBCaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gQ2goYSxiLGMsZCxlLGYpe3hoPWY7Uj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7dmguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9EaDpFaDthPWMoZCxlKTtpZih6aCl7Zj0wO2Rve3poPSExO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IoeSgzMDEpKTtmKz0xO1Q9Uz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDt2aC5jdXJyZW50PUZoO2E9YyhkLGUpfXdoaWxlKHpoKX12aC5jdXJyZW50PUdoO2I9bnVsbCE9PVMmJm51bGwhPT1TLm5leHQ7eGg9MDtUPVM9Uj1udWxsO3loPSExO2lmKGIpdGhyb3cgRXJyb3IoeSgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBIaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YTtyZXR1cm4gVH1cbmZ1bmN0aW9uIEloKCl7aWYobnVsbD09PVMpe3ZhciBhPVIuYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPVMubmV4dDt2YXIgYj1udWxsPT09VD9SLm1lbW9pemVkU3RhdGU6VC5uZXh0O2lmKG51bGwhPT1iKVQ9YixTPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih5KDMxMCkpO1M9YTthPXttZW1vaXplZFN0YXRlOlMubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Uy5iYXNlU3RhdGUsYmFzZVF1ZXVlOlMuYmFzZVF1ZXVlLHF1ZXVlOlMucXVldWUsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWF9cmV0dXJuIFR9ZnVuY3Rpb24gSmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBLaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPVMsZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5sYW5lO2lmKCh4aCZsKT09PWwpbnVsbCE9PWgmJihoPWgubmV4dD17bGFuZTowLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7ZWxzZXt2YXIgbj17bGFuZTpsLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsXG5lYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bixmPWQpOmg9aC5uZXh0PW47Ui5sYW5lc3w9bDtEZ3w9bH1rPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZztIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gTGgoYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiBNaChhLGIsYyl7dmFyIGQ9Yi5fZ2V0VmVyc2lvbjtkPWQoYi5fc291cmNlKTt2YXIgZT1iLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5O2lmKG51bGwhPT1lKWE9ZT09PWQ7ZWxzZSBpZihhPWEubXV0YWJsZVJlYWRMYW5lcyxhPSh4aCZhKT09PWEpYi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1kLHRoLnB1c2goYik7aWYoYSlyZXR1cm4gYyhiLl9zb3VyY2UpO3RoLnB1c2goYik7dGhyb3cgRXJyb3IoeSgzNTApKTt9XG5mdW5jdGlvbiBOaChhLGIsYyxkKXt2YXIgZT1VO2lmKG51bGw9PT1lKXRocm93IEVycm9yKHkoMzQ5KSk7dmFyIGY9Yi5fZ2V0VmVyc2lvbixnPWYoYi5fc291cmNlKSxoPXZoLmN1cnJlbnQsaz1oLnVzZVN0YXRlKGZ1bmN0aW9uKCl7cmV0dXJuIE1oKGUsYixjKX0pLGw9a1sxXSxuPWtbMF07az1UO3ZhciBBPWEubWVtb2l6ZWRTdGF0ZSxwPUEucmVmcyxDPXAuZ2V0U25hcHNob3QseD1BLnNvdXJjZTtBPUEuc3Vic2NyaWJlO3ZhciB3PVI7YS5tZW1vaXplZFN0YXRlPXtyZWZzOnAsc291cmNlOmIsc3Vic2NyaWJlOmR9O2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cC5nZXRTbmFwc2hvdD1jO3Auc2V0U25hcHNob3Q9bDt2YXIgYT1mKGIuX3NvdXJjZSk7aWYoIUhlKGcsYSkpe2E9YyhiLl9zb3VyY2UpO0hlKG4sYSl8fChsKGEpLGE9SWcodyksZS5tdXRhYmxlUmVhZExhbmVzfD1hJmUucGVuZGluZ0xhbmVzKTthPWUubXV0YWJsZVJlYWRMYW5lcztlLmVudGFuZ2xlZExhbmVzfD1hO2Zvcih2YXIgZD1cbmUuZW50YW5nbGVtZW50cyxoPWE7MDxoOyl7dmFyIGs9MzEtVmMoaCksdj0xPDxrO2Rba118PWE7aCY9fnZ9fX0sW2MsYixkXSk7aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtyZXR1cm4gZChiLl9zb3VyY2UsZnVuY3Rpb24oKXt2YXIgYT1wLmdldFNuYXBzaG90LGM9cC5zZXRTbmFwc2hvdDt0cnl7YyhhKGIuX3NvdXJjZSkpO3ZhciBkPUlnKHcpO2UubXV0YWJsZVJlYWRMYW5lc3w9ZCZlLnBlbmRpbmdMYW5lc31jYXRjaChxKXtjKGZ1bmN0aW9uKCl7dGhyb3cgcTt9KX19KX0sW2IsZF0pO0hlKEMsYykmJkhlKHgsYikmJkhlKEEsZCl8fChhPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOm59LGEuZGlzcGF0Y2g9bD1PaC5iaW5kKG51bGwsUixhKSxrLnF1ZXVlPWEsay5iYXNlUXVldWU9bnVsbCxuPU1oKGUsYixjKSxrLm1lbW9pemVkU3RhdGU9ay5iYXNlU3RhdGU9bik7cmV0dXJuIG59XG5mdW5jdGlvbiBQaChhLGIsYyl7dmFyIGQ9SWgoKTtyZXR1cm4gTmgoZCxhLGIsYyl9ZnVuY3Rpb24gUWgoYSl7dmFyIGI9SGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBSaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1SLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LFIudXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gU2goYSl7dmFyIGI9SGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX1mdW5jdGlvbiBUaCgpe3JldHVybiBJaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gVWgoYSxiLGMsZCl7dmFyIGU9SGgoKTtSLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gVmgoYSxiLGMsZCl7dmFyIGU9SWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Uyl7dmFyIGc9Uy5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZCaChkLGcuZGVwcykpe1JoKGIsYyxmLGQpO3JldHVybn19Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsZixkKX1mdW5jdGlvbiBXaChhLGIpe3JldHVybiBVaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFhoKGEsYil7cmV0dXJuIFZoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWWgoYSxiKXtyZXR1cm4gVmgoNCwyLGEsYil9ZnVuY3Rpb24gWmgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1cbmZ1bmN0aW9uICRoKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVmgoNCwyLFpoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIGFpKCl7fWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIGNpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gZGkoYSxiKXt2YXIgYz1lZygpO2dnKDk4PmM/OTg6YyxmdW5jdGlvbigpe2EoITApfSk7Z2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGM9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2EoITEpLGIoKX1maW5hbGx5e3doLnRyYW5zaXRpb249Y319KX1cbmZ1bmN0aW9uIE9oKGEsYixjKXt2YXIgZD1IZygpLGU9SWcoYSksZj17bGFuZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5wZW5kaW5nO251bGw9PT1nP2YubmV4dD1mOihmLm5leHQ9Zy5uZXh0LGcubmV4dD1mKTtiLnBlbmRpbmc9ZjtnPWEuYWx0ZXJuYXRlO2lmKGE9PT1SfHxudWxsIT09ZyYmZz09PVIpemg9eWg9ITA7ZWxzZXtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1nfHwwPT09Zy5sYW5lcykmJihnPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZykpdHJ5e3ZhciBoPWIubGFzdFJlbmRlcmVkU3RhdGUsaz1nKGgsYyk7Zi5lYWdlclJlZHVjZXI9ZztmLmVhZ2VyU3RhdGU9aztpZihIZShrLGgpKXJldHVybn1jYXRjaChsKXt9ZmluYWxseXt9SmcoYSxlLGQpfX1cbnZhciBHaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6QWgsdXNlQ29udGV4dDpBaCx1c2VFZmZlY3Q6QWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpBaCx1c2VMYXlvdXRFZmZlY3Q6QWgsdXNlTWVtbzpBaCx1c2VSZWR1Y2VyOkFoLHVzZVJlZjpBaCx1c2VTdGF0ZTpBaCx1c2VEZWJ1Z1ZhbHVlOkFoLHVzZURlZmVycmVkVmFsdWU6QWgsdXNlVHJhbnNpdGlvbjpBaCx1c2VNdXRhYmxlU291cmNlOkFoLHVzZU9wYXF1ZUlkZW50aWZpZXI6QWgsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxEaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtIaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpXaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVWgoNCwyLFpoLmJpbmQobnVsbCxcbmIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBVaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPUhoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOlNoLHVzZVN0YXRlOlFoLHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1RaChhKSxjPWJbMF0sZD1iWzFdO1doKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjtcbndoLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1RaCghMSksYj1hWzBdO2E9ZGkuYmluZChudWxsLGFbMV0pO1NoKGEpO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2QubWVtb2l6ZWRTdGF0ZT17cmVmczp7Z2V0U25hcHNob3Q6YixzZXRTbmFwc2hvdDpudWxsfSxzb3VyY2U6YSxzdWJzY3JpYmU6Y307cmV0dXJuIE5oKGQsYSxiLGMpfSx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7aWYobGgpe3ZhciBhPSExLGI9dWYoZnVuY3Rpb24oKXthfHwoYT0hMCxjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKSk7dGhyb3cgRXJyb3IoeSgzNTUpKTt9KSxjPVFoKGIpWzFdOzA9PT0oUi5tb2RlJjIpJiYoUi5mbGFnc3w9NTE2LFJoKDUsZnVuY3Rpb24oKXtjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKX0sXG52b2lkIDAsbnVsbCkpO3JldHVybiBifWI9XCJyOlwiKyh0ZisrKS50b1N0cmluZygzNik7UWgoYik7cmV0dXJuIGJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRWg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpLaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9S2goSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1LaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEZoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6TGgsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUxoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9TGgoSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxlaT1yYS5SZWFjdEN1cnJlbnRPd25lcix1Zz0hMTtmdW5jdGlvbiBmaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1pnKGIsbnVsbCxjLGQpOllnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIGdpKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjt0ZyhiLGUpO2Q9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFqaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxraShhLGIsZyxkLGUsZik7YT1WZyhjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoMD09PShlJmYpJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOkplLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIGhpKGEsYixmKTtiLmZsYWdzfD0xO2E9VGcoZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBraShhLGIsYyxkLGUsZil7aWYobnVsbCE9PWEmJkplKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZilpZih1Zz0hMSwwIT09KGYmZSkpMCE9PShhLmZsYWdzJjE2Mzg0KSYmKHVnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsaGkoYSxiLGYpO3JldHVybiBsaShhLGIsYyxkLGYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGV8fFwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIj09PWQubW9kZSlpZigwPT09KGIubW9kZSY0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLGMpO2Vsc2UgaWYoMCE9PShjJjEwNzM3NDE4MjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsbnVsbCE9PWY/Zi5iYXNlTGFuZXM6Yyk7ZWxzZSByZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphfSxuaShiLGEpLG51bGw7ZWxzZSBudWxsIT09Zj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsbmkoYixkKTtmaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIG9pKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTEyOH1mdW5jdGlvbiBsaShhLGIsYyxkLGUpe3ZhciBmPUZmKGMpP0RmOk0uY3VycmVudDtmPUVmKGIsZik7dGcoYixlKTtjPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHBpKGEsYixjLGQsZSl7aWYoRmYoYykpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTt0ZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxNZyhiLGMsZCksT2coYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9dmcobCk6KGw9RmYoYyk/RGY6TS5jdXJyZW50LGw9RWYoYixsKSk7dmFyIG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7QXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk5nKGIsZyxkLGwpO3dnPSExO3ZhciBwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHAhPT1rfHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbiYmKEdnKGIsYyxuLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD13Z3x8TGcoYixjLGgsZCxwLGssbCkpPyhBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7eWcoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpsZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO0E9Yi5wZW5kaW5nUHJvcHM7cD1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az12ZyhrKTooaz1GZihjKT9EZjpNLmN1cnJlbnQsaz1FZihiLGspKTt2YXIgQz1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQ3x8XG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PUF8fHAhPT1rKSYmTmcoYixnLGQsayk7d2c9ITE7cD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtoIT09QXx8cCE9PXh8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDJiYoR2coYixjLEMsZCkseD1iLm1lbW9pemVkU3RhdGUpLChsPXdnfHxMZyhiLGMsbCxkLHAseCxrKSk/KG58fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8XG5oPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGQ9ITEpfXJldHVybiBxaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBxaShhLGIsYyxkLGUsZil7b2koYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmS2YoYixjLCExKSxoaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtlaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVlnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WWcoYixudWxsLGgsZikpOmZpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJktmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcmkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9IZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZIZihhLGIuY29udGV4dCwhMSk7ZWgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIHNpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlMYW5lOjB9O1xuZnVuY3Rpb24gdGkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9UC5jdXJyZW50LGY9ITEsZzsoZz0wIT09KGIuZmxhZ3MmNjQpKXx8KGc9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtnPyhmPSEwLGIuZmxhZ3MmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWQuZmFsbGJhY2t8fCEwPT09ZC51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGV8PTEpO0koUCxlJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1kLmZhbGxiYWNrJiZwaChiKTthPWQuY2hpbGRyZW47ZT1kLmZhbGxiYWNrO2lmKGYpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sYi5tZW1vaXplZFN0YXRlPXNpLGE7aWYoXCJudW1iZXJcIj09PXR5cGVvZiBkLnVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sXG5iLm1lbW9pemVkU3RhdGU9c2ksYi5sYW5lcz0zMzU1NDQzMixhO2M9dmkoe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46YX0sYi5tb2RlLGMsbnVsbCk7Yy5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1jfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2lmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306e2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTpcbntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWEubW9kZSxmPWEuY2hpbGQ7Yj17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmJ9OzA9PT0oZSYyKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPWIpOmY9dmkoYixlLDAsbnVsbCk7Yz1YZyhjLGUsZCxudWxsKTtmLnJldHVybj1hO2MucmV0dXJuPWE7Zi5zaWJsaW5nPWM7YS5jaGlsZD1mO3JldHVybiBjfVxuZnVuY3Rpb24geGkoYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDthPWUuc2libGluZztjPVRnKGUse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Y30pOzA9PT0oYi5tb2RlJjIpJiYoYy5sYW5lcz1kKTtjLnJldHVybj1iO2Muc2libGluZz1udWxsO251bGwhPT1hJiYoYS5uZXh0RWZmZWN0PW51bGwsYS5mbGFncz04LGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWEpO3JldHVybiBiLmNoaWxkPWN9XG5mdW5jdGlvbiB3aShhLGIsYyxkLGUpe3ZhciBmPWIubW9kZSxnPWEuY2hpbGQ7YT1nLnNpYmxpbmc7dmFyIGg9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpjfTswPT09KGYmMikmJmIuY2hpbGQhPT1nPyhjPWIuY2hpbGQsYy5jaGlsZExhbmVzPTAsYy5wZW5kaW5nUHJvcHM9aCxnPWMubGFzdEVmZmVjdCxudWxsIT09Zz8oYi5maXJzdEVmZmVjdD1jLmZpcnN0RWZmZWN0LGIubGFzdEVmZmVjdD1nLGcubmV4dEVmZmVjdD1udWxsKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsKTpjPVRnKGcsaCk7bnVsbCE9PWE/ZD1UZyhhLGQpOihkPVhnKGQsZixlLG51bGwpLGQuZmxhZ3N8PTIpO2QucmV0dXJuPWI7Yy5yZXR1cm49YjtjLnNpYmxpbmc9ZDtiLmNoaWxkPWM7cmV0dXJuIGR9ZnVuY3Rpb24geWkoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7c2coYS5yZXR1cm4sYil9XG5mdW5jdGlvbiB6aShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gQWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtmaShhLGIsZC5jaGlsZHJlbixjKTtkPVAuY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmeWkoYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpeWkoYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShQLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1paChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3ppKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWloKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX16aShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6emkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGhpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtEZ3w9Yi5sYW5lcztpZigwIT09KGMmYi5jaGlsZExhbmVzKSl7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHkoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVRnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1UZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXJldHVybiBudWxsfXZhciBCaSxDaSxEaSxFaTtcbkJpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtDaT1mdW5jdGlvbigpe307XG5EaT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7ZGgoYWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZSk7ZD1lYihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9bSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX12YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PVxubCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHxcbihjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxjKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRyhcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOlwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1HYT9rLnRvU3RyaW5nKCk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLFxuYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0VpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O2Z1bmN0aW9uIEZpKGEsYil7aWYoIWxoKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClyaChiKT9iLmZsYWdzfD00OmQuaHlkcmF0ZXx8KGIuZmxhZ3N8PTI1Nik7Q2koYik7cmV0dXJuIG51bGw7Y2FzZSA1OmhoKGIpO3ZhciBlPWRoKGNoLmN1cnJlbnQpO2M9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlEaShhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1cbmIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7cmV0dXJuIG51bGx9YT1kaChhaC5jdXJyZW50KTtpZihyaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFt3Zl09YjtkW3hmXT1mO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGQpO0coXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8WGUubGVuZ3RoO2ErKylHKFhlW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixkKTtHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEcoXCJpbnZhbGlkXCIsZCl9dmIoYyxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpZi5oYXNPd25Qcm9wZXJ0eShnKSYmKGU9ZltnXSxcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgZT9kLnRleHRDb250ZW50IT09ZSYmKGE9W1wiY2hpbGRyZW5cIixlXSk6XCJudW1iZXJcIj09PXR5cGVvZiBlJiZkLnRleHRDb250ZW50IT09XCJcIitlJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIrZV0pOmNhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1lJiZcIm9uU2Nyb2xsXCI9PT1nJiZHKFwic2Nyb2xsXCIsZCkpO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtjYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPVxuamYpfWQ9YTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7YT09PWtiLmh0bWwmJihhPWxiKGMpKTthPT09a2IuaHRtbD9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2Fbd2ZdPWI7YVt4Zl09ZDtCaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz13YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGEpO0coXCJjbG9zZVwiLGEpO1xuZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPFhlLmxlbmd0aDtlKyspRyhYZVtlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixhKTtHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPVxuZ2IoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXZiKGMsZSk7dmFyIGg9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj90YihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmb2IoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWN8fFwiXCIhPT1rKSYmcGIoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJnBiKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoY2EuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRyhcInNjcm9sbFwiLGEpOm51bGwhPWsmJnFhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7Y2IoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX1tZihjLGQpJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7XG5jPWRoKGNoLmN1cnJlbnQpO2RoKGFoLmN1cnJlbnQpO3JoKGIpPyhkPWIuc3RhdGVOb2RlLGM9Yi5tZW1vaXplZFByb3BzLGRbd2ZdPWIsZC5ub2RlVmFsdWUhPT1jJiYoYi5mbGFnc3w9NCkpOihkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFt3Zl09YixiLnN0YXRlTm9kZT1kKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtjPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmcmgoYik6Yz1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKGQmJiFjJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oUC5jdXJyZW50JjEpKTA9PT1WJiYoVj0zKTtlbHNle2lmKDA9PT1WfHwzPT09VilWPVxuNDtudWxsPT09VXx8MD09PShEZyYxMzQyMTc3MjcpJiYwPT09KEhpJjEzNDIxNzcyNyl8fElpKFUsVyl9aWYoZHx8YyliLmZsYWdzfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxDaShiKSxudWxsPT09YSYmY2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksbnVsbDtjYXNlIDEwOnJldHVybiByZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDE5OkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Zj0wIT09KGIuZmxhZ3MmNjQpO2c9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZilGaShkLCExKTtlbHNle2lmKDAhPT1WfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1paChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9NjQ7RmkoZCwhMSk7Zj1nLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoYi51cGRhdGVRdWV1ZT1mLGIuZmxhZ3N8PTQpO1xubnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0yLGYubmV4dEVmZmVjdD1udWxsLGYuZmlyc3RFZmZlY3Q9bnVsbCxmLmxhc3RFZmZlY3Q9bnVsbCxnPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsXG5mLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0koUCxQLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPWEuc2libGluZ31udWxsIT09ZC50YWlsJiZPKCk+SmkmJihiLmZsYWdzfD02NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpfWVsc2V7aWYoIWYpaWYoYT1paChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9NjQsZj0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIWxoKXJldHVybiBiPWIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqTygpLWQucmVuZGVyaW5nU3RhcnRUaW1lPkppJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PVxuNjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKTtkLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZC5sYXN0PWcpfXJldHVybiBudWxsIT09ZC50YWlsPyhjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT1PKCksYy5zaWJsaW5nPW51bGwsYj1QLmN1cnJlbnQsSShQLGY/YiYxfDI6YiYxKSxjKTpudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PShudWxsIT09Yi5tZW1vaXplZFN0YXRlKSYmXCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiIT09ZC5tb2RlJiYoYi5mbGFnc3w9NCksbnVsbH10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIExpKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkZmKGEudHlwZSkmJkdmKCk7dmFyIGI9YS5mbGFncztyZXR1cm4gYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtiPWEuZmxhZ3M7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih5KDI4NSkpO2EuZmxhZ3M9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGhoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChQKSxiPWEuZmxhZ3MsYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKFApLG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYSksbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVFhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplfX1mdW5jdGlvbiBOaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgT2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gUGkoYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UWl8fChRaT0hMCxSaT1kKTtOaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFNpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtOaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09VGk/VGk9bmV3IFNldChbdGhpc10pOlRpLmFkZCh0aGlzKSxOaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY312YXIgVWk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7XG5mdW5jdGlvbiBWaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtXaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9ZnVuY3Rpb24gWGkoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZmxhZ3MmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzpsZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Yi5mbGFncyYyNTYmJnFmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3JldHVybjtjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIFlpKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpiPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3tpZigzPT09KGEudGFnJjMpKXt2YXIgZD1hLmNyZWF0ZTthLmRlc3Ryb3k9ZCgpfWE9YS5uZXh0fXdoaWxlKGEhPT1iKX1iPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3t2YXIgZT1hO2Q9ZS5uZXh0O2U9ZS50YWc7MCE9PShlJjQpJiYwIT09KGUmMSkmJihaaShjLGEpLCRpKGMsYSkpO2E9ZH13aGlsZShhIT09Yil9cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2MuZmxhZ3MmNCYmKG51bGw9PT1iP2EuY29tcG9uZW50RGlkTW91bnQoKTooZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczpsZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKSxhLmNvbXBvbmVudERpZFVwZGF0ZShkLFxuYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpKSk7Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZFZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUVnKGMsYixhKX1yZXR1cm47Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZmxhZ3MmNCYmbWYoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZDYyhjKSkpKTtcbnJldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOmNhc2UgMjM6Y2FzZSAyNDpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBhaihhLGIpe2Zvcih2YXIgYz1hOzspe2lmKDU9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoYilkPWQuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuc2V0UHJvcGVydHk/ZC5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpkLmRpc3BsYXk9XCJub25lXCI7ZWxzZXtkPWMuc3RhdGVOb2RlO3ZhciBlPWMubWVtb2l6ZWRQcm9wcy5zdHlsZTtlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbDtkLnN0eWxlLmRpc3BsYXk9c2IoXCJkaXNwbGF5XCIsZSl9fWVsc2UgaWYoNj09PWMudGFnKWMuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iP1wiXCI6Yy5tZW1vaXplZFByb3BzO2Vsc2UgaWYoKDIzIT09Yy50YWcmJjI0IT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fGM9PT1hKSYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBiaihhLGIpe2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclVubW91bnQpdHJ5e01mLm9uQ29tbWl0RmliZXJVbm1vdW50KExmLGIpfWNhdGNoKGYpe31zd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGM9YT1hLm5leHQ7ZG97dmFyIGQ9YyxlPWQuZGVzdHJveTtkPWQudGFnO2lmKHZvaWQgMCE9PWUpaWYoMCE9PShkJjQpKVppKGIsYyk7ZWxzZXtkPWI7dHJ5e2UoKX1jYXRjaChmKXtXaShkLGYpfX1jPWMubmV4dH13aGlsZShjIT09YSl9YnJlYWs7Y2FzZSAxOlZpKGIpO2E9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2EucHJvcHM9Yi5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yi5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtXaShiLFxuZil9YnJlYWs7Y2FzZSA1OlZpKGIpO2JyZWFrO2Nhc2UgNDpjaihhLGIpfX1mdW5jdGlvbiBkaihhKXthLmFsdGVybmF0ZT1udWxsO2EuY2hpbGQ9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EucmV0dXJuPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIGVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gZmooYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoZWooYikpYnJlYWsgYTtiPWIucmV0dXJufXRocm93IEVycm9yKHkoMTYwKSk7fXZhciBjPWI7Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMTYxKSk7fWMuZmxhZ3MmMTYmJihwYihiLFwiXCIpLGMuZmxhZ3MmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxlaihjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmZsYWdzJjIpY29udGludWUgYjtpZihudWxsPT09XG5jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5mbGFncyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP2dqKGEsYyxiKTpoaihhLGMsYil9XG5mdW5jdGlvbiBnaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9amYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoZ2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylnaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBoaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspaGooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gY2ooYSxiKXtmb3IodmFyIGM9YixkPSExLGUsZjs7KXtpZighZCl7ZD1jLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWQpdGhyb3cgRXJyb3IoeSgxNjApKTtlPWQuc3RhdGVOb2RlO3N3aXRjaChkLnRhZyl7Y2FzZSA1OmY9ITE7YnJlYWsgYTtjYXNlIDM6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhO2Nhc2UgNDplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGF9ZD1kLnJldHVybn1kPSEwfWlmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKXthOmZvcih2YXIgZz1hLGg9YyxrPWg7OylpZihiaihnLGspLG51bGwhPT1rLmNoaWxkJiY0IT09ay50YWcpay5jaGlsZC5yZXR1cm49ayxrPWsuY2hpbGQ7ZWxzZXtpZihrPT09aClicmVhayBhO2Zvcig7bnVsbD09PWsuc2libGluZzspe2lmKG51bGw9PT1rLnJldHVybnx8ay5yZXR1cm49PT1oKWJyZWFrIGE7az1rLnJldHVybn1rLnNpYmxpbmcucmV0dXJuPWsucmV0dXJuO2s9ay5zaWJsaW5nfWY/KGc9ZSxoPWMuc3RhdGVOb2RlLFxuOD09PWcubm9kZVR5cGU/Zy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGgpOmcucmVtb3ZlQ2hpbGQoaCkpOmUucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWMudGFnKXtpZihudWxsIT09Yy5jaGlsZCl7ZT1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Y9ITA7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoYmooYSxjKSxudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm47ND09PWMudGFnJiYoZD0hMSl9Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBpaihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6dmFyIGM9Yi51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkbyAzPT09KGQudGFnJjMpJiYoYT1kLmRlc3Ryb3ksZC5kZXN0cm95PXZvaWQgMCx2b2lkIDAhPT1hJiZhKCkpLGQ9ZC5uZXh0O3doaWxlKGQhPT1jKX1yZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6Yz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXtkPWIubWVtb2l6ZWRQcm9wczt2YXIgZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1t4Zl09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmJGEoYyxkKTt3YihhLGUpO2I9d2IoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9XG4yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/dGIoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP29iKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9wYihjLGgpOnFhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjphYihjLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmE9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsZj1kLnZhbHVlLG51bGwhPWY/ZmIoYywhIWQubXVsdGlwbGUsZiwhMSk6YSE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP2ZiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpmYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPVxuYi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yz1iLnN0YXRlTm9kZTtjLmh5ZHJhdGUmJihjLmh5ZHJhdGU9ITEsQ2MoYy5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSYmKGpqPU8oKSxhaihiLmNoaWxkLCEwKSk7a2ooYik7cmV0dXJuO2Nhc2UgMTk6a2ooYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJuO2Nhc2UgMjM6Y2FzZSAyNDphaihiLG51bGwhPT1iLm1lbW9pemVkU3RhdGUpO3JldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31mdW5jdGlvbiBraihhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBVaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWxqLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gbWooYSxiKXtyZXR1cm4gbnVsbCE9PWEmJihhPWEubWVtb2l6ZWRTdGF0ZSxudWxsPT09YXx8bnVsbCE9PWEuZGVoeWRyYXRlZCk/KGI9Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1iJiZudWxsPT09Yi5kZWh5ZHJhdGVkKTohMX12YXIgbmo9TWF0aC5jZWlsLG9qPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIscGo9cmEuUmVhY3RDdXJyZW50T3duZXIsWD0wLFU9bnVsbCxZPW51bGwsVz0wLHFqPTAscmo9QmYoMCksVj0wLHNqPW51bGwsdGo9MCxEZz0wLEhpPTAsdWo9MCx2aj1udWxsLGpqPTAsSmk9SW5maW5pdHk7ZnVuY3Rpb24gd2ooKXtKaT1PKCkrNTAwfXZhciBaPW51bGwsUWk9ITEsUmk9bnVsbCxUaT1udWxsLHhqPSExLHlqPW51bGwsemo9OTAsQWo9W10sQmo9W10sQ2o9bnVsbCxEaj0wLEVqPW51bGwsRmo9LTEsR2o9MCxIaj0wLElqPW51bGwsSmo9ITE7ZnVuY3Rpb24gSGcoKXtyZXR1cm4gMCE9PShYJjQ4KT9PKCk6LTEhPT1Gaj9GajpGaj1PKCl9XG5mdW5jdGlvbiBJZyhhKXthPWEubW9kZTtpZigwPT09KGEmMikpcmV0dXJuIDE7aWYoMD09PShhJjQpKXJldHVybiA5OT09PWVnKCk/MToyOzA9PT1HaiYmKEdqPXRqKTtpZigwIT09a2cudHJhbnNpdGlvbil7MCE9PUhqJiYoSGo9bnVsbCE9PXZqP3ZqLnBlbmRpbmdMYW5lczowKTthPUdqO3ZhciBiPTQxODYxMTImfkhqO2ImPS1iOzA9PT1iJiYoYT00MTg2MTEyJn5hLGI9YSYtYSwwPT09YiYmKGI9ODE5MikpO3JldHVybiBifWE9ZWcoKTswIT09KFgmNCkmJjk4PT09YT9hPVhjKDEyLEdqKTooYT1TYyhhKSxhPVhjKGEsR2opKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpnKGEsYixjKXtpZig1MDxEail0aHJvdyBEaj0wLEVqPW51bGwsRXJyb3IoeSgxODUpKTthPUtqKGEsYik7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7JGMoYSxiLGMpO2E9PT1VJiYoSGl8PWIsND09PVYmJklpKGEsVykpO3ZhciBkPWVnKCk7MT09PWI/MCE9PShYJjgpJiYwPT09KFgmNDgpP0xqKGEpOihNaihhLGMpLDA9PT1YJiYod2ooKSxpZygpKSk6KDA9PT0oWCY0KXx8OTghPT1kJiY5OSE9PWR8fChudWxsPT09Q2o/Q2o9bmV3IFNldChbYV0pOkNqLmFkZChhKSksTWooYSxjKSk7dmo9YX1mdW5jdGlvbiBLaihhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9XG5mdW5jdGlvbiBNaihhLGIpe2Zvcih2YXIgYz1hLmNhbGxiYWNrTm9kZSxkPWEuc3VzcGVuZGVkTGFuZXMsZT1hLnBpbmdlZExhbmVzLGY9YS5leHBpcmF0aW9uVGltZXMsZz1hLnBlbmRpbmdMYW5lczswPGc7KXt2YXIgaD0zMS1WYyhnKSxrPTE8PGgsbD1mW2hdO2lmKC0xPT09bCl7aWYoMD09PShrJmQpfHwwIT09KGsmZSkpe2w9YjtSYyhrKTt2YXIgbj1GO2ZbaF09MTA8PW4/bCsyNTA6Njw9bj9sKzVFMzotMX19ZWxzZSBsPD1iJiYoYS5leHBpcmVkTGFuZXN8PWspO2cmPX5rfWQ9VWMoYSxhPT09VT9XOjApO2I9RjtpZigwPT09ZCludWxsIT09YyYmKGMhPT1aZiYmUGYoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MCk7ZWxzZXtpZihudWxsIT09Yyl7aWYoYS5jYWxsYmFja1ByaW9yaXR5PT09YilyZXR1cm47YyE9PVpmJiZQZihjKX0xNT09PWI/KGM9TGouYmluZChudWxsLGEpLG51bGw9PT1hZz8oYWc9W2NdLGJnPU9mKFVmLGpnKSk6YWcucHVzaChjKSxcbmM9WmYpOjE0PT09Yj9jPWhnKDk5LExqLmJpbmQobnVsbCxhKSk6KGM9VGMoYiksYz1oZyhjLE5qLmJpbmQobnVsbCxhKSkpO2EuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gTmooYSl7Rmo9LTE7SGo9R2o9MDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGI9YS5jYWxsYmFja05vZGU7aWYoT2ooKSYmYS5jYWxsYmFja05vZGUhPT1iKXJldHVybiBudWxsO3ZhciBjPVVjKGEsYT09PVU/VzowKTtpZigwPT09YylyZXR1cm4gbnVsbDt2YXIgZD1jO3ZhciBlPVg7WHw9MTY7dmFyIGY9UGooKTtpZihVIT09YXx8VyE9PWQpd2ooKSxRaihhLGQpO2RvIHRyeXtSaigpO2JyZWFrfWNhdGNoKGgpe1NqKGEsaCl9d2hpbGUoMSk7cWcoKTtvai5jdXJyZW50PWY7WD1lO251bGwhPT1ZP2Q9MDooVT1udWxsLFc9MCxkPVYpO2lmKDAhPT0odGomSGkpKVFqKGEsMCk7ZWxzZSBpZigwIT09ZCl7Mj09PWQmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYz1XYyhhKSwwIT09YyYmKGQ9VGooYSxjKSkpO2lmKDE9PT1kKXRocm93IGI9c2osUWooYSwwKSxJaShhLGMpLE1qKGEsTygpKSxiO2EuZmluaXNoZWRXb3JrPVxuYS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9Yztzd2l0Y2goZCl7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcih5KDM0NSkpO2Nhc2UgMjpVaihhKTticmVhaztjYXNlIDM6SWkoYSxjKTtpZigoYyY2MjkxNDU2MCk9PT1jJiYoZD1qais1MDAtTygpLDEwPGQpKXtpZigwIT09VWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmYykhPT1jKXtIZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGQpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNDpJaShhLGMpO2lmKChjJjQxODYxMTIpPT09YylicmVhaztkPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGM7KXt2YXIgZz0zMS1WYyhjKTtmPTE8PGc7Zz1kW2ddO2c+ZSYmKGU9Zyk7YyY9fmZ9Yz1lO2M9TygpLWM7Yz0oMTIwPmM/MTIwOjQ4MD5jPzQ4MDoxMDgwPmM/MTA4MDoxOTIwPmM/MTkyMDozRTM+Yz8zRTM6NDMyMD5cbmM/NDMyMDoxOTYwKm5qKGMvMTk2MCkpLWM7aWYoMTA8Yyl7YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxjKTticmVha31VaihhKTticmVhaztjYXNlIDU6VWooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMyOSkpO319TWooYSxPKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWI/TmouYmluZChudWxsLGEpOm51bGx9ZnVuY3Rpb24gSWkoYSxiKXtiJj1+dWo7YiY9fkhpO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtVmMoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fVxuZnVuY3Rpb24gTGooYSl7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO09qKCk7aWYoYT09PVUmJjAhPT0oYS5leHBpcmVkTGFuZXMmVykpe3ZhciBiPVc7dmFyIGM9VGooYSxiKTswIT09KHRqJkhpKSYmKGI9VWMoYSxiKSxjPVRqKGEsYikpfWVsc2UgYj1VYyhhLDApLGM9VGooYSxiKTswIT09YS50YWcmJjI9PT1jJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGI9V2MoYSksMCE9PWImJihjPVRqKGEsYikpKTtpZigxPT09Yyl0aHJvdyBjPXNqLFFqKGEsMCksSWkoYSxiKSxNaihhLE8oKSksYzthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1VqKGEpO01qKGEsTygpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFZqKCl7aWYobnVsbCE9PUNqKXt2YXIgYT1DajtDaj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhKXthLmV4cGlyZWRMYW5lc3w9MjQmYS5wZW5kaW5nTGFuZXM7TWooYSxPKCkpfSl9aWcoKX1mdW5jdGlvbiBXaihhLGIpe3ZhciBjPVg7WHw9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBYaihhLGIpe3ZhciBjPVg7WCY9LTI7WHw9ODt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBuaShhLGIpe0kocmoscWopO3FqfD1iO3RqfD1ifWZ1bmN0aW9uIEtpKCl7cWo9cmouY3VycmVudDtIKHJqKX1cbmZ1bmN0aW9uIFFqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLHBmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkdmKCk7YnJlYWs7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7YnJlYWs7Y2FzZSA1OmhoKGQpO2JyZWFrO2Nhc2UgNDpmaCgpO2JyZWFrO2Nhc2UgMTM6SChQKTticmVhaztjYXNlIDE5OkgoUCk7YnJlYWs7Y2FzZSAxMDpyZyhkKTticmVhaztjYXNlIDIzOmNhc2UgMjQ6S2koKX1jPWMucmV0dXJufVU9YTtZPVRnKGEuY3VycmVudCxudWxsKTtXPXFqPXRqPWI7Vj0wO3NqPW51bGw7dWo9SGk9RGc9MH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG97dmFyIGM9WTt0cnl7cWcoKTt2aC5jdXJyZW50PUdoO2lmKHloKXtmb3IodmFyIGQ9Ui5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH15aD0hMX14aD0wO1Q9Uz1SPW51bGw7emg9ITE7cGouY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Y9MTtzaj1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVc7aC5mbGFnc3w9MjA0ODtoLmZpcnN0RWZmZWN0PWgubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWs7aWYoMD09PShoLm1vZGUmMikpe3ZhciBuPWguYWx0ZXJuYXRlO24/KGgudXBkYXRlUXVldWU9bi51cGRhdGVRdWV1ZSxoLm1lbW9pemVkU3RhdGU9bi5tZW1vaXplZFN0YXRlLGgubGFuZXM9bi5sYW5lcyk6XG4oaC51cGRhdGVRdWV1ZT1udWxsLGgubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgQT0wIT09KFAuY3VycmVudCYxKSxwPWc7ZG97dmFyIEM7aWYoQz0xMz09PXAudGFnKXt2YXIgeD1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXgpQz1udWxsIT09eC5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIHc9cC5tZW1vaXplZFByb3BzO0M9dm9pZCAwPT09dy5mYWxsYmFjaz8hMTohMCE9PXcudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6QT8hMTohMH19aWYoQyl7dmFyIHo9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09eil7dmFyIHU9bmV3IFNldDt1LmFkZChsKTtwLnVwZGF0ZVF1ZXVlPXV9ZWxzZSB6LmFkZChsKTtpZigwPT09KHAubW9kZSYyKSl7cC5mbGFnc3w9NjQ7aC5mbGFnc3w9MTYzODQ7aC5mbGFncyY9LTI5ODE7aWYoMT09PWgudGFnKWlmKG51bGw9PT1oLmFsdGVybmF0ZSloLnRhZz0xNztlbHNle3ZhciB0PXpnKC0xLDEpO3QudGFnPTI7QWcoaCx0KX1oLmxhbmVzfD0xO2JyZWFrIGF9az1cbnZvaWQgMDtoPWI7dmFyIHE9Zi5waW5nQ2FjaGU7bnVsbD09PXE/KHE9Zi5waW5nQ2FjaGU9bmV3IE9pLGs9bmV3IFNldCxxLnNldChsLGspKTooaz1xLmdldChsKSx2b2lkIDA9PT1rJiYoaz1uZXcgU2V0LHEuc2V0KGwsaykpKTtpZighay5oYXMoaCkpe2suYWRkKGgpO3ZhciB2PVlqLmJpbmQobnVsbCxmLGwsaCk7bC50aGVuKHYsdil9cC5mbGFnc3w9NDA5NjtwLmxhbmVzPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtrPUVycm9yKChSYShoLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIpfTUhPT1WJiYoVj0yKTtrPU1pKGssaCk7cD1cbmc7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6Zj1rO3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgSj1QaShwLGYsYik7QmcocCxKKTticmVhayBhO2Nhc2UgMTpmPWs7dmFyIEs9cC50eXBlLFE9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmZsYWdzJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBLLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PVEmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBRLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKFEpKSkpe3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgTD1TaShwLGYsYik7QmcocCxMKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1aaihjKX1jYXRjaCh2YSl7Yj12YTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gUGooKXt2YXIgYT1vai5jdXJyZW50O29qLmN1cnJlbnQ9R2g7cmV0dXJuIG51bGw9PT1hP0doOmF9ZnVuY3Rpb24gVGooYSxiKXt2YXIgYz1YO1h8PTE2O3ZhciBkPVBqKCk7VT09PWEmJlc9PT1ifHxRaihhLGIpO2RvIHRyeXthaygpO2JyZWFrfWNhdGNoKGUpe1NqKGEsZSl9d2hpbGUoMSk7cWcoKTtYPWM7b2ouY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHkoMjYxKSk7VT1udWxsO1c9MDtyZXR1cm4gVn1mdW5jdGlvbiBhaygpe2Zvcig7bnVsbCE9PVk7KWJrKFkpfWZ1bmN0aW9uIFJqKCl7Zm9yKDtudWxsIT09WSYmIVFmKCk7KWJrKFkpfWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWNrKGEuYWx0ZXJuYXRlLGEscWopO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9aaihhKTpZPWI7cGouY3VycmVudD1udWxsfVxuZnVuY3Rpb24gWmooYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYyMDQ4KSl7Yz1HaShjLGIscWopO2lmKG51bGwhPT1jKXtZPWM7cmV0dXJufWM9YjtpZigyNCE9PWMudGFnJiYyMyE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHwwIT09KHFqJjEwNzM3NDE4MjQpfHwwPT09KGMubW9kZSY0KSl7Zm9yKHZhciBkPTAsZT1jLmNoaWxkO251bGwhPT1lOylkfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxlPWUuc2libGluZztjLmNoaWxkTGFuZXM9ZH1udWxsIT09YSYmMD09PShhLmZsYWdzJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLG51bGwhPT1iLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yi5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCksMTxiLmZsYWdzJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI6YS5maXJzdEVmZmVjdD1iLGEubGFzdEVmZmVjdD1iKSl9ZWxzZXtjPUxpKGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0yMDQ3O1k9YztyZXR1cm59bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZmxhZ3N8PTIwNDgpfWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09ViYmKFY9NSl9ZnVuY3Rpb24gVWooYSl7dmFyIGI9ZWcoKTtnZyg5OSxkay5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkayhhLGIpe2RvIE9qKCk7d2hpbGUobnVsbCE9PXlqKTtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcms7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHkoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDt2YXIgZD1jLmxhbmVzfGMuY2hpbGRMYW5lcyxlPWQsZj1hLnBlbmRpbmdMYW5lcyZ+ZTthLnBlbmRpbmdMYW5lcz1lO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWU7YS5tdXRhYmxlUmVhZExhbmVzJj1lO2EuZW50YW5nbGVkTGFuZXMmPWU7ZT1hLmVudGFuZ2xlbWVudHM7Zm9yKHZhciBnPWEuZXZlbnRUaW1lcyxoPWEuZXhwaXJhdGlvblRpbWVzOzA8Zjspe3ZhciBrPTMxLVZjKGYpLGw9MTw8aztlW2tdPTA7Z1trXT0tMTtoW2tdPS0xO2YmPX5sfW51bGwhPT1cbkNqJiYwPT09KGQmMjQpJiZDai5oYXMoYSkmJkNqLmRlbGV0ZShhKTthPT09VSYmKFk9VT1udWxsLFc9MCk7MTxjLmZsYWdzP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZD1jLmZpcnN0RWZmZWN0KTpkPWM6ZD1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1kKXtlPVg7WHw9MzI7cGouY3VycmVudD1udWxsO2tmPWZkO2c9TmUoKTtpZihPZShnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyloPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOmlmKGg9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93LChsPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpKSYmMCE9PWwucmFuZ2VDb3VudCl7aD1sLmFuY2hvck5vZGU7Zj1sLmFuY2hvck9mZnNldDtrPWwuZm9jdXNOb2RlO2w9bC5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxrLm5vZGVUeXBlfWNhdGNoKHZhKXtoPW51bGw7XG5icmVhayBhfXZhciBuPTAsQT0tMSxwPS0xLEM9MCx4PTAsdz1nLHo9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB1Ozspe3chPT1ofHwwIT09ZiYmMyE9PXcubm9kZVR5cGV8fChBPW4rZik7dyE9PWt8fDAhPT1sJiYzIT09dy5ub2RlVHlwZXx8KHA9bitsKTszPT09dy5ub2RlVHlwZSYmKG4rPXcubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh1PXcuZmlyc3RDaGlsZCkpYnJlYWs7ej13O3c9dX1mb3IoOzspe2lmKHc9PT1nKWJyZWFrIGI7ej09PWgmJisrQz09PWYmJihBPW4pO3o9PT1rJiYrK3g9PT1sJiYocD1uKTtpZihudWxsIT09KHU9dy5uZXh0U2libGluZykpYnJlYWs7dz16O3o9dy5wYXJlbnROb2RlfXc9dX1oPS0xPT09QXx8LTE9PT1wP251bGw6e3N0YXJ0OkEsZW5kOnB9fWVsc2UgaD1udWxsO2g9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1udWxsO2xmPXtmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO0lqPW51bGw7Smo9ITE7Wj1kO2RvIHRyeXtlaygpfWNhdGNoKHZhKXtpZihudWxsPT09XG5aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO0lqPW51bGw7Wj1kO2RvIHRyeXtmb3IoZz1hO251bGwhPT1aOyl7dmFyIHQ9Wi5mbGFnczt0JjE2JiZwYihaLnN0YXRlTm9kZSxcIlwiKTtpZih0JjEyOCl7dmFyIHE9Wi5hbHRlcm5hdGU7aWYobnVsbCE9PXEpe3ZhciB2PXEucmVmO251bGwhPT12JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHY/dihudWxsKTp2LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaCh0JjEwMzgpe2Nhc2UgMjpmaihaKTtaLmZsYWdzJj0tMzticmVhaztjYXNlIDY6ZmooWik7Wi5mbGFncyY9LTM7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSAxMDI0OlouZmxhZ3MmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpaLmZsYWdzJj0tMTAyNTtpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDQ6aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA4Omg9WjtjaihnLGgpO3ZhciBKPWguYWx0ZXJuYXRlO2RqKGgpO251bGwhPT1cbkomJmRqKEopfVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7dj1sZjtxPU5lKCk7dD12LmZvY3VzZWRFbGVtO2c9di5zZWxlY3Rpb25SYW5nZTtpZihxIT09dCYmdCYmdC5vd25lckRvY3VtZW50JiZNZSh0Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHQpKXtudWxsIT09ZyYmT2UodCkmJihxPWcuc3RhcnQsdj1nLmVuZCx2b2lkIDA9PT12JiYodj1xKSxcInNlbGVjdGlvblN0YXJ0XCJpbiB0Pyh0LnNlbGVjdGlvblN0YXJ0PXEsdC5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odix0LnZhbHVlLmxlbmd0aCkpOih2PShxPXQub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZxLmRlZmF1bHRWaWV3fHx3aW5kb3csdi5nZXRTZWxlY3Rpb24mJih2PXYuZ2V0U2VsZWN0aW9uKCksaD10LnRleHRDb250ZW50Lmxlbmd0aCxKPU1hdGgubWluKGcuc3RhcnQsaCksZz12b2lkIDA9PT1cbmcuZW5kP0o6TWF0aC5taW4oZy5lbmQsaCksIXYuZXh0ZW5kJiZKPmcmJihoPWcsZz1KLEo9aCksaD1MZSh0LEopLGY9TGUodCxnKSxoJiZmJiYoMSE9PXYucmFuZ2VDb3VudHx8di5hbmNob3JOb2RlIT09aC5ub2RlfHx2LmFuY2hvck9mZnNldCE9PWgub2Zmc2V0fHx2LmZvY3VzTm9kZSE9PWYubm9kZXx8di5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSYmKHE9cS5jcmVhdGVSYW5nZSgpLHEuc2V0U3RhcnQoaC5ub2RlLGgub2Zmc2V0KSx2LnJlbW92ZUFsbFJhbmdlcygpLEo+Zz8odi5hZGRSYW5nZShxKSx2LmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKToocS5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSx2LmFkZFJhbmdlKHEpKSkpKSk7cT1bXTtmb3Iodj10O3Y9di5wYXJlbnROb2RlOykxPT09di5ub2RlVHlwZSYmcS5wdXNoKHtlbGVtZW50OnYsbGVmdDp2LnNjcm9sbExlZnQsdG9wOnYuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHQuZm9jdXMmJnQuZm9jdXMoKTtmb3IodD1cbjA7dDxxLmxlbmd0aDt0Kyspdj1xW3RdLHYuZWxlbWVudC5zY3JvbGxMZWZ0PXYubGVmdCx2LmVsZW1lbnQuc2Nyb2xsVG9wPXYudG9wfWZkPSEha2Y7bGY9a2Y9bnVsbDthLmN1cnJlbnQ9YztaPWQ7ZG8gdHJ5e2Zvcih0PWE7bnVsbCE9PVo7KXt2YXIgSz1aLmZsYWdzO0smMzYmJllpKHQsWi5hbHRlcm5hdGUsWik7aWYoSyYxMjgpe3E9dm9pZCAwO3ZhciBRPVoucmVmO2lmKG51bGwhPT1RKXt2YXIgTD1aLnN0YXRlTm9kZTtzd2l0Y2goWi50YWcpe2Nhc2UgNTpxPUw7YnJlYWs7ZGVmYXVsdDpxPUx9XCJmdW5jdGlvblwiPT09dHlwZW9mIFE/UShxKTpRLmN1cnJlbnQ9cX19Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtaPW51bGw7JGYoKTtYPWV9ZWxzZSBhLmN1cnJlbnQ9YztpZih4ail4aj0hMSx5aj1hLHpqPWI7ZWxzZSBmb3IoWj1kO251bGwhPT1aOyliPVxuWi5uZXh0RWZmZWN0LFoubmV4dEVmZmVjdD1udWxsLFouZmxhZ3MmOCYmKEs9WixLLnNpYmxpbmc9bnVsbCxLLnN0YXRlTm9kZT1udWxsKSxaPWI7ZD1hLnBlbmRpbmdMYW5lczswPT09ZCYmKFRpPW51bGwpOzE9PT1kP2E9PT1Faj9EaisrOihEaj0wLEVqPWEpOkRqPTA7Yz1jLnN0YXRlTm9kZTtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJSb290KXRyeXtNZi5vbkNvbW1pdEZpYmVyUm9vdChMZixjLHZvaWQgMCw2ND09PShjLmN1cnJlbnQuZmxhZ3MmNjQpKX1jYXRjaCh2YSl7fU1qKGEsTygpKTtpZihRaSl0aHJvdyBRaT0hMSxhPVJpLFJpPW51bGwsYTtpZigwIT09KFgmOCkpcmV0dXJuIG51bGw7aWcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGVrKCl7Zm9yKDtudWxsIT09Wjspe3ZhciBhPVouYWx0ZXJuYXRlO0pqfHxudWxsPT09SWp8fCgwIT09KFouZmxhZ3MmOCk/ZGMoWixJaikmJihKaj0hMCk6MTM9PT1aLnRhZyYmbWooYSxaKSYmZGMoWixJaikmJihKaj0hMCkpO3ZhciBiPVouZmxhZ3M7MCE9PShiJjI1NikmJlhpKGEsWik7MD09PShiJjUxMil8fHhqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpO1o9Wi5uZXh0RWZmZWN0fX1mdW5jdGlvbiBPaigpe2lmKDkwIT09emope3ZhciBhPTk3PHpqPzk3OnpqO3pqPTkwO3JldHVybiBnZyhhLGZrKX1yZXR1cm4hMX1mdW5jdGlvbiAkaShhLGIpe0FqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1mdW5jdGlvbiBaaShhLGIpe0JqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1cbmZ1bmN0aW9uIGZrKCl7aWYobnVsbD09PXlqKXJldHVybiExO3ZhciBhPXlqO3lqPW51bGw7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMzMSkpO3ZhciBiPVg7WHw9MzI7dmFyIGM9Qmo7Qmo9W107Zm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKz0yKXt2YXIgZT1jW2RdLGY9Y1tkKzFdLGc9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcpdHJ5e2coKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWM9QWo7QWo9W107Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrPTIpe2U9Y1tkXTtmPWNbZCsxXTt0cnl7dmFyIGg9ZS5jcmVhdGU7ZS5kZXN0cm95PWgoKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWZvcihoPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09aDspYT1oLm5leHRFZmZlY3QsaC5uZXh0RWZmZWN0PW51bGwsaC5mbGFncyY4JiYoaC5zaWJsaW5nPVxubnVsbCxoLnN0YXRlTm9kZT1udWxsKSxoPWE7WD1iO2lnKCk7cmV0dXJuITB9ZnVuY3Rpb24gZ2soYSxiLGMpe2I9TWkoYyxiKTtiPVBpKGEsYiwxKTtBZyhhLGIpO2I9SGcoKTthPUtqKGEsMSk7bnVsbCE9PWEmJigkYyhhLDEsYiksTWooYSxiKSl9XG5mdW5jdGlvbiBXaShhLGIpe2lmKDM9PT1hLnRhZylnayhhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe2drKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl7YT1NaShiLGEpO3ZhciBlPVNpKGMsYSwxKTtBZyhjLGUpO2U9SGcoKTtjPUtqKGMsMSk7aWYobnVsbCE9PWMpJGMoYywxLGUpLE1qKGMsZSk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpdHJ5e2QuY29tcG9uZW50RGlkQ2F0Y2goYixhKX1jYXRjaChmKXt9YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gWWooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUhnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1U9PT1hJiYoVyZjKT09PWMmJig0PT09Vnx8Mz09PVYmJihXJjYyOTE0NTYwKT09PVcmJjUwMD5PKCktamo/UWooYSwwKTp1anw9Yyk7TWooYSxiKX1mdW5jdGlvbiBsaihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPWEubW9kZSwwPT09KGImMik/Yj0xOjA9PT0oYiY0KT9iPTk5PT09ZWcoKT8xOjI6KDA9PT1HaiYmKEdqPXRqKSxiPVljKDYyOTE0NTYwJn5HaiksMD09PWImJihiPTQxOTQzMDQpKSk7Yz1IZygpO2E9S2ooYSxiKTtudWxsIT09YSYmKCRjKGEsYixjKSxNaihhLGMpKX12YXIgY2s7XG5jaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5sYW5lcztpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8Ti5jdXJyZW50KXVnPSEwO2Vsc2UgaWYoMCE9PShjJmQpKXVnPTAhPT0oYS5mbGFncyYxNjM4NCk/ITA6ITE7ZWxzZXt1Zz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpyaShiKTtzaCgpO2JyZWFrO2Nhc2UgNTpnaChiKTticmVhaztjYXNlIDE6RmYoYi50eXBlKSYmSmYoYik7YnJlYWs7Y2FzZSA0OmVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTt2YXIgZT1iLnR5cGUuX2NvbnRleHQ7SShtZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHRpKGEsYixjKTtJKFAsUC5jdXJyZW50JjEpO2I9aGkoYSxiLGMpO3JldHVybiBudWxsIT09XG5iP2Iuc2libGluZzpudWxsfUkoUCxQLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZiLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyY2NCkpe2lmKGQpcmV0dXJuIEFpKGEsYixjKTtiLmZsYWdzfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0koUCxQLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIGIubGFuZXM9MCxtaShhLGIsYyl9cmV0dXJuIGhpKGEsYixjKX1lbHNlIHVnPSExO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9RWYoYixNLmN1cnJlbnQpO3RnKGIsYyk7ZT1DaChudWxsLGIsZCxhLGUsYyk7Yi5mbGFnc3w9MTtpZihcIm9iamVjdFwiPT09XG50eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoRmYoZCkpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3hnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZHZyhiLGQsZyxhKTtlLnVwZGF0ZXI9S2c7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFscz1iO09nKGIsZCxhLGMpO2I9cWkobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsZmkobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO2E6e251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO1xuYT1iLnBlbmRpbmdQcm9wcztmPWUuX2luaXQ7ZT1mKGUuX3BheWxvYWQpO2IudHlwZT1lO2Y9Yi50YWc9aGsoZSk7YT1sZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1saShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9cGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1naShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWlpKG51bGwsYixlLGxnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxsaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxwaShhLGIsZCxlLGMpO2Nhc2UgMzpyaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHkoMjgyKSk7XG5kPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7eWcoYSxiKTtDZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKXNoKCksYj1oaShhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGY9ZS5oeWRyYXRlKWtoPXJmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksamg9YixmPWxoPSEwO2lmKGYpe2E9ZS5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhO2lmKG51bGwhPWEpZm9yKGU9MDtlPGEubGVuZ3RoO2UrPTIpZj1hW2VdLGYuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9YVtlKzFdLHRoLnB1c2goZik7Yz1aZyhiLG51bGwsZCxjKTtmb3IoYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3wxMDI0LGM9Yy5zaWJsaW5nfWVsc2UgZmkoYSxiLGQsYyksc2goKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBnaChiKSxudWxsPT09YSYmXG5waChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLG5mKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZuZihkLGYpJiYoYi5mbGFnc3w9MTYpLG9pKGEsYiksZmkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZwaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHRpKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVlnKGIsbnVsbCxkLGMpOmZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxnaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0kobWcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj1IZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTi5jdXJyZW50KXtiPWhpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPVxuay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXpnKC0xLGMmLWMpLGwudGFnPTIsQWcoaCxsKSk7aC5sYW5lc3w9YztsPWguYWx0ZXJuYXRlO251bGwhPT1sJiYobC5sYW5lc3w9Yyk7c2coaC5yZXR1cm4sYyk7ay5sYW5lc3w9YzticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfWZpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHRnKGIsYyksZT12ZyhlLFxuZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmZsYWdzfD0xLGZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1sZyhlLGIucGVuZGluZ1Byb3BzKSxmPWxnKGUudHlwZSxmKSxpaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4ga2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksYi50YWc9MSxGZihkKT8oYT0hMCxKZihiKSk6YT0hMSx0ZyhiLGMpLE1nKGIsZCxlKSxPZyhiLGQsZSxjKSxxaShudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIEFpKGEsYixjKTtjYXNlIDIzOnJldHVybiBtaShhLGIsYyk7Y2FzZSAyNDpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7XG59O2Z1bmN0aW9uIGlrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5mbGFncz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBuaChhLGIsYyxkKXtyZXR1cm4gbmV3IGlrKGEsYixjLGQpfWZ1bmN0aW9uIGppKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiBoayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gamkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PUFhKXJldHVybiAxMTtpZihhPT09RGEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gVGcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1uaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBWZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpamkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuIFhnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgSGE6Zz04O2V8PTE2O2JyZWFrO2Nhc2Ugd2E6Zz04O2V8PTE7YnJlYWs7Y2FzZSB4YTpyZXR1cm4gYT1uaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPXhhLGEudHlwZT14YSxhLmxhbmVzPWYsYTtjYXNlIEJhOnJldHVybiBhPW5oKDEzLGMsYixlKSxhLnR5cGU9QmEsYS5lbGVtZW50VHlwZT1CYSxhLmxhbmVzPWYsYTtjYXNlIENhOnJldHVybiBhPW5oKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUNhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHZpKGMsZSxmLGIpO2Nhc2UgSmE6cmV0dXJuIGE9bmgoMjQsYyxiLGUpLGEuZWxlbWVudFR5cGU9SmEsYS5sYW5lcz1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09XG50eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgeWE6Zz0xMDticmVhayBhO2Nhc2UgemE6Zz05O2JyZWFrIGE7Y2FzZSBBYTpnPTExO2JyZWFrIGE7Y2FzZSBEYTpnPTE0O2JyZWFrIGE7Y2FzZSBFYTpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgRmE6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHkoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9bmgoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBYZyhhLGIsYyxkKXthPW5oKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiB2aShhLGIsYyxkKXthPW5oKDIzLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBVZyhhLGIsYyl7YT1uaCg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBXZyhhLGIsYyl7Yj1uaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGprKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPVpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPVpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPVpjKDApO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1udWxsfVxuZnVuY3Rpb24ga2soYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp0YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGxrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUhnKCksZz1JZyhlKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbHM7Yjp7aWYoWmIoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihGZihoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHkoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEZmKGspKXtjPUlmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUNmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9emcoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09XG5kJiYoYi5jYWxsYmFjaz1kKTtBZyhlLGIpO0pnKGUsZyxmKTtyZXR1cm4gZ31mdW5jdGlvbiBtayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIG5rKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBvayhhLGIpe25rKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZuayhhLGIpfWZ1bmN0aW9uIHBrKCl7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBxayhhLGIsYyl7dmFyIGQ9bnVsbCE9YyYmbnVsbCE9Yy5oeWRyYXRpb25PcHRpb25zJiZjLmh5ZHJhdGlvbk9wdGlvbnMubXV0YWJsZVNvdXJjZXN8fG51bGw7Yz1uZXcgamsoYSxiLG51bGwhPWMmJiEwPT09Yy5oeWRyYXRlKTtiPW5oKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtjLmN1cnJlbnQ9YjtiLnN0YXRlTm9kZT1jO3hnKGIpO2FbZmZdPWMuY3VycmVudDtjZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKXtiPWRbYV07dmFyIGU9Yi5fZ2V0VmVyc2lvbjtlPWUoYi5fc291cmNlKTtudWxsPT1jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtiLGVdOmMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGIsZSl9dGhpcy5faW50ZXJuYWxSb290PWN9XG5xay5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2xrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O3FrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2xrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltmZl09bnVsbH0pfTtmdW5jdGlvbiByayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiBzayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHFrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gdGsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtoLmNhbGwoYSl9fWxrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9c2soYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7ay5jYWxsKGEpfX1YaihmdW5jdGlvbigpe2xrKGIsZyxhLGUpfSl9cmV0dXJuIG1rKGcpfWVjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw0LGIpO29rKGEsNCl9fTtmYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNjcxMDg4NjQsYik7b2soYSw2NzEwODg2NCl9fTtcbmdjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCksYz1JZyhhKTtKZyhhLGMsYik7b2soYSxjKX19O2hjPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIoKX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmFiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcih5KDkwKSk7V2EoZCk7YWIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVdqO1xuSGI9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1YO1h8PTQ7dHJ5e3JldHVybiBnZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtYPWYsMD09PVgmJih3aigpLGlnKCkpfX07SWI9ZnVuY3Rpb24oKXswPT09KFgmNDkpJiYoVmooKSxPaigpKX07SmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO1h8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19O2Z1bmN0aW9uIHVrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIGtrKGEsYixudWxsLGMpfXZhciB2az17RXZlbnRzOltDYix1ZSxEYixFYixGYixPaix7Y3VycmVudDohMX1dfSx3az17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNy4wLjJcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHhrPXtidW5kbGVUeXBlOndrLmJ1bmRsZVR5cGUsdmVyc2lvbjp3ay52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6d2sucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp3ay5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpyYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9Y2MoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndrLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbnBrLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgeWs9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF5ay5pc0Rpc2FibGVkJiZ5ay5zdXBwb3J0c0ZpYmVyKXRyeXtMZj15ay5pbmplY3QoeGspLE1mPXlrfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD12aztleHBvcnRzLmNyZWF0ZVBvcnRhbD11aztcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IoeSgxODgpKTt0aHJvdyBFcnJvcih5KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWNjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO2lmKDAhPT0oYyY0OCkpcmV0dXJuIGEoYik7WHw9MTt0cnl7aWYoYSlyZXR1cm4gZ2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7WD1jLGlnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIXJrKGEpKXRocm93IEVycm9yKHkoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhYaihmdW5jdGlvbigpe3RrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtmZl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVdqO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHVrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighcmsoYykpdGhyb3cgRXJyb3IoeSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcih5KDM4KSk7cmV0dXJuIHRrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjJcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj02MDEwMyxwPTYwMTA2O2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7ZXhwb3J0cy5TdHJpY3RNb2RlPTYwMTA4O2V4cG9ydHMuUHJvZmlsZXI9NjAxMTQ7dmFyIHE9NjAxMDkscj02MDExMCx0PTYwMTEyO2V4cG9ydHMuU3VzcGVuc2U9NjAxMTM7dmFyIHU9NjAxMTUsdj02MDExNjtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciB3PVN5bWJvbC5mb3I7bj13KFwicmVhY3QuZWxlbWVudFwiKTtwPXcoXCJyZWFjdC5wb3J0YWxcIik7ZXhwb3J0cy5GcmFnbWVudD13KFwicmVhY3QuZnJhZ21lbnRcIik7ZXhwb3J0cy5TdHJpY3RNb2RlPXcoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtleHBvcnRzLlByb2ZpbGVyPXcoXCJyZWFjdC5wcm9maWxlclwiKTtxPXcoXCJyZWFjdC5wcm92aWRlclwiKTtyPXcoXCJyZWFjdC5jb250ZXh0XCIpO3Q9dyhcInJlYWN0LmZvcndhcmRfcmVmXCIpO2V4cG9ydHMuU3VzcGVuc2U9dyhcInJlYWN0LnN1c3BlbnNlXCIpO3U9dyhcInJlYWN0Lm1lbW9cIik7dj13KFwicmVhY3QubGF6eVwiKX12YXIgeD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiB5KGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT14JiZhW3hdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24geihhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBBPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxCPXt9O2Z1bmN0aW9uIEMoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX1DLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0MucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcih6KDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtDLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEQoKXt9RC5wcm90b3R5cGU9Qy5wcm90b3R5cGU7ZnVuY3Rpb24gRShhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfXZhciBGPUUucHJvdG90eXBlPW5ldyBEO0YuY29uc3RydWN0b3I9RTtsKEYsQy5wcm90b3R5cGUpO0YuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEc9e2N1cnJlbnQ6bnVsbH0sSD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEk9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEooYSxiLGMpe3ZhciBlLGQ9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSC5jYWxsKGIsZSkmJiFJLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWRbZV0mJihkW2VdPWdbZV0pO3JldHVybnskJHR5cGVvZjpuLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpkLF9vd25lcjpHLmN1cnJlbnR9fVxuZnVuY3Rpb24gSyhhLGIpe3JldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTChhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bn1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE09L1xcLysvZztmdW5jdGlvbiBOKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gTyhhLGIsYyxlLGQpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBuOmNhc2UgcDpoPSEwfX1pZihoKXJldHVybiBoPWEsZD1kKGgpLGE9XCJcIj09PWU/XCIuXCIrTihoLDApOmUsQXJyYXkuaXNBcnJheShkKT8oYz1cIlwiLG51bGwhPWEmJihjPWEucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSxPKGQsYixjLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9ZCYmKEwoZCkmJihkPUsoZCxjKyghZC5rZXl8fGgmJmgua2V5PT09ZC5rZXk/XCJcIjooXCJcIitkLmtleSkucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGQpKSwxO2g9MDtlPVwiXCI9PT1lP1wiLlwiOmUrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGc9XG4wO2c8YS5sZW5ndGg7ZysrKXtrPWFbZ107dmFyIGY9ZStOKGssZyk7aCs9TyhrLGIsYyxmLGQpfWVsc2UgaWYoZj15KGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1lK04oayxnKyspLGgrPU8oayxiLGMsZixkKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9XCJcIithLEVycm9yKHooMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO3JldHVybiBofWZ1bmN0aW9uIFAoYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W10sZD0wO08oYSxlLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGMsYSxkKyspfSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBRKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7YS5fc3RhdHVzPTA7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQ7dGhyb3cgYS5fcmVzdWx0O312YXIgUj17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBTKCl7dmFyIGE9Ui5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKHooMzIxKSk7cmV0dXJuIGF9dmFyIFQ9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6UixSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7dHJhbnNpdGlvbjowfSxSZWFjdEN1cnJlbnRPd25lcjpHLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07XG5leHBvcnRzLkNoaWxkcmVuPXttYXA6UCxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtQKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sYyl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UChhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFAoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTChhKSl0aHJvdyBFcnJvcih6KDE0MykpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9QztleHBvcnRzLlB1cmVDb21wb25lbnQ9RTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVQ7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoeigyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Ry5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilILmNhbGwoYixmKSYmIUkuaGFzT3duUHJvcGVydHkoZikmJihlW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO2Zvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6ayxwcm9wczplLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6cixfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnEsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PUo7ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPUouYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnQscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PUw7XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYsX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpRfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnUsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMlwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBkZWZpbmUoSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIGRlZmluZShHcCwgXCJjb25zdHJ1Y3RvclwiLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gIGRlZmluZShHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgXCJjb25zdHJ1Y3RvclwiLCBHZW5lcmF0b3JGdW5jdGlvbik7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKFxuICAgIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLFxuICAgIHRvU3RyaW5nVGFnU3ltYm9sLFxuICAgIFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICApO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIGRlZmluZShwcm90b3R5cGUsIG1ldGhvZCwgZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGRlZmluZShnZW5GdW4sIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgZGVmaW5lKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlLCBhc3luY0l0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIGRlZmluZShHcCwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICBkZWZpbmUoR3AsIFwidG9TdHJpbmdcIiwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIGluIG1vZGVybiBlbmdpbmVzXG4gIC8vIHdlIGNhbiBleHBsaWNpdGx5IGFjY2VzcyBnbG9iYWxUaGlzLiBJbiBvbGRlciBlbmdpbmVzIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gXCJvYmplY3RcIikge1xuICAgIGdsb2JhbFRoaXMucmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbiAgfSBlbHNlIHtcbiAgICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xuICB9XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMjAuMlxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsaztpZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgdD1udWxsLHU9bnVsbCx3PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXQpdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dCghMCxhKTt0PW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh3LDApLGI7fX07Zj1mdW5jdGlvbihhKXtudWxsIT09dD9zZXRUaW1lb3V0KGYsMCxhKToodD1hLHNldFRpbWVvdXQodywwKSl9O2c9ZnVuY3Rpb24oYSxiKXt1PXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh1KX07ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiExfTtrPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHg9d2luZG93LnNldFRpbWVvdXQseT13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIHo9XG53aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgeiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIil9dmFyIEE9ITEsQj1udWxsLEM9LTEsRD01LEU9MDtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PVxuRX07az1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6RD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEY9bmV3IE1lc3NhZ2VDaGFubmVsLEc9Ri5wb3J0MjtGLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe2lmKG51bGwhPT1CKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0U9YStEO3RyeXtCKCEwLGEpP0cucG9zdE1lc3NhZ2UobnVsbCk6KEE9ITEsQj1udWxsKX1jYXRjaChiKXt0aHJvdyBHLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEE9ITF9O2Y9ZnVuY3Rpb24oYSl7Qj1hO0F8fChBPSEwLEcucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7Qz1cbngoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3koQyk7Qz0tMX19ZnVuY3Rpb24gSChhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxJKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBKKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBLKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPkkobixjKSl2b2lkIDAhPT1yJiYwPkkocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPkkocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEkoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIEw9W10sTT1bXSxOPTEsTz1udWxsLFA9MyxRPSExLFI9ITEsUz0hMTtcbmZ1bmN0aW9uIFQoYSl7Zm9yKHZhciBiPUooTSk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylLKE0pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpSyhNKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEgoTCxiKTtlbHNlIGJyZWFrO2I9SihNKX19ZnVuY3Rpb24gVShhKXtTPSExO1QoYSk7aWYoIVIpaWYobnVsbCE9PUooTCkpUj0hMCxmKFYpO2Vsc2V7dmFyIGI9SihNKTtudWxsIT09YiYmZyhVLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFYoYSxiKXtSPSExO1MmJihTPSExLGgoKSk7UT0hMDt2YXIgYz1QO3RyeXtUKGIpO2ZvcihPPUooTCk7bnVsbCE9PU8mJighKE8uZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCkpOyl7dmFyIGQ9Ty5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7Ty5jYWxsYmFjaz1udWxsO1A9Ty5wcmlvcml0eUxldmVsO3ZhciBlPWQoTy5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP08uY2FsbGJhY2s9ZTpPPT09SihMKSYmSyhMKTtUKGIpfWVsc2UgSyhMKTtPPUooTCl9aWYobnVsbCE9PU8pdmFyIG09ITA7ZWxzZXt2YXIgbj1KKE0pO251bGwhPT1uJiZnKFUsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e089bnVsbCxQPWMsUT0hMX19dmFyIFc9aztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O1xuZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtSfHxRfHwoUj0hMCxmKFYpKX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBQfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEooTCl9O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChQKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1QfXZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7UD1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9VztleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVA7UD1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7UD1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOk4rKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLEgoTSxhKSxudWxsPT09SihMKSYmYT09PUooTSkmJihTP2goKTpTPSEwLGcoVSxjLWQpKSk6KGEuc29ydEluZGV4PWUsSChMLGEpLFJ8fFF8fChSPSEwLGYoVikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1QO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtQPWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59IiwiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCIuL3NldFByb3RvdHlwZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8sIGZyb20pIHtcbiAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCkgZnJvbSA9ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gKHRvICYmIHRvLnNwbGl0KCcvJykpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gKGZyb20gJiYgZnJvbS5zcGxpdCgnLycpKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuXG4gIGlmIChcbiAgICBtdXN0RW5kQWJzICYmXG4gICAgZnJvbVBhcnRzWzBdICE9PSAnJyAmJlxuICAgICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpXG4gIClcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7XG4iLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7XG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gICAgfVxuICAgIHZhciBwcm92aWRlZCA9IHR5cGVvZiBtZXNzYWdlID09PSAnZnVuY3Rpb24nID8gbWVzc2FnZSgpIDogbWVzc2FnZTtcbiAgICB2YXIgdmFsdWUgPSBwcm92aWRlZCA/IHByZWZpeCArIFwiOiBcIiArIHByb3ZpZGVkIDogcHJlZml4O1xuICAgIHRocm93IG5ldyBFcnJvcih2YWx1ZSk7XG59XG5cbmV4cG9ydCB7IGludmFyaWFudCBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocHJlZml4LnRvTG93ZXJDYXNlKCkpID09PSAwICYmICcvPyMnLmluZGV4T2YocGF0aC5jaGFyQXQocHJlZml4Lmxlbmd0aCkpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBfcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZikgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwkJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsJCQxKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgdmFyIGJhc2VUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgdmFyIGhyZWYgPSAnJztcblxuICAgIGlmIChiYXNlVGFnICYmIGJhc2VUYWcuZ2V0QXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIGhyZWYgPSBzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcblxudmFyIE1BWF9TSUdORURfMzFfQklUX0lOVCA9IDEwNzM3NDE4MjM7XG52YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHt9O1xuXG5mdW5jdGlvbiBnZXRVbmlxdWVJZCgpIHtcbiAgdmFyIGtleSA9ICdfX2dsb2JhbF91bmlxdWVfaWRfXyc7XG4gIHJldHVybiBjb21tb25qc0dsb2JhbFtrZXldID0gKGNvbW1vbmpzR2xvYmFsW2tleV0gfHwgMCkgKyAxO1xufVxuXG5mdW5jdGlvbiBvYmplY3RJcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRFbWl0dGVyKHZhbHVlKSB7XG4gIHZhciBoYW5kbGVycyA9IFtdO1xuICByZXR1cm4ge1xuICAgIG9uOiBmdW5jdGlvbiBvbihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgIH0sXG4gICAgb2ZmOiBmdW5jdGlvbiBvZmYoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMgPSBoYW5kbGVycy5maWx0ZXIoZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgcmV0dXJuIGggIT09IGhhbmRsZXI7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICB2YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gaGFuZGxlcih2YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBvbmx5Q2hpbGQoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pID8gY2hpbGRyZW5bMF0gOiBjaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVhY3RDb250ZXh0KGRlZmF1bHRWYWx1ZSwgY2FsY3VsYXRlQ2hhbmdlZEJpdHMpIHtcbiAgdmFyIF9Qcm92aWRlciRjaGlsZENvbnRleCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlO1xuXG4gIHZhciBjb250ZXh0UHJvcCA9ICdfX2NyZWF0ZS1yZWFjdC1jb250ZXh0LScgKyBnZXRVbmlxdWVJZCgpICsgJ19fJztcblxuICB2YXIgUHJvdmlkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHNMb29zZShQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcigpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX3RoaXMgPSBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzLmVtaXR0ZXIgPSBjcmVhdGVFdmVudEVtaXR0ZXIoX3RoaXMucHJvcHMudmFsdWUpO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBQcm92aWRlci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbY29udGV4dFByb3BdID0gdGhpcy5lbWl0dGVyLCBfcmVmO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSAhPT0gbmV4dFByb3BzLnZhbHVlKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMucHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IG5leHRQcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIGNoYW5nZWRCaXRzO1xuXG4gICAgICAgIGlmIChvYmplY3RJcyhvbGRWYWx1ZSwgbmV3VmFsdWUpKSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gdHlwZW9mIGNhbGN1bGF0ZUNoYW5nZWRCaXRzID09PSAnZnVuY3Rpb24nID8gY2FsY3VsYXRlQ2hhbmdlZEJpdHMob2xkVmFsdWUsIG5ld1ZhbHVlKSA6IE1BWF9TSUdORURfMzFfQklUX0lOVDtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB3YXJuaW5nKChjaGFuZ2VkQml0cyAmIE1BWF9TSUdORURfMzFfQklUX0lOVCkgPT09IGNoYW5nZWRCaXRzLCAnY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IEV4cGVjdGVkIHRoZSByZXR1cm4gdmFsdWUgdG8gYmUgYSAnICsgJzMxLWJpdCBpbnRlZ2VyLiBJbnN0ZWFkIHJlY2VpdmVkOiAnICsgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoYW5nZWRCaXRzIHw9IDA7XG5cbiAgICAgICAgICBpZiAoY2hhbmdlZEJpdHMgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5zZXQobmV4dFByb3BzLnZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgdmFyIENvbnN1bWVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50Mikge1xuICAgIF9pbmhlcml0c0xvb3NlKENvbnN1bWVyLCBfQ29tcG9uZW50Mik7XG5cbiAgICBmdW5jdGlvbiBDb25zdW1lcigpIHtcbiAgICAgIHZhciBfdGhpczI7XG5cbiAgICAgIF90aGlzMiA9IF9Db21wb25lbnQyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzMi5zdGF0ZSA9IHtcbiAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICB9O1xuXG4gICAgICBfdGhpczIub25VcGRhdGUgPSBmdW5jdGlvbiAobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBfdGhpczIub2JzZXJ2ZWRCaXRzIHwgMDtcblxuICAgICAgICBpZiAoKG9ic2VydmVkQml0cyAmIGNoYW5nZWRCaXRzKSAhPT0gMCkge1xuICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF90aGlzMjtcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvMiA9IENvbnN1bWVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gbmV4dFByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9uKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gdGhpcy5wcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vZmYodGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLmdldCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gb25seUNoaWxkKHRoaXMucHJvcHMuY2hpbGRyZW4pKHRoaXMuc3RhdGUudmFsdWUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ29uc3VtZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBDb25zdW1lci5jb250ZXh0VHlwZXMgPSAoX0NvbnN1bWVyJGNvbnRleHRUeXBlID0ge30sIF9Db25zdW1lciRjb250ZXh0VHlwZVtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LCBfQ29uc3VtZXIkY29udGV4dFR5cGUpO1xuICByZXR1cm4ge1xuICAgIFByb3ZpZGVyOiBQcm92aWRlcixcbiAgICBDb25zdW1lcjogQ29uc3VtZXJcbiAgfTtcbn1cblxudmFyIGluZGV4ID0gUmVhY3QuY3JlYXRlQ29udGV4dCB8fCBjcmVhdGVSZWFjdENvbnRleHQ7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIGNyZWF0ZVBhdGggfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgY3JlYXRlQ29udGV4dCBmcm9tICdtaW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tICdwYXRoLXRvLXJlZ2V4cCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcblxuLy8gVE9ETzogUmVwbGFjZSB3aXRoIFJlYWN0LmNyZWF0ZUNvbnRleHQgb25jZSB3ZSBjYW4gYXNzdW1lIFJlYWN0IDE2K1xuXG52YXIgY3JlYXRlTmFtZWRDb250ZXh0ID0gZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KG5hbWUpIHtcbiAgdmFyIGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG4gIGNvbnRleHQuZGlzcGxheU5hbWUgPSBuYW1lO1xuICByZXR1cm4gY29udGV4dDtcbn07XG5cbnZhciBoaXN0b3J5Q29udGV4dCA9IC8qI19fUFVSRV9fKi9jcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXItSGlzdG9yeVwiKTtcblxudmFyIGNvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlTmFtZWRDb250ZXh0KFwiUm91dGVyXCIpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgUm91dGVyLmNvbXB1dGVSb290TWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgdXJsOiBcIi9cIixcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gXCIvXCJcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIFJvdXRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmhpc3RvcnkubG9jYXRpb25cbiAgICB9OyAvLyBUaGlzIGlzIGEgYml0IG9mIGEgaGFjay4gV2UgaGF2ZSB0byBzdGFydCBsaXN0ZW5pbmcgZm9yIGxvY2F0aW9uXG4gICAgLy8gY2hhbmdlcyBoZXJlIGluIHRoZSBjb25zdHJ1Y3RvciBpbiBjYXNlIHRoZXJlIGFyZSBhbnkgPFJlZGlyZWN0PnNcbiAgICAvLyBvbiB0aGUgaW5pdGlhbCByZW5kZXIuIElmIHRoZXJlIGFyZSwgdGhleSB3aWxsIHJlcGxhY2UvcHVzaCB3aGVuXG4gICAgLy8gdGhleSBtb3VudCBhbmQgc2luY2UgY0RNIGZpcmVzIGluIGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLCB3ZSBtYXlcbiAgICAvLyBnZXQgYSBuZXcgbG9jYXRpb24gYmVmb3JlIHRoZSA8Um91dGVyPiBpcyBtb3VudGVkLlxuXG4gICAgX3RoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5zdGF0aWNDb250ZXh0KSB7XG4gICAgICBfdGhpcy51bmxpc3RlbiA9IHByb3BzLmhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICBpZiAoX3RoaXMuX2lzTW91bnRlZCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9wZW5kaW5nTG9jYXRpb24pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBsb2NhdGlvbjogdGhpcy5fcGVuZGluZ0xvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5saXN0ZW4pIHtcbiAgICAgIHRoaXMudW5saXN0ZW4oKTtcbiAgICAgIHRoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICBsb2NhdGlvbjogdGhpcy5zdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IFJvdXRlci5jb21wdXRlUm9vdE1hdGNoKHRoaXMuc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpLFxuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLnN0YXRpY0NvbnRleHRcbiAgICAgIH1cbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChoaXN0b3J5Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbCxcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLmhpc3RvcnlcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJldlByb3BzLmhpc3RvcnkgPT09IHRoaXMucHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWVtb3J5Um91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBNZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciBMaWZlY3ljbGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGlmZWN5Y2xlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaWZlY3ljbGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExpZmVjeWNsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VudCkgdGhpcy5wcm9wcy5vbk1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVwZGF0ZSkgdGhpcy5wcm9wcy5vblVwZGF0ZS5jYWxsKHRoaXMsIHRoaXMsIHByZXZQcm9wcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Vbm1vdW50KSB0aGlzLnByb3BzLm9uVW5tb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIExpZmVjeWNsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXkgZnJvbSBhIHNjcmVlbi5cbiAqL1xuXG5mdW5jdGlvbiBQcm9tcHQoX3JlZikge1xuICB2YXIgbWVzc2FnZSA9IF9yZWYubWVzc2FnZSxcbiAgICAgIF9yZWYkd2hlbiA9IF9yZWYud2hlbixcbiAgICAgIHdoZW4gPSBfcmVmJHdoZW4gPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJHdoZW47XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGlmICghd2hlbiB8fCBjb250ZXh0LnN0YXRpY0NvbnRleHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtZXRob2QgPSBjb250ZXh0Lmhpc3RvcnkuYmxvY2s7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIGlmIChwcmV2UHJvcHMubWVzc2FnZSAhPT0gbWVzc2FnZSkge1xuICAgICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uVW5tb3VudDogZnVuY3Rpb24gb25Vbm1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICB9LFxuICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgbWVzc2FnZVR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pO1xuICBQcm9tcHQucHJvcFR5cGVzID0ge1xuICAgIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICAgIG1lc3NhZ2U6IG1lc3NhZ2VUeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoKSB7XG4gIGlmIChjYWNoZVtwYXRoXSkgcmV0dXJuIGNhY2hlW3BhdGhdO1xuICB2YXIgZ2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0aCk7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0aF0gPSBnZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGdlbmVyYXRvcjtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0aCBhbmQgcGFyYW1ldGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChwYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhdGggPSBcIi9cIjtcbiAgfVxuXG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHBhdGggPT09IFwiL1wiID8gcGF0aCA6IGNvbXBpbGVQYXRoKHBhdGgpKHBhcmFtcywge1xuICAgIHByZXR0eTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbmF2aWdhdGluZyBwcm9ncmFtbWF0aWNhbGx5IHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmVkaXJlY3QoX3JlZikge1xuICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIF9yZWYkcHVzaCA9IF9yZWYucHVzaCxcbiAgICAgIHB1c2ggPSBfcmVmJHB1c2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRwdXNoO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dC5oaXN0b3J5LFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gY29udGV4dC5zdGF0aWNDb250ZXh0O1xuICAgIHZhciBtZXRob2QgPSBwdXNoID8gaGlzdG9yeS5wdXNoIDogaGlzdG9yeS5yZXBsYWNlO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGNvbXB1dGVkTWF0Y2ggPyB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBnZW5lcmF0ZVBhdGgodG8sIGNvbXB1dGVkTWF0Y2gucGFyYW1zKSA6IF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgfSkgOiB0byk7IC8vIFdoZW4gcmVuZGVyaW5nIGluIGEgc3RhdGljIGNvbnRleHQsXG4gICAgLy8gc2V0IHRoZSBuZXcgbG9jYXRpb24gaW1tZWRpYXRlbHkuXG5cbiAgICBpZiAoc3RhdGljQ29udGV4dCkge1xuICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoKSB7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICB2YXIgcHJldkxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcblxuICAgICAgICBpZiAoIWxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgICAgICAga2V5OiBwcmV2TG9jYXRpb24ua2V5XG4gICAgICAgIH0pKSkge1xuICAgICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0bzogdG9cbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICAgIHB1c2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGZyb206IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSQxID0ge307XG52YXIgY2FjaGVMaW1pdCQxID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCQxID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgkMShwYXRoLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBwYXRoQ2FjaGUgPSBjYWNoZSQxW2NhY2hlS2V5XSB8fCAoY2FjaGUkMVtjYWNoZUtleV0gPSB7fSk7XG4gIGlmIChwYXRoQ2FjaGVbcGF0aF0pIHJldHVybiBwYXRoQ2FjaGVbcGF0aF07XG4gIHZhciBrZXlzID0gW107XG4gIHZhciByZWdleHAgPSBwYXRoVG9SZWdleHAocGF0aCwga2V5cywgb3B0aW9ucyk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgcmVnZXhwOiByZWdleHAsXG4gICAga2V5czoga2V5c1xuICB9O1xuXG4gIGlmIChjYWNoZUNvdW50JDEgPCBjYWNoZUxpbWl0JDEpIHtcbiAgICBwYXRoQ2FjaGVbcGF0aF0gPSByZXN1bHQ7XG4gICAgY2FjaGVDb3VudCQxKys7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGguXG4gKi9cblxuXG5mdW5jdGlvbiBtYXRjaFBhdGgocGF0aG5hbWUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHBhdGg6IG9wdGlvbnNcbiAgICB9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhzID0gW10uY29uY2F0KHBhdGgpO1xuICByZXR1cm4gcGF0aHMucmVkdWNlKGZ1bmN0aW9uIChtYXRjaGVkLCBwYXRoKSB7XG4gICAgaWYgKCFwYXRoICYmIHBhdGggIT09IFwiXCIpIHJldHVybiBudWxsO1xuICAgIGlmIChtYXRjaGVkKSByZXR1cm4gbWF0Y2hlZDtcblxuICAgIHZhciBfY29tcGlsZVBhdGggPSBjb21waWxlUGF0aCQxKHBhdGgsIHtcbiAgICAgIGVuZDogZXhhY3QsXG4gICAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlXG4gICAgfSksXG4gICAgICAgIHJlZ2V4cCA9IF9jb21waWxlUGF0aC5yZWdleHAsXG4gICAgICAgIGtleXMgPSBfY29tcGlsZVBhdGgua2V5cztcblxuICAgIHZhciBtYXRjaCA9IHJlZ2V4cC5leGVjKHBhdGhuYW1lKTtcbiAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdXJsID0gbWF0Y2hbMF0sXG4gICAgICAgIHZhbHVlcyA9IG1hdGNoLnNsaWNlKDEpO1xuICAgIHZhciBpc0V4YWN0ID0gcGF0aG5hbWUgPT09IHVybDtcbiAgICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBwYXRoLFxuICAgICAgLy8gdGhlIHBhdGggdXNlZCB0byBtYXRjaFxuICAgICAgdXJsOiBwYXRoID09PSBcIi9cIiAmJiB1cmwgPT09IFwiXCIgPyBcIi9cIiA6IHVybCxcbiAgICAgIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgICAgaXNFeGFjdDogaXNFeGFjdCxcbiAgICAgIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxuICAgICAgcGFyYW1zOiBrZXlzLnJlZHVjZShmdW5jdGlvbiAobWVtbywga2V5LCBpbmRleCkge1xuICAgICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICAgIHJldHVybiBtZW1vO1xuICAgICAgfSwge30pXG4gICAgfTtcbiAgfSwgbnVsbCk7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufVxuXG5mdW5jdGlvbiBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBwYXRoKSB7XG4gIHZhciB2YWx1ZSA9IGNoaWxkcmVuKHByb3BzKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh2YWx1ZSAhPT0gdW5kZWZpbmVkLCBcIllvdSByZXR1cm5lZCBgdW5kZWZpbmVkYCBmcm9tIHRoZSBgY2hpbGRyZW5gIGZ1bmN0aW9uIG9mIFwiICsgKFwiPFJvdXRlXCIgKyAocGF0aCA/IFwiIHBhdGg9XFxcIlwiICsgcGF0aCArIFwiXFxcIlwiIDogXCJcIikgKyBcIj4sIGJ1dCB5b3UgXCIpICsgXCJzaG91bGQgaGF2ZSByZXR1cm5lZCBhIFJlYWN0IGVsZW1lbnQgb3IgYG51bGxgXCIpIDogdm9pZCAwO1xuICByZXR1cm4gdmFsdWUgfHwgbnVsbDtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG5cbnZhciBSb3V0ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkMSkge1xuICAgICAgIWNvbnRleHQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dCQxLmxvY2F0aW9uO1xuICAgICAgdmFyIG1hdGNoID0gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCA/IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG4gICAgICA6IF90aGlzLnByb3BzLnBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF90aGlzLnByb3BzKSA6IGNvbnRleHQkMS5tYXRjaDtcblxuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIGNvbnRleHQkMSwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBtYXRjaFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIHJlbmRlciA9IF90aGlzJHByb3BzLnJlbmRlcjsgLy8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbiAgICAgIC8vIGRlZmF1bHQsIHNvIHVzZSBudWxsIGlmIHRoYXQncyB0aGUgY2FzZS5cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvcHNcbiAgICAgIH0sIHByb3BzLm1hdGNoID8gY2hpbGRyZW4gPyB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIF90aGlzLnByb3BzLnBhdGgpIDogY2hpbGRyZW4ocHJvcHMpIDogY2hpbGRyZW4gOiBjb21wb25lbnQgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IHJlbmRlciA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IG51bGwpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KHByb3BzLCBwcm9wTmFtZSkge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCAnY29tcG9uZW50JyBzdXBwbGllZCB0byAnUm91dGUnOiB0aGUgcHJvcCBpcyBub3QgYSB2YWxpZCBSZWFjdCBjb21wb25lbnRcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGF0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyldKSxcbiAgICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbFxuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMuY29tcG9uZW50KSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPlwiLCBtZXRob2ROYW1lKSA6IGludmFyaWFudChmYWxzZSkgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG5cbnZhciBTdGF0aWNSb3V0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJSRVBMQUNFXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0YXRpY1JvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm5hdmlnYXRlVG8gPSBmdW5jdGlvbiBuYXZpZ2F0ZVRvKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzJGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wcyRjb250ZXh0O1xuICAgIGNvbnRleHQuYWN0aW9uID0gYWN0aW9uO1xuICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMyJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wczIkY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJGNvbnRleHQsXG4gICAgICAgIF90aGlzJHByb3BzMiRsb2NhdGlvbiA9IF90aGlzJHByb3BzMi5sb2NhdGlvbixcbiAgICAgICAgbG9jYXRpb24gPSBfdGhpcyRwcm9wczIkbG9jYXRpb24gPT09IHZvaWQgMCA/IFwiL1wiIDogX3RoaXMkcHJvcHMyJGxvY2F0aW9uLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBoaXN0b3J5OiBoaXN0b3J5LFxuICAgICAgc3RhdGljQ29udGV4dDogY29udGV4dFxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN3aXRjaC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFN3aXRjaD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgICB2YXIgZWxlbWVudCwgbWF0Y2g7IC8vIFdlIHVzZSBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoIGluc3RlYWQgb2YgUmVhY3QuQ2hpbGRyZW4udG9BcnJheSgpLmZpbmQoKVxuICAgICAgLy8gaGVyZSBiZWNhdXNlIHRvQXJyYXkgYWRkcyBrZXlzIHRvIGFsbCBjaGlsZCBlbGVtZW50cyBhbmQgd2UgZG8gbm90IHdhbnRcbiAgICAgIC8vIHRvIHRyaWdnZXIgYW4gdW5tb3VudC9yZW1vdW50IGZvciB0d28gPFJvdXRlPnMgdGhhdCByZW5kZXIgdGhlIHNhbWVcbiAgICAgIC8vIGNvbXBvbmVudCBhdCBkaWZmZXJlbnQgVVJMcy5cblxuICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChfdGhpcy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmIChtYXRjaCA9PSBudWxsICYmIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgdmFyIHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG4gICAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfZXh0ZW5kcyh7fSwgY2hpbGQucHJvcHMsIHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgICB9KSkgOiBjb250ZXh0Lm1hdGNoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtYXRjaCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGNvbXB1dGVkTWF0Y2g6IG1hdGNoXG4gICAgICB9KSA6IG51bGw7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTd2l0Y2gucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xuXG5mdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgZGlzcGxheU5hbWUgPSBcIndpdGhSb3V0ZXIoXCIgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArIFwiKVwiO1xuXG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wid3JhcHBlZENvbXBvbmVudFJlZlwiXSk7XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8XCIgKyBkaXNwbGF5TmFtZSArIFwiIC8+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIGNvbnRleHQsIHtcbiAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEMucHJvcFR5cGVzID0ge1xuICAgICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59XG5cbnZhciB1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dDtcbmZ1bmN0aW9uIHVzZUhpc3RvcnkoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoaGlzdG9yeUNvbnRleHQpO1xufVxuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VMb2NhdGlvbigpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpLmxvY2F0aW9uO1xufVxuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUGFyYW1zKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2gucGFyYW1zIDoge307XG59XG5mdW5jdGlvbiB1c2VSb3V0ZU1hdGNoKHBhdGgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVJvdXRlTWF0Y2goKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICB2YXIgbWF0Y2ggPSB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xuICByZXR1cm4gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgcGF0aCkgOiBtYXRjaDtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBnbG9iYWwgPSB3aW5kb3c7XG4gICAgdmFyIGtleSA9IFwiX19yZWFjdF9yb3V0ZXJfYnVpbGRfX1wiO1xuICAgIHZhciBidWlsZE5hbWVzID0ge1xuICAgICAgY2pzOiBcIkNvbW1vbkpTXCIsXG4gICAgICBlc206IFwiRVMgbW9kdWxlc1wiLFxuICAgICAgdW1kOiBcIlVNRFwiXG4gICAgfTtcblxuICAgIGlmIChnbG9iYWxba2V5XSAmJiBnbG9iYWxba2V5XSAhPT0gXCJlc21cIikge1xuICAgICAgdmFyIGluaXRpYWxCdWlsZE5hbWUgPSBidWlsZE5hbWVzW2dsb2JhbFtrZXldXTtcbiAgICAgIHZhciBzZWNvbmRhcnlCdWlsZE5hbWUgPSBidWlsZE5hbWVzW1wiZXNtXCJdOyAvLyBUT0RPOiBBZGQgbGluayB0byBhcnRpY2xlIHRoYXQgZXhwbGFpbnMgaW4gZGV0YWlsIGhvdyB0byBhdm9pZFxuICAgICAgLy8gbG9hZGluZyAyIGRpZmZlcmVudCBidWlsZHMuXG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBhcmUgbG9hZGluZyB0aGUgXCIgKyBzZWNvbmRhcnlCdWlsZE5hbWUgKyBcIiBidWlsZCBvZiBSZWFjdCBSb3V0ZXIgXCIgKyAoXCJvbiBhIHBhZ2UgdGhhdCBpcyBhbHJlYWR5IHJ1bm5pbmcgdGhlIFwiICsgaW5pdGlhbEJ1aWxkTmFtZSArIFwiIFwiKSArIFwiYnVpbGQsIHNvIHRoaW5ncyB3b24ndCB3b3JrIHJpZ2h0LlwiKTtcbiAgICB9XG5cbiAgICBnbG9iYWxba2V5XSA9IFwiZXNtXCI7XG4gIH1cbn1cblxuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBQcm9tcHQsIFJlZGlyZWN0LCBSb3V0ZSwgUm91dGVyLCBTdGF0aWNSb3V0ZXIsIFN3aXRjaCwgaGlzdG9yeUNvbnRleHQgYXMgX19IaXN0b3J5Q29udGV4dCwgY29udGV4dCBhcyBfX1JvdXRlckNvbnRleHQsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXIuanMubWFwXG4iLCJpbXBvcnQgeyBSb3V0ZXIsIF9fUm91dGVyQ29udGV4dCwgbWF0Y2hQYXRoIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBjcmVhdGVQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJvd3NlclJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBCcm93c2VyUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBmb3JjZVJlZnJlc2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlclxuICB9O1xuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cblxudmFyIEhhc2hSb3V0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSGFzaFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGFzaFJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGFzaEhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBIYXNoUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEhhc2hSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhc2hUeXBlOiBQcm9wVHlwZXMub25lT2YoW1wiaGFzaGJhbmdcIiwgXCJub3NsYXNoXCIsIFwic2xhc2hcIl0pXG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxIYXNoUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG52YXIgcmVzb2x2ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiByZXNvbHZlVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwiZnVuY3Rpb25cIiA/IHRvKGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG52YXIgbm9ybWFsaXplVG9Mb2NhdGlvbiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gY3JlYXRlTG9jYXRpb24odG8sIG51bGwsIG51bGwsIGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG5cbnZhciBmb3J3YXJkUmVmU2hpbSA9IGZ1bmN0aW9uIGZvcndhcmRSZWZTaGltKEMpIHtcbiAgcmV0dXJuIEM7XG59O1xuXG52YXIgZm9yd2FyZFJlZiA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmID0gZm9yd2FyZFJlZlNoaW07XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbnZhciBMaW5rQW5jaG9yID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICBuYXZpZ2F0ZSA9IF9yZWYubmF2aWdhdGUsXG4gICAgICBfb25DbGljayA9IF9yZWYub25DbGljayxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJpbm5lclJlZlwiLCBcIm5hdmlnYXRlXCIsIFwib25DbGlja1wiXSk7XG5cbiAgdmFyIHRhcmdldCA9IHJlc3QudGFyZ2V0O1xuXG4gIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9vbkNsaWNrKSBfb25DbGljayhldmVudCk7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aHJvdyBleDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAoIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICAgIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIG5hdmlnYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgfSBlbHNlIHtcbiAgICBwcm9wcy5yZWYgPSBpbm5lclJlZjtcbiAgfVxuICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvYW5jaG9yLWhhcy1jb250ZW50ICovXG5cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHByb3BzKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExpbmtBbmNob3IuZGlzcGxheU5hbWUgPSBcIkxpbmtBbmNob3JcIjtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cblxudmFyIExpbmsgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmMiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmMiRjb21wb25lbnQgPSBfcmVmMi5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnQgPSBfcmVmMiRjb21wb25lbnQgPT09IHZvaWQgMCA/IExpbmtBbmNob3IgOiBfcmVmMiRjb21wb25lbnQsXG4gICAgICByZXBsYWNlID0gX3JlZjIucmVwbGFjZSxcbiAgICAgIHRvID0gX3JlZjIudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYyLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJjb21wb25lbnRcIiwgXCJyZXBsYWNlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3Rvcnk7XG4gICAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbiksIGNvbnRleHQubG9jYXRpb24pO1xuICAgIHZhciBocmVmID0gbG9jYXRpb24gPyBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pIDogXCJcIjtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBocmVmLFxuICAgICAgbmF2aWdhdGU6IGZ1bmN0aW9uIG5hdmlnYXRlKCkge1xuICAgICAgICB2YXIgbG9jYXRpb24gPSByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbik7XG4gICAgICAgIHZhciBpc0R1cGxpY2F0ZU5hdmlnYXRpb24gPSBjcmVhdGVQYXRoKGNvbnRleHQubG9jYXRpb24pID09PSBjcmVhdGVQYXRoKG5vcm1hbGl6ZVRvTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG1ldGhvZCA9IHJlcGxhY2UgfHwgaXNEdXBsaWNhdGVOYXZpZ2F0aW9uID8gaGlzdG9yeS5yZXBsYWNlIDogaGlzdG9yeS5wdXNoO1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfVxuICAgIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciB0b1R5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pO1xuICB2YXIgcmVmVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5hbnlcbiAgfSldKTtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xuICBMaW5rLnByb3BUeXBlcyA9IHtcbiAgICBpbm5lclJlZjogcmVmVHlwZSxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IHRvVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBmb3J3YXJkUmVmU2hpbSQxID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmJDEgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYkMSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmJDEgPSBmb3J3YXJkUmVmU2hpbSQxO1xufVxuXG5mdW5jdGlvbiBqb2luQ2xhc3NuYW1lcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzbmFtZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgY2xhc3NuYW1lc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBjbGFzc25hbWVzLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgIHJldHVybiBpO1xuICB9KS5qb2luKFwiIFwiKTtcbn1cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cblxuXG52YXIgTmF2TGluayA9IGZvcndhcmRSZWYkMShmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmJGFyaWFDdXJyZW50ID0gX3JlZltcImFyaWEtY3VycmVudFwiXSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZiRhcmlhQ3VycmVudCA9PT0gdm9pZCAwID8gXCJwYWdlXCIgOiBfcmVmJGFyaWFDdXJyZW50LFxuICAgICAgX3JlZiRhY3RpdmVDbGFzc05hbWUgPSBfcmVmLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYkYWN0aXZlQ2xhc3NOYW1lID09PSB2b2lkIDAgPyBcImFjdGl2ZVwiIDogX3JlZiRhY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBjbGFzc05hbWVQcm9wID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBpc0FjdGl2ZVByb3AgPSBfcmVmLmlzQWN0aXZlLFxuICAgICAgbG9jYXRpb25Qcm9wID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIHNlbnNpdGl2ZSA9IF9yZWYuc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICBzdHlsZVByb3AgPSBfcmVmLnN0eWxlLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImFyaWEtY3VycmVudFwiLCBcImFjdGl2ZUNsYXNzTmFtZVwiLCBcImFjdGl2ZVN0eWxlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZXhhY3RcIiwgXCJpc0FjdGl2ZVwiLCBcImxvY2F0aW9uXCIsIFwic2Vuc2l0aXZlXCIsIFwic3RyaWN0XCIsIFwic3R5bGVcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TmF2TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgY3VycmVudExvY2F0aW9uID0gbG9jYXRpb25Qcm9wIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgdmFyIHRvTG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pLCBjdXJyZW50TG9jYXRpb24pO1xuICAgIHZhciBwYXRoID0gdG9Mb2NhdGlvbi5wYXRobmFtZTsgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcblxuICAgIHZhciBlc2NhcGVkUGF0aCA9IHBhdGggJiYgcGF0aC5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG4gICAgdmFyIG1hdGNoID0gZXNjYXBlZFBhdGggPyBtYXRjaFBhdGgoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCB7XG4gICAgICBwYXRoOiBlc2NhcGVkUGF0aCxcbiAgICAgIGV4YWN0OiBleGFjdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0OiBzdHJpY3RcbiAgICB9KSA6IG51bGw7XG4gICAgdmFyIGlzQWN0aXZlID0gISEoaXNBY3RpdmVQcm9wID8gaXNBY3RpdmVQcm9wKG1hdGNoLCBjdXJyZW50TG9jYXRpb24pIDogbWF0Y2gpO1xuICAgIHZhciBjbGFzc05hbWUgPSB0eXBlb2YgY2xhc3NOYW1lUHJvcCA9PT0gXCJmdW5jdGlvblwiID8gY2xhc3NOYW1lUHJvcChpc0FjdGl2ZSkgOiBjbGFzc05hbWVQcm9wO1xuICAgIHZhciBzdHlsZSA9IHR5cGVvZiBzdHlsZVByb3AgPT09IFwiZnVuY3Rpb25cIiA/IHN0eWxlUHJvcChpc0FjdGl2ZSkgOiBzdHlsZVByb3A7XG5cbiAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgIGNsYXNzTmFtZSA9IGpvaW5DbGFzc25hbWVzKGNsYXNzTmFtZSwgYWN0aXZlQ2xhc3NOYW1lKTtcbiAgICAgIHN0eWxlID0gX2V4dGVuZHMoe30sIHN0eWxlLCBhY3RpdmVTdHlsZSk7XG4gICAgfVxuXG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgXCJhcmlhLWN1cnJlbnRcIjogaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnQgfHwgbnVsbCxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdG86IHRvTG9jYXRpb25cbiAgICB9LCByZXN0KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICAgIGlmIChmb3J3YXJkUmVmU2hpbSQxICE9PSBmb3J3YXJkUmVmJDEpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbiAgdmFyIGFyaWFDdXJyZW50VHlwZSA9IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCIsIFwiZmFsc2VcIl0pO1xuICBOYXZMaW5rLnByb3BUeXBlcyA9IF9leHRlbmRzKHt9LCBMaW5rLnByb3BUeXBlcywge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50VHlwZSxcbiAgICBhY3RpdmVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuY10pLFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0FjdGl2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pXG4gIH0pO1xufVxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXItZG9tLmpzLm1hcFxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY29uc3QgQXBwID0gKCkgPT4ge1xuICByZXR1cm4gPGRpdj7stIjquLAg7IS47YyF7J6F64uI64ukLjwvZGl2Pjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFwcDtcbiIsImltcG9ydCAnY29yZS1qcy9zdGFibGUnO1xuaW1wb3J0ICdyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBCcm93c2VyUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuXG5pbXBvcnQgQXBwIGZyb20gJy4vbGF5b3V0cy9BcHAnO1xuXG5heGlvcy5kZWZhdWx0cy53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuYXhpb3MuZGVmYXVsdHMuYmFzZVVSTCA9XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgPyAnaHR0cHM6Ly9zbGVhY3Qubm9kZWJpcmQuY29tJyA6ICdodHRwOi8vbG9jYWxob3N0OjMwOTAnO1xuXG5yZW5kZXIoXG4gIDxCcm93c2VyUm91dGVyPlxuICAgIDxBcHAgLz5cbiAgPC9Ccm93c2VyUm91dGVyPixcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2FwcCcpLFxuKTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidXRpbHMiLCJzZXR0bGUiLCJjb29raWVzIiwiYnVpbGRVUkwiLCJidWlsZEZ1bGxQYXRoIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJjb25maWciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlcXVlc3REYXRhIiwiZGF0YSIsInJlcXVlc3RIZWFkZXJzIiwiaGVhZGVycyIsInJlc3BvbnNlVHlwZSIsImlzRm9ybURhdGEiLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiQXV0aG9yaXphdGlvbiIsImJ0b2EiLCJmdWxsUGF0aCIsImJhc2VVUkwiLCJ1cmwiLCJvbmxvYWRlbmQiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJvcGVuIiwibWV0aG9kIiwidG9VcHBlckNhc2UiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwidGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsImluZGV4T2YiLCJzZXRUaW1lb3V0Iiwib25hYm9ydCIsIm9uZXJyb3IiLCJvbnRpbWVvdXQiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwidHJhbnNpdGlvbmFsIiwiY2xhcmlmeVRpbWVvdXRFcnJvciIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwieHNyZkNvb2tpZU5hbWUiLCJyZWFkIiwidW5kZWZpbmVkIiwieHNyZkhlYWRlck5hbWUiLCJmb3JFYWNoIiwidmFsIiwia2V5IiwidG9Mb3dlckNhc2UiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiaXNVbmRlZmluZWQiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJhZGRFdmVudExpc3RlbmVyIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwicHJvbWlzZSIsInRoZW4iLCJjYW5jZWwiLCJhYm9ydCIsInNlbmQiLCJiaW5kIiwiQXhpb3MiLCJtZXJnZUNvbmZpZyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImNvbnRleHQiLCJpbnN0YW5jZSIsInByb3RvdHlwZSIsImV4dGVuZCIsImF4aW9zIiwiY3JlYXRlIiwiaW5zdGFuY2VDb25maWciLCJkZWZhdWx0cyIsIkNhbmNlbCIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsImlzQXhpb3NFcnJvciIsIm1lc3NhZ2UiLCJ0aGlzIiwidG9TdHJpbmciLCJfX0NBTkNFTF9fIiwiZXhlY3V0b3IiLCJUeXBlRXJyb3IiLCJyZXNvbHZlUHJvbWlzZSIsInRva2VuIiwicmVhc29uIiwidGhyb3dJZlJlcXVlc3RlZCIsInNvdXJjZSIsImMiLCJ2YWx1ZSIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsInZhbGlkYXRvciIsInZhbGlkYXRvcnMiLCJpbnRlcmNlcHRvcnMiLCJhcmd1bWVudHMiLCJhc3NlcnRPcHRpb25zIiwic2lsZW50SlNPTlBhcnNpbmciLCJib29sZWFuIiwiZm9yY2VkSlNPTlBhcnNpbmciLCJyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiIsInN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwicnVuV2hlbiIsInN5bmNocm9ub3VzIiwidW5zaGlmdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicmVzcG9uc2VJbnRlcmNlcHRvckNoYWluIiwicHVzaCIsImNoYWluIiwiQXJyYXkiLCJhcHBseSIsImNvbmNhdCIsImxlbmd0aCIsInNoaWZ0IiwibmV3Q29uZmlnIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiZXJyb3IiLCJnZXRVcmkiLCJyZXBsYWNlIiwiaGFuZGxlcnMiLCJ1c2UiLCJvcHRpb25zIiwiZWplY3QiLCJpZCIsImZuIiwiaCIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInJlcXVlc3RlZFVSTCIsImVuaGFuY2VFcnJvciIsImNvZGUiLCJFcnJvciIsInRyYW5zZm9ybURhdGEiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwiY2FsbCIsInRyYW5zZm9ybVJlcXVlc3QiLCJtZXJnZSIsImNvbW1vbiIsImFkYXB0ZXIiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInRvSlNPTiIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsIm51bWJlciIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsInN0YWNrIiwiY29uZmlnMSIsImNvbmZpZzIiLCJ2YWx1ZUZyb21Db25maWcyS2V5cyIsIm1lcmdlRGVlcFByb3BlcnRpZXNLZXlzIiwiZGVmYXVsdFRvQ29uZmlnMktleXMiLCJkaXJlY3RNZXJnZUtleXMiLCJnZXRNZXJnZWRWYWx1ZSIsInRhcmdldCIsImlzUGxhaW5PYmplY3QiLCJpc0FycmF5Iiwic2xpY2UiLCJtZXJnZURlZXBQcm9wZXJ0aWVzIiwicHJvcCIsImF4aW9zS2V5cyIsIm90aGVyS2V5cyIsIk9iamVjdCIsImtleXMiLCJmaWx0ZXIiLCJ2YWxpZGF0ZVN0YXR1cyIsImZucyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsInByb2Nlc3MiLCJpc0FycmF5QnVmZmVyIiwiaXNCdWZmZXIiLCJpc1N0cmVhbSIsImlzRmlsZSIsImlzQmxvYiIsImlzQXJyYXlCdWZmZXJWaWV3IiwiYnVmZmVyIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJpc09iamVjdCIsInJhd1ZhbHVlIiwicGFyc2VyIiwiZW5jb2RlciIsImlzU3RyaW5nIiwiSlNPTiIsInBhcnNlIiwidHJpbSIsImUiLCJzdHJpbmdpZnkiLCJzdHJpbmdpZnlTYWZlbHkiLCJzdHJpY3RKU09OUGFyc2luZyIsIm1heENvbnRlbnRMZW5ndGgiLCJtYXhCb2R5TGVuZ3RoIiwidGhpc0FyZyIsImFyZ3MiLCJpIiwiZW5jb2RlIiwic2VyaWFsaXplZFBhcmFtcyIsInBhcnRzIiwidiIsImlzRGF0ZSIsInRvSVNPU3RyaW5nIiwiam9pbiIsImhhc2htYXJrSW5kZXgiLCJyZWxhdGl2ZVVSTCIsIndyaXRlIiwiZXhwaXJlcyIsInBhdGgiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJpc051bWJlciIsIkRhdGUiLCJ0b0dNVFN0cmluZyIsImRvY3VtZW50IiwibWF0Y2giLCJSZWdFeHAiLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJub3ciLCJ0ZXN0IiwicGF5bG9hZCIsIm9yaWdpblVSTCIsIm1zaWUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsImNyZWF0ZUVsZW1lbnQiLCJyZXNvbHZlVVJMIiwiaHJlZiIsInNldEF0dHJpYnV0ZSIsInByb3RvY29sIiwiaG9zdCIsInNlYXJjaCIsImhhc2giLCJob3N0bmFtZSIsInBvcnQiLCJwYXRobmFtZSIsImNoYXJBdCIsIndpbmRvdyIsImxvY2F0aW9uIiwicmVxdWVzdFVSTCIsInBhcnNlZCIsIm5vcm1hbGl6ZWROYW1lIiwiaWdub3JlRHVwbGljYXRlT2YiLCJzcGxpdCIsImxpbmUiLCJzdWJzdHIiLCJjYWxsYmFjayIsImFyciIsInBrZyIsInR5cGUiLCJ0aGluZyIsImRlcHJlY2F0ZWRXYXJuaW5ncyIsImN1cnJlbnRWZXJBcnIiLCJ2ZXJzaW9uIiwiaXNPbGRlclZlcnNpb24iLCJ0aGFuVmVyc2lvbiIsInBrZ1ZlcnNpb25BcnIiLCJkZXN0VmVyIiwiaXNEZXByZWNhdGVkIiwiZm9ybWF0TWVzc2FnZSIsIm9wdCIsImRlc2MiLCJvcHRzIiwiY29uc29sZSIsIndhcm4iLCJzY2hlbWEiLCJhbGxvd1Vua25vd24iLCJyZXN1bHQiLCJnZXRQcm90b3R5cGVPZiIsImlzRnVuY3Rpb24iLCJvYmoiLCJsIiwiaGFzT3duUHJvcGVydHkiLCJjb25zdHJ1Y3RvciIsIkZvcm1EYXRhIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJwaXBlIiwiVVJMU2VhcmNoUGFyYW1zIiwicHJvZHVjdCIsImFzc2lnblZhbHVlIiwiYSIsImIiLCJzdHIiLCJzdHJpcEJPTSIsImNvbnRlbnQiLCJjaGFyQ29kZUF0IiwiZ2xvYmFsIiwiaXNDYWxsYWJsZSIsInRyeVRvU3RyaW5nIiwiYXJndW1lbnQiLCJpc0NvbnN0cnVjdG9yIiwiU3RyaW5nIiwid2VsbEtub3duU3ltYm9sIiwiZGVmaW5lUHJvcGVydHlNb2R1bGUiLCJVTlNDT1BBQkxFUyIsIkFycmF5UHJvdG90eXBlIiwiZiIsImNvbmZpZ3VyYWJsZSIsIlMiLCJpbmRleCIsInVuaWNvZGUiLCJpc1Byb3RvdHlwZU9mIiwiaXQiLCJQcm90b3R5cGUiLCJEYXRhVmlldyIsImZhaWxzIiwiaXNFeHRlbnNpYmxlIiwiZGVmaW5lUHJvcGVydHkiLCJOQU1FIiwiQ29uc3RydWN0b3IiLCJOQVRJVkVfQVJSQVlfQlVGRkVSIiwiREVTQ1JJUFRPUlMiLCJoYXNPd24iLCJjbGFzc29mIiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5IiwicmVkZWZpbmUiLCJzZXRQcm90b3R5cGVPZiIsInVpZCIsIkludDhBcnJheSIsIkludDhBcnJheVByb3RvdHlwZSIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUiLCJUeXBlZEFycmF5IiwiVHlwZWRBcnJheVByb3RvdHlwZSIsIk9iamVjdFByb3RvdHlwZSIsIlRPX1NUUklOR19UQUciLCJUWVBFRF9BUlJBWV9UQUciLCJUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUiIsIk5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MiLCJvcGVyYSIsIlRZUEVEX0FSUkFZX1RBR19SRVFVSVJFRCIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0IiwiVWludDhBcnJheSIsIkludDE2QXJyYXkiLCJVaW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJVaW50MzJBcnJheSIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsIkJpZ0ludEFycmF5Q29uc3RydWN0b3JzTGlzdCIsIkJpZ0ludDY0QXJyYXkiLCJCaWdVaW50NjRBcnJheSIsImlzVHlwZWRBcnJheSIsImtsYXNzIiwiRnVuY3Rpb24iLCJnZXQiLCJhVHlwZWRBcnJheSIsImFUeXBlZEFycmF5Q29uc3RydWN0b3IiLCJDIiwiZXhwb3J0VHlwZWRBcnJheU1ldGhvZCIsIktFWSIsInByb3BlcnR5IiwiZm9yY2VkIiwiQVJSQVkiLCJUeXBlZEFycmF5Q29uc3RydWN0b3IiLCJlcnJvcjIiLCJleHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kIiwidW5jdXJyeVRoaXMiLCJGdW5jdGlvbk5hbWUiLCJyZWRlZmluZUFsbCIsImFuSW5zdGFuY2UiLCJ0b0ludGVnZXJPckluZmluaXR5IiwidG9MZW5ndGgiLCJ0b0luZGV4IiwiSUVFRTc1NCIsImdldE93blByb3BlcnR5TmFtZXMiLCJhcnJheUZpbGwiLCJhcnJheVNsaWNlIiwic2V0VG9TdHJpbmdUYWciLCJJbnRlcm5hbFN0YXRlTW9kdWxlIiwiUFJPUEVSX0ZVTkNUSU9OX05BTUUiLCJQUk9QRVIiLCJDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSIsIkNPTkZJR1VSQUJMRSIsImdldEludGVybmFsU3RhdGUiLCJzZXRJbnRlcm5hbFN0YXRlIiwic2V0IiwiQVJSQVlfQlVGRkVSIiwiV1JPTkdfSU5ERVgiLCJOYXRpdmVBcnJheUJ1ZmZlciIsIiRBcnJheUJ1ZmZlciIsIkFycmF5QnVmZmVyUHJvdG90eXBlIiwiJERhdGFWaWV3IiwiRGF0YVZpZXdQcm90b3R5cGUiLCJSYW5nZUVycm9yIiwiZmlsbCIsInJldmVyc2UiLCJwYWNrSUVFRTc1NCIsInBhY2siLCJ1bnBhY2tJRUVFNzU0IiwidW5wYWNrIiwicGFja0ludDgiLCJwYWNrSW50MTYiLCJwYWNrSW50MzIiLCJ1bnBhY2tJbnQzMiIsInBhY2tGbG9hdDMyIiwicGFja0Zsb2F0NjQiLCJhZGRHZXR0ZXIiLCJ2aWV3IiwiY291bnQiLCJpc0xpdHRsZUVuZGlhbiIsImludEluZGV4Iiwic3RvcmUiLCJieXRlTGVuZ3RoIiwiYnl0ZXMiLCJzdGFydCIsImJ5dGVPZmZzZXQiLCJjb252ZXJzaW9uIiwiSU5DT1JSRUNUX0FSUkFZX0JVRkZFUl9OQU1FIiwiTmFOIiwiaiIsInRlc3RWaWV3IiwiJHNldEludDgiLCJzZXRJbnQ4IiwiZ2V0SW50OCIsInNldFVpbnQ4IiwidW5zYWZlIiwiYnVmZmVyTGVuZ3RoIiwib2Zmc2V0IiwiZ2V0VWludDgiLCJnZXRJbnQxNiIsImdldFVpbnQxNiIsImdldEludDMyIiwiZ2V0VWludDMyIiwiZ2V0RmxvYXQzMiIsImdldEZsb2F0NjQiLCJzZXRJbnQxNiIsInNldFVpbnQxNiIsInNldEludDMyIiwic2V0VWludDMyIiwic2V0RmxvYXQzMiIsInNldEZsb2F0NjQiLCJ0b09iamVjdCIsInRvQWJzb2x1dGVJbmRleCIsImxlbmd0aE9mQXJyYXlMaWtlIiwibWluIiwiTWF0aCIsImNvcHlXaXRoaW4iLCJPIiwibGVuIiwidG8iLCJmcm9tIiwiZW5kIiwiaW5jIiwiYXJndW1lbnRzTGVuZ3RoIiwiZW5kUG9zIiwiJGZvckVhY2giLCJTVFJJQ1RfTUVUSE9EIiwiYXJyYXlNZXRob2RJc1N0cmljdCIsImNhbGxiYWNrZm4iLCJsaXN0IiwiY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyIsImlzQXJyYXlJdGVyYXRvck1ldGhvZCIsImNyZWF0ZVByb3BlcnR5IiwiZ2V0SXRlcmF0b3IiLCJnZXRJdGVyYXRvck1ldGhvZCIsImFycmF5TGlrZSIsIklTX0NPTlNUUlVDVE9SIiwibWFwZm4iLCJtYXBwaW5nIiwic3RlcCIsIml0ZXJhdG9yIiwibmV4dCIsIml0ZXJhdG9yTWV0aG9kIiwiZG9uZSIsInRvSW5kZXhlZE9iamVjdCIsImNyZWF0ZU1ldGhvZCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJlbCIsImZyb21JbmRleCIsImluY2x1ZGVzIiwiSW5kZXhlZE9iamVjdCIsImFycmF5U3BlY2llc0NyZWF0ZSIsIlRZUEUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiSVNfRklMVEVSX1JFSkVDVCIsIk5PX0hPTEVTIiwidGhhdCIsInNwZWNpZmljQ3JlYXRlIiwic2VsZiIsImJvdW5kRnVuY3Rpb24iLCJtYXAiLCJzb21lIiwiZXZlcnkiLCJmaW5kIiwiZmluZEluZGV4IiwiZmlsdGVyUmVqZWN0IiwiJGxhc3RJbmRleE9mIiwibGFzdEluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwiRk9SQ0VEIiwic2VhcmNoRWxlbWVudCIsIlY4X1ZFUlNJT04iLCJTUEVDSUVTIiwiTUVUSE9EX05BTUUiLCJhcnJheSIsImZvbyIsIkJvb2xlYW4iLCJhQ2FsbGFibGUiLCJJU19SSUdIVCIsIm1lbW8iLCJsZWZ0IiwicmlnaHQiLCJtYXgiLCJrIiwiZmluIiwibiIsImZsb29yIiwibWVyZ2VTb3J0IiwiY29tcGFyZWZuIiwibWlkZGxlIiwiaW5zZXJ0aW9uU29ydCIsImVsZW1lbnQiLCJsbGVuZ3RoIiwicmxlbmd0aCIsImxpbmRleCIsInJpbmRleCIsIm9yaWdpbmFsQXJyYXkiLCJhcnJheVNwZWNpZXNDb25zdHJ1Y3RvciIsImFuT2JqZWN0IiwiaXRlcmF0b3JDbG9zZSIsIkVOVFJJRVMiLCJJVEVSQVRPUiIsIlNBRkVfQ0xPU0lORyIsImNhbGxlZCIsIml0ZXJhdG9yV2l0aFJldHVybiIsImV4ZWMiLCJTS0lQX0NMT1NJTkciLCJJVEVSQVRJT05fU1VQUE9SVCIsIm9iamVjdCIsInN0cmluZ1NsaWNlIiwiVE9fU1RSSU5HX1RBR19TVVBQT1JUIiwiY2xhc3NvZlJhdyIsIkNPUlJFQ1RfQVJHVU1FTlRTIiwidGFnIiwidHJ5R2V0IiwiY2FsbGVlIiwiVEVTVCIsIlY4X09SX0NIQUtSQV9TVEFDS19FTlRSWSIsIklTX1Y4X09SX0NIQUtSQV9TVEFDSyIsImRyb3BFbnRyaWVzIiwiaXRlcmF0ZSIsImRlZmluZUl0ZXJhdG9yIiwic2V0U3BlY2llcyIsImZhc3RLZXkiLCJpbnRlcm5hbFN0YXRlR2V0dGVyRm9yIiwiZ2V0dGVyRm9yIiwiZ2V0Q29uc3RydWN0b3IiLCJ3cmFwcGVyIiwiQ09OU1RSVUNUT1JfTkFNRSIsIkFEREVSIiwiaXRlcmFibGUiLCJmaXJzdCIsImxhc3QiLCJzaXplIiwiQVNfRU5UUklFUyIsImRlZmluZSIsInByZXZpb3VzIiwic3RhdGUiLCJlbnRyeSIsImdldEVudHJ5IiwicmVtb3ZlZCIsImNsZWFyIiwicHJldiIsImhhcyIsImFkZCIsInNldFN0cm9uZyIsIklURVJBVE9SX05BTUUiLCJnZXRJbnRlcm5hbENvbGxlY3Rpb25TdGF0ZSIsImdldEludGVybmFsSXRlcmF0b3JTdGF0ZSIsIml0ZXJhdGVkIiwia2luZCIsImdldFdlYWtEYXRhIiwiQXJyYXlJdGVyYXRpb25Nb2R1bGUiLCJzcGxpY2UiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwiZnJvemVuIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImVudHJpZXMiLCJmaW5kVW5jYXVnaHRGcm96ZW4iLCIkIiwiaXNGb3JjZWQiLCJJbnRlcm5hbE1ldGFkYXRhTW9kdWxlIiwiY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJJU19XRUFLIiwiTmF0aXZlQ29uc3RydWN0b3IiLCJOYXRpdmVQcm90b3R5cGUiLCJleHBvcnRlZCIsImZpeE1ldGhvZCIsInVuY3VycmllZE5hdGl2ZU1ldGhvZCIsImVuYWJsZSIsIkhBU05UX0NIQUlOSU5HIiwiVEhST1dTX09OX1BSSU1JVElWRVMiLCJBQ0NFUFRfSVRFUkFCTEVTIiwiQlVHR1lfWkVSTyIsIiRpbnN0YW5jZSIsImR1bW15Iiwib3duS2V5cyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSIsImV4Y2VwdGlvbnMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJNQVRDSCIsInJlZ2V4cCIsImVycm9yMSIsIkYiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwicXVvdCIsInN0cmluZyIsImF0dHJpYnV0ZSIsInAxIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IiLCJJdGVyYXRvcnMiLCJyZXR1cm5UaGlzIiwiSXRlcmF0b3JDb25zdHJ1Y3RvciIsIkVOVU1FUkFCTEVfTkVYVCIsImJpdG1hcCIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsInRvUHJvcGVydHlLZXkiLCJwcm9wZXJ0eUtleSIsInBhZFN0YXJ0IiwiYWJzIiwiRGF0ZVByb3RvdHlwZSIsIm4kRGF0ZVRvSVNPU3RyaW5nIiwiZ2V0VGltZSIsImdldFVUQ0RhdGUiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDU2Vjb25kcyIsImlzRmluaXRlIiwiZGF0ZSIsInllYXIiLCJtaWxsaXNlY29uZHMiLCJzaWduIiwib3JkaW5hcnlUb1ByaW1pdGl2ZSIsImhpbnQiLCJJU19QVVJFIiwiY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciIsIkl0ZXJhdG9yc0NvcmUiLCJCVUdHWV9TQUZBUklfSVRFUkFUT1JTIiwiS0VZUyIsIlZBTFVFUyIsIkl0ZXJhYmxlIiwiREVGQVVMVCIsIklTX1NFVCIsIkN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSIsIm1ldGhvZHMiLCJnZXRJdGVyYXRpb25NZXRob2QiLCJLSU5EIiwiZGVmYXVsdEl0ZXJhdG9yIiwiSXRlcmFibGVQcm90b3R5cGUiLCJJTkNPUlJFQ1RfVkFMVUVTX05BTUUiLCJuYXRpdmVJdGVyYXRvciIsImFueU5hdGl2ZUl0ZXJhdG9yIiwidmFsdWVzIiwicHJvdG8iLCJ3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlIiwiU3ltYm9sIiwiRVhJU1RTIiwiSW5kZXhTaXplRXJyb3IiLCJzIiwibSIsIkRPTVN0cmluZ1NpemVFcnJvciIsIkhpZXJhcmNoeVJlcXVlc3RFcnJvciIsIldyb25nRG9jdW1lbnRFcnJvciIsIkludmFsaWRDaGFyYWN0ZXJFcnJvciIsIk5vRGF0YUFsbG93ZWRFcnJvciIsIk5vTW9kaWZpY2F0aW9uQWxsb3dlZEVycm9yIiwiTm90Rm91bmRFcnJvciIsIk5vdFN1cHBvcnRlZEVycm9yIiwiSW5Vc2VBdHRyaWJ1dGVFcnJvciIsIkludmFsaWRTdGF0ZUVycm9yIiwiU3ludGF4RXJyb3IiLCJJbnZhbGlkTW9kaWZpY2F0aW9uRXJyb3IiLCJOYW1lc3BhY2VFcnJvciIsIkludmFsaWRBY2Nlc3NFcnJvciIsIlZhbGlkYXRpb25FcnJvciIsIlR5cGVNaXNtYXRjaEVycm9yIiwiU2VjdXJpdHlFcnJvciIsIk5ldHdvcmtFcnJvciIsIkFib3J0RXJyb3IiLCJVUkxNaXNtYXRjaEVycm9yIiwiUXVvdGFFeGNlZWRlZEVycm9yIiwiVGltZW91dEVycm9yIiwiSW52YWxpZE5vZGVUeXBlRXJyb3IiLCJEYXRhQ2xvbmVFcnJvciIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiY2xhc3NMaXN0IiwiZG9jdW1lbnRDcmVhdGVFbGVtZW50IiwiRE9NVG9rZW5MaXN0UHJvdG90eXBlIiwiZmlyZWZveCIsIlVBIiwiUGViYmxlIiwiZ2V0QnVpbHRJbiIsIkRlbm8iLCJ2ZXJzaW9ucyIsInY4Iiwid2Via2l0Iiwibm9ybWFsaXplU3RyaW5nQXJndW1lbnQiLCJuYXRpdmVFcnJvclRvU3RyaW5nIiwiSU5DT1JSRUNUX1RPX1NUUklORyIsInNldEdsb2JhbCIsImNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMiLCJ0YXJnZXRQcm9wZXJ0eSIsInNvdXJjZVByb3BlcnR5IiwiZGVzY3JpcHRvciIsIlRBUkdFVCIsIkdMT0JBTCIsIlNUQVRJQyIsInN0YXQiLCJub1RhcmdldEdldCIsInNoYW0iLCJyZWdleHBFeGVjIiwiUmVnRXhwUHJvdG90eXBlIiwiU0hBTSIsIlNZTUJPTCIsIkRFTEVHQVRFU19UT19TWU1CT0wiLCJERUxFR0FURVNfVE9fRVhFQyIsImV4ZWNDYWxsZWQiLCJyZSIsImZsYWdzIiwidW5jdXJyaWVkTmF0aXZlUmVnRXhwTWV0aG9kIiwibmF0aXZlTWV0aG9kIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwiJGV4ZWMiLCJmbGF0dGVuSW50b0FycmF5Iiwib3JpZ2luYWwiLCJzb3VyY2VMZW4iLCJkZXB0aCIsIm1hcHBlciIsImVsZW1lbnRMZW4iLCJ0YXJnZXRJbmRleCIsInNvdXJjZUluZGV4IiwibWFwRm4iLCJwcmV2ZW50RXh0ZW5zaW9ucyIsIkZ1bmN0aW9uUHJvdG90eXBlIiwiUmVmbGVjdCIsImZhY3RvcmllcyIsImNvbnN0cnVjdCIsImFyZ3NMZW5ndGgiLCJwYXJ0QXJncyIsImdldERlc2NyaXB0b3IiLCJhRnVuY3Rpb24iLCJuYW1lc3BhY2UiLCJnZXRNZXRob2QiLCJ1c2luZ0l0ZXJhdG9yIiwiViIsIlAiLCJmdW5jIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsIm1hdGNoZWQiLCJwb3NpdGlvbiIsImNhcHR1cmVzIiwibmFtZWRDYXB0dXJlcyIsInJlcGxhY2VtZW50IiwidGFpbFBvcyIsInN5bWJvbHMiLCJjaCIsImNhcHR1cmUiLCJjaGVjayIsImdsb2JhbFRoaXMiLCJnIiwicG93IiwibG9nIiwiTE4yIiwibWFudGlzc2FMZW5ndGgiLCJleHBvbmVudCIsIm1hbnRpc3NhIiwiZXhwb25lbnRMZW5ndGgiLCJlTWF4IiwiZUJpYXMiLCJydCIsIkluZmluaXR5IiwibkJpdHMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIldyYXBwZXIiLCJOZXdUYXJnZXQiLCJOZXdUYXJnZXRQcm90b3R5cGUiLCJmdW5jdGlvblRvU3RyaW5nIiwiaW5zcGVjdFNvdXJjZSIsImNhdXNlIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWxNb2R1bGUiLCJGUkVFWklORyIsIlJFUVVJUkVEIiwiTUVUQURBVEEiLCJzZXRNZXRhZGF0YSIsIm9iamVjdElEIiwid2Vha0RhdGEiLCJtZXRhIiwib25GcmVlemUiLCJOQVRJVkVfV0VBS19NQVAiLCJzaGFyZWQiLCJzaGFyZWRLZXkiLCJPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCIsIldlYWtNYXAiLCJ3bWdldCIsIndtaGFzIiwid21zZXQiLCJtZXRhZGF0YSIsImZhY2FkZSIsIlNUQVRFIiwiZW5mb3JjZSIsIm5vb3AiLCJlbXB0eSIsImNvbnN0cnVjdG9yUmVnRXhwIiwiaXNDb25zdHJ1Y3Rvck1vZGVybiIsImlzQ29uc3RydWN0b3JMZWdhY3kiLCJmZWF0dXJlIiwiZGV0ZWN0aW9uIiwibm9ybWFsaXplIiwiUE9MWUZJTEwiLCJOQVRJVkUiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJpc1JlZ0V4cCIsIlVTRV9TWU1CT0xfQVNfVUlEIiwiJFN5bWJvbCIsIlJlc3VsdCIsInN0b3BwZWQiLCJSZXN1bHRQcm90b3R5cGUiLCJ1bmJvdW5kRnVuY3Rpb24iLCJpdGVyRm4iLCJJU19JVEVSQVRPUiIsIklOVEVSUlVQVEVEIiwic3RvcCIsImNvbmRpdGlvbiIsImNhbGxGbiIsImlubmVyUmVzdWx0IiwiaW5uZXJFcnJvciIsIlByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSIsImFycmF5SXRlcmF0b3IiLCIkZXhwbTEiLCJleHBtMSIsImV4cCIsIngiLCJFUFNJTE9OIiwiRVBTSUxPTjMyIiwiTUFYMzIiLCJNSU4zMiIsImZyb3VuZCIsIiRhYnMiLCIkc2lnbiIsIkxPRzEwRSIsImxvZzEwIiwibG9nMXAiLCJmbHVzaCIsImhlYWQiLCJub3RpZnkiLCJ0b2dnbGUiLCJub2RlIiwibWFjcm90YXNrIiwiSVNfSU9TIiwiSVNfSU9TX1BFQkJMRSIsIklTX1dFQk9TX1dFQktJVCIsIklTX05PREUiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsInF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciIsInF1ZXVlTWljcm90YXNrIiwicGFyZW50IiwiZXhpdCIsImVudGVyIiwibmV4dFRpY2siLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwidGFzayIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbCIsIlVSTCIsInNlYXJjaFBhcmFtcyIsInNvcnQiLCJQcm9taXNlQ2FwYWJpbGl0eSIsIiQkcmVzb2x2ZSIsIiQkcmVqZWN0IiwiJGRlZmF1bHQiLCJnbG9iYWxJc0Zpbml0ZSIsIndoaXRlc3BhY2VzIiwibiRQYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsInRyaW1tZWRTdHJpbmciLCIkcGFyc2VJbnQiLCJwYXJzZUludCIsImhleCIsInJhZGl4Iiwib2JqZWN0S2V5cyIsImdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlIiwiJGFzc2lnbiIsImFzc2lnbiIsIkEiLCJCIiwiYWxwaGFiZXQiLCJjaHIiLCJUIiwiYWN0aXZlWERvY3VtZW50IiwiZGVmaW5lUHJvcGVydGllc01vZHVsZSIsImVudW1CdWdLZXlzIiwiaHRtbCIsIklFX1BST1RPIiwiRW1wdHlDb25zdHJ1Y3RvciIsInNjcmlwdFRhZyIsIkxUIiwiTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCIsImNsb3NlIiwidGVtcCIsInBhcmVudFdpbmRvdyIsIk51bGxQcm90b09iamVjdCIsIkFjdGl2ZVhPYmplY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwic3JjIiwiY29udGVudFdpbmRvdyIsIlByb3BlcnRpZXMiLCJWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyIsImRlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsIklFOF9ET01fREVGSU5FIiwiJGRlZmluZVByb3BlcnR5IiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkF0dHJpYnV0ZXMiLCJjdXJyZW50IiwiJGdldE93blByb3BlcnR5TmFtZXMiLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiaW50ZXJuYWxPYmplY3RLZXlzIiwiQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIiwiQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFIiwiJGlzRXh0ZW5zaWJsZSIsIkZBSUxTX09OX1BSSU1JVElWRVMiLCJuYW1lcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIk5BU0hPUk5fQlVHIiwiV0VCS0lUIiwicmFuZG9tIiwiX19kZWZpbmVTZXR0ZXJfXyIsImFQb3NzaWJsZVByb3RvdHlwZSIsInNldHRlciIsIkNPUlJFQ1RfU0VUVEVSIiwiX19wcm90b19fIiwiVE9fRU5UUklFUyIsImlucHV0IiwicHJlZiIsInZhbHVlT2YiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsInByb21pc2VDYXBhYmlsaXR5IiwiUXVldWUiLCJ0YWlsIiwiaXRlbSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiVEVNUExBVEUiLCJzaW1wbGUiLCJSIiwicmUxIiwicmUyIiwicmVnZXhwRmxhZ3MiLCJzdGlja3lIZWxwZXJzIiwiVU5TVVBQT1JURURfRE9UX0FMTCIsIlVOU1VQUE9SVEVEX05DRyIsIm5hdGl2ZVJlcGxhY2UiLCJuYXRpdmVFeGVjIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJsYXN0SW5kZXgiLCJVTlNVUFBPUlRFRF9ZIiwiQlJPS0VOX0NBUkVUIiwiTlBDR19JTkNMVURFRCIsInJlQ29weSIsImdyb3VwIiwicmF3IiwiZ3JvdXBzIiwic3RpY2t5IiwiY2hhcnNBZGRlZCIsInN0ckNvcHkiLCJtdWx0aWxpbmUiLCJpZ25vcmVDYXNlIiwiZG90QWxsIiwiJFJlZ0V4cCIsIk1JU1NFRF9TVElDS1kiLCJpcyIsInkiLCJUQUciLCJTSEFSRUQiLCJtb2RlIiwiY29weXJpZ2h0IiwiYUNvbnN0cnVjdG9yIiwiZGVmYXVsdENvbnN0cnVjdG9yIiwiQ09OVkVSVF9UT19TVFJJTkciLCJwb3MiLCJzZWNvbmQiLCJjb2RlQXQiLCIkcmVwZWF0IiwicmVwZWF0IiwiY2VpbCIsIklTX0VORCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiaW50TWF4TGVuZ3RoIiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsIm1heEludCIsInJlZ2V4Tm9uQVNDSUkiLCJyZWdleFNlcGFyYXRvcnMiLCJPVkVSRkxPV19FUlJPUiIsImZyb21DaGFyQ29kZSIsImRpZ2l0VG9CYXNpYyIsImRpZ2l0IiwiYWRhcHQiLCJkZWx0YSIsIm51bVBvaW50cyIsImZpcnN0VGltZSIsImJhc2VNaW51c1RNaW4iLCJiYXNlIiwib3V0cHV0IiwiY291bnRlciIsImV4dHJhIiwidWNzMmRlY29kZSIsImN1cnJlbnRWYWx1ZSIsImlucHV0TGVuZ3RoIiwiYmlhcyIsImJhc2ljTGVuZ3RoIiwiaGFuZGxlZENQQ291bnQiLCJoYW5kbGVkQ1BDb3VudFBsdXNPbmUiLCJxIiwidCIsInFNaW51c1QiLCJiYXNlTWludXNUIiwibGFiZWwiLCJlbmNvZGVkIiwibGFiZWxzIiwid2hpdGVzcGFjZSIsImx0cmltIiwicnRyaW0iLCJkZWZlciIsImNoYW5uZWwiLCJzZXRJbW1lZGlhdGUiLCJjbGVhckltbWVkaWF0ZSIsIkRpc3BhdGNoIiwiTWVzc2FnZUNoYW5uZWwiLCJxdWV1ZSIsInJ1biIsInJ1bm5lciIsImxpc3RlbmVyIiwiZXZlbnQiLCJwb3N0IiwicG9zdE1lc3NhZ2UiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsInJlbW92ZUNoaWxkIiwiaW50ZWdlciIsInRvUG9zaXRpdmVJbnRlZ2VyIiwiQllURVMiLCJpc1N5bWJvbCIsIlRPX1BSSU1JVElWRSIsImV4b3RpY1RvUHJpbSIsInRvUHJpbWl0aXZlIiwiVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUyIsIkFycmF5QnVmZmVyVmlld0NvcmUiLCJBcnJheUJ1ZmZlck1vZHVsZSIsImlzSW50ZWdyYWxOdW1iZXIiLCJ0b09mZnNldCIsInR5cGVkQXJyYXlGcm9tIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJyb3VuZCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiV1JPTkdfTEVOR1RIIiwiZnJvbUxpc3QiLCJpc1R5cGVkQXJyYXlJbmRleCIsIndyYXBwZWRHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ3cmFwcGVkRGVmaW5lUHJvcGVydHkiLCJDTEFNUEVEIiwiR0VUVEVSIiwiU0VUVEVSIiwiTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlIiwiYWRkRWxlbWVudCIsImdldHRlciIsInR5cGVkQXJyYXlPZmZzZXQiLCIkbGVuZ3RoIiwiJGxlbiIsImFycmF5RnJvbUNvbnN0cnVjdG9yQW5kTGlzdCIsInR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJwb3N0Zml4IiwiTkFUSVZFX1NZTUJPTCIsIldlbGxLbm93blN5bWJvbHNTdG9yZSIsInN5bWJvbEZvciIsImNyZWF0ZVdlbGxLbm93blN5bWJvbCIsIndpdGhvdXRTZXR0ZXIiLCJpbnN0YWxsRXJyb3JDYXVzZSIsImNsZWFyRXJyb3JTdGFjayIsIkVSUk9SX1NUQUNLX0lOU1RBTExBQkxFIiwiRlVMTF9OQU1FIiwiSVNfQUdHUkVHQVRFX0VSUk9SIiwiT1BUSU9OU19QT1NJVElPTiIsIkVSUk9SX05BTUUiLCJPcmlnaW5hbEVycm9yIiwiT3JpZ2luYWxFcnJvclByb3RvdHlwZSIsIkJhc2VFcnJvciIsIldyYXBwZWRFcnJvciIsIndyYXBFcnJvckNvbnN0cnVjdG9yV2l0aENhdXNlIiwiQUdHUkVHQVRFX0VSUk9SIiwiJEFnZ3JlZ2F0ZUVycm9yIiwiZXJyb3JzIiwiQWdncmVnYXRlRXJyb3IiLCJpbml0IiwiaXNJbnN0YW5jZSIsIkFnZ3JlZ2F0ZUVycm9yUHJvdG90eXBlIiwiZXJyb3JzQXJyYXkiLCJhcnJheUJ1ZmZlck1vZHVsZSIsInVuJEFycmF5QnVmZmVyU2xpY2UiLCJ2aWV3U291cmNlIiwidmlld1RhcmdldCIsImFkZFRvVW5zY29wYWJsZXMiLCJhdCIsInJlbGF0aXZlSW5kZXgiLCJhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0IiwiSVNfQ09OQ0FUX1NQUkVBREFCTEUiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCIsIlNQRUNJRVNfU1VQUE9SVCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsInNwcmVhZGFibGUiLCJhcmciLCJFIiwiJGV2ZXJ5IiwiJGZpbHRlciIsIiRmaW5kSW5kZXgiLCJGSU5EX0lOREVYIiwiU0tJUFNfSE9MRVMiLCIkZmluZCIsIkZJTkQiLCJmbGF0TWFwIiwiZmxhdCIsImRlcHRoQXJnIiwiJGluY2x1ZGVzIiwiJEluZGV4T2YiLCJ1biRJbmRleE9mIiwiQVJSQVlfSVRFUkFUT1IiLCJBcmd1bWVudHMiLCJ1biRKb2luIiwiRVMzX1NUUklOR1MiLCJzZXBhcmF0b3IiLCIkbWFwIiwib2YiLCIkcmVkdWNlUmlnaHQiLCJDSFJPTUVfVkVSU0lPTiIsInJlZHVjZVJpZ2h0IiwiJHJlZHVjZSIsInJlZHVjZSIsInVuJFJldmVyc2UiLCJ1biRTbGljZSIsIkhBU19TUEVDSUVTX1NVUFBPUlQiLCIkc29tZSIsImludGVybmFsU29ydCIsIkZGIiwiSUVfT1JfRURHRSIsIlY4IiwidW4kU29ydCIsIkZBSUxTX09OX1VOREVGSU5FRCIsIkZBSUxTX09OX05VTEwiLCJTVEFCTEVfU09SVCIsIml0ZW1zTGVuZ3RoIiwiaXRlbXMiLCJhcnJheUxlbmd0aCIsImdldFNvcnRDb21wYXJlIiwiTUFYSU1VTV9BTExPV0VEX0xFTkdUSF9FWENFRURFRCIsImRlbGV0ZUNvdW50IiwiaW5zZXJ0Q291bnQiLCJhY3R1YWxEZWxldGVDb3VudCIsImFjdHVhbFN0YXJ0IiwiZ2V0WWVhciIsImdldEZ1bGxZZWFyIiwic2V0RnVsbFllYXIiLCJzZXRZZWFyIiwieWkiLCJ0b1VUQ1N0cmluZyIsInB2IiwiZGF0ZVRvUHJpbWl0aXZlIiwiSU5WQUxJRF9EQVRFIiwidW4kRGF0ZVRvU3RyaW5nIiwiV2ViQXNzZW1ibHkiLCJleHBvcnRHbG9iYWxFcnJvckNhdXNlV3JhcHBlciIsImV4cG9ydFdlYkFzc2VtYmx5RXJyb3JDYXVzZVdyYXBwZXIiLCJXRUJfQVNTRU1CTFkiLCJlcnJvclRvU3RyaW5nIiwiRXJyb3JQcm90b3R5cGUiLCJudW1iZXJUb1N0cmluZyIsImVzY2FwZSIsIkhBU19JTlNUQU5DRSIsIkZVTkNUSU9OX05BTUVfRVhJU1RTIiwibmFtZVJFIiwicmVnRXhwRXhlYyIsIiRzdHJpbmdpZnkiLCJ0ZXN0ZXIiLCJsb3ciLCJoaSIsImZpeCIsInJlcGxhY2VyIiwic3BhY2UiLCJjb2xsZWN0aW9uIiwiJGFjb3NoIiwiYWNvc2giLCJzcXJ0IiwiTUFYX1ZBTFVFIiwiJGFzaW5oIiwiYXNpbmgiLCIkYXRhbmgiLCJhdGFuaCIsImNicnQiLCJMT0cyRSIsImNsejMyIiwiJGNvc2giLCJjb3NoIiwiJGh5cG90IiwiaHlwb3QiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJkaXYiLCJzdW0iLCJhTGVuIiwibGFyZyIsIiRpbXVsIiwiaW11bCIsIlVJTlQxNiIsInhuIiwieW4iLCJ4bCIsInlsIiwibG9nMiIsInNpbmgiLCJ0YW5oIiwidHJ1bmMiLCJ0aGlzTnVtYmVyVmFsdWUiLCJOVU1CRVIiLCJOYXRpdmVOdW1iZXIiLCJOdW1iZXJQcm90b3R5cGUiLCJ0b051bWVyaWMiLCJwcmltVmFsdWUiLCJ0b051bWJlciIsInRoaXJkIiwibWF4Q29kZSIsImRpZ2l0cyIsIk51bWJlcldyYXBwZXIiLCJpc05hTiIsImlzU2FmZUludGVnZXIiLCJNSU5fU0FGRV9JTlRFR0VSIiwidW4kVG9FeHBvbmVudGlhbCIsInRvRXhwb25lbnRpYWwiLCJST1VORFNfUFJPUEVSTFkiLCJUSFJPV1NfT05fSU5GSU5JVFlfRlJBQ1RJT04iLCJQUk9QRVJfTk9OX0ZJTklURV9USElTX0NIRUNLIiwiZnJhY3Rpb25EaWdpdHMiLCJkIiwidyIsInVuJFRvRml4ZWQiLCJ0b0ZpeGVkIiwiYWNjIiwibXVsdGlwbHkiLCJjMiIsImRpdmlkZSIsImRhdGFUb1N0cmluZyIsInoiLCJmcmFjdERpZ2l0cyIsIngyIiwidW4kVG9QcmVjaXNpb24iLCJ0b1ByZWNpc2lvbiIsInByZWNpc2lvbiIsIl9fZGVmaW5lR2V0dGVyX18iLCIkZW50cmllcyIsIiRmcmVlemUiLCJmcmVlemUiLCJmcm9tRW50cmllcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJuYXRpdmVHZXRQcm90b3R5cGVPZiIsIiRpc0Zyb3plbiIsImlzRnJvemVuIiwiJGlzU2VhbGVkIiwiaXNTZWFsZWQiLCJuYXRpdmVLZXlzIiwiX19sb29rdXBHZXR0ZXJfXyIsIl9fbG9va3VwU2V0dGVyX18iLCIkcHJldmVudEV4dGVuc2lvbnMiLCIkc2VhbCIsInNlYWwiLCIkdmFsdWVzIiwiJHBhcnNlRmxvYXQiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInBlcmZvcm0iLCJhbGxTZXR0bGVkIiwiY2FwYWJpbGl0eSIsInByb21pc2VSZXNvbHZlIiwicmVtYWluaW5nIiwiYWxyZWFkeUNhbGxlZCIsIlBST01JU0VfQU5ZX0VSUk9SIiwiYW55IiwiYWxyZWFkeVJlc29sdmVkIiwiYWxyZWFkeVJlamVjdGVkIiwiTmF0aXZlUHJvbWlzZSIsInJlYWwiLCJvbkZpbmFsbHkiLCJJbnRlcm5hbCIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiUHJvbWlzZVdyYXBwZXIiLCJuYXRpdmVUaGVuIiwibWljcm90YXNrIiwiaG9zdFJlcG9ydEVycm9ycyIsIklTX0JST1dTRVIiLCJQUk9NSVNFIiwiZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUiLCJOYXRpdmVQcm9taXNlUHJvdG90eXBlIiwiUHJvbWlzZUNvbnN0cnVjdG9yIiwiUHJvbWlzZVByb3RvdHlwZSIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIkRJU1BBVENIX0VWRU5UIiwiY3JlYXRlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiTkFUSVZFX1JFSkVDVElPTl9FVkVOVCIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsIlVOSEFORExFRF9SRUpFQ1RJT04iLCJTVUJDTEFTU0lORyIsIlBST01JU0VfQ09OU1RSVUNUT1JfU09VUkNFIiwiR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSIsIkZha2VQcm9taXNlIiwiSU5DT1JSRUNUX0lURVJBVElPTiIsImlzVGhlbmFibGUiLCJjYWxsUmVhY3Rpb24iLCJyZWFjdGlvbiIsImV4aXRlZCIsIm9rIiwiaGFuZGxlciIsImZhaWwiLCJyZWplY3Rpb24iLCJvbkhhbmRsZVVuaGFuZGxlZCIsImlzUmVqZWN0Iiwibm90aWZpZWQiLCJyZWFjdGlvbnMiLCJvblVuaGFuZGxlZCIsImluaXRFdmVudCIsImlzVW5oYW5kbGVkIiwiZW1pdCIsInVud3JhcCIsImludGVybmFsUmVqZWN0IiwiaW50ZXJuYWxSZXNvbHZlIiwid3JhcCIsInIiLCIkcHJvbWlzZVJlc29sdmUiLCJyYWNlIiwiZnVuY3Rpb25BcHBseSIsInRoaXNBcmd1bWVudCIsImFyZ3VtZW50c0xpc3QiLCJuYXRpdmVDb25zdHJ1Y3QiLCJORVdfVEFSR0VUX0JVRyIsIkFSR1NfQlVHIiwiVGFyZ2V0IiwibmV3VGFyZ2V0IiwiJGFyZ3MiLCJhdHRyaWJ1dGVzIiwiZGVsZXRlUHJvcGVydHkiLCJvYmplY3RHZXRQcm90b3R5cGVPZiIsImlzRGF0YURlc2NyaXB0b3IiLCJyZWNlaXZlciIsIm9iamVjdFByZXZlbnRFeHRlbnNpb25zIiwib2JqZWN0U2V0UHJvdG90eXBlT2YiLCJleGlzdGluZ0Rlc2NyaXB0b3IiLCJvd25EZXNjcmlwdG9yIiwicmVnRXhwRmxhZ3MiLCJOYXRpdmVSZWdFeHAiLCJnZXRGbGFncyIsInN0cmluZ0luZGV4T2YiLCJJU19OQ0ciLCJDT1JSRUNUX05FVyIsIlJlZ0V4cFdyYXBwZXIiLCJwYXR0ZXJuIiwicmF3RmxhZ3MiLCJoYW5kbGVkIiwidGhpc0lzUmVnRXhwIiwicGF0dGVybklzUmVnRXhwIiwiZmxhZ3NBcmVVbmRlZmluZWQiLCJyYXdQYXR0ZXJuIiwibmFtZWQiLCJicmFja2V0cyIsIm5jZyIsImdyb3VwaWQiLCJncm91cG5hbWUiLCJoYW5kbGVOQ0ciLCJoYW5kbGVEb3RBbGwiLCJwcm94eSIsIm9iamVjdERlZmluZVByb3BlcnR5TW9kdWxlIiwidW4kVGVzdCIsIiR0b1N0cmluZyIsIlRPX1NUUklORyIsIm4kVG9TdHJpbmciLCJOT1RfR0VORVJJQyIsIklOQ09SUkVDVF9OQU1FIiwicCIsInJmIiwiY3JlYXRlSFRNTCIsImZvcmNlZFN0cmluZ0hUTUxNZXRob2QiLCJhbmNob3IiLCJiaWciLCJibGluayIsImJvbGQiLCJjb2RlUG9pbnRBdCIsIm5vdEFSZWdFeHAiLCJjb3JyZWN0SXNSZWdFeHBMb2dpYyIsInVuJEVuZHNXaXRoIiwiZW5kc1dpdGgiLCJDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyIsInNlYXJjaFN0cmluZyIsImVuZFBvc2l0aW9uIiwiZml4ZWQiLCJmb250Y29sb3IiLCJjb2xvciIsImZvbnRzaXplIiwiJGZyb21Db2RlUG9pbnQiLCJmcm9tQ29kZVBvaW50IiwiZWxlbWVudHMiLCJpdGFsaWNzIiwiU1RSSU5HX0lURVJBVE9SIiwicG9pbnQiLCJsaW5rIiwiYWR2YW5jZVN0cmluZ0luZGV4IiwiTUFUQ0hfQUxMIiwiUkVHRVhQX1NUUklOR19JVEVSQVRPUiIsIlJFR0VYUF9TVFJJTkciLCJ1biRNYXRjaEFsbCIsIm1hdGNoQWxsIiwiV09SS1NfV0lUSF9OT05fR0xPQkFMX1JFR0VYIiwiJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yIiwiJGdsb2JhbCIsImZ1bGxVbmljb2RlIiwiJG1hdGNoQWxsIiwiZmxhZ3NWYWx1ZSIsIm1hdGNoZXIiLCJyeCIsImZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljIiwibmF0aXZlTWF0Y2giLCJtYXliZUNhbGxOYXRpdmUiLCJyZXMiLCJtYXRjaFN0ciIsIiRwYWRFbmQiLCJwYWRFbmQiLCIkcGFkU3RhcnQiLCJ0ZW1wbGF0ZSIsInJhd1RlbXBsYXRlIiwibGl0ZXJhbFNlZ21lbnRzIiwiZ2V0U3Vic3RpdHV0aW9uIiwiUkVQTEFDRSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZUFsbCIsInJlcGxhY2VWYWx1ZSIsIklTX1JFR19FWFAiLCJmdW5jdGlvbmFsUmVwbGFjZSIsInNlYXJjaExlbmd0aCIsImFkdmFuY2VCeSIsImVuZE9mTGFzdE1hdGNoIiwiUkVQTEFDRV9LRUVQU18kMCIsIlJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFIiwiXyIsIlVOU0FGRV9TVUJTVElUVVRFIiwicmVzdWx0cyIsImFjY3VtdWxhdGVkUmVzdWx0IiwibmV4dFNvdXJjZVBvc2l0aW9uIiwicmVwbGFjZXJBcmdzIiwic2FtZVZhbHVlIiwiU0VBUkNIIiwibmF0aXZlU2VhcmNoIiwic2VhcmNoZXIiLCJwcmV2aW91c0xhc3RJbmRleCIsInNtYWxsIiwiY2FsbFJlZ0V4cEV4ZWMiLCJNQVhfVUlOVDMyIiwiJHB1c2giLCJTUExJVCIsIm5hdGl2ZVNwbGl0IiwiaW50ZXJuYWxTcGxpdCIsImxpbWl0IiwibGltIiwibGFzdExlbmd0aCIsImxhc3RMYXN0SW5kZXgiLCJzZXBhcmF0b3JDb3B5Iiwic3BsaXR0ZXIiLCJ1bmljb2RlTWF0Y2hpbmciLCJvcmlnaW5hbEV4ZWMiLCJ1biRTdGFydHNXaXRoIiwic3RhcnRzV2l0aCIsInN0cmlrZSIsInN1YiIsImludExlbmd0aCIsImludEVuZCIsImludFN0YXJ0Iiwic3VwIiwiJHRyaW1FbmQiLCJmb3JjZWRTdHJpbmdUcmltTWV0aG9kIiwidHJpbUVuZCIsInRyaW1SaWdodCIsIiR0cmltU3RhcnQiLCJ0cmltU3RhcnQiLCJ0cmltTGVmdCIsIiR0cmltIiwiZGVmaW5lV2VsbEtub3duU3ltYm9sIiwiTmF0aXZlU3ltYm9sIiwiU3ltYm9sUHJvdG90eXBlIiwiRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlIiwiU3ltYm9sV3JhcHBlciIsInN5bWJvbFRvU3RyaW5nIiwic3ltYm9sVmFsdWVPZiIsIm5hdGl2ZU9iamVjdENyZWF0ZSIsImdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbCIsIkhJRERFTiIsIlFPYmplY3QiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzIiwibmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUiLCJBbGxTeW1ib2xzIiwiT2JqZWN0UHJvdG90eXBlU3ltYm9scyIsIlN0cmluZ1RvU3ltYm9sUmVnaXN0cnkiLCJTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5IiwiVVNFX1NFVFRFUiIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2NyaXB0b3IiLCJPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yIiwiJGRlZmluZVByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09CSkVDVF9QUk9UT1RZUEUiLCJrZXlGb3IiLCJzeW0iLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCIkcmVwbGFjZXIiLCJ1JEFycmF5Q29weVdpdGhpbiIsIiRmaWxsIiwiZnJvbVNwZWNpZXNBbmRMaXN0IiwicHJlZGljYXRlIiwiY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yIiwiJGluZGV4T2YiLCJBcnJheUl0ZXJhdG9ycyIsImFycmF5VmFsdWVzIiwiYXJyYXlLZXlzIiwiYXJyYXlFbnRyaWVzIiwiR0VORVJJQyIsIklURVJBVE9SX0lTX1ZBTFVFUyIsInR5cGVkQXJyYXlWYWx1ZXMiLCIkam9pbiIsIiRzZXQiLCJXT1JLU19XSVRIX09CSkVDVFNfQU5EX0dFRVJJQ19PTl9UWVBFRF9BUlJBWVMiLCJUT19PQkpFQ1RfQlVHIiwiQUNDRVBUX0lOQ09SUkVDVF9BUkdVTUVOVFMiLCJtb2QiLCJleHBlY3RlZCIsImJlZ2luIiwiYmVnaW5JbmRleCIsIiR0b0xvY2FsZVN0cmluZyIsInRvTG9jYWxlU3RyaW5nIiwiVE9fTE9DQUxFX1NUUklOR19CVUciLCJVaW50OEFycmF5UHJvdG90eXBlIiwiYXJyYXlUb1N0cmluZyIsIklTX05PVF9BUlJBWV9NRVRIT0QiLCJoZXgyIiwiaGV4NCIsInBhcnQiLCJJbnRlcm5hbFdlYWtNYXAiLCJjb2xsZWN0aW9uV2VhayIsIklTX0lFMTEiLCIkV2Vha01hcCIsIldlYWtNYXBQcm90b3R5cGUiLCJuYXRpdmVEZWxldGUiLCJuYXRpdmVIYXMiLCJuYXRpdmVHZXQiLCJuYXRpdmVTZXQiLCJET01JdGVyYWJsZXMiLCJoYW5kbGVQcm90b3R5cGUiLCJDb2xsZWN0aW9uUHJvdG90eXBlIiwiQ09MTEVDVElPTl9OQU1FIiwiQXJyYXlJdGVyYXRvck1ldGhvZHMiLCJBcnJheVZhbHVlcyIsInRyeU5vZGVSZXF1aXJlIiwiRE9NRXhjZXB0aW9uQ29uc3RhbnRzIiwiRE9NX0VYQ0VQVElPTiIsIk5hdGl2ZURPTUV4Y2VwdGlvbiIsIk5hdGl2ZURPTUV4Y2VwdGlvblByb3RvdHlwZSIsIkhBU19TVEFDSyIsImNvZGVGb3IiLCIkRE9NRXhjZXB0aW9uIiwiRE9NRXhjZXB0aW9uUHJvdG90eXBlIiwiY3JlYXRlR2V0dGVyRGVzY3JpcHRvciIsIklOQ09SUkVDVF9DT05TVFJVQ1RPUiIsIklOQ09SUkVDVF9DT0RFIiwiTUlTU0VEX0NPTlNUQU5UUyIsIkZPUkNFRF9DT05TVFJVQ1RPUiIsIkRPTUV4Y2VwdGlvbiIsIlBvbHlmaWxsZWRET01FeGNlcHRpb24iLCJQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uUHJvdG90eXBlIiwiY29uc3RhbnQiLCJjb25zdGFudE5hbWUiLCJFUlJPUl9IQVNfU1RBQ0siLCJET01fRVhDRVBUSU9OX0hBU19TVEFDSyIsInN0cnVjdHVyZWRDbG9uZUltcGxlbWVudGF0aW9uIiwiZ2V0QnVpbHRpbiIsIkV2YWxFcnJvciIsIlJlZmVyZW5jZUVycm9yIiwiVVJJRXJyb3IiLCJQZXJmb3JtYW5jZU1hcmsiLCJDb21waWxlRXJyb3IiLCJMaW5rRXJyb3IiLCJSdW50aW1lRXJyb3IiLCJTZXQiLCJNYXAiLCJNYXBQcm90b3R5cGUiLCJtYXBIYXMiLCJtYXBHZXQiLCJtYXBTZXQiLCJzZXRBZGQiLCJib29sZWFuVmFsdWVPZiIsIm51bWJlclZhbHVlT2YiLCJzdHJpbmdWYWx1ZU9mIiwiUEVSRk9STUFOQ0VfTUFSSyIsIkRBVEFfQ0xPTkVfRVJST1IiLCJUUkFOU0ZFUlJJTkciLCJjaGVja0Jhc2ljU2VtYW50aWMiLCJzZXQxIiwic2V0MiIsIm5hdGl2ZVN0cnVjdHVyZWRDbG9uZSIsInN0cnVjdHVyZWRDbG9uZSIsIkZPUkNFRF9SRVBMQUNFTUVOVCIsInN0cnVjdHVyZWRDbG9uZUZyb21NYXJrIiwiZGV0YWlsIiwibmF0aXZlUmVzdHJpY3RlZFN0cnVjdHVyZWRDbG9uZSIsInRocm93VW5jbG9uZWFibGUiLCJ0aHJvd1VucG9seWZpbGxhYmxlIiwic3RydWN0dXJlZENsb25lSW50ZXJuYWwiLCJjbG9uZWQiLCJkYXRhVHJhbnNmZXIiLCJkZWVwIiwiRE9NUXVhZCIsInAyIiwicDMiLCJwNCIsIkRhdGFUcmFuc2ZlciIsImZpbGVzIiwiSW1hZ2VEYXRhIiwid2lkdGgiLCJoZWlnaHQiLCJjb2xvclNwYWNlIiwiZnJvbVBvaW50IiwiZnJvbVJlY3QiLCJmcm9tTWF0cml4IiwiY2xvbmUiLCJGaWxlIiwiUFJPUEVSX1RSQU5TRkVSIiwidHJhbnNmZXIiLCJ0cnlUb1RyYW5zZmVyIiwicmF3VHJhbnNmZXIiLCJ0cmFuc2ZlcnJlZEFycmF5IiwidHJhbnNmZXJyZWQiLCJjYW52YXMiLCJPZmZzY3JlZW5DYW52YXMiLCJnZXRDb250ZXh0IiwidHJhbnNmZXJGcm9tSW1hZ2VCaXRtYXAiLCJ0cmFuc2ZlclRvSW1hZ2VCaXRtYXAiLCJNU0lFIiwic2NoZWR1bGVyIiwiYm91bmRBcmdzIiwic2V0SW50ZXJ2YWwiLCJVU0VfTkFUSVZFX1VSTCIsImFycmF5U29ydCIsIlVSTF9TRUFSQ0hfUEFSQU1TIiwiVVJMX1NFQVJDSF9QQVJBTVNfSVRFUkFUT1IiLCJnZXRJbnRlcm5hbFBhcmFtc1N0YXRlIiwibiRGZXRjaCIsIk4kUmVxdWVzdCIsIkhlYWRlcnMiLCJSZXF1ZXN0UHJvdG90eXBlIiwiSGVhZGVyc1Byb3RvdHlwZSIsInBsdXMiLCJzZXF1ZW5jZXMiLCJwZXJjZW50U2VxdWVuY2UiLCJwZXJjZW50RGVjb2RlIiwic2VxdWVuY2UiLCJkZXNlcmlhbGl6ZSIsInJlcGxhY2VtZW50cyIsInNlcmlhbGl6ZSIsInZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoIiwicGFzc2VkIiwicmVxdWlyZWQiLCJVUkxTZWFyY2hQYXJhbXNJdGVyYXRvciIsIlVSTFNlYXJjaFBhcmFtc1N0YXRlIiwicGFyc2VPYmplY3QiLCJwYXJzZVF1ZXJ5IiwiYmluZFVSTCIsInVwZGF0ZSIsImVudHJ5SXRlcmF0b3IiLCJlbnRyeU5leHQiLCJxdWVyeSIsInVwZGF0ZVVSTCIsIlVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yIiwiVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlIiwiYXBwZW5kIiwiZ2V0QWxsIiwiZm91bmQiLCJoZWFkZXJzSGFzIiwiaGVhZGVyc1NldCIsIndyYXBSZXF1ZXN0T3B0aW9ucyIsImJvZHkiLCJmZXRjaCIsIlJlcXVlc3RDb25zdHJ1Y3RvciIsIlJlcXVlc3QiLCJnZXRTdGF0ZSIsIkVPRiIsImFycmF5RnJvbSIsInRvQVNDSUkiLCJVUkxTZWFyY2hQYXJhbXNNb2R1bGUiLCJnZXRJbnRlcm5hbFVSTFN0YXRlIiwiZ2V0SW50ZXJuYWxTZWFyY2hQYXJhbXNTdGF0ZSIsIk5hdGl2ZVVSTCIsInBvcCIsIklOVkFMSURfU0NIRU1FIiwiSU5WQUxJRF9IT1NUIiwiSU5WQUxJRF9QT1JUIiwiQUxQSEEiLCJBTFBIQU5VTUVSSUMiLCJESUdJVCIsIkhFWF9TVEFSVCIsIk9DVCIsIkRFQyIsIkhFWCIsIkZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlQiLCJGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5UIiwiTEVBRElOR19BTkRfVFJBSUxJTkdfQzBfQ09OVFJPTF9PUl9TUEFDRSIsIlRBQl9BTkRfTkVXX0xJTkUiLCJzZXJpYWxpemVIb3N0IiwiY29tcHJlc3MiLCJpZ25vcmUwIiwiaXB2NiIsIm1heEluZGV4IiwiY3VyclN0YXJ0IiwiY3Vyckxlbmd0aCIsImZpbmRMb25nZXN0WmVyb1NlcXVlbmNlIiwiQzBDb250cm9sUGVyY2VudEVuY29kZVNldCIsImZyYWdtZW50UGVyY2VudEVuY29kZVNldCIsInBhdGhQZXJjZW50RW5jb2RlU2V0IiwidXNlcmluZm9QZXJjZW50RW5jb2RlU2V0IiwicGVyY2VudEVuY29kZSIsInNwZWNpYWxTY2hlbWVzIiwiZnRwIiwiZmlsZSIsImh0dHAiLCJodHRwcyIsIndzIiwid3NzIiwiaXNXaW5kb3dzRHJpdmVMZXR0ZXIiLCJub3JtYWxpemVkIiwic3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlciIsImlzU2luZ2xlRG90Iiwic2VnbWVudCIsIlNDSEVNRV9TVEFSVCIsIlNDSEVNRSIsIk5PX1NDSEVNRSIsIlNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZIiwiUEFUSF9PUl9BVVRIT1JJVFkiLCJSRUxBVElWRSIsIlJFTEFUSVZFX1NMQVNIIiwiU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUyIsIlNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTIiwiQVVUSE9SSVRZIiwiSE9TVCIsIkhPU1ROQU1FIiwiUE9SVCIsIkZJTEUiLCJGSUxFX1NMQVNIIiwiRklMRV9IT1NUIiwiUEFUSF9TVEFSVCIsIlBBVEgiLCJDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIIiwiUVVFUlkiLCJGUkFHTUVOVCIsIlVSTFN0YXRlIiwiaXNCYXNlIiwiYmFzZVN0YXRlIiwiZmFpbHVyZSIsInVybFN0cmluZyIsInN0YXRlT3ZlcnJpZGUiLCJjb2RlUG9pbnRzIiwiYnVmZmVyQ29kZVBvaW50cyIsInBvaW50ZXIiLCJzZWVuQXQiLCJzZWVuQnJhY2tldCIsInNlZW5QYXNzd29yZFRva2VuIiwic2NoZW1lIiwiZnJhZ21lbnQiLCJjYW5ub3RCZUFCYXNlVVJMIiwiaXNTcGVjaWFsIiwiaW5jbHVkZXNDcmVkZW50aWFscyIsImNvZGVQb2ludCIsImVuY29kZWRDb2RlUG9pbnRzIiwicGFyc2VIb3N0Iiwic2hvcnRlblBhdGgiLCJudW1iZXJzU2VlbiIsImlwdjRQaWVjZSIsInN3YXBzIiwic3dhcCIsImFkZHJlc3MiLCJwaWVjZUluZGV4IiwicGFyc2VJUHY2IiwicGFydHNMZW5ndGgiLCJudW1iZXJzIiwiaXB2NCIsInBhcnNlSVB2NCIsImNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydCIsInBhdGhTaXplIiwic2V0SHJlZiIsImdldE9yaWdpbiIsIlVSTENvbnN0cnVjdG9yIiwib3JpZ2luIiwiZ2V0UHJvdG9jb2wiLCJzZXRQcm90b2NvbCIsImdldFVzZXJuYW1lIiwic2V0VXNlcm5hbWUiLCJnZXRQYXNzd29yZCIsInNldFBhc3N3b3JkIiwiZ2V0SG9zdCIsInNldEhvc3QiLCJnZXRIb3N0bmFtZSIsInNldEhvc3RuYW1lIiwiZ2V0UG9ydCIsInNldFBvcnQiLCJnZXRQYXRobmFtZSIsInNldFBhdGhuYW1lIiwiZ2V0U2VhcmNoIiwic2V0U2VhcmNoIiwiZ2V0U2VhcmNoUGFyYW1zIiwiZ2V0SGFzaCIsInNldEhhc2giLCJVUkxQcm90b3R5cGUiLCJhY2Nlc3NvckRlc2NyaXB0b3IiLCJuYXRpdmVDcmVhdGVPYmplY3RVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJuYXRpdmVSZXZva2VPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJyZWFjdElzIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGUiLCJjb250ZXh0VHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJkaXNwbGF5TmFtZSIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiY29tcG9uZW50IiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsInJlbmRlciIsIk1lbW8iLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwicHJvcElzRW51bWVyYWJsZSIsInRlc3QxIiwidGVzdDIiLCJ0ZXN0MyIsImxldHRlciIsImVyciIsInNob3VsZFVzZU5hdGl2ZSIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHAiLCJwcmVmaXgiLCJkZWxpbWl0ZXIiLCJvcHRpb25hbCIsInBhcnRpYWwiLCJhc3RlcmlzayIsImF0dGFjaEtleXMiLCJyZWdleHBUb1JlZ2V4cCIsImFycmF5VG9SZWdleHAiLCJ0b2tlbnNUb1JlZ0V4cCIsInN0cmluZ1RvUmVnZXhwIiwiY29tcGlsZSIsInRva2Vuc1RvRnVuY3Rpb24iLCJQQVRIX1JFR0VYUCIsInRva2VucyIsImRlZmF1bHREZWxpbWl0ZXIiLCJlc2NhcGVkIiwibW9kaWZpZXIiLCJlc2NhcGVHcm91cCIsImVzY2FwZVN0cmluZyIsImVuY29kZVVSSUNvbXBvbmVudFByZXR0eSIsImVuY29kZVVSSSIsIm1hdGNoZXMiLCJwcmV0dHkiLCJzZW5zaXRpdmUiLCJzdHJpY3QiLCJyb3V0ZSIsImVuZHNXaXRoRGVsaW1pdGVyIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJiaWdpbnQiLCJib29sIiwiYXJyYXlPZiIsImVsZW1lbnRUeXBlIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJhYSIsImJhIiwiY2EiLCJkYSIsImVhIiwiZmEiLCJoYSIsImlhIiwiamEiLCJrYSIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwiRCIsIm9hIiwicGEiLCJxYSIsIm1hIiwibmEiLCJsYSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwieGxpbmtIcmVmIiwicmEiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsInNhIiwidGEiLCJ1YSIsIndhIiwieGEiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJmb3IiLCJNYSIsIkthIiwiTGEiLCJOYSIsIk9hIiwiUGEiLCJwcmVwYXJlU3RhY2tUcmFjZSIsIlFhIiwiX3JlbmRlciIsIlJhIiwiJCR0eXBlb2YiLCJfY29udGV4dCIsIl9wYXlsb2FkIiwiX2luaXQiLCJTYSIsIlRhIiwibm9kZU5hbWUiLCJWYSIsIl92YWx1ZVRyYWNrZXIiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsImNoZWNrZWQiLCJYYSIsImFjdGl2ZUVsZW1lbnQiLCJZYSIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiWmEiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJvd25lckRvY3VtZW50IiwiZWIiLCJjaGlsZHJlbiIsIkNoaWxkcmVuIiwiZGIiLCJmYiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGlzYWJsZWQiLCJnYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiaGIiLCJpYiIsImpiIiwidGV4dENvbnRlbnQiLCJrYiIsImxiIiwibWIiLCJuYiIsIm9iIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwiZmlyc3RDaGlsZCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJwYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwicWIiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInJiIiwic2IiLCJ0YiIsInNldFByb3BlcnR5Iiwic3Vic3RyaW5nIiwidWIiLCJtZW51aXRlbSIsImFyZWEiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJrZXlnZW4iLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidmIiLCJ3YiIsInhiIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJzdGF0ZU5vZGUiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIk9iIiwiUGIiLCJRYiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJSYiIsIm9uRXJyb3IiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJaYiIsImFsdGVybmF0ZSIsInJldHVybiIsIiRiIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJhYyIsImRjIiwiZWMiLCJmYyIsImdjIiwiaGMiLCJpYyIsImpjIiwia2MiLCJsYyIsIm1jIiwibmMiLCJvYyIsInBjIiwicWMiLCJyYyIsImJsb2NrZWRPbiIsImRvbUV2ZW50TmFtZSIsImV2ZW50U3lzdGVtRmxhZ3MiLCJuYXRpdmVFdmVudCIsInRhcmdldENvbnRhaW5lcnMiLCJzYyIsImRlbGV0ZSIsInBvaW50ZXJJZCIsInRjIiwidmMiLCJ3YyIsImxhbmVQcmlvcml0eSIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInByaW9yaXR5IiwiaHlkcmF0ZSIsImNvbnRhaW5lckluZm8iLCJ4YyIsInljIiwiemMiLCJBYyIsIkJjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiQ2MiLCJEYyIsIkVjIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiRmMiLCJHYyIsIkhjIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiUGMiLCJRYyIsInVuc3RhYmxlX25vdyIsIlJjIiwiVWMiLCJwZW5kaW5nTGFuZXMiLCJleHBpcmVkTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiVmMiLCJlbnRhbmdsZWRMYW5lcyIsImVudGFuZ2xlbWVudHMiLCJXYyIsIlhjIiwiWWMiLCJaYyIsIiRjIiwiZXZlbnRUaW1lcyIsImJkIiwiY2QiLCJkZCIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiZWQiLCJmZCIsImdkIiwiaGQiLCJ1YyIsImpkIiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsInBkIiwicWQiLCJyZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsIndkIiwieGQiLCJ5ZCIsInNkIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwidGQiLCJ1ZCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSWQiLCJjbGlwYm9hcmREYXRhIiwiSmQiLCJMZCIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJRZCIsImxvY2FsZSIsIndoaWNoIiwiUmQiLCJUZCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJWZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJYZCIsIllkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJaZCIsIiRkIiwiYWUiLCJiZSIsImRvY3VtZW50TW9kZSIsImNlIiwiZGUiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwibGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJyYW5nZSIsInRlbCIsInRleHQiLCJ0aW1lIiwid2VlayIsIm1lIiwibmUiLCJvZSIsImxpc3RlbmVycyIsInBlIiwicWUiLCJzZSIsInRlIiwidWUiLCJ2ZSIsIndlIiwieGUiLCJ5ZSIsInplIiwib25pbnB1dCIsIkFlIiwiZGV0YWNoRXZlbnQiLCJCZSIsIkNlIiwiYXR0YWNoRXZlbnQiLCJEZSIsIkVlIiwiRmUiLCJIZSIsIkllIiwiSmUiLCJLZSIsIkxlIiwibmV4dFNpYmxpbmciLCJNZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJOZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiT2UiLCJjb250ZW50RWRpdGFibGUiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJkZWZhdWx0VmlldyIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiVmUiLCJXZSIsIlhlIiwiWWUiLCJaZSIsIlliIiwiRyIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJwYXNzaXZlIiwiTmIiLCJ1IiwiZWYiLCJmZiIsImdmIiwiaGYiLCJKIiwiSyIsIlEiLCJMIiwiamUiLCJjaGFyIiwia2UiLCJqZiIsImtmIiwibGYiLCJtZiIsImF1dG9Gb2N1cyIsIm5mIiwiX19odG1sIiwicGYiLCJjbGVhclRpbWVvdXQiLCJxZiIsInNmIiwicHJldmlvdXNTaWJsaW5nIiwidGYiLCJ2ZiIsIndmIiwieGYiLCJ5ZiIsImNoaWxkIiwiemYiLCJBZiIsIkJmIiwiSCIsIkkiLCJDZiIsIk0iLCJOIiwiRGYiLCJFZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIkZmIiwiR2YiLCJIZiIsIklmIiwiZ2V0Q2hpbGRDb250ZXh0IiwiSmYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIktmIiwiTGYiLCJNZiIsIk5mIiwiT2YiLCJQZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiUWYiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIlJmIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwiU2YiLCJUZiIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiVWYiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsIlZmIiwiV2YiLCJYZiIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwiWWYiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJfY3VycmVudFZhbHVlIiwic2ciLCJjaGlsZExhbmVzIiwidGciLCJkZXBlbmRlbmNpZXMiLCJmaXJzdENvbnRleHQiLCJsYW5lcyIsInVnIiwidmciLCJvYnNlcnZlZEJpdHMiLCJyZXNwb25kZXJzIiwid2ciLCJ4ZyIsInVwZGF0ZVF1ZXVlIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJwZW5kaW5nIiwiZWZmZWN0cyIsInlnIiwiemciLCJldmVudFRpbWUiLCJsYW5lIiwiQWciLCJCZyIsIkNnIiwiRGciLCJFZyIsIkZnIiwiQ29tcG9uZW50IiwicmVmcyIsIkdnIiwiS2ciLCJpc01vdW50ZWQiLCJfcmVhY3RJbnRlcm5hbHMiLCJlbnF1ZXVlU2V0U3RhdGUiLCJIZyIsIklnIiwiSmciLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiTGciLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIk1nIiwidXBkYXRlciIsIk5nIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiT2ciLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsIlBnIiwiUWciLCJyZWYiLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwiUmciLCJTZyIsImxhc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJzaWJsaW5nIiwiVGciLCJVZyIsIlZnIiwiaW1wbGVtZW50YXRpb24iLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImRoIiwiZWgiLCJkb2N1bWVudEVsZW1lbnQiLCJ0YWdOYW1lIiwiZmgiLCJnaCIsImhoIiwiaWgiLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJqaCIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJwZW5kaW5nUHJvcHMiLCJwaCIsInFoIiwicmgiLCJzaCIsInRoIiwidWgiLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsInZoIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIndoIiwieGgiLCJ5aCIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsImJhc2VRdWV1ZSIsIkloIiwiSmgiLCJLaCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJhY3Rpb24iLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsIkxoIiwiTWgiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJtdXRhYmxlUmVhZExhbmVzIiwiTmgiLCJVIiwidXNlU3RhdGUiLCJnZXRTbmFwc2hvdCIsInN1YnNjcmliZSIsInVzZUVmZmVjdCIsInNldFNuYXBzaG90IiwiT2giLCJQaCIsIlFoIiwiUmgiLCJkZXN0cm95IiwiZGVwcyIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VNdXRhYmxlU291cmNlIiwidXNlT3BhcXVlSWRlbnRpZmllciIsInVuc3RhYmxlX2lzTmV3UmVjb25jaWxlciIsInVmIiwiZWkiLCJSZWFjdEN1cnJlbnRPd25lciIsImZpIiwiZ2kiLCJpaSIsImppIiwia2kiLCJsaSIsIm1pIiwiYmFzZUxhbmVzIiwibmkiLCJvaSIsInBpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicWkiLCJyaSIsInBlbmRpbmdDb250ZXh0IiwiQmkiLCJEaSIsIkVpIiwic2kiLCJyZXRyeUxhbmUiLCJ0aSIsImZhbGxiYWNrIiwidW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2siLCJ1aSIsInVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUiLCJ2aSIsIndpIiwieGkiLCJ6aSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwidGFpbE1vZGUiLCJBaSIsIkZpIiwiR2kiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwib25DbGljayIsIm9uY2xpY2siLCJjcmVhdGVFbGVtZW50TlMiLCJIaSIsIklpIiwiVyIsIkppIiwiS2kiLCJMaSIsIk1pIiwiTmkiLCJPaSIsIlBpIiwiUWkiLCJSaSIsIlNpIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJUaSIsImNvbXBvbmVudFN0YWNrIiwiVWkiLCJXZWFrU2V0IiwiVmkiLCJXaSIsIlhpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJZaSIsIlppIiwiJGkiLCJmb2N1cyIsImFqIiwiYmoiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiY2oiLCJkaiIsImVqIiwiZmoiLCJnaiIsImhqIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsImlqIiwiamoiLCJraiIsImxqIiwibWoiLCJuaiIsIm9qIiwicGoiLCJYIiwiWSIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIndqIiwiY2siLCJaIiwieGoiLCJ5aiIsInpqIiwiQWoiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsIklqIiwiSmoiLCJTYyIsIktqIiwiTGoiLCJNaiIsImNhbGxiYWNrTm9kZSIsImV4cGlyYXRpb25UaW1lcyIsImNhbGxiYWNrUHJpb3JpdHkiLCJUYyIsIk5qIiwiT2oiLCJQaiIsIlFqIiwiUmoiLCJTaiIsIlRqIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRMYW5lcyIsIlVqIiwidGltZW91dEhhbmRsZSIsInBpbmdDYWNoZSIsIllqIiwiWmoiLCJ2YSIsImFrIiwiYmsiLCJkayIsInJhbmdlQ291bnQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiZWsiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwib25Db21taXRGaWJlclJvb3QiLCJmayIsImdrIiwiaWsiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiamsiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwibGsiLCJtayIsIm5rIiwicWsiLCJoeWRyYXRpb25PcHRpb25zIiwibXV0YWJsZVNvdXJjZXMiLCJfaW50ZXJuYWxSb290IiwicmsiLCJ0ayIsImhhc0F0dHJpYnV0ZSIsInNrIiwiWGoiLCJoayIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsInVubW91bnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsIlZqIiwid2siLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwieGsiLCJyZW5kZXJlckNvbmZpZyIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoIiwib3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoIiwib3ZlcnJpZGVQcm9wcyIsIm92ZXJyaWRlUHJvcHNEZWxldGVQYXRoIiwib3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGgiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJiYyIsImNjIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJ5ayIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0IiwiY2hlY2tEQ0UiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGcmFnbWVudCIsIkxhenkiLCJQb3J0YWwiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGVPZiIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiZGVmYXVsdCIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwidG9BcnJheSIsIm9ubHkiLCJQdXJlQ29tcG9uZW50IiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwicnVudGltZSIsIk9wIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJDb250ZXh0IiwiX2ludm9rZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwibWFrZUludm9rZU1ldGhvZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJnZXRQcm90byIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJfX2F3YWl0IiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJpbmZvIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsImF3cmFwIiwiYXN5bmMiLCJpdGVyIiwic2tpcFRlbXBSZXNldCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJwZXJmb3JtYW5jZSIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzb3J0SW5kZXgiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiX19lc01vZHVsZSIsImRlZmluaXRpb24iLCJvIiwiX3NldFByb3RvdHlwZU9mIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJpc0Fic29sdXRlIiwic3BsaWNlT25lIiwiYWRkTGVhZGluZ1NsYXNoIiwic3RyaXBCYXNlbmFtZSIsImhhc0Jhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiY3JlYXRlUGF0aCIsImN1cnJlbnRMb2NhdGlvbiIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwicGFyc2VQYXRoIiwiZGVjb2RlVVJJIiwiaGFzVHJhaWxpbmdTbGFzaCIsInRvUGFydHMiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsInVwIiwiY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIiLCJwcm9tcHQiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImdldFVzZXJDb25maXJtYXRpb24iLCJhcHBlbmRMaXN0ZW5lciIsImlzQWN0aXZlIiwibm90aWZ5TGlzdGVuZXJzIiwiX2xlbiIsIl9rZXkiLCJjYW5Vc2VET00iLCJnZXRDb25maXJtYXRpb24iLCJjb25maXJtIiwiUG9wU3RhdGVFdmVudCIsIkhhc2hDaGFuZ2VFdmVudCIsImdldEhpc3RvcnlTdGF0ZSIsImhpc3RvcnkiLCJjcmVhdGVCcm93c2VySGlzdG9yeSIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGtleUxlbmd0aCIsImtleUxlbmd0aCIsImJhc2VuYW1lIiwiZ2V0RE9NTG9jYXRpb24iLCJoaXN0b3J5U3RhdGUiLCJfcmVmIiwiX3dpbmRvdyRsb2NhdGlvbiIsImNyZWF0ZUtleSIsInRyYW5zaXRpb25NYW5hZ2VyIiwibmV4dFN0YXRlIiwiaGFuZGxlUG9wU3RhdGUiLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IiwiaGFuZGxlUG9wIiwiaGFuZGxlSGFzaENoYW5nZSIsImZvcmNlTmV4dFBvcCIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJhbGxLZXlzIiwiZ28iLCJyZXZlcnRQb3AiLCJpbml0aWFsTG9jYXRpb24iLCJjcmVhdGVIcmVmIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwiaXNCbG9ja2VkIiwicHVzaFN0YXRlIiwicHJldkluZGV4IiwibmV4dEtleXMiLCJyZXBsYWNlU3RhdGUiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJibG9jayIsInVuYmxvY2siLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsIk1BWF9TSUdORURfMzFfQklUX0lOVCIsImNvbW1vbmpzR2xvYmFsIiwiY3JlYXRlRXZlbnRFbWl0dGVyIiwib24iLCJvZmYiLCJuZXdWYWx1ZSIsImNoYW5nZWRCaXRzIiwiY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJfQ29uc3VtZXIkY29udGV4dFR5cGUiLCJjb250ZXh0UHJvcCIsIl9Db21wb25lbnQiLCJfdGhpcyIsImVtaXR0ZXIiLCJfcHJvdG8iLCJuZXh0UHJvcHMiLCJvbGRWYWx1ZSIsIl9Db21wb25lbnQyIiwiX3RoaXMyIiwib25VcGRhdGUiLCJfcHJvdG8yIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiY3JlYXRlTmFtZWRDb250ZXh0IiwiaGlzdG9yeUNvbnRleHQiLCJSb3V0ZXIiLCJfUmVhY3QkQ29tcG9uZW50IiwiX2lzTW91bnRlZCIsIl9wZW5kaW5nTG9jYXRpb24iLCJzdGF0aWNDb250ZXh0IiwiY29tcHV0ZVJvb3RNYXRjaCIsImlzRXhhY3QiLCJjYWNoZSQxIiwiY2FjaGVDb3VudCQxIiwiQnJvd3NlclJvdXRlciIsInJlc29sdmVUb0xvY2F0aW9uIiwibm9ybWFsaXplVG9Mb2NhdGlvbiIsImZvcndhcmRSZWZTaGltIiwiTGlua0FuY2hvciIsImZvcndhcmRlZFJlZiIsImlubmVyUmVmIiwibmF2aWdhdGUiLCJfb25DbGljayIsInJlc3QiLCJleCIsImlzTW9kaWZpZWRFdmVudCIsIkxpbmsiLCJfcmVmMiIsIl9yZWYyJGNvbXBvbmVudCIsImlzRHVwbGljYXRlTmF2aWdhdGlvbiIsImZvcndhcmRSZWZTaGltJDEiLCJmb3J3YXJkUmVmJDEiLCJfcmVmJGFyaWFDdXJyZW50IiwiYXJpYUN1cnJlbnQiLCJfcmVmJGFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZVN0eWxlIiwiY2xhc3NOYW1lUHJvcCIsImNsYXNzTmFtZSIsImlzQWN0aXZlUHJvcCIsImxvY2F0aW9uUHJvcCIsInN0eWxlUHJvcCIsImVzY2FwZWRQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsIl9jb21waWxlUGF0aCIsImNhY2hlS2V5IiwicGF0aENhY2hlIiwiY29tcGlsZVBhdGgkMSIsIm1hdGNoUGF0aCIsImNsYXNzbmFtZXMiLCJqb2luQ2xhc3NuYW1lcyIsInF1ZXJ5U2VsZWN0b3IiXSwic291cmNlUm9vdCI6IiJ9